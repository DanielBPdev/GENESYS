/****** Object:  StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-08-23 8:29:30 AM ******/
/****** Object:  StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-08-16 8:37:46 AM ******/
/****** Object:  StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-08-15 11:04:27 AM ******/
/****** Object:  StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-08-10 10:02:05 AM ******/
/****** Object:  StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-08-08 10:11:18 AM ******/
/****** Object:  StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-08-01 9:02:06 AM ******/
/****** Object:  StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-07-25 8:39:30 AM ******/
/****** Object:  StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-07-17 1:30:24 PM ******/
/****** Object:  StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-07-12 8:52:46 AM ******/
/****** Object:  StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-07-11 9:56:38 AM ******/
/****** Object:  StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-06-28 5:24:25 PM ******/
/****** Object: StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-06-28 7:28:14 AM ******/
/****** Object: StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-06-23 10:36:48 AM ******/
/****** Object: StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 2023-06-22 11:44:56 AM ******/
/****** Object: StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 16/05/2023 8:29:16 a. m. ******/
/****** Object: StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 15/05/2023 10:35:58 a. m. ******/
/****** Object: StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 10/05/2023 2:11:58 p. m. ******/
/****** Object: StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 09/05/2023 8:29:24 a. m. ******/
/****** Object: StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 03/05/2023 9:54:08 a. m. ******/
/****** Object: StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 12/04/2023 12:36:34 p. m. ******/
/****** Object: StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 12/04/2023 12:12:34 p. m. ******/
/****** Object: StoredProcedure [dbo].[reporteNovedadesAfiliadosSubsidios]    Script Date: 31/03/2023 4:23:37 p. m. ******/
-- =============================================
-- Author:      Olga vega -Miguel Angel Perilla
---MODIFICADO:  Olga Vega 20230331
-- Update Date: 05 Julio 2022
-- Description: Procedimiento almacenado para obtener el resultado que hace referencia al reporte 14.
-- Reporte 14
---EXEC reporteNovedadesAfiliadosSubsidios '2023-07-29','2023-08-04' 
-- =============================================
CREATE or ALTER       PROCEDURE [dbo].[reporteNovedadesAfiliadosSubsidios](
	@fechaInicio DATE,
	@fechaFinal DATE
)

AS
BEGIN
SET NOCOUNT ON
SET ANSI_NULLS ON

SET QUOTED_IDENTIFIER ON

--/---------------------------------------**********---------------------------------------\--
--                       REPORTE NOVEDADES DE AFILIADOS Y SUBSIDIOS  -  NÂ° 14.
--\---------------------------------------**********---------------------------------------/--
--------------
------
------
----
 
DECLARE @sql NVARCHAR(max)

 SET @sql ='
 SELECT * FROM (
 SELECT CASE WHEN  REV = MAX(REV) 
					OVER (PARTITION BY perid , REVTYPE  
					ORDER BY perid desc) THEN REV ELSE NULL END AS REV, revtype, perid ,perTipoIdentificacion	,perNumeroIdentificacion,	perPrimerNombre,	perSegundoNombre,	perPrimerApellido,	perSegundoApellido
 FROM (

		SELECT CASE WHEN p.REV = MAX(p.REV) 
				OVER (PARTITION BY perid , p.REVTYPE  
				ORDER BY perid desc) THEN p.REV ELSE NULL END AS  REV,  
				ROW_NUMBER() OVER(PARTITION BY  perid , p.REVTYPE  ORDER BY perid ASC) AS ''Orden'',
			   p.REVTYPE, perid , perTipoIdentificacion,
			   perNumeroIdentificacion,
			   perPrimerNombre,
			   perSegundoNombre,
			   perPrimerApellido,
			   perSegundoApellido
		  FROM persona_aud p  WITH(NOLOCK)
	INNER JOIN SolicitudNovedadPersona_aud AS solicitudPersonaNovedad  WITH(NOLOCK)
	        ON solicitudPersonaNovedad.snpPersona = perId 
	INNER JOIN SolicitudNovedad_aud AS solicitudNovedad  WITH(NOLOCK)
	        ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId
	INNER JOIN Solicitud_aud AS solicitudGlobal  WITH(NOLOCK)
	        ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
		 WHERE CONVERT(DATE,solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal 
		   AND solicitudNovedad.snoEstadoSolicitud = ''CERRADA'' 
		   AND snpBeneficiario IS NULL
		   AND solTipoTransaccion IN (
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_0_6_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_0_6_WEB'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_2_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_2_WEB'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_6_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_6_WEB'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_WEB'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_2_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_2_WEB'',
										''CAMBIO_RAZON_SOCIAL_NOMBRE'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTO'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTOS_IDENTIDAD'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB'',
										''CAMBIO_GENERO_PERSONAS'',
										''CAMBIO_FECHA_NACIMIENTO_PERSONA_DEPWEB'',
										''CAMBIO_FECHA_NACIMIENTO_PERSONA_PRESENCIAL'',
										''CAMBIO_FECHA_NACIMIENTO_PERSONA_WEB'',
										''CAMBIO_NOMBRE_APELLIDOS_PERSONAS'',
										''CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB'',
										''CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB'',
										''ACTUALIZACION_DIRECCION_NOTIFICACION_JUDICIAL_PRESENCIAL'',
										''ACTUALIZACION_DIRECCION_NOTIFICACION_JUDICIAL_WEB'',
										''ACTUALIZACION_SECTOR_UBICACION_GRUPOFAMILIAR_DEPWEB'',
										''ACTUALIZACION_SECTOR_UBICACION_GRUPOFAMILIAR'',
										''ACTUALIZACION_SECTOR_UBICACION_GRUPOFAMILIAR_WEB'',
										''ACTUALIZACION_PAIS_RESIDENCIA_PERSONAS_DEPWEB'',
										''ACTUALIZACION_PAIS_RESIDENCIA_PERSONAS'',
										''ACTUALIZACION_PAIS_RESIDENCIA_PERSONAS_WEB'',
										''ACTUALIZACION_DATOS_ENVIO_CORRESPONDENCIA_PRESENCIAL'',
										''ACTUALIZACION_DATOS_ENVIO_CORRESPONDENCIA_WEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_GRUPO_FAMILIAR_DEPWEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_GRUPO_FAMILIAR_PRESENCIAL'',
										''CAMBIO_DATOS_CORRESPONDENCIA_GRUPO_FAMILIAR_WEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS'',
										''CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS_DEPWEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS_WEB'',
										''ACTUALIZACION_DATOS_CONTACTO_JEFE_HOGAR'',
										''CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_PRESENCIAL'',
										''CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_WEB'',
										''CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_DEPWEB'',
										''CAMBIO_ADMINISTRADOR_DEL_SUBSIDIO_MONETARIO_TRABAJADOR_DEPENDIENTE'',
										''CAMBIO_ADMINISTRADOR_DEL_SUBSIDIO_MONETARIO_ADMINISTRADOR_SUBSIDIO'',
										''INACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_CONYUGE_WEB'',
										''INACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HIJASTRO_WEB'',
										''INACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HUERFANO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HUERFANO_WEB'',
										''INACTIVAR_BENEFICIARIO_HUERFANO_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_WEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_DEPWEB'',
										''INACTIVAR_BENEFICIO_EN_CUSTODIA_PRESENCIAL'',
										''INACTIVAR_BENEFICIO_EN_CUSTODIA_WEB'',
										''INACTIVAR_BENEFICIO_EN_CUSTODIA_DEPWEB'',
										''INACTIVAR_BENEFICIOS_PADRE_PRESENCIAL'',
										''INACTIVAR_BENEFICIOS_PADRE_WEB'',
										''INACTIVAR_BENEFICIOS_PADRE_DEPWEB'',
										''INACTIVAR_BENEFICIOS_MADRE_PRESENCIAL'',
										''INACTIVAR_BENEFICIOS_MADRE_WEB'',
										''INACTIVAR_BENEFICIOS_MADRE_DEPWEB'',
										''ACTUALIZACION_TIPO_UNION_CONYUGE_PRESENCIAL'',
										''ACTUALIZACION_TIPO_UNION_CONYUGE_WEB'',
										''ACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_CONYUGE_WEB'',
										''ACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB'',
										''ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_HIJASTRO_WEB'',
										''ACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_WEB'',
										''ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_PADRE_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_MADRE_PRESENCIAL'',
										''REPORTE_INVALIDEZ_PERSONAS'',
										''REPORTE_INVALIDEZ_PERSONAS_DEPWEB'',
										''REPORTE_INVALIDEZ_PERSONAS_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_WEB'',
										''REPORTE_FALLECIMIENTO_PERSONAS'',
										''REPORTE_FALLECIMIENTO_PERSONAS_WEB'',
										''REPORTE_FALLECIMIENTO_PERSONAS_DEPWEB'',
										''RETIRO_TRABAJADOR_DEPENDIENTE'',
										''RETIRO_TRABAJADOR_INDEPENDIENTE'',
										''RETIRO_PENSIONADO_MAYOR_1_5SM_2'',
										''RETIRO_PENSIONADO_25ANIOS'',
										''RETIRO_PENSIONADO_MAYOR_1_5SM_0_6'',
										''RETIRO_PENSIONADO_MENOR_1_5SM_0_6'',
										''RETIRO_PENSIONADO_MENOR_1_5SM_2'',
										''CAMBIO_TIPO_INDEPENDIENTE_SEGUN_VALOR_APORTES_PRESENCIAL'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS''
									)
		GROUP BY p.REV	,p.REVTYPE	,perid	,perTipoIdentificacion	,perNumeroIdentificacion,
		perPrimerNombre,	perSegundoNombre,	perPrimerApellido,	perSegundoApellido
 
 UNION
 ----cambio revtype a 1

				 SELECT CASE WHEN p.REV = MAX(p.REV) 
					OVER (PARTITION BY perid , p.REVTYPE  
					ORDER BY perid desc) THEN p.REV ELSE NULL END AS  REV,  
					ROW_NUMBER() OVER(PARTITION BY  perid ,  p.REVTYPE  ORDER BY perid ASC) AS ''Orden''
				   , 1 as REVTYPE, perid , 
					perTipoIdentificacion,
					perNumeroIdentificacion,
					perPrimerNombre,
					perSegundoNombre,
					perPrimerApellido,
					perSegundoApellido
				FROM persona_aud   p  WITH(NOLOCK)
			INNER JOIN SolicitudNovedadPersona_aud AS solicitudPersonaNovedad  WITH(NOLOCK)
					ON solicitudPersonaNovedad.snpPersona = perId 
			INNER JOIN SolicitudNovedad_aud AS solicitudNovedad  WITH(NOLOCK)
					ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId
			INNER JOIN Solicitud_aud AS solicitudGlobal  WITH(NOLOCK)
					ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
				         WHERE p.rev < (SELECT MAX( persona_aud.rev) 
										  FROM persona_aud 
										 WHERE persona_aud.perid = p.perid 
										   AND revtype = 1) 
							AND p.revtype = 1
							AND CONVERT(DATE,solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal 
							AND solicitudNovedad.snoEstadoSolicitud = ''CERRADA''
							AND snpBeneficiario IS NULL
							AND solTipoTransaccion IN (
											''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_0_6_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_0_6_WEB'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_2_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_2_WEB'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_6_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_6_WEB'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_WEB'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_2_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_2_WEB'',
										''CAMBIO_RAZON_SOCIAL_NOMBRE'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTO'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTOS_IDENTIDAD'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB'',
										''CAMBIO_GENERO_PERSONAS'',
										''CAMBIO_FECHA_NACIMIENTO_PERSONA_DEPWEB'',
										''CAMBIO_FECHA_NACIMIENTO_PERSONA_PRESENCIAL'',
										''CAMBIO_FECHA_NACIMIENTO_PERSONA_WEB'',
										''CAMBIO_NOMBRE_APELLIDOS_PERSONAS'',
										''CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB'',
										''CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB'',
										''ACTUALIZACION_DIRECCION_NOTIFICACION_JUDICIAL_PRESENCIAL'',
										''ACTUALIZACION_DIRECCION_NOTIFICACION_JUDICIAL_WEB'',
										''ACTUALIZACION_SECTOR_UBICACION_GRUPOFAMILIAR_DEPWEB'',
										''ACTUALIZACION_SECTOR_UBICACION_GRUPOFAMILIAR'',
										''ACTUALIZACION_SECTOR_UBICACION_GRUPOFAMILIAR_WEB'',
										''ACTUALIZACION_PAIS_RESIDENCIA_PERSONAS_DEPWEB'',
										''ACTUALIZACION_PAIS_RESIDENCIA_PERSONAS'',
										''ACTUALIZACION_PAIS_RESIDENCIA_PERSONAS_WEB'',
										''ACTUALIZACION_DATOS_ENVIO_CORRESPONDENCIA_PRESENCIAL'',
										''ACTUALIZACION_DATOS_ENVIO_CORRESPONDENCIA_WEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_GRUPO_FAMILIAR_DEPWEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_GRUPO_FAMILIAR_PRESENCIAL'',
										''CAMBIO_DATOS_CORRESPONDENCIA_GRUPO_FAMILIAR_WEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS'',
										''CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS_DEPWEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS_WEB'',
										''ACTUALIZACION_DATOS_CONTACTO_JEFE_HOGAR'',
										''CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_PRESENCIAL'',
										''CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_WEB'',
										''CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_DEPWEB'',
										''CAMBIO_ADMINISTRADOR_DEL_SUBSIDIO_MONETARIO_TRABAJADOR_DEPENDIENTE'',
										''CAMBIO_ADMINISTRADOR_DEL_SUBSIDIO_MONETARIO_ADMINISTRADOR_SUBSIDIO'',
										''INACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_CONYUGE_WEB'',
										''INACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HIJASTRO_WEB'',
										''INACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HUERFANO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HUERFANO_WEB'',
										''INACTIVAR_BENEFICIARIO_HUERFANO_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_WEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_DEPWEB'',
										''INACTIVAR_BENEFICIO_EN_CUSTODIA_PRESENCIAL'',
										''INACTIVAR_BENEFICIO_EN_CUSTODIA_WEB'',
										''INACTIVAR_BENEFICIO_EN_CUSTODIA_DEPWEB'',
										''INACTIVAR_BENEFICIOS_PADRE_PRESENCIAL'',
										''INACTIVAR_BENEFICIOS_PADRE_WEB'',
										''INACTIVAR_BENEFICIOS_PADRE_DEPWEB'',
										''INACTIVAR_BENEFICIOS_MADRE_PRESENCIAL'',
										''INACTIVAR_BENEFICIOS_MADRE_WEB'',
										''INACTIVAR_BENEFICIOS_MADRE_DEPWEB'',
										''ACTUALIZACION_TIPO_UNION_CONYUGE_PRESENCIAL'',
										''ACTUALIZACION_TIPO_UNION_CONYUGE_WEB'',
										''ACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_CONYUGE_WEB'',
										''ACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB'',
										''ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_HIJASTRO_WEB'',
										''ACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_WEB'',
										''ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_PADRE_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_MADRE_PRESENCIAL'',
										''REPORTE_INVALIDEZ_PERSONAS'',
										''REPORTE_INVALIDEZ_PERSONAS_DEPWEB'',
										''REPORTE_INVALIDEZ_PERSONAS_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_WEB'',
										''REPORTE_FALLECIMIENTO_PERSONAS'',
										''REPORTE_FALLECIMIENTO_PERSONAS_WEB'',
										''REPORTE_FALLECIMIENTO_PERSONAS_DEPWEB'',
										''RETIRO_TRABAJADOR_DEPENDIENTE'',
										''RETIRO_TRABAJADOR_INDEPENDIENTE'',
										''CAMBIO_TIPO_INDEPENDIENTE_SEGUN_VALOR_APORTES_PRESENCIAL'',
										 ''RETIRO_PENSIONADO_MAYOR_1_5SM_2'',
										 ''RETIRO_PENSIONADO_25ANIOS'',
										 ''RETIRO_PENSIONADO_MAYOR_1_5SM_0_6'',
										''RETIRO_PENSIONADO_MENOR_1_5SM_0_6'',
										''RETIRO_PENSIONADO_MENOR_1_5SM_2'' ,
										''CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS''
										)
				GROUP BY  p.REV	,p.REVTYPE	,perid	,perTipoIdentificacion	,perNumeroIdentificacion,
				perPrimerNombre,	perSegundoNombre,	perPrimerApellido,	perSegundoApellido


 UNION

		 SELECT   MAX(p.REV)  AS  REV,  
				ROW_NUMBER() OVER(PARTITION BY  perid , p.REVTYPE  ORDER BY perid ASC) AS ''Orden'',
			   p.REVTYPE, perid , perTipoIdentificacion,
			   perNumeroIdentificacion,
			   perPrimerNombre,
			   perSegundoNombre,
			   perPrimerApellido,
			   perSegundoApellido
		  FROM persona_aud p  WITH(NOLOCK)
	INNER JOIN Beneficiario_AUD b ON benpersona = perid 
	INNER JOIN SolicitudNovedadPersona_aud AS solicitudPersonaNovedad  WITH(NOLOCK)
	        ON solicitudPersonaNovedad.snpBeneficiario = benid 
	INNER JOIN SolicitudNovedad_aud AS solicitudNovedad  WITH(NOLOCK)
	        ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId
	INNER JOIN Solicitud_aud AS solicitudGlobal  WITH(NOLOCK)
	        ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
		 WHERE CONVERT(DATE,solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal 
		   AND solicitudNovedad.snoEstadoSolicitud = ''CERRADA'' 
 
		   AND solTipoTransaccion IN (
										
										''CAMBIO_RAZON_SOCIAL_NOMBRE'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTO'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTOS_IDENTIDAD'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB'',
										''CAMBIO_GENERO_PERSONAS'',
										''CAMBIO_FECHA_NACIMIENTO_PERSONA_DEPWEB'',
										''CAMBIO_FECHA_NACIMIENTO_PERSONA_PRESENCIAL'',
										''CAMBIO_FECHA_NACIMIENTO_PERSONA_WEB'',
										''CAMBIO_NOMBRE_APELLIDOS_PERSONAS'',
										''CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB'',
										''CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB'',
										''ACTUALIZACION_DIRECCION_NOTIFICACION_JUDICIAL_PRESENCIAL'',
										''ACTUALIZACION_DIRECCION_NOTIFICACION_JUDICIAL_WEB'',
										''ACTUALIZACION_SECTOR_UBICACION_GRUPOFAMILIAR_DEPWEB'',
										''ACTUALIZACION_SECTOR_UBICACION_GRUPOFAMILIAR'',
										''ACTUALIZACION_SECTOR_UBICACION_GRUPOFAMILIAR_WEB'',
										''ACTUALIZACION_PAIS_RESIDENCIA_PERSONAS_DEPWEB'',
										''ACTUALIZACION_PAIS_RESIDENCIA_PERSONAS'',
										''ACTUALIZACION_PAIS_RESIDENCIA_PERSONAS_WEB'',
										''ACTUALIZACION_DATOS_ENVIO_CORRESPONDENCIA_PRESENCIAL'',
										''ACTUALIZACION_DATOS_ENVIO_CORRESPONDENCIA_WEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_GRUPO_FAMILIAR_DEPWEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_GRUPO_FAMILIAR_PRESENCIAL'',
										''CAMBIO_DATOS_CORRESPONDENCIA_GRUPO_FAMILIAR_WEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS'',
										''CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS_DEPWEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS_WEB'',
										''ACTUALIZACION_DATOS_CONTACTO_JEFE_HOGAR'',
										''CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_PRESENCIAL'',
										''CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_WEB'',
										''CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_DEPWEB'',
										''CAMBIO_ADMINISTRADOR_DEL_SUBSIDIO_MONETARIO_TRABAJADOR_DEPENDIENTE'',
										''CAMBIO_ADMINISTRADOR_DEL_SUBSIDIO_MONETARIO_ADMINISTRADOR_SUBSIDIO'',
										''INACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_CONYUGE_WEB'',
										''INACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HIJASTRO_WEB'',
										''INACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HUERFANO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HUERFANO_WEB'',
										''INACTIVAR_BENEFICIARIO_HUERFANO_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_WEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_DEPWEB'',
										''INACTIVAR_BENEFICIO_EN_CUSTODIA_PRESENCIAL'',
										''INACTIVAR_BENEFICIO_EN_CUSTODIA_WEB'',
										''INACTIVAR_BENEFICIO_EN_CUSTODIA_DEPWEB'',
										''INACTIVAR_BENEFICIOS_PADRE_PRESENCIAL'',
										''INACTIVAR_BENEFICIOS_PADRE_WEB'',
										''INACTIVAR_BENEFICIOS_PADRE_DEPWEB'',
										''INACTIVAR_BENEFICIOS_MADRE_PRESENCIAL'',
										''INACTIVAR_BENEFICIOS_MADRE_WEB'',
										''INACTIVAR_BENEFICIOS_MADRE_DEPWEB'',
										''ACTUALIZACION_TIPO_UNION_CONYUGE_PRESENCIAL'',
										''ACTUALIZACION_TIPO_UNION_CONYUGE_WEB'',
										''ACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_CONYUGE_WEB'',
										''ACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB'',
										''ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_HIJASTRO_WEB'',
										''ACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_WEB'',
										''ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_PADRE_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_MADRE_PRESENCIAL'',
										''REPORTE_INVALIDEZ_PERSONAS'',
										''REPORTE_INVALIDEZ_PERSONAS_DEPWEB'',
										''REPORTE_INVALIDEZ_PERSONAS_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_WEB'',
										''REPORTE_FALLECIMIENTO_PERSONAS'',
										''REPORTE_FALLECIMIENTO_PERSONAS_WEB'',
										''REPORTE_FALLECIMIENTO_PERSONAS_DEPWEB'',
							 
										''CAMBIO_TIPO_INDEPENDIENTE_SEGUN_VALOR_APORTES_PRESENCIAL'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS''
									)
		GROUP BY p.REV	,p.REVTYPE	,perid	,perTipoIdentificacion	,perNumeroIdentificacion,
		perPrimerNombre,	perSegundoNombre,	perPrimerApellido,	perSegundoApellido
 
 UNION


				 SELECT CASE WHEN p.REV = MAX(p.REV) 
					OVER (PARTITION BY perid , p.REVTYPE  
					ORDER BY perid desc) THEN p.REV ELSE NULL END AS  REV,  
					ROW_NUMBER() OVER(PARTITION BY  perid ,  p.REVTYPE  ORDER BY perid ASC) AS ''Orden''
				   , 0 as REVTYPE, perid , ----cambio para que la anterior actualizacion sea la original
					perTipoIdentificacion,
					perNumeroIdentificacion,
					perPrimerNombre,
					perSegundoNombre,
					perPrimerApellido,
					perSegundoApellido
				FROM persona_aud   p  WITH(NOLOCK)
				INNER JOIN Beneficiario_aud b ON b.benpersona = p.perid 
				INNER JOIN SolicitudNovedadPersona_aud AS solicitudPersonaNovedad  WITH(NOLOCK)
						ON solicitudPersonaNovedad.snpBeneficiario = benid  
				INNER JOIN SolicitudNovedad_aud AS solicitudNovedad  WITH(NOLOCK)
						ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId
				INNER JOIN Solicitud_aud AS solicitudGlobal  WITH(NOLOCK)
						ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
				         WHERE p.rev < (SELECT MAX( persona_aud.rev) 
										  FROM persona_aud 
										 WHERE persona_aud.perid = p.perid 
										   AND revtype = 1) 
							AND p.revtype = 1
							AND CONVERT(DATE,solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal 
							AND solicitudNovedad.snoEstadoSolicitud = ''CERRADA'' 
							 
							AND solTipoTransaccion IN (
											''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_0_6_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_0_6_WEB'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_2_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_2_WEB'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_6_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_6_WEB'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_WEB'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_2_PRESENCIAL'',
										''CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_2_WEB'',
										''CAMBIO_RAZON_SOCIAL_NOMBRE'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTO'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS'',
										''CAMBIO_TIPO_NUMERO_DOCUMENTOS_IDENTIDAD'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB'',
										''ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB'',
										''CAMBIO_GENERO_PERSONAS'',
										''CAMBIO_FECHA_NACIMIENTO_PERSONA_DEPWEB'',
										''CAMBIO_FECHA_NACIMIENTO_PERSONA_PRESENCIAL'',
										''CAMBIO_FECHA_NACIMIENTO_PERSONA_WEB'',
										''CAMBIO_NOMBRE_APELLIDOS_PERSONAS'',
										''CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB'',
										''CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB'',
										''ACTUALIZACION_DIRECCION_NOTIFICACION_JUDICIAL_PRESENCIAL'',
										''ACTUALIZACION_DIRECCION_NOTIFICACION_JUDICIAL_WEB'',
										''ACTUALIZACION_SECTOR_UBICACION_GRUPOFAMILIAR_DEPWEB'',
										''ACTUALIZACION_SECTOR_UBICACION_GRUPOFAMILIAR'',
										''ACTUALIZACION_SECTOR_UBICACION_GRUPOFAMILIAR_WEB'',
										''ACTUALIZACION_PAIS_RESIDENCIA_PERSONAS_DEPWEB'',
										''ACTUALIZACION_PAIS_RESIDENCIA_PERSONAS'',
										''ACTUALIZACION_PAIS_RESIDENCIA_PERSONAS_WEB'',
										''ACTUALIZACION_DATOS_ENVIO_CORRESPONDENCIA_PRESENCIAL'',
										''ACTUALIZACION_DATOS_ENVIO_CORRESPONDENCIA_WEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_GRUPO_FAMILIAR_DEPWEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_GRUPO_FAMILIAR_PRESENCIAL'',
										''CAMBIO_DATOS_CORRESPONDENCIA_GRUPO_FAMILIAR_WEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS'',
										''CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS_DEPWEB'',
										''CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS_WEB'',
										''ACTUALIZACION_DATOS_CONTACTO_JEFE_HOGAR'',
										''CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_PRESENCIAL'',
										''CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_WEB'',
										''CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_DEPWEB'',
										''CAMBIO_ADMINISTRADOR_DEL_SUBSIDIO_MONETARIO_TRABAJADOR_DEPENDIENTE'',
										''CAMBIO_ADMINISTRADOR_DEL_SUBSIDIO_MONETARIO_ADMINISTRADOR_SUBSIDIO'',
										''INACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_CONYUGE_WEB'',
										''INACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HIJASTRO_WEB'',
										''INACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HUERFANO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HUERFANO_WEB'',
										''INACTIVAR_BENEFICIARIO_HUERFANO_DEPWEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_PRESENCIAL'',
										''INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_WEB'',
										''INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_DEPWEB'',
										''INACTIVAR_BENEFICIO_EN_CUSTODIA_PRESENCIAL'',
										''INACTIVAR_BENEFICIO_EN_CUSTODIA_WEB'',
										''INACTIVAR_BENEFICIO_EN_CUSTODIA_DEPWEB'',
										''INACTIVAR_BENEFICIOS_PADRE_PRESENCIAL'',
										''INACTIVAR_BENEFICIOS_PADRE_WEB'',
										''INACTIVAR_BENEFICIOS_PADRE_DEPWEB'',
										''INACTIVAR_BENEFICIOS_MADRE_PRESENCIAL'',
										''INACTIVAR_BENEFICIOS_MADRE_WEB'',
										''INACTIVAR_BENEFICIOS_MADRE_DEPWEB'',
										''ACTUALIZACION_TIPO_UNION_CONYUGE_PRESENCIAL'',
										''ACTUALIZACION_TIPO_UNION_CONYUGE_WEB'',
										''ACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_CONYUGE_WEB'',
										''ACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB'',
										''ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_HIJASTRO_WEB'',
										''ACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_WEB'',
										''ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_DEPWEB'',
										''ACTIVAR_BENEFICIARIO_PADRE_PRESENCIAL'',
										''ACTIVAR_BENEFICIARIO_MADRE_PRESENCIAL'',
										''REPORTE_INVALIDEZ_PERSONAS'',
										''REPORTE_INVALIDEZ_PERSONAS_DEPWEB'',
										''REPORTE_INVALIDEZ_PERSONAS_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_WEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_DEPWEB'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_PRESENCIAL'',
										''ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_WEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_DEPWEB'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_PRESENCIAL'',
										''ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_WEB'',
										''REPORTE_FALLECIMIENTO_PERSONAS'',
										''REPORTE_FALLECIMIENTO_PERSONAS_WEB'',
										''REPORTE_FALLECIMIENTO_PERSONAS_DEPWEB'',
										''RETIRO_TRABAJADOR_DEPENDIENTE'',
										''RETIRO_TRABAJADOR_INDEPENDIENTE'',
										''RETIRO_PENSIONADO_MAYOR_1_5SM_2'',
										''RETIRO_PENSIONADO_25ANIOS'',
										''RETIRO_PENSIONADO_MAYOR_1_5SM_0_6'',
										''RETIRO_PENSIONADO_MENOR_1_5SM_0_6'',
										''RETIRO_PENSIONADO_MENOR_1_5SM_2'' ,
										''CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS''
										)
				GROUP BY  p.REV	,p.REVTYPE	,perid	,perTipoIdentificacion	,perNumeroIdentificacion,
				perPrimerNombre,	perSegundoNombre,	perPrimerApellido,	perSegundoApellido
		) Auditoria
   WHERE rev IS NOT NULL) X
--GROUP BY  REVTYPE,perid	,perTipoIdentificacion	,perNumeroIdentificacion,
--		  perPrimerNombre,	perSegundoNombre,	perPrimerApellido,	perSegundoApellido
		  '


 

IF OBJECT_ID('tempdb.dbo.#NovedadesSubsidios_AUD2', 'U') IS NOT NULL
	DROP TABLE #NovedadesSubsidios_AUD2;


CREATE TABLE #NovedadesSubsidios_AUD2(
	rev VARCHAR(500),
	REVTYPE int, 
	perId bigint ,	
	perTipoIdentificacion VARCHAR(20),
	perNumeroIdentificacion VARCHAR(20),
	perPrimerNombre VARCHAR(500), 
	perSegundoNombre VARCHAR(500),
	perPrimerApellido VARCHAR(500),
	perSegundoApellido VARCHAR(500),
	shard VARCHAR(500)

)
 	
INSERT INTO #NovedadesSubsidios_AUD2 (
	rev ,
	REVTYPE  , 
	perId   ,	
	perTipoIdentificacion  ,
	perNumeroIdentificacion  ,
	perPrimerNombre  , 
	perSegundoNombre ,
	perPrimerApellido ,
	perSegundoApellido  ,
	shard
)

EXEC sp_execute_remote N'CoreAudReferenceData',
	@sql,
	N'@fechaInicio DATE, @fechaFinal DATE',
	@fechaInicio = @fechaInicio, 
	@fechaFinal = @fechaFinal


   --SELECT 'prueba',* FROM #NovedadesSubsidios_AUD2 20230811
	
	--IF exists (SELECT count(*) FROM #NovedadesSubsidios_AUD2)
	--DROP TABLE #NovedadesSubsidios_AUD2

	 
	--IF exists (SELECT count(*) FROM #HomologacioTiposIdent)
	--DROP TABLE #HomologacioTiposIdent

	IF OBJECT_ID('tempdb.dbo.#HomologacioTiposIdent', 'U') IS NOT NULL
	DROP TABLE #HomologacioTiposIdent;


	CREATE TABLE #HomologacioTiposIdent (TipoId NVARCHAR(20), TipoIdHom VARCHAR(2))
	INSERT INTO #HomologacioTiposIdent
	VALUES ( 'CEDULA_CIUDADANIA'  , 'CC')
	INSERT INTO #HomologacioTiposIdent
	VALUES   ('REGISTRO_CIVIL','RC')
	INSERT INTO #HomologacioTiposIdent
	VALUES ('TARJETA_IDENTIDAD' , 'TI')
	INSERT INTO #HomologacioTiposIdent
	VALUES ('CEDULA_EXTRANJERIA' ,  'CE')
	INSERT INTO #HomologacioTiposIdent
	VALUES ('PASAPORTE' , 'PA')
	INSERT INTO #HomologacioTiposIdent
	VALUES ('CARNE_DIPLOMATICO' , 'CD')
	INSERT INTO #HomologacioTiposIdent
	VALUES ('PERM_PROT_TEMPORAL' , 'PT')
	INSERT INTO #HomologacioTiposIdent
	VALUES ('PERM_ESP_PERMANENCIA' , 'PE')
	INSERT INTO #HomologacioTiposIdent
	VALUES ('NIT' , 'NI')
	INSERT INTO #HomologacioTiposIdent
	VALUES ('SALVOCONDUCTO' , 'SC')

	IF OBJECT_ID('tempdb.dbo.#Reporte14', 'U') IS NOT NULL
	DROP TABLE #Reporte14;
	
	CREATE TABLE #Reporte14  (
	[Tipo de registro] nvarchar(1),
	[CÃ³digo caja de compensaciÃ³n familiar] nvarchar(6),
	[Tipo de identificaciÃ³n del afiliado] nvarchar(2),
	[NÃºmero de identificaciÃ³n del afiliado] nvarchar(20),
	[Primer Apellido] nvarchar(50),
	[Segundo Apellido] nvarchar(50),
	[Primer Nombre] nvarchar(50),
	[Segundo Nombre] nvarchar(50),
	[CÃ³digo de la novedad] nvarchar(3),
	[Nuevo valor 1]  varchar(250),
	[Nuevo valor 2] varchar(250),
	[Nuevo valor 3] varchar(250),
	[Nuevo valor 4] varchar(250),
	[Nuevo valor 5] varchar(250),
	[Nuevo valor 6] varchar(250),
	[Nuevo valor 7] varchar(250),
	[Nuevo valor 8]	varchar(250),
	[Nuevo valor 9] varchar(250),
	[Nuevo valor 10]  varchar(250)
	 )


	 IF OBJECT_ID('tempdb.dbo.#Final', 'U') IS NOT NULL
	DROP TABLE #Final;
	CREATE TABLE #Final ( id BIGINT IDENTITY (1,1) NOT NULL,
						[Tipo de registro] VARCHAR(1) ,
						[CÃ³digo caja de compensaciÃ³n familiar] VARCHAR(7) ,
						[Tipo de identificaciÃ³n del afiliado] VARCHAR(2) ,
						[NÃºmero de identificaciÃ³n del afiliado] VARCHAR(20) ,
						[Primer Apellido] VARCHAR(60) ,
						[Segundo Apellido]  VARCHAR(60) ,
						[Primer Nombre]  VARCHAR(60) ,
						[Segundo Nombre]  VARCHAR(60) ,
						[CÃ³digo de la novedad]  VARCHAR(3) ,
					 	[Nuevo valor 1] VARCHAR(150) ,					 
						 [Nuevo valor 2] VARCHAR(150) ,
						 [Nuevo valor 3] VARCHAR(150) ,
						 [Nuevo valor 4] VARCHAR(150) ,
						 [Nuevo valor 5] VARCHAR(150) ,
						 [Nuevo valor 6] VARCHAR(150) ,
						 [Nuevo valor 7] VARCHAR(150) ,
						 [Nuevo valor 8] VARCHAR(150) ,
						 [Nuevo valor 9] VARCHAR(150) ,
						 [Nuevo valor 10] VARCHAR(150))



	 ---creamos la data para la c03 que no tiene novedades de este tipo 
	 ---para detectar el cambio o el reingreso al sistema con cualquier tipo de afiliacion 
	 ---y que ya habia estado afiliado 
	IF OBJECT_ID('tempdb.dbo.#AfiliacionesC03', 'U') IS NOT NULL
	DROP TABLE #AfiliacionesC03 

	 SELECT isnull(pe.perTipoIdentificacion, pt.perTipoIdentificacion) AS TipoidEmp, 
	        isnull(pe.perNumeroIdentificacion,pt.perNumeroIdentificacion)  AS IdEmp,
	        isnull(pe.perDigitoVerificacion, pt.perDigitoVerificacion) AS perDigitoVerificacion,
			isnull(pe.perRazonSocial,pt.perRazonSocial) AS perRazonSocial,
			pt.perTipoIdentificacion AS TipoidTrab, 
			pt.perNumeroIdentificacion AS IdTrab,
			pt.perPrimerNombre,
			pt.perSegundoNombre,
			pt.perPrimerApellido, 
			pt.perSegundoApellido,
			case when roaTipoAfiliado = 'TRABAJADOR_DEPENDIENTE' THEN roaFechaIngreso
			ELSE roaFechaAfiliacion END AS roaFechaAfiliacion , 
			roaid , solTipoTransaccion, solClasificacion, roaTipoAfiliado,
			munEmp.munCodigo  , depEmp.depCodigo,
			pent.perTipoIdentificacion tipoideent,
			pent.perNumeroIdentificacion as ident, pent.perDigitoVerificacion as dvent,
			pent.perRazonSocial as nombreent

	   INTO #AfiliacionesC03
       FROM Persona pt
 INNER JOIN afiliado 
         ON afipersona = perid 
 INNER JOIN RolAfiliado 
         ON roaAfiliado = afiid 
  LEFT JOIN Empleador em ON em.empid = roaEmpleador
  LEFT JOIN Empresa e ON e.empid = em.empEmpresa
  LEFT JOIN Persona pe ON pe.perId = e.emppersona 
  LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = e.empId AND ube.ubeTipoUbicacion='UBICACION_PRINCIPAL'
  LEFT JOIN Ubicacion AS ubiEmp  ON ubiEmp.ubiId = ube.ubeUbicacion
  LEFT JOIN Municipio AS munEmp  ON munEmp.munId = ubiEmp.ubiMunicipio
  LEFT JOIN Departamento AS depEmp ON depEmp.depId = munEmp.munDepartamento
  ----entidapagadorapensionados
  LEFT JOIN EntidadPagadora on epaId =  roaPagadorAportes 
  LEFT JOIN Empresa empenti on empenti.empId = epaEmpresa
  LEFT JOIN persona pent ON pent.perid = empenti.empPersona
  ----
 INNER JOIN SolicitudAfiliacionPersona 
         ON sapRolAfiliado = roaid 
 INNER JOIN Solicitud  
         ON solId = sapSolicitudGlobal
	  WHERE CONVERT(DATE,solFechaRadicacion) between @fechaInicio and @fechaFinal
	    AND solResultadoProceso = 'APROBADA'
		AND roaEstadoAfiliado = 'ACTIVO'
		AND pt.perId IN (SELECT perId 
						   FROM Persona 
					 INNER JOIN afiliado 
							 ON afipersona = perid 
					 INNER JOIN RolAfiliado 
							 ON roaAfiliado = afiid 
					 INNER JOIN SolicitudAfiliacionPersona 
							 ON sapRolAfiliado = roaid 
					 INNER JOIN Solicitud  
							 ON solId = sapSolicitudGlobal 
						  WHERE CONVERT(DATE,solFechaRadicacion) < @fechaInicio
						    AND solResultadoProceso = 'APROBADA')
	GROUP BY pe.perTipoIdentificacion  , pe.perNumeroIdentificacion  ,
			 pe.perDigitoVerificacion, pe.perRazonSocial,
			 pt.perTipoIdentificacion  , pt.perNumeroIdentificacion ,
			 pt.perDigitoVerificacion, pt.perRazonSocial,
			 pt.perPrimerNombre, pt.perSegundoNombre,
			 pt.perPrimerApellido, pt.perSegundoApellido,
			 roaFechaAfiliacion , roaid , solTipoTransaccion, solClasificacion, roaTipoAfiliado ,
			 munEmp.munCodigo  , depEmp.depCodigo,pent.perTipoIdentificacion  ,
			pent.perNumeroIdentificacion  , pent.perDigitoVerificacion  ,
			pent.perRazonSocial,roaFechaIngreso
UNION

SELECT ISNULL(pe.perTipoIdentificacion, pt.perTipoIdentificacion) AS TipoidEmp, 
	        ISNULL(pe.perNumeroIdentificacion,pt.perNumeroIdentificacion)  AS IdEmp,
	        ISNULL(pe.perDigitoVerificacion, pt.perDigitoVerificacion) AS perDigitoVerificacion,
			ISNULL(pe.perRazonSocial,pt.perRazonSocial) AS perRazonSocial,
			pt.perTipoIdentificacion AS TipoidTrab, 
			pt.perNumeroIdentificacion AS IdTrab,
			pt.perPrimerNombre,
			pt.perSegundoNombre,
			pt.perPrimerApellido, 
			pt.perSegundoApellido,
			case when roaTipoAfiliado = 'TRABAJADOR_DEPENDIENTE' THEN roaFechaIngreso
			ELSE roaFechaAfiliacion END AS roaFechaAfiliacion , 
			roaid , solTipoTransaccion, solClasificacion, roaTipoAfiliado,
			munEmp.munCodigo  , depEmp.depCodigo,
			pent.perTipoIdentificacion tipoideent,
			pent.perNumeroIdentificacion as ident, pent.perDigitoVerificacion as dvent,
			pent.perRazonSocial as nombreent
       FROM Persona pt
 INNER JOIN afiliado 
         ON afipersona = perid 
 INNER JOIN RolAfiliado 
         ON roaAfiliado = afiid 
 INNER JOIN Beneficiario b ON benAfiliado= afiid 
  LEFT JOIN Empleador em ON em.empid = roaEmpleador
  LEFT JOIN Empresa e ON e.empid = em.empEmpresa
  LEFT JOIN Persona pe ON pe.perId = e.emppersona 
  LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = e.empId AND ube.ubeTipoUbicacion='UBICACION_PRINCIPAL'
  LEFT JOIN Ubicacion AS ubiEmp  ON ubiEmp.ubiId = ube.ubeUbicacion
  LEFT JOIN Municipio AS munEmp  ON munEmp.munId = ubiEmp.ubiMunicipio
  LEFT JOIN Departamento AS depEmp ON depEmp.depId = munEmp.munDepartamento
  ----entidapagadorapensionados
  LEFT JOIN EntidadPagadora on epaId =  roaPagadorAportes 
  LEFT JOIN Empresa empenti on empenti.empId = epaEmpresa
  LEFT JOIN persona pent ON pent.perid = empenti.empPersona
  ----
 INNER JOIN SolicitudNovedadPersona 
         ON snpRolAfiliado = roaid 
 INNER JOIN solicitudnovedad ON snoid= snpSolicitudNovedad
 INNER JOIN Solicitud  
         ON solId = snoSolicitudGlobal
	  WHERE CONVERT(DATE,solFechaRadicacion) between @fechaInicio and @fechaFinal
	    AND solResultadoProceso = 'APROBADA'
		AND roaEstadoAfiliado = 'ACTIVO'
	     AND benEstadoBeneficiarioAfiliado= 'ACTIVO'
	    AND solCanalRecepcion = 'PILA' 
		AND solTipoTransaccion = 'NOVEDAD_REINTEGRO'
	GROUP BY pe.perTipoIdentificacion  , pe.perNumeroIdentificacion  ,
			 pe.perDigitoVerificacion, pe.perRazonSocial,
			 pt.perTipoIdentificacion  , pt.perNumeroIdentificacion ,
			 pt.perDigitoVerificacion, pt.perRazonSocial,
			 pt.perPrimerNombre, pt.perSegundoNombre,
			 pt.perPrimerApellido, pt.perSegundoApellido,
			 roaFechaAfiliacion , roaid , solTipoTransaccion, solClasificacion, roaTipoAfiliado ,
			 munEmp.munCodigo  , depEmp.depCodigo,pent.perTipoIdentificacion  ,
			 pent.perNumeroIdentificacion  , pent.perDigitoVerificacion  ,
			 pent.perRazonSocial,roaFechaIngreso

	 		--- select '#AfiliacionesC03',* from #AfiliacionesC03 where IdTrab= '1002596043'

--  */



---AUDITORIA PARA LOS BENEFICIARIOS RETIRADOS Y QUE ESTAN ACTIVOS EN ESTE MOMENTO 
DECLARE @sqlactinc NVARCHAR(MAX)

  
SET @sqlactinc =N'	 
	 SELECT REV	,solNumeroRadicacion,	benAfiliado,	benId,	benFechaRetiro,	benMotivoDesafiliacion
  
		FROM ( 
	    SELECT  CASE WHEN b.REV = MAX(b.REV) 
				OVER (PARTITION BY perid , p.REVTYPE ,b.benafiliado 
				ORDER BY perid desc) THEN p.REV ELSE NULL END AS  REV,  
		        solicitudGlobal.solNumeroRadicacion , 
			    b.benAfiliado, b.benId, b.benFechaRetiro , b.benMotivoDesafiliacion
		  FROM persona_aud p  WITH(NOLOCK)
	INNER JOIN Beneficiario_AUD b ON benpersona = perid 
	INNER JOIN SolicitudNovedadPersona_aud  AS solicitudPersonaNovedad  WITH(NOLOCK)
	        ON solicitudPersonaNovedad.snpBeneficiario = benid 
	INNER JOIN SolicitudNovedad_aud AS solicitudNovedad  WITH(NOLOCK)
	        ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId
	INNER JOIN Solicitud_aud   AS solicitudGlobal  WITH(NOLOCK)
	        ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal	     
		 WHERE CONVERT(DATE,solicitudGlobal.solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal
		   AND solicitudNovedad.snoEstadoSolicitud = ''CERRADA'' 
		   AND b.REVTYPE = 1 
		   AND b.benFechaRetiro IS NOT NULL
		   AND benEstadoBeneficiarioAfiliado = ''INACTIVO''
		   AND solicitudGlobal.solTipoTransaccion LIKE ''%INACTIVAR_%''
 
) Audben WHERE Audben.REV IS NOT NULL'

  

CREATE TABLE #BenActInact (
	rev BIGINT,
	solNumeroRadicacion VARCHAR(20),
	benAfiliado bigint ,	 
	benId bigint ,
	benFechaRetiro date,
	benMotivoDesafiliacion VARCHAR(250),
	shard VARCHAR(500)
 
)
 	 
INSERT INTO #BenActInact (
		rev ,
		solNumeroRadicacion  ,
		benAfiliado  ,	 
		benId   ,
		benFechaRetiro  ,
		benMotivoDesafiliacion,
		shard
	)

EXEC sp_execute_remote N'CoreAudReferenceData',
	@sqlactinc,
	N'@fechaInicio DATE, @fechaFinal DATE',
	@fechaInicio = @fechaInicio, 
	@fechaFinal = @fechaFinal

	 
	--  SELECT '##BenActInact',* FROM #BenActInact

	
---AUDITORIA PARA LOS trabajadores RETIRADOS Y QUE ESTAN ACTIVOS EN ESTE MOMENTO 
DECLARE @sqlactinctrab NVARCHAR(MAX)

  
SET @sqlactinctrab ='	 
	 SELECT REV	,solNumeroRadicacion,	afiId,	roaId,	roaFechaRetiro,	roaMotivoDesafiliacion
  
		FROM ( 
	    SELECT  CASE WHEN R.REV = MAX(R.REV) 
				OVER (PARTITION BY perid , p.REVTYPE  
				ORDER BY perid desc) THEN p.REV ELSE NULL END AS  REV,  
		        solicitudGlobal.solNumeroRadicacion , 
			    afiId, roaId, roaFechaRetiro , roaMotivoDesafiliacion
		  FROM persona_aud p  WITH(NOLOCK)
	INNER JOIN Afiliado_aud  ON afiPersona = perid 
	INNER JOIN RolAfiliado_aud r ON roaafiliado = afiId 
	INNER JOIN SolicitudNovedadPersona_aud  AS solicitudPersonaNovedad  WITH(NOLOCK)
	        ON solicitudPersonaNovedad.snpRolAfiliado = r.roaId 
	INNER JOIN SolicitudNovedad_aud AS solicitudNovedad  WITH(NOLOCK)
	        ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId
	INNER JOIN Solicitud_aud   AS solicitudGlobal  WITH(NOLOCK)
	        ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal	     
		 WHERE CONVERT(DATE,solicitudGlobal.solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal
		   AND solicitudNovedad.snoEstadoSolicitud = ''CERRADA''
		   AND r.REVTYPE = 1 
		   AND roaEstadoAfiliado = ''INACTIVO''
		  -- AND solCanalRecepcion = ''PILA'' 
		   AND roaFechaRetiro IS NOT NULL
		   AND solicitudGlobal.solTipoTransaccion LIKE ''%RETIRO_%''
		   ) Audtrab WHERE Audtrab.REV IS NOT NULL'

 

CREATE TABLE #TrabActInact (
	rev VARCHAR(500),
	solNumeroRadicacion VARCHAR(20),
	afiid bigint ,	 
	roaId bigint ,
	roaFechaRetiro date,
	roaMotivoDesafiliacion VARCHAR(50),
	shard VARCHAR(500)
 
)
 	 
INSERT INTO #TrabActInact (
		rev ,
		solNumeroRadicacion  ,
		afiid  ,	 
		roaId   ,
		roaFechaRetiro  ,
		roaMotivoDesafiliacion,
		shard
	)

EXEC sp_execute_remote N'CoreAudReferenceData',
	@sqlactinctrab,
	N'@fechaInicio DATE, @fechaFinal DATE',
	@fechaInicio = @fechaInicio, 
	@fechaFinal = @fechaFinal
	
 

 ----condiciÃ³n trabajador
---INSERTAR C01

  INSERT INTO #Reporte14
	  SELECT DISTINCT
						----------  Tipo de Registro  ----------
						2 AS [Tipo de registro],

						---------- Codigo Caja  ----------
						(
							SELECT cnsValor 
							  FROM Constante 
							 WHERE cnsNombre = 'CAJA_COMPENSACION_CODIGO'
						) AS [CÃ³digo caja de compensaciÃ³n familiar],

						----------  Tipo de IdentificaciÃ³n Afiliado  ----------
						CASE   auditoriaAfiliadoPersona.perTipoIdentificacion  
							WHEN 'CEDULA_CIUDADANIA' THEN 'CC'
							WHEN 'REGISTRO_CIVIL' THEN 'RC'
							WHEN 'TARJETA_IDENTIDAD' THEN 'TI'
							WHEN 'CEDULA_EXTRANJERIA' THEN 'CE'
							WHEN 'PASAPORTE' THEN 'PA'
							WHEN 'CARNE_DIPLOMATICO' THEN 'CD'
							WHEN 'PERM_PROT_TEMPORAL' THEN 'PT'
							WHEN 'PERM_ESP_PERMANENCIA' THEN 'PE'
							WHEN 'NIT' THEN 'NI'
							WHEN 'SALVOCONDUCTO' THEN 'SC'
						END AS [Tipo de identificaciÃ³n del afiliado],
	
						----------  Numero de Identificacion Afiliado  ----------
						 auditoriaAfiliadoPersona.perNumeroIdentificacion
						AS [NÃºmero de identificaciÃ³n del afiliado],
						---------- Primer Apellido  ----------
						 auditoriaAfiliadoPersona.perPrimerApellido  AS [Primer Apellido],
						----------  Segundo Apellido  ----------
						 auditoriaAfiliadoPersona.perSegundoApellido  AS [Segundo Apellido],
						----------  Primer Nombre  ----------
						 auditoriaAfiliadoPersona.perPrimerNombre AS [Primer Nombre],
						----------  Segundo Nombre  ----------
						  auditoriaAfiliadoPersona.perSegundoNombre  AS [Segundo Nombre],
						----------  Codigo Novedad  ----------
						
						 'C01'   AS [CÃ³digo de la novedad],
					--	solicitudGlobal.solTipoTransaccion,solicitudGlobal.solnumeroradicacion ,
					
						CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_GENERO_PERSONAS')
						    	THEN 
								CASE WHEN personaAfiliadoDetalle.pedGenero  = 'FEMENINO' THEN 'F'
									 WHEN personaAfiliadoDetalle.pedGenero  = 'MASCULINO' THEN 'M'
									 WHEN personaAfiliadoDetalle.pedGenero  = 'INDEFINIDO' THEN 'I'
									 ELSE NULL
								END
								ELSE NULL END AS [CÃ³digo gÃ©nero],
						CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_FECHA_NACIMIENTO_PERSONA_PRESENCIAL')
						THEN CONVERT(VARCHAR,personaAfiliadoDetalle.pedFechaNacimiento,23)  ELSE NULL END AS [Fecha de nacimiento],
						CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_NOMBRE_APELLIDOS_PERSONAS',														
																		'CAMBIO_NOMBRE_APELLIDOS_PERSONAS',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB')
						      AND  ISNULL(personaAfiliado.perPrimerApellido,'') <>  ISNULL(auditoriaAfiliadoPersona.perPrimerApellido,'')
						THEN personaAfiliado.perPrimerApellido ELSE NULL END AS [Primer Apellido],

				   CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_NOMBRE_APELLIDOS_PERSONAS',														
				   'CAMBIO_NOMBRE_APELLIDOS_PERSONAS',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB')
					     AND  ISNULL(personaAfiliado.perSegundoApellido,'') <>  ISNULL(auditoriaAfiliadoPersona.perSegundoApellido,'')
						THEN personaAfiliado.perSegundoApellido ELSE NULL END AS [Segundo Apellido],

				   CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_NOMBRE_APELLIDOS_PERSONAS',														
																	'CAMBIO_NOMBRE_APELLIDOS_PERSONAS',
																	'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB',
																	'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB')
						 AND  ISNULL(personaAfiliado.perPrimerNombre,'') <>  ISNULL(auditoriaAfiliadoPersona.perPrimerNombre,'')
						THEN personaAfiliado.perPrimerNombre ELSE NULL END AS [Primer Nombre],

					  CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_NOMBRE_APELLIDOS_PERSONAS',														
																		 'CAMBIO_NOMBRE_APELLIDOS_PERSONAS',
																		'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB',
																		'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB')
						    AND ISNULL(personaAfiliado.perSegundoNombre,'') <>  ISNULL(auditoriaAfiliadoPersona.perSegundoNombre,'')
						THEN personaAfiliado.perSegundoNombre ELSE NULL END AS [Segundo Nombre],

					 CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS')					 
						  THEN  departamentoAfiliado.depCodigo ELSE NULL END AS [Departamento residencia],
					 CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS')
						  THEN right(municipioAfiliado.munCodigo,3) ELSE NULL END AS [Municipio residencia]
				,NULL,NULL
   
		 FROM  
	----------  Se obtiene la informacion de la solicitud con respecto a las novedades  ---------
			  SolicitudNovedadPersona AS solicitudPersonaNovedad 
	LEFT JOIN SolicitudNovedad AS solicitudNovedad 
	       ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId  
		    AND snpBeneficiario IS NULL ---SOLO AFILIADOS 
	LEFT JOIN Solicitud AS solicitudGlobal ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
	----------  Se obtienen los datos personales del afiliado principal  ----------
	INNER JOIN Afiliado AS afiliado 
	        ON afiliado.afiPersona = solicitudPersonaNovedad.snpPersona
	INNER JOIN RolAfiliado AS rolAfiliado 
		    ON rolAfiliado.roaAfiliado = afiliado.afiId
					   AND ( rolAfiliado.roaId = solicitudPersonaNovedad.snpRolAfiliado 
					    OR solicitudPersonaNovedad.snpRolAfiliado IS NULL)
	INNER JOIN Persona AS personaAfiliado 
	        ON afiliado.afiPersona = personaAfiliado.perId
			AND personaAfiliado.perid = snpPersona---esto para las personas no beneficiarios
	INNER JOIN #HomologacioTiposIdent htidafi 
	        ON tipoid = personaAfiliado.pertipoidentificacion 
	 LEFT JOIN Ubicacion AS ubicacionAfiliado 
	        ON ubicacionAfiliado.ubiId = personaAfiliado.perUbicacionPrincipal
	 LEFT JOIN Municipio AS municipioAfiliado 
	        ON municipioAfiliado.munId = ubicacionAfiliado.ubiMunicipio
	 LEFT JOIN Departamento AS departamentoAfiliado 
	        ON departamentoAfiliado.depId = municipioAfiliado.munDepartamento
	INNER JOIN PersonaDetalle AS personaAfiliadoDetalle 
	        ON personaAfiliado.perId = personaAfiliadoDetalle.pedPersona

	---------- AUDITORIA
	LEFT JOIN #NovedadesSubsidios_AUD2 AS auditoriaAfiliadoPersona 
		   ON auditoriaAfiliadoPersona.perId = personaAfiliado.perId
		  AND auditoriaAfiliadoPersona.REVTYPE= 0

		WHERE --personaAfiliado.perNumeroIdentificacion = '30391450' and ---prueba 20230302
	          rolAfiliado.roaEstadoAfiliado IN ('ACTIVO','INACTIVO') AND----CANBIO SOLICITADO POR LA CAJA 
			  convert(date,solicitudGlobal.solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal AND
			  solicitudNovedad.snoEstadoSolicitud = 'CERRADA' AND
			  solResultadoProceso= 'APROBADA' AND 
			  solicitudGlobal.solTipoTransaccion IN (
														'CAMBIO_GENERO_PERSONAS',
														'CAMBIO_FECHA_NACIMIENTO_PERSONA_DEPWEB',
														'CAMBIO_FECHA_NACIMIENTO_PERSONA_PRESENCIAL',
														'CAMBIO_FECHA_NACIMIENTO_PERSONA_WEB',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS',
														
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB',
														'CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS'
													)
  --UNION
  INSERT INTO #Reporte14
	------ahora los beneficiario c01
	 SELECT DISTINCT
						----------  Tipo de Registro  ----------
						2 AS [Tipo de registro],

						---------- Codigo Caja  ----------
						(
							SELECT cnsValor 
							  FROM Constante 
							 WHERE cnsNombre = 'CAJA_COMPENSACION_CODIGO'
						) AS [CÃ³digo caja de compensaciÃ³n familiar],

						----------  Tipo de IdentificaciÃ³n Afiliado  ----------
						CASE   auditoriaAfiliadoPersona.perTipoIdentificacion  
							WHEN 'CEDULA_CIUDADANIA' THEN 'CC'
							WHEN 'REGISTRO_CIVIL' THEN 'RC'
							WHEN 'TARJETA_IDENTIDAD' THEN 'TI'
							WHEN 'CEDULA_EXTRANJERIA' THEN 'CE'
							WHEN 'PASAPORTE' THEN 'PA'
							WHEN 'CARNE_DIPLOMATICO' THEN 'CD'
							WHEN 'PERM_PROT_TEMPORAL' THEN 'PT'
							WHEN 'PERM_ESP_PERMANENCIA' THEN 'PE'
							WHEN 'NIT' THEN 'NI'
							WHEN 'SALVOCONDUCTO' THEN 'SC'
						END AS [Tipo de identificaciÃ³n del afiliado],
	
						----------  Numero de Identificacion Afiliado  ----------
						 auditoriaAfiliadoPersona.perNumeroIdentificacion  
						AS [NÃºmero de identificaciÃ³n del afiliado],
						---------- Primer Apellido  ----------
						 auditoriaAfiliadoPersona.perPrimerApellido  AS [Primer Apellido],
						----------  Segundo Apellido  ----------
						 auditoriaAfiliadoPersona.perSegundoApellido  AS [Segundo Apellido],
						----------  Primer Nombre  ----------
						 auditoriaAfiliadoPersona.perPrimerNombre AS [Primer Nombre],
						----------  Segundo Nombre  ----------
						 auditoriaAfiliadoPersona.perSegundoNombre  AS [Segundo Nombre],
						----------  Codigo Novedad  ----------
					   'C01'   AS [CÃ³digo de la novedad],
					--	solicitudGlobal.solTipoTransaccion,solicitudGlobal.solnumeroradicacion ,
 						
						CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_GENERO_PERSONAS')
						    	THEN 
								CASE WHEN personaAfiliadoDetalle.pedGenero  = 'FEMENINO' THEN 'F'
									 WHEN personaAfiliadoDetalle.pedGenero  = 'MASCULINO' THEN 'M'
									 WHEN personaAfiliadoDetalle.pedGenero  = 'INDEFINIDO' THEN 'I'
									 ELSE NULL
								END
								ELSE NULL END AS [CÃ³digo gÃ©nero],
						CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_FECHA_NACIMIENTO_PERSONA_DEPWEB',
														'CAMBIO_FECHA_NACIMIENTO_PERSONA_PRESENCIAL',
														'CAMBIO_FECHA_NACIMIENTO_PERSONA_WEB')
						THEN CONVERT(VARCHAR,personaAfiliadoDetalle.pedFechaNacimiento,23) ELSE NULL END AS [Fecha de nacimiento],

						CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_NOMBRE_APELLIDOS_PERSONAS',
																		'CAMBIO_NOMBRE_APELLIDOS_PERSONAS',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB')
						      AND ISNULL(personaAfiliado.perPrimerApellido,'') <> ISNULL(auditoriaAfiliadoPersona.perPrimerApellido,'')
						THEN personaAfiliado.perPrimerApellido ELSE NULL END AS [Primer Apellido],

				   CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_NOMBRE_APELLIDOS_PERSONAS',	
				   													'CAMBIO_NOMBRE_APELLIDOS_PERSONAS',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB')
					     AND ISNULL(personaAfiliado.perSegundoApellido,'') <> ISNULL(auditoriaAfiliadoPersona.perSegundoApellido,'')
						THEN personaAfiliado.perSegundoApellido ELSE NULL END AS [Segundo Apellido],

				   CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_NOMBRE_APELLIDOS_PERSONAS',	
				   													'CAMBIO_NOMBRE_APELLIDOS_PERSONAS',
																	'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB',
																	'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB')
						 AND ISNULL(personaAfiliado.perPrimerNombre,'') <> ISNULL(auditoriaAfiliadoPersona.perPrimerNombre,'')
						THEN personaAfiliado.perPrimerNombre ELSE NULL END AS [Primer Nombre],

					  CASE WHEN  solicitudGlobal.solTipoTransaccion IN ('CAMBIO_NOMBRE_APELLIDOS_PERSONAS',		
					  												'CAMBIO_NOMBRE_APELLIDOS_PERSONAS',
																		'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB',
																		'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB')
						    AND ISNULL(personaAfiliado.perSegundoNombre,'') <> ISNULL(auditoriaAfiliadoPersona.perSegundoNombre,'')
						THEN personaAfiliado.perSegundoNombre ELSE NULL END AS [Segundo Nombre],

					 CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS')					 
						  THEN departamentoAfiliado.depCodigo ELSE NULL END AS [Departamento residencia],
					 CASE WHEN solicitudGlobal.solTipoTransaccion IN ('CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS')
						  THEN right(municipioAfiliado.munCodigo,3) ELSE NULL END AS [Municipio residencia],
 
					NULL,NULL	
		 FROM  
	----------  Se obtiene la informacion de la solicitud con respecto a las novedades  ---------
			  SolicitudNovedadPersona AS solicitudPersonaNovedad 
	LEFT JOIN SolicitudNovedad AS solicitudNovedad 
	       ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId  
		    AND snpBeneficiario IS NOT NULL ---SOLO AFILIADOS 
	LEFT JOIN Solicitud AS solicitudGlobal ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
	----------  Se obtienen los datos personal Beneficiario    ----------

	INNER JOIN Beneficiario AS beneficiario 
		    ON benid = snpBeneficiario

	INNER JOIN Persona AS personaAfiliado 
	        ON beneficiario.benPersona = personaAfiliado.perId
	INNER JOIN #HomologacioTiposIdent htidafi 
	        ON tipoid = personaAfiliado.pertipoidentificacion 
	 LEFT JOIN Ubicacion AS ubicacionAfiliado 
	        ON ubicacionAfiliado.ubiId = personaAfiliado.perUbicacionPrincipal
	 LEFT JOIN Municipio AS municipioAfiliado 
	        ON municipioAfiliado.munId = ubicacionAfiliado.ubiMunicipio
	 LEFT JOIN Departamento AS departamentoAfiliado 
	        ON departamentoAfiliado.depId = municipioAfiliado.munDepartamento
	INNER JOIN PersonaDetalle AS personaAfiliadoDetalle 
	        ON personaAfiliado.perId = personaAfiliadoDetalle.pedPersona

	---------- AUDITORIA
	LEFT JOIN #NovedadesSubsidios_AUD2 AS auditoriaAfiliadoPersona 
		   ON auditoriaAfiliadoPersona.perId = personaAfiliado.perId
		  AND auditoriaAfiliadoPersona.REVTYPE= 0

		WHERE --personaAfiliado.perNumeroIdentificacion = '30391450' and ---prueba 20230302
	          beneficiario.benEstadoBeneficiarioAfiliado  IN ('ACTIVO','INACTIVO') AND---SOLICITADO POR LA CAJA 20230413
			  convert(date,solicitudGlobal.solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal AND
			  solicitudNovedad.snoEstadoSolicitud = 'CERRADA' AND
			  solResultadoProceso= 'APROBADA' AND 
			  solicitudGlobal.solTipoTransaccion IN (
														'CAMBIO_GENERO_PERSONAS',
														'CAMBIO_FECHA_NACIMIENTO_PERSONA_DEPWEB',
														'CAMBIO_FECHA_NACIMIENTO_PERSONA_PRESENCIAL',
														'CAMBIO_FECHA_NACIMIENTO_PERSONA_WEB',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_DEPWEB',
														'CAMBIO_NOMBRE_APELLIDOS_PERSONAS_WEB' ,
														'CAMBIO_DATOS_CORRESPONDENCIA_PERSONAS'
													)


--UNION

------C02

INSERT INTO #Reporte14
	  	  SELECT DISTINCT
						----------  Tipo de Registro  ----------
						2 AS [Tipo de registro],

						---------- Codigo Caja  ----------
						(
							SELECT cnsValor 
							  FROM Constante 
							 WHERE cnsNombre = 'CAJA_COMPENSACION_CODIGO'
						) AS [CÃ³digo caja de compensaciÃ³n familiar],

						----------  Tipo de IdentificaciÃ³n Afiliado  ----------
						CASE  auditoriaAfiliadoPersona.perTipoIdentificacion  
							WHEN 'CEDULA_CIUDADANIA' THEN 'CC'
							WHEN 'REGISTRO_CIVIL' THEN 'RC'
							WHEN 'TARJETA_IDENTIDAD' THEN 'TI'
							WHEN 'CEDULA_EXTRANJERIA' THEN 'CE'
							WHEN 'PASAPORTE' THEN 'PA'
							WHEN 'CARNE_DIPLOMATICO' THEN 'CD'
							WHEN 'PERM_PROT_TEMPORAL' THEN 'PT'
							WHEN 'PERM_ESP_PERMANENCIA' THEN 'PE'
							WHEN 'NIT' THEN 'NI'
							WHEN 'SALVOCONDUCTO' THEN 'SC'
						END AS [Tipo de identificaciÃ³n del afiliado],
	
						----------  Numero de Identificacion Afiliado  ----------
						auditoriaAfiliadoPersona.perNumeroIdentificacion  
						AS [NÃºmero de identificaciÃ³n del afiliado],
						---------- Primer Apellido  ----------
						auditoriaAfiliadoPersona.perPrimerApellido  AS [Primer Apellido],
						----------  Segundo Apellido  ----------
						auditoriaAfiliadoPersona.perSegundoApellido AS [Segundo Apellido],
						----------  Primer Nombre  ----------
						auditoriaAfiliadoPersona.perPrimerNombre  AS [Primer Nombre],
						----------  Segundo Nombre  ----------
						 auditoriaAfiliadoPersona.perSegundoNombre  AS [Segundo Nombre],
						----------  Codigo Novedad  ----------
						
						 'C02'   AS [CÃ³digo de la novedad],
					--	solicitudGlobal.solTipoTransaccion,solicitudGlobal.solnumeroradicacion ,
						CASE WHEN solicitudGlobal.solTipoTransaccion IN (
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB',
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL',
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB',
																			'CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS'
																			
																		  )
							  AND auditoriaAfiliadoPersona.perTipoIdentificacion <> personaAfiliado.pertipoidentificacion
					         THEN htidafi.tipoidhom ELSE NULL END AS [Tipo de identificaciÃ³n del afiliado] ,
						CASE WHEN solicitudGlobal.solTipoTransaccion IN (
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB',
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL',
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB',
																			'CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS' 
																			 
																		  )
							 AND auditoriaAfiliadoPersona.pernumeroidentificacion <> personaAfiliado.pernumeroidentificacion
					    THEN personaAfiliado.pernumeroidentificacion ELSE NULL END AS [NÃºmero de identificaciÃ³n del afiliado],
						
					NULL AS [CÃ³digo gÃ©nero],
					NULL AS [Fecha de nacimiento],
					NULL AS [Primer Apellido],
					NULL AS [Segundo Apellido],
                    NULL AS [Primer Nombre],
                    NULL AS [Segundo Nombre],
					NULL AS [Departamento residencia],
					NULL AS [Municipio residencia]
   
		 FROM  
	----------  Se obtiene la informacion de la solicitud con respecto a las novedades  ---------
			  SolicitudNovedadPersona AS solicitudPersonaNovedad 
	LEFT JOIN SolicitudNovedad AS solicitudNovedad 
	       ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId  
		    AND snpBeneficiario IS NULL ---SOLO AFILIADOS 
	LEFT JOIN Solicitud AS solicitudGlobal ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
	----------  Se obtienen los datos personales del afiliado principal  ----------
	INNER JOIN Afiliado AS afiliado 
	        ON afiliado.afiPersona = solicitudPersonaNovedad.snpPersona
	INNER JOIN RolAfiliado AS rolAfiliado 
		    ON rolAfiliado.roaAfiliado = afiliado.afiId
					   AND ( rolAfiliado.roaId = solicitudPersonaNovedad.snpRolAfiliado 
		        OR solicitudPersonaNovedad.snpRolAfiliado IS NULL)
	INNER JOIN Persona AS personaAfiliado 
	        ON afiliado.afiPersona = personaAfiliado.perId
			AND personaAfiliado.perid = snpPersona---esto para las personas no beneficiarios
	INNER JOIN #HomologacioTiposIdent htidafi 
	        ON tipoid = personaAfiliado.pertipoidentificacion 
	 LEFT JOIN Ubicacion AS ubicacionAfiliado 
	        ON ubicacionAfiliado.ubiId = personaAfiliado.perUbicacionPrincipal
	 LEFT JOIN Municipio AS municipioAfiliado 
	        ON municipioAfiliado.munId = ubicacionAfiliado.ubiMunicipio
	 LEFT JOIN Departamento AS departamentoAfiliado 
	        ON departamentoAfiliado.depId = municipioAfiliado.munDepartamento
	INNER JOIN PersonaDetalle AS personaAfiliadoDetalle 
	        ON personaAfiliado.perId = personaAfiliadoDetalle.pedPersona

	---------- AUDITORIA
	LEFT JOIN #NovedadesSubsidios_AUD2 AS auditoriaAfiliadoPersona 
		   ON auditoriaAfiliadoPersona.perId = personaAfiliado.perId
		  AND auditoriaAfiliadoPersona.REVTYPE= 0

		WHERE --personaAfiliado.perNumeroIdentificacion = '30391450' and ---prueba 20230302
	          rolAfiliado.roaEstadoAfiliado  IN ('ACTIVO','INACTIVO') AND
			  convert(date,solicitudGlobal.solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal AND
			  solicitudNovedad.snoEstadoSolicitud = 'CERRADA' AND
			  solResultadoProceso= 'APROBADA' AND 
			  solicitudGlobal.solTipoTransaccion IN (
													'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB',
													'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL',
													'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB',
													'CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS' 
													)
 
 --	 UNION

 INSERT INTO #Reporte14
	SELECT DISTINCT
						----------  Tipo de Registro  ----------
						2 AS [Tipo de registro],

						---------- Codigo Caja  ----------
						(
							SELECT cnsValor 
							  FROM Constante 
							 WHERE cnsNombre = 'CAJA_COMPENSACION_CODIGO'
						) AS [CÃ³digo caja de compensaciÃ³n familiar],

						----------  Tipo de IdentificaciÃ³n Afiliado  ----------
						CASE  ISNULL(auditoriaAfiliadoPersona.perTipoIdentificacion , personaAfiliado.pertipoidentificacion)
							WHEN 'CEDULA_CIUDADANIA' THEN 'CC'
							WHEN 'REGISTRO_CIVIL' THEN 'RC'
							WHEN 'TARJETA_IDENTIDAD' THEN 'TI'
							WHEN 'CEDULA_EXTRANJERIA' THEN 'CE'
							WHEN 'PASAPORTE' THEN 'PA'
							WHEN 'CARNE_DIPLOMATICO' THEN 'CD'
							WHEN 'PERM_PROT_TEMPORAL' THEN 'PT'
							WHEN 'PERM_ESP_PERMANENCIA' THEN 'PE'
							WHEN 'NIT' THEN 'NI'
							WHEN 'SALVOCONDUCTO' THEN 'SC'
						END AS [Tipo de identificaciÃ³n del afiliado],
	
						----------  Numero de Identificacion Afiliado  ----------
						ISNULL(auditoriaAfiliadoPersona.perNumeroIdentificacion, personaAfiliado.perNumeroIdentificacion) 
						AS [NÃºmero de identificaciÃ³n del afiliado],
						---------- Primer Apellido  ----------
						ISNULL(auditoriaAfiliadoPersona.perPrimerApellido, personaAfiliado.perPrimerApellido) AS [Primer Apellido],
						----------  Segundo Apellido  ----------
						ISNULL(auditoriaAfiliadoPersona.perSegundoApellido, personaAfiliado.perSegundoApellido) AS [Segundo Apellido],
						----------  Primer Nombre  ----------
						ISNULL(auditoriaAfiliadoPersona.perPrimerNombre, personaAfiliado.perPrimerNombre) AS [Primer Nombre],
						----------  Segundo Nombre  ----------
						ISNULL(auditoriaAfiliadoPersona.perSegundoNombre, personaAfiliado.perSegundoNombre) AS [Segundo Nombre],
						----------  Codigo Novedad  ----------						
						 'C03'   AS [CÃ³digo de la novedad],
						CASE WHEN rolAfiliado.roaFechaAfiliacion BETWEEN @fechaInicio AND @fechaFinal 
						     THEN rolAfiliado.roaFechaAfiliacion 
							 ELSE NULL END AS [Fecha de afiliaciÃ³n],--PORQUE LAS NOVEDADES SOLO AFECTAN EL TIPO DE AFILIADO NO LA FECHA CAMBIO 20230810 CUANDO COINCIDE CON INGRESO
						CASE WHEN solicitudGlobal.solTipoTransaccion IN ( 'CAMBIO_TIPO_INDEPENDIENTE_SEGUN_VALOR_APORTES_PRESENCIAL')
						 AND rolAfiliado.roaTipoAfiliado = 'TRABAJADOR_INDEPENDIENTE' 
						 AND safil.solclasificacion = 'TRABAJADOR_INDEPENDIENTE_2_POR_CIENTO'
						THEN '2'
						WHEN solicitudGlobal.solTipoTransaccion IN ( 'CAMBIO_TIPO_INDEPENDIENTE_SEGUN_VALOR_APORTES_PRESENCIAL')
						 AND rolAfiliado.roaTipoAfiliado = 'TRABAJADOR_INDEPENDIENTE' 
						 AND safil.solclasificacion = 'TRABAJADOR_INDEPENDIENTE_0_6_POR_CIENTO'
						THEN '4'
						WHEN solicitudGlobal.solTipoTransaccion IN ( 'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_0_6_PRESENCIAL',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_0_6_WEB',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_2_PRESENCIAL',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_2_WEB',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_6_PRESENCIAL',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_6_WEB',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_PRESENCIAL',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_WEB',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_2_PRESENCIAL',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_2_WEB')
					  AND rolAfiliado.roaTipoAfiliado = 'PENSIONADO' 
					  and safil.solclasificacion NOT IN ( 'FIDELIDAD_25_ANIOS')
					THEN '3'

					WHEN safil.solclasificacion  IN ( 'FIDELIDAD_25_ANIOS')
					 AND rolAfiliado.roaTipoAfiliado = 'PENSIONADO' 
					THEN '6'
					ELSE NULL END AS [CÃ³digo tipo de afiliado],
	--					--1 - Trabajador afiliado dependiente
	--					--2 - Trabajador afiliado facultativo
	--					--3 - Afiliado pensionado
	--					--4 - Afiliado voluntario
	--					--5 - Afiliado con exenciÃ³n
	--					--6 - Afiliado por fidelidad	 	
	 				CASE  personaAfiliado.pertipoidentificacion
							WHEN 'CEDULA_CIUDADANIA' THEN 'CC'
							WHEN 'REGISTRO_CIVIL' THEN 'RC'
						    WHEN 'TARJETA_IDENTIDAD' THEN 'TI'
							WHEN 'CEDULA_EXTRANJERIA' THEN 'CE'
							WHEN 'PASAPORTE' THEN 'PA'
							WHEN 'CARNE_DIPLOMATICO' THEN 'CD'
							WHEN 'PERM_PROT_TEMPORAL' THEN 'PT'
							WHEN 'PERM_ESP_PERMANENCIA' THEN 'PE'
							WHEN 'NIT' THEN 'NI'
							WHEN 'SALVOCONDUCTO' THEN 'SC'
					END AS [Tipo de identificaciÃ³n del aportante], 
		  ----------  Variable 15 - Numero Identificacion Aportante  C03
				     personaAfiliado.perNumeroIdentificacion AS [NÃºmero de identificaciÃ³n delaportante],
         ----------  Variable 16 - Digito Verificacion Aportante C03
					CONVERT(VARCHAR, ISNULL(personaAportante.perDigitoVerificacion,personaafiliado.perDigitoVerificacion)) AS [DÃ­gito de verificaciÃ³n del aportante],
		 ----------  Variable 17 - Razon Social Aportante C03  ----------
	 	CASE 
			WHEN (
				aporteAfiliado.apgPersona IS NOT NULL	 
				) THEN CONCAT(personaAfiliado.perPrimerNombre,' ',personaAfiliado.perSegundoNombre, ' ', personaAfiliado.perPrimerApellido, ' ',personaAfiliado.perSegundoApellido)
			WHEN (
				aporteAfiliado.apgPersona IS NULL ) THEN personaAportante.perRazonSocial
			ELSE NULL
		END AS [RazÃ³n social del aportante],
	 ----------  Variable 18 - Fecha Afiliacion Aportante C03  ----------
	 CASE WHEN rolAfiliado.roafechaingreso BETWEEN @fechaInicio AND @fechaFinal 
	THEN rolAfiliado.roafechaingreso 
	ELSE NULL END----cambio 20230810 por el caso especial que hay ingreso al mismo tiempo
	  AS [Fecha de vinculaciÃ³n con el aportante],
	----------  Variable 19 - Codigo Departamento Aportante C03  ----------
	 depEmpAportanteAfiCore.depCodigo AS [Departamento de la ubicaciÃ³n laboral],

	------------  Variable 20 - Codigo Municipio Aportante C03  ----------
	RIGHT(munEmpAportanteAfiCore.munCodigo,3) AS [Municipio de la ubicaciÃ³n laboral],

	------------  Variable 23 - Tipo Miembro Poblacion Cubierta C03   ----------
	'1'  AS [CÃ³digo tipo de miembro de la poblaciÃ³n cubierta] 
 
		FROM  
	----------  Se obtiene la informacion de la solicitud con respecto a las novedades  ---------
			  SolicitudNovedadPersona AS solicitudPersonaNovedad 
	LEFT JOIN SolicitudNovedad AS solicitudNovedad 
	       ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId  
		  AND snpBeneficiario IS NULL ---SOLO AFILIADOS 
	LEFT JOIN Solicitud AS solicitudGlobal ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
	----------Se obtienen los datos personales del afiliado principal  ----------
	INNER JOIN Afiliado AS afiliado 
	        ON afiliado.afiPersona = solicitudPersonaNovedad.snpPersona
	INNER JOIN RolAfiliado AS rolAfiliado 
		    ON rolAfiliado.roaAfiliado = afiliado.afiId
		   AND ( rolAfiliado.roaId = solicitudPersonaNovedad.snpRolAfiliado )
	INNER JOIN Persona AS personaAfiliado 
	        ON afiliado.afiPersona = personaAfiliado.perId
		   AND personaAfiliado.perid = snpPersona---esto para las personas no beneficiarios
	INNER JOIN SolicitudAfiliacionPersona solafilper on sapRolAfiliado= roaid 
	INNER JOIN solicitud safil on safil.solid = sapSolicitudGlobal
	INNER JOIN #HomologacioTiposIdent htidafi 
	        ON tipoid = personaAfiliado.pertipoidentificacion 
	 LEFT JOIN Ubicacion AS ubicacionAfiliado 
	        ON ubicacionAfiliado.ubiId = personaAfiliado.perUbicacionPrincipal
	 LEFT JOIN Municipio AS municipioAfiliado 
	        ON municipioAfiliado.munId = ubicacionAfiliado.ubiMunicipio
	 LEFT JOIN Departamento AS departamentoAfiliado 
	        ON departamentoAfiliado.depId = municipioAfiliado.munDepartamento
	INNER JOIN PersonaDetalle AS personaAfiliadoDetalle 
	        ON personaAfiliado.perId = personaAfiliadoDetalle.pedPersona
 --TENGO MIS DUDAS
----------  Se obtiene el rol del empleador o aportante  ----------
	LEFT JOIN (

		SELECT 
				
			CASE 
				WHEN rolAfiliadoAlt.roaEmpleador IS NOT NULL THEN NULL 
				ELSE afiliadoAlt.afiPersona 
			END apgPersona,
					
			empleadorAporte.empEmpresa apgEmpresa,
			MAX(rolAfiliadoAlt.roaFechaAfiliacion) roaFechaAfiliacion,
			MAX(rolAfiliadoAlt.roaFechaRetiro) roaFechaRetiro,
			rolAfiliadoAlt.roaId,
			empleadorAporte.empMotivoDesafiliacion,
			empleadorAporte.empFechaCambioEstadoAfiliacion
		FROM 
			dbo.RolAfiliado AS rolAfiliadoAlt
			LEFT JOIN dbo.Empleador AS empleadorAporte ON empleadorAporte.empId = rolAfiliadoAlt.roaEmpleador
			LEFT JOIN dbo.Afiliado afiliadoAlt ON afiliadoAlt.afiId = rolAfiliadoAlt.roaAfiliado
		GROUP BY
			rolAfiliadoAlt.roaEmpleador,
			afiliadoAlt.afiPersona,
			empleadorAporte.empEmpresa,		 
			rolAfiliadoAlt.roaId,
			empleadorAporte.empMotivoDesafiliacion,
			empleadorAporte.empFechaCambioEstadoAfiliacion
			
	) AS aporteAfiliado ON aporteAfiliado.roaId = rolAfiliado.roaId
	LEFT JOIN dbo.Empresa AS empresaAportante ON empresaAportante.empId = aporteAfiliado.apgEmpresa
	LEFT JOIN dbo.Persona AS personaAportante ON personaAportante.perId = empresaAportante.empPersona
	LEFT JOIN dbo.UbicacionEmpresa ube ON ube.ubeEmpresa = empresaAportante.empId AND ube.ubeTipoUbicacion='UBICACION_PRINCIPAL'
	LEFT JOIN dbo.Ubicacion AS ubiEmpAportanteAfiCore ON ubiEmpAportanteAfiCore.ubiId = ube.ubeUbicacion
	LEFT JOIN dbo.Municipio AS munEmpAportanteAfiCore ON munEmpAportanteAfiCore.munId = ubiEmpAportanteAfiCore.ubiMunicipio
	LEFT JOIN dbo.Departamento AS depEmpAportanteAfiCore ON depEmpAportanteAfiCore.depId = munEmpAportanteAfiCore.munDepartamento
--TENGO MIS DUDAS

	---------- AUDITORIA
	LEFT JOIN #NovedadesSubsidios_AUD2 AS auditoriaAfiliadoPersona 
		   ON auditoriaAfiliadoPersona.perId = personaAfiliado.perId
		  AND auditoriaAfiliadoPersona.REVTYPE= 0

		WHERE 
	          rolAfiliado.roaEstadoAfiliado  IN ('ACTIVO','INACTIVO') AND
			  convert(date,solicitudGlobal.solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal AND
			  solicitudNovedad.snoEstadoSolicitud = 'CERRADA' AND
			  solicitudGlobal.solResultadoProceso= 'APROBADA' AND 
			  solicitudGlobal.solTipoTransaccion IN ( 		 
													'CAMBIO_TIPO_INDEPENDIENTE_SEGUN_VALOR_APORTES_PRESENCIAL',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_0_6_PRESENCIAL',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_0_6_WEB',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_2_PRESENCIAL',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MAYOR_1_5SM_2_WEB',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_6_PRESENCIAL',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_6_WEB',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_PRESENCIAL',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_0_WEB',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_2_PRESENCIAL',
													'CAMBIO_TIPO_PENSIONADO_PENSIONADO_MENOR_1_5SM_2_WEB',
													'CAMBIO_RAZON_SOCIAL_NOMBRE'
													)

----c03 que no tienen novedad como detectar el reingreso con cualquier tipo de perfil

INSERT INTO #Reporte14
SELECT DISTINCT
					----------  Tipo de Registro  ----------
					2 AS [Tipo de registro],

					---------- Codigo Caja  ----------
					(
						SELECT cnsValor 
							FROM Constante 
							WHERE cnsNombre = 'CAJA_COMPENSACION_CODIGO'
					) AS [CÃ³digo caja de compensaciÃ³n familiar],

					----------  Tipo de IdentificaciÃ³n Afiliado  ----------
					CASE  TipoidTrab
						WHEN 'CEDULA_CIUDADANIA' THEN 'CC'
						WHEN 'REGISTRO_CIVIL' THEN 'RC'
						WHEN 'TARJETA_IDENTIDAD' THEN 'TI'
						WHEN 'CEDULA_EXTRANJERIA' THEN 'CE'
						WHEN 'PASAPORTE' THEN 'PA'
						WHEN 'CARNE_DIPLOMATICO' THEN 'CD'
						WHEN 'PERM_PROT_TEMPORAL' THEN 'PT'
						WHEN 'PERM_ESP_PERMANENCIA' THEN 'PE'
						WHEN 'NIT' THEN 'NI'
						WHEN 'SALVOCONDUCTO' THEN 'SC'
					END AS [Tipo de identificaciÃ³n del afiliado],
	
					----------  Numero de Identificacion Afiliado  ----------
					IdTrab AS [NÃºmero de identificaciÃ³n del afiliado],
					---------- Primer Apellido  ----------
					perPrimerApellido AS [Primer Apellido],
					----------  Segundo Apellido  ----------
					perSegundoApellido AS [Segundo Apellido],
					----------  Primer Nombre  ----------
					perPrimerNombre AS [Primer Nombre],
					----------  Segundo Nombre  ----------
					perSegundoNombre AS [Segundo Nombre],
					----------  Codigo Novedad  ----------						
				    'C03'   AS [CÃ³digo de la novedad],
					roaFechaAfiliacion AS [Fecha de afiliaciÃ³n],--PORQUE LAS NOVEDADES SOLO AFECTAN EL TIPO DE AFILIADO NO LA FECHA 
			   
			   	   CASE WHEN  roaTipoAfiliado = 'TRABAJADOR_INDEPENDIENTE' 
						 AND solclasificacion = 'TRABAJADOR_INDEPENDIENTE_2_POR_CIENTO'
						THEN '2'
						WHEN  roaTipoAfiliado = 'TRABAJADOR_INDEPENDIENTE' 
						 AND  solclasificacion = 'TRABAJADOR_INDEPENDIENTE_0_6_POR_CIENTO'
						THEN '4'
						WHEN  roaTipoAfiliado = 'PENSIONADO' 
						     AND solclasificacion NOT IN ( 'FIDELIDAD_25_ANIOS')
					    THEN '3'
						
						WHEN solclasificacion  IN ( 'FIDELIDAD_25_ANIOS')
					     AND roaTipoAfiliado = 'PENSIONADO' 
					    THEN '6'
					ELSE 1 END AS [CÃ³digo tipo de afiliado],
	 
	 			CASE ISNULL(tipoideent, TipoidEmp )
						WHEN 'CEDULA_CIUDADANIA' THEN 'CC'
						WHEN 'REGISTRO_CIVIL' THEN 'RC'
						WHEN 'TARJETA_IDENTIDAD' THEN 'TI'
						WHEN 'CEDULA_EXTRANJERIA' THEN 'CE'
						WHEN 'PASAPORTE' THEN 'PA'
						WHEN 'CARNE_DIPLOMATICO' THEN 'CD'
						WHEN 'PERM_PROT_TEMPORAL' THEN 'PT'
						WHEN 'PERM_ESP_PERMANENCIA' THEN 'PE'
						WHEN 'NIT' THEN 'NI'
						WHEN 'SALVOCONDUCTO' THEN 'SC'
				END AS [Tipo de identificaciÃ³n del aportante], 
		----------  Variable 15 - Numero Identificacion Aportante  C03
				    ISNULL(Ident, IdEmp) AS [NÃºmero de identificaciÃ³n delaportante],
        ----------  Variable 16 - Digito Verificacion Aportante C03
					ISNULL(dvent,perdigitoverificacion)  AS [DÃ­gito de verificaciÃ³n del aportante],
		----------  Variable 17 - Razon Social Aportante C03  ----------
	 	            ISNULL(nombreent,perRazonSocial) AS [RazÃ³n social del aportante],
	----------  Variable 18 - Fecha Afiliacion Aportante C03  ----------
	                roaFechaAfiliacion AS [Fecha de vinculaciÃ³n con el aportante],---tengo dudas porque repiten 
			----------  Variable 19 - Codigo Departamento Aportante C03  ----------
				NULL,--	depCodigo AS [Departamento de la ubicaciÃ³n laboral],
			------------  Variable 20 - Codigo Municipio Aportante C03  ----------
				NULL,--	RIGHT(munCodigo,3) AS [Municipio de la ubicaciÃ³n laboral],
			------------  Variable 23 - Tipo Miembro Poblacion Cubierta C03   ----------
					'1'  AS [CÃ³digo tipo de miembro de la poblaciÃ³n cubierta] 
			   FROM  #AfiliacionesC03
		 
 

	------ ----***** C04   Retirar afiliaciÃ³n a compensaciÃ³n familiar
	
 INSERT INTO #Reporte14
	   SELECT DISTINCT
					----------  Tipo de Registro  ----------
					2 AS [Tipo de registro],

					---------- Codigo Caja  ----------
					(
						SELECT cnsValor 
							FROM Constante 
							WHERE cnsNombre = 'CAJA_COMPENSACION_CODIGO'
					) AS [CÃ³digo caja de compensaciÃ³n familiar],

					----------  Tipo de IdentificaciÃ³n Afiliado  ----------
					htidafi.tipoidhom AS [Tipo de identificaciÃ³n del afiliado],
	
					----------  Numero de Identificacion Afiliado  ----------
					personaAfiliado.perNumeroIdentificacion AS [NÃºmero de identificaciÃ³n del afiliado],
					---------- Primer Apellido  ----------
					personaAfiliado.perPrimerApellido AS [Primer Apellido],
					----------  Segundo Apellido  ----------
					personaAfiliado.perSegundoApellido AS [Segundo Apellido],
					----------  Primer Nombre  ----------
					personaAfiliado.perPrimerNombre AS [Primer Nombre],
					----------  Segundo Nombre  ----------
					personaAfiliado.perSegundoNombre AS [Segundo Nombre],
					----------  Codigo Novedad  ----------						
					'C04'   AS [CÃ³digo de la novedad],
		 ----------  Variable 14 - Tipo Identificacion Aportante  C04  ----------
	 			 ISNULL(htidemp.TipoIdHom , htidafi.TipoIdHom) AS [Tipo de identificaciÃ³n del aportante], 
	  ----------  Variable 15 - Numero Identificacion Aportante  C04 ----------
				ISNULL(personaAportante.perNumeroIdentificacion,personaAfiliado.perNumeroIdentificacion) AS [NÃºmero de identificaciÃ³n delaportante],
        ----------  Variable 16 - Digito Verificacion Aportante C04
				personaAportante.perdigitoverificacion  AS [DÃ­gito de verificaciÃ³n del aportante],
	    
		----------  Variable 35 - Fecha desvinculacion con el Aportante C04 ----------
			CASE 
				WHEN rolAfiliado.roaMotivoDesafiliacion IN ('RETIRO_VOLUNTARIO','ENTREGA_DE_INFORMACION_FRAUDULENTA_CCF', 'MAL_USO_DE_SERVICIOS_CCF','OTROS'/* ,'DESAFILIACION_EMPLEADOR'*/)
				---aporteAfiliado.roaFechaRetiro IS NOT NULL
				 AND solicitudGlobal.solTipoTransaccion NOT IN (
																'REPORTE_FALLECIMIENTO_PERSONAS',
																'REPORTE_FALLECIMIENTO_PERSONAS_WEB',
																'REPORTE_FALLECIMIENTO_PERSONAS_DEPWEB' 
																)---ADICIONADO 20230503
				 AND personaAfiliadoDetalle.pedFechaFallecido IS NULL---ADICIONADO 20230503

				THEN FORMAT( rolAfiliado.roaFechaRetiro, 'yyyy-MM-dd' ) 
				ELSE NULL
			END AS  fechaDesvinculacionAportante,
	
	----------  Variable 36 - Fecha Retiro del Afiliado C04  ----------
	 
			CASE 
				WHEN rolAfiliado.roaMotivoDesafiliacion NOT IN ('RETIRO_VOLUNTARIO','ENTREGA_DE_INFORMACION_FRAUDULENTA_CCF', 'MAL_USO_DE_SERVICIOS_CCF','OTROS' ,'FALLECIMIENTO')
				THEN FORMAT( rolAfiliado.roaFechaRetiro, 'yyyy-MM-dd' )  
				ELSE NULL
			END AS fechaRetiroAfiliado,
			--solicitudGlobal.solFechaRadicacion
	----------  Variable 37 - Fecha Fallecimiento C04  ----------
	CASE
		WHEN (
			solicitudGlobal.solTipoTransaccion IN (
				'REPORTE_FALLECIMIENTO_PERSONAS',
				'REPORTE_FALLECIMIENTO_PERSONAS_WEB',
				'REPORTE_FALLECIMIENTO_PERSONAS_DEPWEB' 
			)
			AND personaAfiliadoDetalle.pedFechaFallecido IS NOT NULL
		    )THEN FORMAT( personaAfiliadoDetalle.pedFechaDefuncion, 'yyyy-MM-dd' ) 
		ELSE NULL
	END AS fechaFallecimiento,

	----------  Variable 58 - Causal de Retiro C04 ----------
	CASE
		---1. DESVINCULACION DEL TRABAJADOR CON APORTANTE
		WHEN 
			(
				solicitudGlobal.solTipoTransaccion IN (
					'RETIRO_TRABAJADOR_DEPENDIENTE',
					'RETIRO_TRABAJADOR_INDEPENDIENTE',
					'RETIRO_PENSIONADO_MAYOR_1_5SM_2',
					'RETIRO_PENSIONADO_25ANIOS',
					'RETIRO_PENSIONADO_MAYOR_1_5SM_0_6',
					'RETIRO_PENSIONADO_MENOR_1_5SM_0_6',
					'RETIRO_PENSIONADO_MENOR_1_5SM_2',
					'RETIRO_PENSIONADO_MENOR_1_5SM_0'
				)	

				AND (
						rolAfiliado.roaMotivoDesafiliacion 
						IN ( 'RETIRO_VOLUNTARIO' , 'ENTREGA_DE_INFORMACION_FRAUDULENTA_CCF',
							 'MAL_USO_DE_SERVICIOS_CCF','OTROS')	 -------20230222 EL MOTIVO OTROS ES DE MIGRACIÃN
					 )
			)
		THEN 1

		---2. POR FALLECIMIENTO
		WHEN 
			(
				solicitudGlobal.solTipoTransaccion IN (
					'REPORTE_FALLECIMIENTO_PERSONAS',
					'REPORTE_FALLECIMIENTO_PERSONAS_WEB',
					'REPORTE_FALLECIMIENTO_PERSONAS_DEPWEB'
				)
			)
			--AND ( rolAfiliado.roaMotivoDesafiliacion = 'FALLECIMIENTO' ) MODIFICADO 20230503
		THEN 2
		---3. TRASLADO APORTANTE A OTRA CCF
		WHEN 
			solicitudGlobal.solTipoTransaccion IN (
					'RETIRO_TRABAJADOR_DEPENDIENTE',
					'RETIRO_TRABAJADOR_INDEPENDIENTE',
					'RETIRO_PENSIONADO_MAYOR_1_5SM_2',
					'RETIRO_PENSIONADO_25ANIOS',
					'RETIRO_PENSIONADO_MAYOR_1_5SM_0_6',
					'RETIRO_PENSIONADO_MENOR_1_5SM_0_6',
					'RETIRO_PENSIONADO_MENOR_1_5SM_2',
					'RETIRO_PENSIONADO_MENOR_1_5SM_0'
													)
			AND (
				rolAfiliado.roaMotivoDesafiliacion = 'RETIRO_POR_CAMBIO_DE_CAJA_COMPENSACION' 
				OR aporteAfiliado.empMotivoDesafiliacion = 'RETIRO_POR_TRASLADO_OTRA_CCF' 
			)
		THEN 3
		---4.TRASLADO POR CONTRATO DE CESION
		---5.POR MULTIAFILIACION DEL APORTANTE
		WHEN 
			solicitudGlobal.solTipoTransaccion IN (
				'RETIRO_TRABAJADOR_DEPENDIENTE',
				'RETIRO_TRABAJADOR_INDEPENDIENTE',
				'RETIRO_PENSIONADO_MAYOR_1_5SM_2',
				'RETIRO_PENSIONADO_25ANIOS',
				'RETIRO_PENSIONADO_MAYOR_1_5SM_0_6',
				'RETIRO_PENSIONADO_MENOR_1_5SM_0_6',
				'RETIRO_PENSIONADO_MENOR_1_5SM_2',
				'RETIRO_PENSIONADO_MENOR_1_5SM_0'
			) AND (
				rolAfiliado.roaMotivoDesafiliacion = 'MULTIAFILIACION' 	 
			)
		THEN 5
		---6. POR SUSTITUCION DE LA EMPRESA
		WHEN 
			solicitudGlobal.solTipoTransaccion IN (
					'RETIRO_TRABAJADOR_DEPENDIENTE',
					'RETIRO_TRABAJADOR_INDEPENDIENTE'
			) 
			--AND solicitudGlobal.solTipoTransaccion = 'SUSTITUCION_PATRONAL' CAMBIO OLGA VEGA 20230222
			AND rolAfiliado.roaMotivoDesafiliacion = 'SUSTITUCION_PATRONAL' 	 
			
		THEN 6

		---7. POR FUSION DE LA EMPRESA
		WHEN 
			 solicitudGlobal.solTipoTransaccion IN (
				    'RETIRO_TRABAJADOR_DEPENDIENTE',
					'RETIRO_TRABAJADOR_INDEPENDIENTE')
		 AND aporteAfiliado.empMotivoDesafiliacion = 'FUSION_ADQUISICION'		
		THEN 7
		
		---8. POR LIQUIDACION DE LA EMPRESA -- LIQUIDACION_EMPRESA
		WHEN 
			solicitudGlobal.solTipoTransaccion IN (
				'RETIRO_TRABAJADOR_DEPENDIENTE',
				'RETIRO_TRABAJADOR_INDEPENDIENTE'
			)
			AND ( aporteAfiliado.empMotivoDesafiliacion = 'DESAFILIACION_EMPLEADOR' ---cambio por olga vega 20230222 autorizado por adriana cortes 	
			 OR rolAfiliado.roaMotivoDesafiliacion IN ('DESAFILIACION_EMPLEADOR')
			 )
		THEN 8
		---9 - Por sustituciÃ³n de la administradora
		--10 - Por fusiÃ³n de la administradora
		--11 - Por liquidaciÃ³n de la administradora
		WHEN 
			solicitudGlobal.solTipoTransaccion IN (
					'RETIRO_TRABAJADOR_DEPENDIENTE',
					'RETIRO_TRABAJADOR_INDEPENDIENTE',
					'RETIRO_PENSIONADO_MAYOR_1_5SM_2',
					'RETIRO_PENSIONADO_25ANIOS',
					'RETIRO_PENSIONADO_MAYOR_1_5SM_0_6',
					'RETIRO_PENSIONADO_MENOR_1_5SM_0_6',
					'RETIRO_PENSIONADO_MENOR_1_5SM_2',
					'RETIRO_PENSIONADO_MENOR_1_5SM_0'
													)
			AND (
				rolAfiliado.roaMotivoDesafiliacion in ( 'PENSIONADO_SIN_CAPACIDAD' , 'RETIRO_POR_MORA_APORTES')			 
			)
		THEN 11
		--12- Por inclusiÃ³n errÃ³nea AFILIACION_ANULADA
		WHEN (aporteAfiliado.empMotivoDesafiliacion = 'AFILIACION_ANULADA' OR roaMotivoDesafiliacion = 'AFILIACION_ANULADA')---cambio 20230503
		     
		THEN 12

		--30- Otra causa de retiro
 
		ELSE NULL

		END AS  causalRetiro,
		NULL,
		NULL,
		NULL
		 FROM  
	----------  Se obtiene la informacion de la solicitud con respecto a las novedades  ---------
			  SolicitudNovedadPersona AS solicitudPersonaNovedad 
	LEFT JOIN SolicitudNovedad AS solicitudNovedad 
	       ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId  
		    AND snpBeneficiario IS NULL ---SOLO AFILIADOS 
	LEFT JOIN Solicitud AS solicitudGlobal ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
	----------  Se obtienen los datos personales del afiliado principal  ----------
	INNER JOIN Afiliado AS afiliado 
	        ON afiliado.afiPersona = solicitudPersonaNovedad.snpPersona
	INNER JOIN RolAfiliado AS rolAfiliado 
		    ON rolAfiliado.roaAfiliado = afiliado.afiId
		   AND ( rolAfiliado.roaId = solicitudPersonaNovedad.snpRolAfiliado 
		        OR solicitudPersonaNovedad.snpRolAfiliado IS NULL)
	INNER JOIN Persona AS personaAfiliado 
	        ON afiliado.afiPersona = personaAfiliado.perId
		   AND personaAfiliado.perid = snpPersona---esto para las personas no beneficiarios
	INNER JOIN #HomologacioTiposIdent htidafi 
	        ON tipoid = personaAfiliado.pertipoidentificacion 
	 LEFT JOIN Ubicacion AS ubicacionAfiliado 
	        ON ubicacionAfiliado.ubiId = personaAfiliado.perUbicacionPrincipal
	 LEFT JOIN Municipio AS municipioAfiliado 
	        ON municipioAfiliado.munId = ubicacionAfiliado.ubiMunicipio
	 LEFT JOIN Departamento AS departamentoAfiliado 
	        ON departamentoAfiliado.depId = municipioAfiliado.munDepartamento
	INNER JOIN dbo.PersonaDetalle AS personaAfiliadoDetalle 
	        ON personaAfiliado.perId = personaAfiliadoDetalle.pedPersona

	---------- AUDITORIA
	LEFT JOIN #NovedadesSubsidios_AUD2 AS auditoriaAfiliadoPersona 
		   ON auditoriaAfiliadoPersona.perId = personaAfiliado.perId
		  AND auditoriaAfiliadoPersona.REVTYPE= 0
		
	----------  Se obtiene el rol del empleador o aportante  ----------
	LEFT JOIN (

		SELECT  
			CASE 
				WHEN rolAfiliadoAlt.roaEmpleador IS NOT NULL THEN NULL 
				ELSE afiliadoAlt.afiPersona 
			END apgPersona,		
				empleadorAporte.empEmpresa apgEmpresa,
				roaFechaAfiliacion  ,
				roaFechaRetiro  ,
				roaId,
				empleadorAporte.empMotivoDesafiliacion,
				empleadorAporte.empFechaCambioEstadoAfiliacion
		  FROM RolAfiliado AS rolAfiliadoAlt
	INNER JOIN Empleador AS empleadorAporte 
		    ON empleadorAporte.empId = rolAfiliadoAlt.roaEmpleador
	INNER JOIN Afiliado afiliadoAlt 
			ON afiliadoAlt.afiId = rolAfiliadoAlt.roaAfiliado
		GROUP BY
			rolAfiliadoAlt.roaEmpleador,
			afiliadoAlt.afiPersona,
			empleadorAporte.empEmpresa,
		    rolAfiliadoAlt.roaFechaAfiliacion,rolAfiliadoAlt.roaFechaRetiro,
			rolAfiliadoAlt.roaId,
			empleadorAporte.empMotivoDesafiliacion,
			empleadorAporte.empFechaCambioEstadoAfiliacion
			
	) AS aporteAfiliado ON aporteAfiliado.roaId = rolAfiliado.roaId

	LEFT JOIN dbo.Empresa AS empresaAportante ON empresaAportante.empId = aporteAfiliado.apgEmpresa
	LEFT JOIN dbo.Persona AS personaAportante ON personaAportante.perId = empresaAportante.empPersona
	LEFT JOIN #HomologacioTiposIdent htidemp 
	       ON htidemp.TipoId = personaAportante.pertipoidentificacion
	LEFT JOIN dbo.UbicacionEmpresa ube ON ube.ubeEmpresa = empresaAportante.empId AND ube.ubeTipoUbicacion='UBICACION_PRINCIPAL'
	LEFT JOIN dbo.Ubicacion AS ubiEmpAportanteAfiCore ON ubiEmpAportanteAfiCore.ubiId = ube.ubeUbicacion
	LEFT JOIN dbo.Municipio AS munEmpAportanteAfiCore ON munEmpAportanteAfiCore.munId = ubiEmpAportanteAfiCore.ubiMunicipio
	LEFT JOIN dbo.Departamento AS depEmpAportanteAfiCore ON depEmpAportanteAfiCore.depId = munEmpAportanteAfiCore.munDepartamento

	---------- AUDITORIA
	LEFT JOIN #NovedadesSubsidios_AUD2 AS auditoriaAportantePersona 
		   ON auditoriaAportantePersona.perId = personaAportante.perId 
		  AND auditoriaAportantePersona.REVTYPE= 0

 
WHERE roaestadoafiliado = 'INACTIVO' AND
	  convert(date,solicitudGlobal.solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal AND
	  solicitudNovedad.snoEstadoSolicitud = 'CERRADA' AND
	  solResultadoProceso= 'APROBADA' AND 
	  solicitudGlobal.solTipoTransaccion IN (
											'REPORTE_FALLECIMIENTO_PERSONAS',
											'REPORTE_FALLECIMIENTO_PERSONAS_WEB',
											'REPORTE_FALLECIMIENTO_PERSONAS_DEPWEB',
											'RETIRO_TRABAJADOR_DEPENDIENTE',
											'RETIRO_TRABAJADOR_INDEPENDIENTE',
											'RETIRO_PENSIONADO_MAYOR_1_5SM_2',
											'RETIRO_PENSIONADO_25ANIOS',
											'RETIRO_PENSIONADO_MAYOR_1_5SM_0_6',
											'RETIRO_PENSIONADO_MENOR_1_5SM_0_6',
											'RETIRO_PENSIONADO_MENOR_1_5SM_2',
											'RETIRO_PENSIONADO_MENOR_1_5SM_0'	
										)
	

	 -----adicionar los que se retiran y se afilian por pila el mismo dÃ­a 


	 INSERT INTO #Reporte14
	   SELECT DISTINCT
					----------  Tipo de Registro  ----------
					2 AS [Tipo de registro],

					---------- Codigo Caja  ----------
					(
						SELECT cnsValor 
							FROM Constante 
							WHERE cnsNombre = 'CAJA_COMPENSACION_CODIGO'
					) AS [CÃ³digo caja de compensaciÃ³n familiar],

					----------  Tipo de IdentificaciÃ³n Afiliado  ----------
					htidafi.tipoidhom AS [Tipo de identificaciÃ³n del afiliado],
	
					----------  Numero de Identificacion Afiliado  ----------
					personaAfiliado.perNumeroIdentificacion AS [NÃºmero de identificaciÃ³n del afiliado],
					---------- Primer Apellido  ----------
					personaAfiliado.perPrimerApellido AS [Primer Apellido],
					----------  Segundo Apellido  ----------
					personaAfiliado.perSegundoApellido AS [Segundo Apellido],
					----------  Primer Nombre  ----------
					personaAfiliado.perPrimerNombre AS [Primer Nombre],
					----------  Segundo Nombre  ----------
					personaAfiliado.perSegundoNombre AS [Segundo Nombre],
					----------  Codigo Novedad  ----------						
					'C04'   AS [CÃ³digo de la novedad],
		 ----------  Variable 14 - Tipo Identificacion Aportante  C04  ----------
	 			 ISNULL(htidemp.TipoIdHom , htidafi.TipoIdHom) AS [Tipo de identificaciÃ³n del aportante], 
	  ----------  Variable 15 - Numero Identificacion Aportante  C04 ----------
				ISNULL(personaAportante.perNumeroIdentificacion,personaAfiliado.perNumeroIdentificacion) AS [NÃºmero de identificaciÃ³n delaportante],
        ----------  Variable 16 - Digito Verificacion Aportante C04
				personaAportante.perdigitoverificacion  AS [DÃ­gito de verificaciÃ³n del aportante],
	    
		----------  Variable 35 - Fecha desvinculacion con el Aportante C04 ----------
			CASE 
				WHEN x.roaMotivoDesafiliacion IN ('RETIRO_VOLUNTARIO','ENTREGA_DE_INFORMACION_FRAUDULENTA_CCF', 'MAL_USO_DE_SERVICIOS_CCF','OTROS'/* ,'DESAFILIACION_EMPLEADOR'*/)
				---aporteAfiliado.roaFechaRetiro IS NOT NULL
				 AND solicitudGlobal.solTipoTransaccion NOT IN (
																'REPORTE_FALLECIMIENTO_PERSONAS',
																'REPORTE_FALLECIMIENTO_PERSONAS_WEB',
																'REPORTE_FALLECIMIENTO_PERSONAS_DEPWEB' 
																)---ADICIONADO 20230503
				 AND personaAfiliadoDetalle.pedFechaFallecido IS NULL---ADICIONADO 20230503

				THEN FORMAT( x.roaFechaRetiro, 'yyyy-MM-dd' ) 
				ELSE NULL
			END AS  fechaDesvinculacionAportante,
	
	----------  Variable 36 - Fecha Retiro del Afiliado C04  ----------
	 
			CASE 
				WHEN x.roaMotivoDesafiliacion NOT IN ('RETIRO_VOLUNTARIO','ENTREGA_DE_INFORMACION_FRAUDULENTA_CCF', 'MAL_USO_DE_SERVICIOS_CCF','OTROS' ,'FALLECIMIENTO')
				THEN FORMAT( x.roaFechaRetiro, 'yyyy-MM-dd' )  
				ELSE NULL
			END AS fechaRetiroAfiliado,
			--solicitudGlobal.solFechaRadicacion
	----------  Variable 37 - Fecha Fallecimiento C04  ----------
	  NULL AS fechaFallecimiento,

	----------  Variable 58 - Causal de Retiro C04 ----------
	CASE
		---1. DESVINCULACION DEL TRABAJADOR CON APORTANTE
		WHEN 
			(
				solicitudGlobal.solTipoTransaccion IN (
					'RETIRO_TRABAJADOR_DEPENDIENTE',
					'RETIRO_TRABAJADOR_INDEPENDIENTE',
					'RETIRO_PENSIONADO_MAYOR_1_5SM_2',
					'RETIRO_PENSIONADO_25ANIOS',
					'RETIRO_PENSIONADO_MAYOR_1_5SM_0_6',
					'RETIRO_PENSIONADO_MENOR_1_5SM_0_6',
					'RETIRO_PENSIONADO_MENOR_1_5SM_2',
					'RETIRO_PENSIONADO_MENOR_1_5SM_0'
				)	

				AND (
						x.roaMotivoDesafiliacion 
						IN ( 'RETIRO_VOLUNTARIO' , 'ENTREGA_DE_INFORMACION_FRAUDULENTA_CCF',
							 'MAL_USO_DE_SERVICIOS_CCF','OTROS')	 -------20230222 EL MOTIVO OTROS ES DE MIGRACIÃN
					 )
			)
		THEN 1

		---2. POR FALLECIMIENTO
		WHEN 
			(
				solicitudGlobal.solTipoTransaccion IN (
					'REPORTE_FALLECIMIENTO_PERSONAS',
					'REPORTE_FALLECIMIENTO_PERSONAS_WEB',
					'REPORTE_FALLECIMIENTO_PERSONAS_DEPWEB'
				)
			)
			--AND ( rolAfiliado.roaMotivoDesafiliacion = 'FALLECIMIENTO' ) MODIFICADO 20230503
		THEN 2
		---3. TRASLADO APORTANTE A OTRA CCF
		WHEN 
			solicitudGlobal.solTipoTransaccion IN (
					'RETIRO_TRABAJADOR_DEPENDIENTE',
					'RETIRO_TRABAJADOR_INDEPENDIENTE',
					'RETIRO_PENSIONADO_MAYOR_1_5SM_2',
					'RETIRO_PENSIONADO_25ANIOS',
					'RETIRO_PENSIONADO_MAYOR_1_5SM_0_6',
					'RETIRO_PENSIONADO_MENOR_1_5SM_0_6',
					'RETIRO_PENSIONADO_MENOR_1_5SM_2',
					'RETIRO_PENSIONADO_MENOR_1_5SM_0'
													)
			AND (
				x.roaMotivoDesafiliacion = 'RETIRO_POR_CAMBIO_DE_CAJA_COMPENSACION' 
				OR aporteAfiliado.empMotivoDesafiliacion = 'RETIRO_POR_TRASLADO_OTRA_CCF' 
			)
		THEN 3
		---4.TRASLADO POR CONTRATO DE CESION
		---5.POR MULTIAFILIACION DEL APORTANTE
		WHEN 
			solicitudGlobal.solTipoTransaccion IN (
				'RETIRO_TRABAJADOR_DEPENDIENTE',
				'RETIRO_TRABAJADOR_INDEPENDIENTE',
				'RETIRO_PENSIONADO_MAYOR_1_5SM_2',
				'RETIRO_PENSIONADO_25ANIOS',
				'RETIRO_PENSIONADO_MAYOR_1_5SM_0_6',
				'RETIRO_PENSIONADO_MENOR_1_5SM_0_6',
				'RETIRO_PENSIONADO_MENOR_1_5SM_2',
				'RETIRO_PENSIONADO_MENOR_1_5SM_0'
			) AND (
				x.roaMotivoDesafiliacion = 'MULTIAFILIACION' 	 
			)
		THEN 5
		---6. POR SUSTITUCION DE LA EMPRESA
		WHEN 
			solicitudGlobal.solTipoTransaccion IN (
					'RETIRO_TRABAJADOR_DEPENDIENTE',
					'RETIRO_TRABAJADOR_INDEPENDIENTE'
			) 
			--AND solicitudGlobal.solTipoTransaccion = 'SUSTITUCION_PATRONAL' CAMBIO OLGA VEGA 20230222
			AND x.roaMotivoDesafiliacion = 'SUSTITUCION_PATRONAL' 	 
			
		THEN 6

		---7. POR FUSION DE LA EMPRESA
		WHEN 
			 solicitudGlobal.solTipoTransaccion IN (
				    'RETIRO_TRABAJADOR_DEPENDIENTE',
					'RETIRO_TRABAJADOR_INDEPENDIENTE')
		 AND aporteAfiliado.empMotivoDesafiliacion = 'FUSION_ADQUISICION'		
		THEN 7
		
		---8. POR LIQUIDACION DE LA EMPRESA -- LIQUIDACION_EMPRESA
		WHEN 
			solicitudGlobal.solTipoTransaccion IN (
				'RETIRO_TRABAJADOR_DEPENDIENTE',
				'RETIRO_TRABAJADOR_INDEPENDIENTE'
			)
			AND ( aporteAfiliado.empMotivoDesafiliacion = 'DESAFILIACION_EMPLEADOR' ---cambio por olga vega 20230222 autorizado por adriana cortes 	
			 OR x.roaMotivoDesafiliacion IN ('DESAFILIACION_EMPLEADOR')
			 )
		THEN 8
		---9 - Por sustituciÃ³n de la administradora
		--10 - Por fusiÃ³n de la administradora
		--11 - Por liquidaciÃ³n de la administradora
		WHEN 
			solicitudGlobal.solTipoTransaccion IN (
					'RETIRO_TRABAJADOR_DEPENDIENTE',
					'RETIRO_TRABAJADOR_INDEPENDIENTE',
					'RETIRO_PENSIONADO_MAYOR_1_5SM_2',
					'RETIRO_PENSIONADO_25ANIOS',
					'RETIRO_PENSIONADO_MAYOR_1_5SM_0_6',
					'RETIRO_PENSIONADO_MENOR_1_5SM_0_6',
					'RETIRO_PENSIONADO_MENOR_1_5SM_2',
					'RETIRO_PENSIONADO_MENOR_1_5SM_0'
													)
			AND (
				x.roaMotivoDesafiliacion in ( 'PENSIONADO_SIN_CAPACIDAD' , 'RETIRO_POR_MORA_APORTES')			 
			)
		THEN 11
		--12- Por inclusiÃ³n errÃ³nea AFILIACION_ANULADA
		WHEN (aporteAfiliado.empMotivoDesafiliacion = 'AFILIACION_ANULADA' OR x.roaMotivoDesafiliacion = 'AFILIACION_ANULADA')---cambio 20230503
		     
		THEN 12

		--30- Otra causa de retiro
 
		ELSE NULL

		END AS  causalRetiro,
		NULL,
		NULL,
		NULL
		 FROM  #TrabActInact X
	----------  Se obtiene la informacion de la solicitud con respecto a las novedades  ---------
	INNER JOIN SolicitudNovedadPersona AS solicitudPersonaNovedad 
			ON X.roaId = snpRolAfiliado
	INNER JOIN SolicitudNovedad AS solicitudNovedad 
	       ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId  
		    AND snpBeneficiario IS NULL ---SOLO AFILIADOS 
	INNER JOIN Solicitud AS solicitudGlobal ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
	----------  Se obtienen los datos personales del afiliado principal  ----------
	INNER JOIN Afiliado AS afiliado 
	        ON afiliado.afiPersona = solicitudPersonaNovedad.snpPersona
	INNER JOIN RolAfiliado AS rolAfiliado 
		    ON rolAfiliado.roaAfiliado = afiliado.afiId
		   AND ( rolAfiliado.roaId = solicitudPersonaNovedad.snpRolAfiliado 
		        OR solicitudPersonaNovedad.snpRolAfiliado IS NULL)
	INNER JOIN Persona AS personaAfiliado 
	        ON afiliado.afiPersona = personaAfiliado.perId
		   AND personaAfiliado.perid = snpPersona---esto para las personas no beneficiarios
	INNER JOIN #HomologacioTiposIdent htidafi 
	        ON tipoid = personaAfiliado.pertipoidentificacion 
	 LEFT JOIN Ubicacion AS ubicacionAfiliado 
	        ON ubicacionAfiliado.ubiId = personaAfiliado.perUbicacionPrincipal
	 LEFT JOIN Municipio AS municipioAfiliado 
	        ON municipioAfiliado.munId = ubicacionAfiliado.ubiMunicipio
	 LEFT JOIN Departamento AS departamentoAfiliado 
	        ON departamentoAfiliado.depId = municipioAfiliado.munDepartamento
	INNER JOIN dbo.PersonaDetalle AS personaAfiliadoDetalle 
	        ON personaAfiliado.perId = personaAfiliadoDetalle.pedPersona

	---------- AUDITORIA
	LEFT JOIN #NovedadesSubsidios_AUD2 AS auditoriaAfiliadoPersona 
		   ON auditoriaAfiliadoPersona.perId = personaAfiliado.perId
		  AND auditoriaAfiliadoPersona.REVTYPE= 0
		
	----------  Se obtiene el rol del empleador o aportante  ----------
	LEFT JOIN (

		SELECT  
			CASE 
				WHEN rolAfiliadoAlt.roaEmpleador IS NOT NULL THEN NULL 
				ELSE afiliadoAlt.afiPersona 
			END apgPersona,		
				empleadorAporte.empEmpresa apgEmpresa,
				roaFechaAfiliacion  ,
				roaFechaRetiro  ,
				roaId,
				empleadorAporte.empMotivoDesafiliacion,
				empleadorAporte.empFechaCambioEstadoAfiliacion
		  FROM RolAfiliado AS rolAfiliadoAlt
	INNER JOIN Empleador AS empleadorAporte 
		    ON empleadorAporte.empId = rolAfiliadoAlt.roaEmpleador
	INNER JOIN Afiliado afiliadoAlt 
			ON afiliadoAlt.afiId = rolAfiliadoAlt.roaAfiliado
		GROUP BY
			rolAfiliadoAlt.roaEmpleador,
			afiliadoAlt.afiPersona,
			empleadorAporte.empEmpresa,
		    rolAfiliadoAlt.roaFechaAfiliacion,rolAfiliadoAlt.roaFechaRetiro,
			rolAfiliadoAlt.roaId,
			empleadorAporte.empMotivoDesafiliacion,
			empleadorAporte.empFechaCambioEstadoAfiliacion
			
	) AS aporteAfiliado ON aporteAfiliado.roaId = rolAfiliado.roaId

	LEFT JOIN dbo.Empresa AS empresaAportante ON empresaAportante.empId = aporteAfiliado.apgEmpresa
	LEFT JOIN dbo.Persona AS personaAportante ON personaAportante.perId = empresaAportante.empPersona
	LEFT JOIN #HomologacioTiposIdent htidemp 
	       ON htidemp.TipoId = personaAportante.pertipoidentificacion
	LEFT JOIN dbo.UbicacionEmpresa ube ON ube.ubeEmpresa = empresaAportante.empId AND ube.ubeTipoUbicacion='UBICACION_PRINCIPAL'
	LEFT JOIN dbo.Ubicacion AS ubiEmpAportanteAfiCore ON ubiEmpAportanteAfiCore.ubiId = ube.ubeUbicacion
	LEFT JOIN dbo.Municipio AS munEmpAportanteAfiCore ON munEmpAportanteAfiCore.munId = ubiEmpAportanteAfiCore.ubiMunicipio
	LEFT JOIN dbo.Departamento AS depEmpAportanteAfiCore ON depEmpAportanteAfiCore.depId = munEmpAportanteAfiCore.munDepartamento

	---------- AUDITORIA
	LEFT JOIN #NovedadesSubsidios_AUD2 AS auditoriaAportantePersona 
		   ON auditoriaAportantePersona.perId = personaAportante.perId 
		  AND auditoriaAportantePersona.REVTYPE= 0

 
WHERE roaestadoafiliado = 'ACTIVO' AND
	  convert(date,solicitudGlobal.solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal AND
	  solicitudNovedad.snoEstadoSolicitud = 'CERRADA' AND
	  solResultadoProceso= 'APROBADA' AND 
	 -- solCanalRecepcion = 'PILA' AND PRUEBA 20230811
	  solicitudGlobal.solTipoTransaccion IN (
						 
											'RETIRO_TRABAJADOR_DEPENDIENTE',
											'RETIRO_TRABAJADOR_INDEPENDIENTE',
											'RETIRO_PENSIONADO_MAYOR_1_5SM_2',
											'RETIRO_PENSIONADO_25ANIOS',
											'RETIRO_PENSIONADO_MAYOR_1_5SM_0_6',
											'RETIRO_PENSIONADO_MENOR_1_5SM_0_6',
											'RETIRO_PENSIONADO_MENOR_1_5SM_2',
											'RETIRO_PENSIONADO_MENOR_1_5SM_0'	
										)

	 

---***---
------C07 "Modificar la informaciÃ³n de un miembro de la poblaciÃ³n cubierta de una afiliaciÃ³n a compensaciÃ³n familiar de la
---------base de datos RUAF. Los campos 24 y 25 son obligatorios." 
--11	Fecha de afiliaciÃ³n
--23	CÃ³digo tipo de miembro de la poblaciÃ³n cubierta
--24	Tipo de identificaciÃ³n del miembro de la poblaciÃ³n cubierta
--25	NÃºmero de identificaciÃ³n del miembro de la poblaciÃ³n cubierta
--26	CÃ³digo condiciÃ³n beneficiario
--27	CÃ³digo tipo relaciÃ³n con el afiliado
---los campos 38-39-55 son obligatorios

--***---
 
---- select 'c04',* from #Reporte14 where [CÃ³digo de la novedad] = 'c04'

	INSERT INTO #Reporte14
	 SELECT DISTINCT
						----------  Tipo de Registro  ----------
						2 AS [Tipo de registro],

						---------- Codigo Caja  ----------
						(
							SELECT cnsValor 
							  FROM Constante 
							 WHERE cnsNombre = 'CAJA_COMPENSACION_CODIGO'
						) AS [CÃ³digo caja de compensaciÃ³n familiar],

						----------  Tipo de IdentificaciÃ³n Afiliado  ----------
						htidafi.TipoIdHom AS [Tipo de identificaciÃ³n del afiliado],
	
						----------  Numero de Identificacion Afiliado  ----------
						 personaAfiliado.perNumeroIdentificacion  
						AS [NÃºmero de identificaciÃ³n del afiliado],
						---------- Primer Apellido  ----------
						 personaAfiliado.perPrimerApellido  AS [Primer Apellido],
						----------  Segundo Apellido  ----------
						 personaAfiliado.perSegundoApellido  AS [Segundo Apellido],
						----------  Primer Nombre  ----------
						 personaAfiliado.perPrimerNombre AS [Primer Nombre],
						----------  Segundo Nombre  ----------
						 personaAfiliado.perSegundoNombre  AS [Segundo Nombre],
						----------  Codigo Novedad  ----------
					   'C07'   AS [CÃ³digo de la novedad],
					--	V11_fechaAfiliacion ,
				        
						CASE WHEN solTipoTransaccion IN (
													'ACTUALIZACION_TIPO_UNION_CONYUGE_PRESENCIAL',
													'ACTUALIZACION_TIPO_UNION_CONYUGE_WEB',
													'ACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL',
													'ACTIVAR_BENEFICIARIO_CONYUGE_WEB',
													'ACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB',
													'ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL',
													'ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB',
													'ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB',
													'ACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL',
													'ACTIVAR_BENEFICIARIO_HIJASTRO_WEB',
													'ACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB',
													'ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_PRESENCIAL',
													'ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_WEB',
													'ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_DEPWEB',
													'ACTIVAR_BENEFICIARIO_PADRE_PRESENCIAL',
													'ACTIVAR_BENEFICIARIO_MADRE_PRESENCIAL')
						THEN beneficiario.benFechaAfiliacion ELSE NULL END AS [Fecha de afiliaciÃ³n] ,
						----------  Variable 23 - Tipo Miembro Poblacion Cubierta C07  ----------,
					   '2' AS 'CÃ³digo tipo de miembro de la poblaciÃ³n cubierta' ,
						----------  Variable 24 - Tipo de identificaciÃ³n del miembro de la poblaciÃ³n cubierta C07  ----------,

	                  htidben.tipoidhom AS [Tipo de identificaciÃ³n del miembro de la poblaciÃ³n cubierta] ,
						----------  Variable 25 - NÃºmero de identificaciÃ³n del miembro de la poblaciÃ³n cubierta C07  ----------,	
					 Personabeneficiario.pernumeroidentificacion   AS [NÃºmero de identificaciÃ³n del miembro de la poblaciÃ³n cubierta],
			 ----------  Variable 26 - Codigo Condicion Beneficiario C07 ----------
					CASE
					WHEN solicitudPersonaNovedad.snpBeneficiario = beneficiario.benid 
					 AND solicitudGlobal.solTipoTransaccion IN (
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_DEPWEB',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_PRESENCIAL',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_WEB',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_DEPWEB',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_PRESENCIAL',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_WEB',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_DEPWEB',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_PRESENCIAL',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_WEB',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_DEPWEB',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_PRESENCIAL',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_WEB',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_DEPWEB',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_PRESENCIAL',
						'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_WEB',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_DEPWEB',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_PRESENCIAL',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_WEB',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_DEPWEB',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_PRESENCIAL',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_WEB',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_DEPWEB',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_PRESENCIAL',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_WEB',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_DEPWEB',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_PRESENCIAL',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_WEB',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_DEPWEB',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_PRESENCIAL',
						'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_WEB'
					)  
					THEN 'E' --ESTUDIANTE
					WHEN solicitudPersonaNovedad.snpBeneficiario  = beneficiario.benid 
					AND solicitudGlobal.solTipoTransaccion IN (
							'REPORTE_INVALIDEZ_PERSONAS',
							'REPORTE_INVALIDEZ_PERSONAS_DEPWEB',
							'REPORTE_INVALIDEZ_PERSONAS_WEB',
							'REPORTE_INVALIDEZ_PERSONAS'
 						) 
					THEN 'D' --DISCAPACITADO	
				ELSE NULL 
				END  AS [CÃ³digo condiciÃ³n beneficiario],
				----------  Variable 27 - Codigo Tipo Relacion Afiliado C07  ----------
				CASE
					WHEN solicitudGlobal.solTipoTransaccion IN (
						'ACTUALIZACION_TIPO_UNION_CONYUGE_PRESENCIAL',
						'ACTUALIZACION_TIPO_UNION_CONYUGE_WEB',
						'ACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL',
						'ACTIVAR_BENEFICIARIO_CONYUGE_WEB',
						'ACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB' 
					 
					) AND beneficiario.benTipoBeneficiario = 'CONYUGE' THEN 1

					WHEN solicitudGlobal.solTipoTransaccion IN (
		 
						'ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL',
						'ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB',
						'ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB',
						'ACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL',
						'ACTIVAR_BENEFICIARIO_HIJASTRO_WEB',
						'ACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB',
						'ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_PRESENCIAL',
						'ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_WEB',
						'ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_DEPWEB'
		
					) AND beneficiario.benTipoBeneficiario IN (
							'HIJO_BIOLOGICO',
							'HIJO_ADOPTIVO',
							'HIJASTRO',
							'BENEFICIARIO_EN_CUSTODIA'
						) 
					THEN 2

					WHEN solicitudGlobal.solTipoTransaccion IN (
					 
						'ACTIVAR_BENEFICIARIO_MADRE_PRESENCIAL',
						'ACTIVAR_BENEFICIARIO_PADRE_PRESENCIAL'
					) AND beneficiario.benTipoBeneficiario IN ('PADRE','MADRE') 
					THEN 3

					WHEN solicitudGlobal.solTipoTransaccion IN (
				 
			 
						'ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL',
						'ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB',
						'ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB',
						'ACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL',
						'ACTIVAR_BENEFICIARIO_HIJASTRO_WEB',
						'ACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB',
						'ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_PRESENCIAL',
						'ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_WEB',
						'ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_DEPWEB' 
 
					) AND beneficiario.benTipoBeneficiario IN ('HERMANO_HUERFANO_DE_PADRES','HERMANO_HOGAR') 
					THEN 4

					ELSE NULL
					 END AS [CÃ³digo tipo relaciÃ³n con el afiliado],
				NULL  ,
				NULL  ,
				NULL  ,
				NULL   
		 FROM  
	----------  Se obtiene la informacion de la solicitud con respecto a las novedades  ---------
			  SolicitudNovedadPersona AS solicitudPersonaNovedad 
	LEFT JOIN SolicitudNovedad AS solicitudNovedad 
	       ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId  
		  AND snpBeneficiario IS NOT NULL ---SOLO AFILIADOS 
	LEFT JOIN Solicitud AS solicitudGlobal ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
	----------  Se obtienen los datos personal Beneficiario    ----------

	INNER JOIN Beneficiario AS beneficiario 
		    ON benid = snpBeneficiario AND snpBeneficiario = benid 

	INNER JOIN Persona AS personaBeneficiario 
	        ON beneficiario.benPersona = personaBeneficiario.perId
	 INNER JOIN #HomologacioTiposIdent htidben 
	        ON htidben.tipoid = personaBeneficiario.pertipoidentificacion 

			------TRABAJADOR
	INNER JOIN Afiliado 
	        ON afiid = benafiliado 
	INNER JOIN Persona AS personaAfiliado 
	        ON afipersona = personaAfiliado.perId
	 INNER JOIN #HomologacioTiposIdent htidafi 
	        ON htidafi.tipoid = personaAfiliado.pertipoidentificacion 
			-----ubicacion beneficiario
	 LEFT JOIN Ubicacion AS ubicacionAfiliado 
	        ON ubicacionAfiliado.ubiId = personaBeneficiario.perUbicacionPrincipal
	 LEFT JOIN Municipio AS municipioAfiliado 
	        ON municipioAfiliado.munId = ubicacionAfiliado.ubiMunicipio
	 LEFT JOIN Departamento AS departamentoAfiliado 
	        ON departamentoAfiliado.depId = municipioAfiliado.munDepartamento
	INNER JOIN PersonaDetalle AS personaAfiliadoDetalle 
	        ON personaBeneficiario.perId = personaAfiliadoDetalle.pedPersona
	
 
	---------- AUDITORIA
	LEFT JOIN #NovedadesSubsidios_AUD2 AS auditoriaBeneficiarioPersona 
		   ON auditoriaBeneficiarioPersona.perId = personaBeneficiario.perId
		  AND auditoriaBeneficiarioPersona.REVTYPE= 0

		WHERE beneficiario.benEstadoBeneficiarioAfiliado  IN ('ACTIVO','INACTIVO') AND
			  convert(date,solicitudGlobal.solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal AND
			  solicitudNovedad.snoEstadoSolicitud = 'CERRADA' AND
			  solResultadoProceso= 'APROBADA' AND 
			  solicitudGlobal.solTipoTransaccion IN (
													'ACTUALIZACION_TIPO_UNION_CONYUGE_PRESENCIAL',
													'ACTUALIZACION_TIPO_UNION_CONYUGE_WEB',
													'ACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL',
													'ACTIVAR_BENEFICIARIO_CONYUGE_WEB',
													'ACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB',
													'ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL',
													'ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB',
													'ACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB',
													'ACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL',
													'ACTIVAR_BENEFICIARIO_HIJASTRO_WEB',
													'ACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB',
													'ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_PRESENCIAL',
													'ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_WEB',
													'ACTIVAR_BENEFICIARIO_HERMANO_HUERFANO_DEPWEB',
													'ACTIVAR_BENEFICIARIO_PADRE_PRESENCIAL',
													'ACTIVAR_BENEFICIARIO_MADRE_PRESENCIAL',
													'REPORTE_INVALIDEZ_PERSONAS',
													'REPORTE_INVALIDEZ_PERSONAS_DEPWEB',
													'REPORTE_INVALIDEZ_PERSONAS_WEB',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_DEPWEB',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_PRESENCIAL',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_BENEFICIARIO_EN_CUSTODIA_WEB',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_DEPWEB',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_PRESENCIAL',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HERMANO_HUERFANO_WEB',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_DEPWEB',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_PRESENCIAL',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJASTRO_WEB',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_DEPWEB',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_PRESENCIAL',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_ADOPTIVO_WEB',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_DEPWEB',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_PRESENCIAL',
													'ACTUALIZACION_ESCOLARIDAD_ESTUDIANTE_EDUCACION_BASICA_MEDIA_HIJO_BIOLOGICO_WEB',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_DEPWEB',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_PRESENCIAL',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_BENEFICIARIO_EN_CUSTODIA_WEB',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_DEPWEB',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_PRESENCIAL',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HERMANO_HUERFANO_WEB',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_DEPWEB',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_PRESENCIAL',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJASTRO_WEB',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_DEPWEB',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_PRESENCIAL',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_ADOTIVO_WEB',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_DEPWEB',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_PRESENCIAL',
													'ACTUALIZACION_CERTIFICADO_ESTUDIOS_HIJO_BIOLOGICO_WEB'
													)

---***---

 		

----
--adicionar los beneficarios de los trabajadores que se reactivan EN LA C03 Y LOS BENEFICIARIO DEBEN IR EN LA c07
	INSERT INTO #Reporte14
			SELECT DISTINCT
						----------  Tipo de Registro  ----------
						2 AS [Tipo de registro],

						---------- Codigo Caja  ----------
						(
							SELECT cnsValor 
							  FROM Constante 
							 WHERE cnsNombre = 'CAJA_COMPENSACION_CODIGO'
						) AS [CÃ³digo caja de compensaciÃ³n familiar],

						----------  Tipo de IdentificaciÃ³n Afiliado  ----------
						CASE  reing.TipoidTrab 
								WHEN 'CEDULA_CIUDADANIA' THEN 'CC'
								WHEN 'REGISTRO_CIVIL' THEN 'RC'
								WHEN 'TARJETA_IDENTIDAD' THEN 'TI'
								WHEN 'CEDULA_EXTRANJERIA' THEN 'CE'
								WHEN 'PASAPORTE' THEN 'PA'
								WHEN 'CARNE_DIPLOMATICO' THEN 'CD'
								WHEN 'PERM_PROT_TEMPORAL' THEN 'PT'
								WHEN 'PERM_ESP_PERMANENCIA' THEN 'PE'
								WHEN 'NIT' THEN 'NI'
								WHEN 'SALVOCONDUCTO' THEN 'SC'
				        END AS [Tipo de identificaciÃ³n del afiliado],
	
						----------  Numero de Identificacion Afiliado  ----------
						 reing.IdTrab  
						AS [NÃºmero de identificaciÃ³n del afiliado],
						---------- Primer Apellido  ----------
						 reing.perPrimerApellido  AS [Primer Apellido],
						----------  Segundo Apellido  ----------
						 reing.perSegundoApellido  AS [Segundo Apellido],
						----------  Primer Nombre  ----------
						  reing.perPrimerNombre AS [Primer Nombre],
						----------  Segundo Nombre  ----------
						 reing.perSegundoNombre  AS [Segundo Nombre],
						----------  Codigo Novedad  ----------
					   'C07'   AS [CÃ³digo de la novedad],
					--	V11_fechaAfiliacion ,
				        
						 beneficiario.benFechaAfiliacion  AS [Fecha de afiliaciÃ³n] ,
						----------  Variable 23 - Tipo Miembro Poblacion Cubierta C07  ----------,
					   '2' AS 'CÃ³digo tipo de miembro de la poblaciÃ³n cubierta' ,
						----------  Variable 24 - Tipo de identificaciÃ³n del miembro de la poblaciÃ³n cubierta C07  ----------,

	                  CASE pb.pertipoidentificacion
								WHEN 'CEDULA_CIUDADANIA' THEN 'CC'
								WHEN 'REGISTRO_CIVIL' THEN 'RC'
								WHEN 'TARJETA_IDENTIDAD' THEN 'TI'
								WHEN 'CEDULA_EXTRANJERIA' THEN 'CE'
								WHEN 'PASAPORTE' THEN 'PA'
								WHEN 'CARNE_DIPLOMATICO' THEN 'CD'
								WHEN 'PERM_PROT_TEMPORAL' THEN 'PT'
								WHEN 'PERM_ESP_PERMANENCIA' THEN 'PE'
								WHEN 'NIT' THEN 'NI'
								WHEN 'SALVOCONDUCTO' THEN 'SC'
				        END AS [Tipo de identificaciÃ³n del miembro de la poblaciÃ³n cubierta] ,
						----------  Variable 25 - NÃºmero de identificaciÃ³n del miembro de la poblaciÃ³n cubierta C07  ----------,	
					 pb.pernumeroidentificacion   AS [NÃºmero de identificaciÃ³n del miembro de la poblaciÃ³n cubierta],
			 ----------  Variable 26 - Codigo Condicion Beneficiario C07 ----------
					  NULL AS [CÃ³digo condiciÃ³n beneficiario],
				----------  Variable 27 - Codigo Tipo Relacion Afiliado C07  ----------
				 CASE WHEN beneficiario.benTipoBeneficiario = 'CONYUGE' THEN 1

					WHEN   beneficiario.benTipoBeneficiario IN (
							'HIJO_BIOLOGICO',
							'HIJO_ADOPTIVO',
							'HIJASTRO',
							'BENEFICIARIO_EN_CUSTODIA'
						) 
					THEN 2

					WHEN  beneficiario.benTipoBeneficiario IN ('PADRE','MADRE') 
					THEN 3

					WHEN  beneficiario.benTipoBeneficiario IN ('HERMANO_HUERFANO_DE_PADRES','HERMANO_HOGAR') 
					THEN 4

					ELSE NULL
					 END AS [CÃ³digo tipo relaciÃ³n con el afiliado],
				NULL  ,
				NULL  ,
				NULL  ,
				NULL   
		 FROM  #AfiliacionesC03 reing
	INNER JOIN RolAfiliado r ON r.roaid = reing.roaId
	INNER JOIN Beneficiario ON benAfiliado = r.roaAfiliado
	INNER JOIN Persona pb ON pb.perid = benPersona
	     WHERE benEstadoBeneficiarioAfiliado = 'ACTIVO'---CAMBIO 20230725
		 --WHERE CONVERT(DATE,benFechaAfiliacion) BETWEEN @fechaInicio AND @fechaFinal ---ADICIONADO 20230712
		 --MODIFICADO 20230725

	 
	
	-------REVISAR QUE NO SEA NUEVO
		DELETE #Reporte14
		FROM #Reporte14 
		INNER JOIN Persona pa ON pa.perNumeroIdentificacion = [NÃºmero de identificaciÃ³n del afiliado]
		INNER JOIN Afiliado ON afipersona = pa.perid 
		INNER JOIN Beneficiario on benAfiliado =afiid  
			WHERE benEstadoBeneficiarioAfiliado = 'ACTIVO' 
			  AND benFechaAfiliacion < @fechaInicio
		      AND [CÃ³digo de la novedad] = 'C07'
			  AND [Nuevo valor 1] IS NOT NULL
			  AND [Nuevo valor 5] not IN ('E','D')

	 
			 ---PENDIENTE SI ES CON EL MISMO TRABAJADOR

	--select * from #Reporte14 where [NÃºmero de identificaciÃ³n del afiliado] = '75091769'

/*
 
C08	Retirar miembro poblaciÃ³n cubierta a la afiliaciÃ³n a compensaciÃ³n familiar	
campos 24, 25, 36, 37, 58
*/

---***--

  

 INSERT INTO #Reporte14
	 SELECT DISTINCT
						----------  Tipo de Registro  ----------
						2 AS [Tipo de registro],

						---------- Codigo Caja  ----------
						(
							SELECT cnsValor 
							  FROM Constante 
							 WHERE cnsNombre = 'CAJA_COMPENSACION_CODIGO'
						) AS [CÃ³digo caja de compensaciÃ³n familiar],

		             ----------  Tipo de IdentificaciÃ³n Afiliado  ----------
						htidafi.TipoIdHom AS [Tipo de identificaciÃ³n del afiliado],
	
						----------  Numero de Identificacion Afiliado  ----------
						 personaAfiliado.perNumeroIdentificacion  
						AS [NÃºmero de identificaciÃ³n del afiliado],
						---------- Primer Apellido  ----------
						 personaAfiliado.perPrimerApellido  AS [Primer Apellido],
						----------  Segundo Apellido  ----------
						 personaAfiliado.perSegundoApellido  AS [Segundo Apellido],
						----------  Primer Nombre  ----------
						 personaAfiliado.perPrimerNombre AS [Primer Nombre],
						----------  Segundo Nombre  ----------
						 personaAfiliado.perSegundoNombre  AS [Segundo Nombre],						
						 ----------  Codigo Novedad  ----------
					   'C08'   AS [CÃ³digo de la novedad],
			 			        
 ----------  Variable 24 - Tipo Identificacion Miembro Poblacion Cubierta  C08  ----------
				htidben.TipoIdHom AS tipoIdMiembroPoblacionCubierta, 

	----------  Variable 25 - Numero Identificacion Miembro Poblacion Cubierta  C08 ----------
				 personaBeneficiario.perNumeroIdentificacion  AS  numeroIdMiembroPoblacionCubierta,
	 ----------  Variable 36 - Fecha Retiro del Miembro Poblacion Cubierta C08 ----------

			  FORMAT(isnull(audBeneficiarioPersona.benFechaRetiro, beneficiario.benFechaRetiro), 'yyyy-MM-dd' ) AS  fechaRetiroAfiliado,
			  ---PRUEBA 20230810
	----------  Variable 37 - Fecha Fallecimiento  C08 ----------
 		 
					CASE WHEN ( beneficiario.benMotivoDesafiliacion = 'FALLECIMIENTO' )
					THEN FORMAT( beneficiarioDataPersonaDetalle.pedFechadefuncion, 'yyyy-MM-dd' )  
					ELSE NULL END
					AS  fechaFallecimiento,
			----------  Variable 58 - Causal de Retiro C08 ----------
	CASE
	 
		---2. POR FALLECIMIENTO
		WHEN 
			( beneficiario.benMotivoDesafiliacion = 'FALLECIMIENTO' )
		THEN 2
 
		--12- Por inclusiÃ³n errÃ³nea AFILIACION_ANULADA
		WHEN 
		(
			solicitudGlobal.solTipoTransaccion IN (
				'INACTIVAR_BENEFICIOS_PADRE_WEB',
				'INACTIVAR_BENEFICIOS_PADRE_DEPWEB',
				'INACTIVAR_BENEFICIOS_PADRE_PRESENCIAL',
				'INACTIVAR_BENEFICIOS_MADRE_PRESENCIAL',
				'INACTIVAR_BENEFICIOS_MADRE_WEB',
				'INACTIVAR_BENEFICIOS_MADRE_DEPWEB',
				'INACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB',
				'INACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_CONYUGE_WEB',
				'INACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB',
				'INACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HIJASTRO_WEB',
				'INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_DEPWEB',
				'INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_WEB',
				'INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB',
				'INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB',
				'INACTIVAR_BENEFICIARIO_HUERFANO_DEPWEB',
				'INACTIVAR_BENEFICIARIO_HUERFANO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HUERFANO_WEB' ,
				'INACTIVAR_BENEFICIO_EN_CUSTODIA_PRESENCIAL',
				'INACTIVAR_BENEFICIO_EN_CUSTODIA_WEB',
				'INACTIVAR_BENEFICIO_EN_CUSTODIA_DEPWEB'
			)
		)  AND  beneficiario.benMotivoDesafiliacion = 'AFILIACION_ANULADA'  
		THEN 12

		--30- Otra causa de retiro
		WHEN 
		(
			solicitudGlobal.solTipoTransaccion IN (
				'INACTIVAR_BENEFICIOS_MADRE_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL',
				'INACTIVAR_BENEFICIOS_PADRE_PRESENCIAL',				
				'INACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB',
				'INACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_CONYUGE_WEB',
				'INACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB',
				'INACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HIJASTRO_WEB',
				'INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_DEPWEB',
				'INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_WEB',
				'INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB',
				'INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB',
				'INACTIVAR_BENEFICIARIO_HUERFANO_DEPWEB',
				'INACTIVAR_BENEFICIARIO_HUERFANO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HUERFANO_WEB',
				'INACTIVAR_BENEFICIO_EN_CUSTODIA_PRESENCIAL',
				'INACTIVAR_BENEFICIO_EN_CUSTODIA_WEB',
				'INACTIVAR_BENEFICIO_EN_CUSTODIA_DEPWEB'
			)
		)
		AND ( beneficiario.benMotivoDesafiliacion NOT IN ( 'FALLECIMIENTO' ,'AFILIACION_ANULADA') 
		OR beneficiario.benMotivoDesafiliacion IS NULL )
		THEN 30

		ELSE NULL

	     END AS  causalRetiro,
				NULL,
				NULL,
				NULL,
				NULL,
				NULL
		 FROM  
	----------  Se obtiene la informacion de la solicitud con respecto a las novedades  ---------
			  SolicitudNovedadPersona AS solicitudPersonaNovedad 
	LEFT JOIN SolicitudNovedad AS solicitudNovedad 
	       ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId  
		  AND snpBeneficiario IS NOT NULL ---SOLO benficiarios 
	LEFT JOIN Solicitud AS solicitudGlobal ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
	----------  Se obtienen los datos personal Beneficiario    ----------

	INNER JOIN Beneficiario AS beneficiario 
		    ON benid = snpBeneficiario  

	INNER JOIN Persona AS personaBeneficiario 
	        ON beneficiario.benPersona = personaBeneficiario.perId
	INNER JOIN #HomologacioTiposIdent htidben 
	        ON htidben.tipoid = personaBeneficiario.pertipoidentificacion 

			------TRABAJADOR
	INNER JOIN Afiliado 
	        ON afiid = benafiliado 
	INNER JOIN Persona AS personaAfiliado 
	        ON afipersona = personaAfiliado.perId
	 INNER JOIN #HomologacioTiposIdent htidafi 
	        ON htidafi.tipoid = personaAfiliado.pertipoidentificacion 
	 
	 ---ubicacion beneficiario
	 LEFT JOIN Ubicacion AS ubicacionAfiliado 
	        ON ubicacionAfiliado.ubiId = personaBeneficiario.perUbicacionPrincipal
	 LEFT JOIN Municipio AS municipioAfiliado 
	        ON municipioAfiliado.munId = ubicacionAfiliado.ubiMunicipio
	 LEFT JOIN Departamento AS departamentoAfiliado 
	        ON departamentoAfiliado.depId = municipioAfiliado.munDepartamento
	INNER JOIN PersonaDetalle AS beneficiarioDataPersonaDetalle 
	        ON personaBeneficiario.perId = beneficiarioDataPersonaDetalle.pedPersona

	---------- AUDITORIA
	LEFT JOIN #NovedadesSubsidios_AUD2 AS auditoriaBeneficiarioPersona 
		   ON auditoriaBeneficiarioPersona.perId = personaBeneficiario.perId
		  AND auditoriaBeneficiarioPersona.REVTYPE= 0
	
	LEFT JOIN #BenActInact AS audBeneficiarioPersona 
		   ON audBeneficiarioPersona.benId = Beneficiario.benId
		--  AND auditoriaBeneficiarioPersona.REVTYPE= 1
		AND audBeneficiarioPersona.rev IS NOT NULL
		  ---PRUEBA 20230810
		  
		WHERE 
		--personaAfiliado.perNumeroIdentificacion = '30391450' and ---prueba 20230302
	          beneficiario.benEstadoBeneficiarioAfiliado in ('ACTIVO' ,'INACTIVO') AND---CAMBIO PARA LOS QUE ESTAN ACTIVOS 20230712
			  convert(date,solicitudGlobal.solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal AND
			  solicitudNovedad.snoEstadoSolicitud = 'CERRADA' AND
			  solResultadoProceso= 'APROBADA' AND 
			  solicitudGlobal.solTipoTransaccion IN (
				'INACTIVAR_BENEFICIARIO_CONYUGE_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_CONYUGE_WEB',
				'INACTIVAR_BENEFICIARIO_CONYUGE_DEPWEB',
				'INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_WEB',
				'INACTIVAR_BENEFICIARIO_HIJO_BIOLOGICO_DEPWEB',
				'INACTIVAR_BENEFICIARIO_HIJASTRO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HIJASTRO_WEB',
				'INACTIVAR_BENEFICIARIO_HIJASTRO_DEPWEB',
				'INACTIVAR_BENEFICIARIO_HUERFANO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HUERFANO_WEB',
				'INACTIVAR_BENEFICIARIO_HUERFANO_DEPWEB',
				'INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_PRESENCIAL',
				'INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_WEB',
				'INACTIVAR_BENEFICIARIO_HIJO_ADOPTIVO_DEPWEB',
				'INACTIVAR_BENEFICIO_EN_CUSTODIA_PRESENCIAL',
				'INACTIVAR_BENEFICIO_EN_CUSTODIA_WEB',
				'INACTIVAR_BENEFICIO_EN_CUSTODIA_DEPWEB',
				'INACTIVAR_BENEFICIOS_PADRE_PRESENCIAL',
				'INACTIVAR_BENEFICIOS_PADRE_WEB',
				'INACTIVAR_BENEFICIOS_PADRE_DEPWEB',
				'INACTIVAR_BENEFICIOS_MADRE_PRESENCIAL',
				'INACTIVAR_BENEFICIOS_MADRE_WEB',
				'INACTIVAR_BENEFICIOS_MADRE_DEPWEB',
				'REPORTE_FALLECIMIENTO_PERSONAS',
				'REPORTE_FALLECIMIENTO_PERSONAS_WEB',
				'REPORTE_FALLECIMIENTO_PERSONAS_DEPWEB'	)

 --select '#Reporte14C08',* from #Reporte14 where   [NÃºmero de identificaciÃ³n del afiliado] in ( '75104387','24369968')
--and [Nuevo valor 2] = '1054986452'
--*****insertar los retiros de los beneficiarios por los retiros de los afiliados principales C08

  INSERT INTO #Reporte14---- PRUEBA 20230810
	 SELECT DISTINCT [Tipo de registro],	[CÃ³digo caja de compensaciÃ³n familiar],	
			[Tipo de identificaciÃ³n del afiliado],	
			[NÃºmero de identificaciÃ³n del afiliado],	
			[Primer Apellido],	[Segundo Apellido],	[Primer Nombre],	[Segundo Nombre],
			'C08',
			----------  Variable 24 - Tipo Identificacion Miembro Poblacion Cubierta  C08  ----------
		    htidben.TipoIdHom AS tipoIdMiembroPoblacionCubierta,  
			----------  Variable 25 - Numero Identificacion Miembro Poblacion Cubierta  C08 ----------
			pb.perNumeroIdentificacion AS numeroIdMiembroPoblacionCubierta,
				 ----------  Variable 36 - Fecha Retiro del Afiliado C08 ----------
			ISNULL(ISNULL([Nuevo valor 4],audben.benFechaRetiro), b.benFechaRetiro) AS fechaRetiroAfiliado,
	----------  Variable 37 - Fecha Fallecimiento  C08 ----------
			NULL AS [Nuevo valor 4],
			----------  Variable 58 - Causal de Retiro C08 ----------
			'30' AS CausalRetiro,
			NULL,	NULL,	NULL,	NULL,	NULL	 
	   FROM #Reporte14 
 INNER JOIN persona pt ON pt.perNumeroIdentificacion = [NÃºmero de identificaciÃ³n del afiliado]
 INNER JOIN afiliado a ON a.afiPersona = pt.perId
 INNER JOIN Beneficiario b ON b.benAfiliado = a.afiid 
 INNER JOIN persona pb ON pb.perId = b.benPersona 
 INNER JOIN #HomologacioTiposIdent htidben 
	        ON htidben.tipoid = pb.pertipoidentificacion 
-------
INNER JOIN SolicitudNovedadPersona ON snpBeneficiario = benid AND snpBeneficiario IS NOT NULL ---SOLO benficiarios
INNER JOIN SolicitudNovedad ON snoid = snpSolicitudNovedad
INNER JOIN Solicitud ON solid = snoSolicitudGlobal
       AND solTipoTransaccion LIKE '%INACTIVAR%'
	   AND benEstadoBeneficiarioAfiliado = 'ACTIVO'
	   AND ISNULL(benMotivoDesafiliacion,'') <> 'FALLECIMIENTO'  ---SOLO PARA LAS INACTIVACIONES QUE NO SEAN POR FALLECIMIENTO PORQUE YA SE VEN EN EL ANTERIOR
INNER JOIN #BenActInact audben
        ON b.benId = audben.benId
		and audben.rev is not NULL
	 WHERE [CÃ³digo de la novedad] = 'C04' 
	--  and [NÃºmero de identificaciÃ³n del afiliado] = '1054986452'
	
 -- select '#Reporte142',* 
 --    from #Reporte14 
	--  where [CÃ³digo de la novedad]= 'C08' 
	--  and [NÃºmero de identificaciÃ³n del afiliado]  in ( '75104387','24369968')
	------and [Nuevo valor 2] = '79414382'
	--select '#BenActInact',* from #BenActInact
-----******C10	ModificaciÃ³n de identificaciÃ³n del miembro de la poblaciÃ³n cubierta
----Los campos 24 y 25 son obligatorios***------

 
	INSERT INTO #Reporte14
	 SELECT DISTINCT
						----------  Tipo de Registro  ----------
						2 AS [Tipo de registro],

						---------- Codigo Caja  ----------
						(
							SELECT cnsValor 
							  FROM Constante 
							 WHERE cnsNombre = 'CAJA_COMPENSACION_CODIGO'
						) AS [CÃ³digo caja de compensaciÃ³n familiar],

						----------  Tipo de IdentificaciÃ³n Afiliado  ----------
						 ISNULL(htidaud.tipoidhom , htidafi.tipoidhom)  AS [Tipo de identificaciÃ³n del afiliado],
	
						----------  Numero de Identificacion Afiliado  ----------
						ISNULL(auditoriaAfiliadoPersona.perNumeroIdentificacion, personaAfiliado.perNumeroIdentificacion) 
						AS [NÃºmero de identificaciÃ³n del afiliado],
						---------- Primer Apellido  ----------
						ISNULL(auditoriaAfiliadoPersona.perPrimerApellido, personaAfiliado.perPrimerApellido) AS [Primer Apellido],
						----------  Segundo Apellido  ----------
						ISNULL(auditoriaAfiliadoPersona.perSegundoApellido, personaAfiliado.perSegundoApellido) AS [Segundo Apellido],
						----------  Primer Nombre  ----------
						ISNULL(auditoriaAfiliadoPersona.perPrimerNombre, personaAfiliado.perPrimerNombre) AS [Primer Nombre],
						----------  Segundo Nombre  ----------
						ISNULL(auditoriaAfiliadoPersona.perSegundoNombre, personaAfiliado.perSegundoNombre) AS [Segundo Nombre],
						----------  Codigo Novedad  ----------
					   'C10'   AS [CÃ³digo de la novedad],
					--	variable 24	Tipo de identificaciÃ³n del miembro de la poblaciÃ³n cubierta
				        CASE WHEN solicitudGlobal.solTipoTransaccion IN (
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB',
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL',
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB',
																			'CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS' 
																		  )
							  
					     THEN htidaud.tipoidhom ELSE NULL END AS [Tipo de identificaciÃ³n del miembro de la poblaciÃ³n cubierta] ,
							 ---Variable 25	NÃºmero de identificaciÃ³n del miembro de la poblaciÃ³n cubierta
						CASE WHEN solicitudGlobal.solTipoTransaccion IN (
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB',
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL',
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB',
																			'CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS',
																			'CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS'
																		  )
							 
					    THEN auditoriaAfiliadoPersona.pernumeroidentificacion ELSE NULL END AS [NÃºmero de identificaciÃ³n del miembro de la poblaciÃ³n cubierta],
					--	56	Nuevo tipo de identificaciÃ³n del miembro de la poblaciÃ³n cubierta
						CASE WHEN solicitudGlobal.solTipoTransaccion IN (
																'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB',
																'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL',
																'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB',
																'CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS' 
																)
							 AND auditoriaAfiliadoPersona.perTipoIdentificacion <> personaAfiliado.pertipoidentificacion
							THEN htidafi.tipoidhom 
							ELSE NULL END AS [Nuevo tipo de identificaciÃ³n del miembro de la poblaciÃ³n cubierta] ,
					
					--	57	Nuevo nÃºmero de identificaciÃ³n del miembro de la poblaciÃ³n cubierta
						 	CASE WHEN solicitudGlobal.solTipoTransaccion IN (
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB',
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL',
																			'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB',
																			'CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS' 
																	 
																		  )
							 AND auditoriaAfiliadoPersona.pernumeroidentificacion <> personaAfiliado.pernumeroidentificacion
					    THEN personaAfiliado.pernumeroidentificacion ELSE NULL END AS [Nuevo nÃºmero de identificaciÃ³n del miembro de la poblaciÃ³n cubierta],
						NULL,NULL,NULL,
						NULL,NULL,NULL
		 FROM  
	----------  Se obtiene la informacion de la solicitud con respecto a las novedades  ---------
			  SolicitudNovedadPersona AS solicitudPersonaNovedad 
	LEFT JOIN SolicitudNovedad AS solicitudNovedad 
	       ON solicitudPersonaNovedad.snpSolicitudNovedad = solicitudNovedad.snoId  
		  AND snpBeneficiario IS NOT NULL ---SOLO AFILIADOS 
	LEFT JOIN Solicitud AS solicitudGlobal ON solicitudGlobal.solId = solicitudNovedad.snoSolicitudGlobal
	----------  Se obtienen los datos personal Beneficiario    ----------

	INNER JOIN Beneficiario AS beneficiario 
		    ON benid = snpBeneficiario

	INNER JOIN Persona AS personaAfiliado 
	        ON beneficiario.benPersona = personaAfiliado.perId
	INNER JOIN #HomologacioTiposIdent htidafi 
	        ON tipoid = personaAfiliado.pertipoidentificacion 
	 LEFT JOIN Ubicacion AS ubicacionAfiliado 
	        ON ubicacionAfiliado.ubiId = personaAfiliado.perUbicacionPrincipal
	 LEFT JOIN Municipio AS municipioAfiliado 
	        ON municipioAfiliado.munId = ubicacionAfiliado.ubiMunicipio
	 LEFT JOIN Departamento AS departamentoAfiliado 
	        ON departamentoAfiliado.depId = municipioAfiliado.munDepartamento
	INNER JOIN PersonaDetalle AS personaAfiliadoDetalle 
	        ON personaAfiliado.perId = personaAfiliadoDetalle.pedPersona

	---------- AUDITORIA
	LEFT JOIN #NovedadesSubsidios_AUD2 AS auditoriaAfiliadoPersona 
		   ON auditoriaAfiliadoPersona.perId = personaAfiliado.perId
		  AND auditoriaAfiliadoPersona.REVTYPE= 0 and rev is not null
	left JOIN #HomologacioTiposIdent htidaud 
	        ON htidaud.TipoId = auditoriaAfiliadoPersona.pertipoidentificacion 
		WHERE 
		--personaAfiliado.perNumeroIdentificacion = '30391450' and ---prueba 20230302
	          beneficiario.benEstadoBeneficiarioAfiliado  IN ('ACTIVO','INACTIVO') AND
			  convert(date,solicitudGlobal.solFechaRadicacion) BETWEEN @fechaInicio AND @fechaFinal AND
			  solicitudNovedad.snoEstadoSolicitud = 'CERRADA' AND
			  solResultadoProceso= 'APROBADA' AND 
			  solicitudGlobal.solTipoTransaccion IN (
													'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_DEPWEB',
													'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_PRESENCIAL',
													'ACTUALIZAR_DOCUMENTO_IDENTIDAD_PERSONA_WEB',
													'CAMBIO_TIPO_NUMERO_DOCUMENTO_PERSONAS' 
													)
 

  ---SELECT '#Reporte14',* FROM #Reporte14 ---WHERE [NÃºmero de identificaciÃ³n del afiliado]= '10002962'


	------RESULTADO FINAL 
	INSERT   INTO #Final 
	SELECT [Tipo de registro] ,
	[CÃ³digo caja de compensaciÃ³n familiar],
	[Tipo de identificaciÃ³n del afiliado] ,
	[NÃºmero de identificaciÃ³n del afiliado] ,
	[Primer Apellido] ,
	[Segundo Apellido] ,
	[Primer Nombre] ,
	[Segundo Nombre] ,
	[CÃ³digo de la novedad] ,
	--MAX([Nuevo valor 1])AS 
	[Nuevo valor 1],
	--MAX([Nuevo valor 2])AS
	[Nuevo valor 2],
	MAX([Nuevo valor 3]) AS [Nuevo valor 3],
	MAX([Nuevo valor 4]) AS [Nuevo valor 4],
	MAX([Nuevo valor 5]) AS [Nuevo valor 5],
	MAX([Nuevo valor 6]) AS [Nuevo valor 6],
	MAX([Nuevo valor 7]) AS [Nuevo valor 7],
	MAX([Nuevo valor 8]) AS [Nuevo valor 8],
	MAX([Nuevo valor 9]) AS [Nuevo valor 9],
	MAX([Nuevo valor 10]) AS [Nuevo valor 10]
	
	FROM #Reporte14 
	WHERE [CÃ³digo de la novedad]= 'C04'
	GROUP BY [Tipo de registro] ,
	[CÃ³digo caja de compensaciÃ³n familiar],
	[Tipo de identificaciÃ³n del afiliado] ,
	[NÃºmero de identificaciÃ³n del afiliado] ,
	[Primer Apellido] ,
	[Segundo Apellido] ,
	[Primer Nombre] ,
	[Segundo Nombre] ,
	[CÃ³digo de la novedad],
	[Nuevo valor 1],
	[Nuevo valor 2] 
--	ORDER BY [CÃ³digo de la novedad] ASC
 
 UNION

 SELECT [Tipo de registro] ,
	[CÃ³digo caja de compensaciÃ³n familiar],
	[Tipo de identificaciÃ³n del afiliado] ,
	[NÃºmero de identificaciÃ³n del afiliado] ,
	[Primer Apellido] ,
	[Segundo Apellido] ,
	[Primer Nombre] ,
	[Segundo Nombre] ,
	[CÃ³digo de la novedad] ,
	MAX([Nuevo valor 1]) AS [Nuevo valor 1],
	MAX([Nuevo valor 2]) AS	[Nuevo valor 2],
	MAX([Nuevo valor 3]) AS [Nuevo valor 3],
	MAX([Nuevo valor 4]) AS [Nuevo valor 4],
	MAX([Nuevo valor 5]) AS [Nuevo valor 5],
	MAX([Nuevo valor 6]) AS [Nuevo valor 6],
	MAX([Nuevo valor 7]) AS [Nuevo valor 7],
	MAX([Nuevo valor 8]) AS [Nuevo valor 8],
	MAX([Nuevo valor 9]) AS [Nuevo valor 9],
	MAX([Nuevo valor 10]) AS [Nuevo valor 10]
--	INTO #Final 
	FROM #Reporte14 WHERE [CÃ³digo de la novedad]  NOT IN ( 'C04', 'C07','c08')
	GROUP BY [Tipo de registro] ,
	[CÃ³digo caja de compensaciÃ³n familiar],
	[Tipo de identificaciÃ³n del afiliado] ,
	[NÃºmero de identificaciÃ³n del afiliado] ,
	[Primer Apellido] ,
	[Segundo Apellido] ,
	[Primer Nombre] ,
	[Segundo Nombre] ,
	[CÃ³digo de la novedad] 
 
	---ORDER BY [CÃ³digo de la novedad] ASC

	UNION 

	 SELECT [Tipo de registro] ,
	[CÃ³digo caja de compensaciÃ³n familiar],
	[Tipo de identificaciÃ³n del afiliado] ,
	[NÃºmero de identificaciÃ³n del afiliado] ,
	[Primer Apellido] ,
	[Segundo Apellido] ,
	[Primer Nombre] ,
	[Segundo Nombre] ,
	[CÃ³digo de la novedad] ,
	[Nuevo valor 1] ,
	[Nuevo valor 2] ,
	MAX([Nuevo valor 3]) AS [Nuevo valor 3],
	[Nuevo valor 4],
 
	MAX([Nuevo valor 5]) AS [Nuevo valor 5],
	[Nuevo valor 6] ,
	MAX([Nuevo valor 7]) AS [Nuevo valor 7],
	MAX([Nuevo valor 8]) AS [Nuevo valor 8],
	MAX([Nuevo valor 9]) AS [Nuevo valor 9],
	MAX([Nuevo valor 10]) AS [Nuevo valor 10]
--	INTO #Final 
	FROM #Reporte14 WHERE [CÃ³digo de la novedad]   IN ('C08')
	GROUP BY [Tipo de registro] ,
	[CÃ³digo caja de compensaciÃ³n familiar],
	[Tipo de identificaciÃ³n del afiliado] ,
	[NÃºmero de identificaciÃ³n del afiliado] ,
	[Primer Apellido] ,
	[Segundo Apellido] ,
	[Primer Nombre] ,
	[Segundo Nombre] ,
	[CÃ³digo de la novedad] ,
	[Nuevo valor 1] ,
	[Nuevo valor 2] ,
---	[Nuevo valor 3],
	[Nuevo valor 4],
	[Nuevo valor 6]
 
 UNION 

	 SELECT [Tipo de registro] ,
	[CÃ³digo caja de compensaciÃ³n familiar],
	[Tipo de identificaciÃ³n del afiliado] ,
	[NÃºmero de identificaciÃ³n del afiliado] ,
	[Primer Apellido] ,
	[Segundo Apellido] ,
	[Primer Nombre] ,
	[Segundo Nombre] ,
	[CÃ³digo de la novedad] ,
	MAX([Nuevo valor 1] ) AS [Nuevo valor 1],
	MAX([Nuevo valor 2]) AS [Nuevo valor 2] ,
		 [Nuevo valor 3] ,
		 [Nuevo valor 4] ,
 
	MAX([Nuevo valor 5]) AS [Nuevo valor 5],
	MAX([Nuevo valor 6]) as [Nuevo valor 6] ,
	MAX([Nuevo valor 7]) AS [Nuevo valor 7],
	MAX([Nuevo valor 8]) AS [Nuevo valor 8],
	MAX([Nuevo valor 9]) AS [Nuevo valor 9],
	MAX([Nuevo valor 10]) AS [Nuevo valor 10]
--	INTO #Final 
	FROM #Reporte14 WHERE [CÃ³digo de la novedad]   IN ('C07' )
	GROUP BY [Tipo de registro] ,
	[CÃ³digo caja de compensaciÃ³n familiar],
	[Tipo de identificaciÃ³n del afiliado] ,
	[NÃºmero de identificaciÃ³n del afiliado] ,
	[Primer Apellido] ,
	[Segundo Apellido] ,
	[Primer Nombre] ,
	[Segundo Nombre] ,
	[CÃ³digo de la novedad] ,
--	[Nuevo valor 1] ,
--	[Nuevo valor 2] ,
	[Nuevo valor 3],
	[Nuevo valor 4]--,
	--[Nuevo valor 6]
  

	 ---
	--- select 'loque queda en reporte 14',* from #Reporte14 where [NÃºmero de identificaciÃ³n del afiliado]= '10002962'

 --**depurar por novedades c01 y c02 antes y despues cuando tienen dos identificaciones  todo en el mismo rango de tiempo
    SELECT [Tipo de identificaciÃ³n del afiliado],
			[Primer Apellido],
			[Segundo Apellido],
			[Primer Nombre],
			[Segundo Nombre],
			[Nuevo valor 1]
	   INTO #DuplicadosC02
	   FROM #final
		WHERE [CÃ³digo de la novedad] = 'C02'
		GROUP BY [Tipo de identificaciÃ³n del afiliado],
			[Primer Apellido],
			[Segundo Apellido],
			[Primer Nombre],
			[Segundo Nombre],
			[Nuevo valor 1]
		HAVING count(*)>1
		
		
		--SELECT * FROM  #DuplicadosC01#DuplicadosC02
	--	SELECT '#Final',* FROM #Final WHERE [NÃºmero de identificaciÃ³n del afiliado] IN ('1002547761','15913910')
		--AND [CÃ³digo de la novedad] = 'C02'
		
	   DELETE f  
		    FROM #DuplicadosC02 d 
	  INNER JOIN #final f 
		      ON d.[Tipo de identificaciÃ³n del afiliado]= f.[Tipo de identificaciÃ³n del afiliado] 
			 AND d.[Primer Apellido]= f.[Primer Apellido]
			 AND ISNULL(d.[Segundo Apellido],'')= ISNULL(f.[Segundo Apellido] ,'')
			 AND d.[Primer Nombre]= f.[Primer Nombre] 
			 AND ISNULL(d.[Segundo Nombre] ,'')= ISNULL(f.[Segundo Nombre] ,'')
			 AND d.[Nuevo valor 1]= f.[Nuevo valor 1]
			 WHERE F.[Nuevo valor 2] IS NULL


		 SELECT [Tipo de identificaciÃ³n del afiliado],
				[Primer Apellido],
				[Segundo Apellido],
				[Primer Nombre],
				[Segundo Nombre],
				[Nuevo valor 1]
		   INTO #DuplicadosC01
		   FROM #final
			WHERE [CÃ³digo de la novedad] = 'C01'
			GROUP BY [Tipo de identificaciÃ³n del afiliado],
				[Primer Apellido],
				[Segundo Apellido],
				[Primer Nombre],
				[Segundo Nombre],
				[Nuevo valor 1]
			HAVING count(*)>1
		 
			 DELETE  F 
			 FROM #DuplicadosC01 d 
			INNER JOIN #final f 
					  ON d.[Tipo de identificaciÃ³n del afiliado]= f.[Tipo de identificaciÃ³n del afiliado] 
					 AND ISNULL(d.[Segundo Apellido],'')= ISNULL(f.[Segundo Apellido] ,'')
					 AND d.[Primer Nombre]= f.[Primer Nombre] 
					 AND ISNULL(d.[Segundo Nombre] ,'')= ISNULL(f.[Segundo Nombre] ,'')
			 INNER JOIN #NovedadesSubsidios_AUD2 X
	 				 ON X.perNumeroIdentificacion = F.[NÃºmero de identificaciÃ³n del afiliado]
	  				AND X.REVTYPE= 0
			  LEFT JOIN (	 SELECT X.perid, min(X.rev) revmin
							   FROM #DuplicadosC01 d 
						 INNER JOIN #final f 
								 ON d.[Tipo de identificaciÃ³n del afiliado]= f.[Tipo de identificaciÃ³n del afiliado] 
								AND ISNULL(d.[Segundo Apellido],'')= ISNULL(f.[Segundo Apellido] ,'')
								AND d.[Primer Nombre]= f.[Primer Nombre] 
								AND ISNULL(d.[Segundo Nombre] ,'')= ISNULL(f.[Segundo Nombre] ,'')
						  LEFT JOIN #NovedadesSubsidios_AUD2 X
	 							 ON X.perNumeroIdentificacion = F.[NÃºmero de identificaciÃ³n del afiliado]
	  							AND X.REVTYPE= 0
							  WHERE [CÃ³digo de la novedad] = 'C01'	 
							GROUP BY x.perid ) Duplicados 
					ON duplicados.perid = x.perid AND duplicados.revmin = x.rev 
				 WHERE [CÃ³digo de la novedad] = 'C01'
				  AND duplicados.revmin IS NOT NULL


 ----depurar c04 para fallecidos la ultima empresa 
 


 				  SELECT roaEmpleador, p.perNumeroIdentificacion as idAfiliado, pe.perNumeroIdentificacion as idempleador ,roaId 
					INTO #DuplicadoC04
					FROM #Final 
			  INNER JOIN persona p ON perNumeroIdentificacion = [NÃºmero de identificaciÃ³n del afiliado]
			  INNER JOIN Afiliado ON afipersona = perid 
			  INNER JOIN RolAfiliado r on r.roaAfiliado = afiid 
			  INNER JOIN Empleador em on em.empid = r.roaempleador 
			  INNER JOIN Empresa e ON em.empempresa = e.empid 
			  INNER JOIN persona pe ON e.empPersona = pe.perid 
				   WHERE [CÃ³digo de la novedad] = 'C04'
					 AND [Nuevo valor 7] = 2
				GROUP BY roaEmpleador, p.perNumeroIdentificacion, pe.perNumeroIdentificacion ,roaId 
				  HAVING COUNT(*)>1 


				SELECT *  INTO #roaidmax 
				FROM (
					SELECT  CASE WHEN roaid = MAX(roaId) OVER (PARTITION BY idAfiliado) THEN roaid ELSE null END as roaid, 
							roaEmpleador,  idAfiliado,  idempleador			
						FROM #DuplicadoC04) A 
				WHERE A.roaid IS NOT NULL
		 

			  SELECT roaEmpleador	,idAfiliado	,idempleador,	roaId
			    INTO #paraborrar
				FROM #DuplicadoC04
				EXCEPT  
			SELECT roaEmpleador	,idAfiliado	,idempleador,	roaId
			    FROM #roaidmax

	    DELETE F
			  FROM #Final f
		INNER JOIN #paraborrar 
		        ON F.[NÃºmero de identificaciÃ³n del afiliado] = idAfiliado AND F.[Nuevo valor 2] = idempleador
			 WHERE [CÃ³digo de la novedad] = 'C04'
			   AND [Nuevo valor 7] = 2  

  
   
 ---***-----

				 SELECT [Tipo de registro],	[CÃ³digo caja de compensaciÃ³n familiar],
						[Tipo de identificaciÃ³n del afiliado],[NÃºmero de identificaciÃ³n del afiliado],
						[Primer Apellido],[Segundo Apellido],[Primer Nombre],[Segundo Nombre],
						[CÃ³digo de la novedad],	[Nuevo valor 1],[Nuevo valor 2],[Nuevo valor 3],
						[Nuevo valor 4],[Nuevo valor 5],[Nuevo valor 6],[Nuevo valor 7],
						[Nuevo valor 8],[Nuevo valor 9],[Nuevo valor 10], 
				        NULL AS [Nuevo valor 11], NULL AS [Nuevo valor 12], NULL AS [Nuevo valor 13], NULL AS [Nuevo valor 14], NULL AS [Nuevo valor 15]
				 FROM  #Final 
			 ORDER BY [CÃ³digo de la novedad] ASC


		--	 select '#Final',* from #Final where [NÃºmero de identificaciÃ³n del afiliado] = '75091769'

				 DROP TABLE #final
				 DROP TABLE #DuplicadosC01
				 DROP TABLE #DuplicadosC02
				 DROP TABLE #DuplicadoC04
				 DROP TABLE #roaidmax
			---	 drop table #paraborrar
 
  
END