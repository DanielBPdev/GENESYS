<?xml version="1.0" encoding="UTF-8" ?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd"
                 version="2.1">


    <!-- ESPACIO PARA NAMED QUERIES JPA -->
    <named-query name="PagosSubsidioMonetario.consultar.registroInconsistenciasTarjetas">
        <query>
            SELECT rit
            FROM RegistroInconsistenciaTarjeta rit
            WHERE (rit.fechaTransaccion BETWEEN :fechaInicial AND :fechaFinal)
            AND rit.estadoResolucion =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoResolucionInconsistenciaEnum.PENDIENTE
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.consultar.registroInconsistenciaTarjetaPorId">
        <query>
            SELECT rit
            FROM RegistroInconsistenciaTarjeta rit
            WHERE rit.idRegistroInconsistenciaTarjeta = :idRegistro
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.consultar.historicoInconsistenciasTarjeta">
        <query>
            SELECT rit
            FROM RegistroInconsistenciaTarjeta rit
            WHERE (:numeroId IS NULL OR rit.numeroIdentificacion = :numeroId)
            AND (:tipoId IS NULL OR rit.tipoIdentificacion = :tipoId)
            AND (:tipoNovedad IS NULL OR rit.tipoNovedad = :tipoNovedad)
            AND (:estadoResolucion IS NULL OR rit.estadoResolucion = :estadoResolucion)
            AND (rit.fechaTransaccion BETWEEN :fechaInicial AND :fechaFinal)
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.buscarCuentaAdminSubsidioDTO.porID">
        <description>Consulta que busca una cuenta de administrado del subsidio a partir del id y convierte la respuesta
            en DTO
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas,per)
            FROM CuentaAdministradorSubsidio cas, AdministradorSubsidio adm, Persona per
            WHERE cas.idCuentaAdministradorSubsidio = :idCuentaAdmonSubsidio
            AND adm.idAdministradorSubsidio = cas.idAdministradorSubsidio
            AND per.idPersona = adm.idPersona
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.buscarCuentaAdminSubsido.id">
        <description>Consulta que busca una cuenta de administrador del subsidio a partir del id</description>
        <query>
            SELECT cas FROM CuentaAdministradorSubsidio cas WHERE cas.idCuentaAdministradorSubsidio =
            :idCuentaAdmonSubsidio
        </query>
    </named-query>

    <named-native-query name="PagosSubsidioMonetario.consultarCuentas.admin.subisidio.por.id"
        result-set-mapping="cuentaAdministradorSubsidioMapping">
        <query>
            SELECT cas.* FROM CuentaAdministradorSubsidio cas 
            WHERE cas.casId IN (:listadoIds)
        </query>
    </named-native-query>

    <named-query name="PagosSubsidioMonetario.buscarCuentaAdminSubsido.solicitudLiquidacionSubsidio">
        <description>Consulta que busca una cuenta de administrador del subsidio a partir de
            SolicitudLiquidacionSubsidio
        </description>
        <query>
            SELECT cas FROM CuentaAdministradorSubsidio cas WHERE cas.solicitudLiquidacionSubsidio =
            :solicitudLiquidacionSubsidio
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.buscarDetalles.subsidio.asignado">
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.DetalleSubsidioAsignadoDTO(dsa)
            FROM DetalleSubsidioAsignado dsa
            WHERE dsa.idDetalleSubsidioAsignado IN (:listadoIds)
        </query>
    </named-query>

    <named-query
            name="PagosSubsidioMonetario.DetalleSubsidioAsignado.buscarDetallesSubsidioAsignadoDTONoAnulados">
        <description>Consulta que trae los detalles de subsidio asignados que no estan en proceso de anulación
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.DetalleSubsidioAsignadoDTO (dsa)
            FROM DetalleSubsidioAsignado dsa
            WHERE dsa.idDetalleSubsidioAsignado NOT IN (:listaDetallesAnulados)
            AND dsa.idCuentaAdministradorSubsidio = :idCuentaAdmonSubsidio
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.TransaccionesFallidasSubsidio.buscarPorID">
        <description>Consulta que busca una transacción fallida por el id</description>
        <query>
            SELECT tfs
            FROM TransaccionesFallidasSubsidio tfs
            WHERE tfs.idTransaccionFallidaSubsidio = :idTransaccion
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.TransaccionesFallidasSubsidio.buscarTransacionesFallidasDTO.porRangoDeFechas1">
        <description>Consulta que obtiene las transacciones fallidas DTO por un rango de fechas</description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.TransaccionFallidaDTO (tfs, cas, per)
            FROM TransaccionesFallidasSubsidio tfs , CuentaAdministradorSubsidio cas, AdministradorSubsidio adm, Persona
            per
            WHERE (tfs.fechaHoraRegistro BETWEEN :fechaInicial AND :fechaFinal)
            AND tfs.idCuentaAdmistradorSubsidio = cas.idCuentaAdministradorSubsidio
            AND cas.idAdministradorSubsidio = adm.idAdministradorSubsidio
            AND adm.idPersona = per.idPersona
            AND tfs.estadoResolucion &lt;&gt;
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionFallidaEnum.CERRADO
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.DetalleSubsidioAsignadoDTO.asociado.cuentaAdministradorSubsidio">
        <description>Consulta que obtiene los detalles de subsidios asignados asociados a una cuenta de administrador de
            subsidio especifica
        </description>
        <query>
            SELECT DISTINCT new com.asopagos.subsidiomonetario.pagos.dto.DetalleSubsidioAsignadoDTO
            (dsa,empl,afi,grf,perBen,perAsu,dsa.periodoLiquidado,cas,sls)
            FROM DetalleSubsidioAsignado dsa,
            Empleador empl,
            Afiliado afi,
            GrupoFamiliar grf,
            BeneficiarioDetalle bed,
            Beneficiario ben,
            AdministradorSubsidio asu,
            Persona perAsu,
            Persona perBen,
            CuentaAdministradorSubsidio cas,
            SolicitudLiquidacionSubsidio sls
            WHERE dsa.idEmpleador = empl.idEmpleador
            AND dsa.idAfiliadoPrincipal = afi.idAfiliado
            AND dsa.idGrupoFamiliar = grf.idGrupoFamiliar
            AND dsa.idBeneficiarioDetalle = bed.idBeneficiarioDetalle
            AND bed.idBeneficiarioDetalle = ben.idBeneficiarioDetalle
            AND dsa.idAdministradorSubsidio = asu.idAdministradorSubsidio
            AND perAsu.idPersona = asu.idPersona
            AND sls.idProcesoLiquidacionSubsidio = dsa.idSolicitudLiquidacionSubsidio
            AND dsa.idCuentaAdministradorSubsidio = :idCuentaAdmonSubsidio
            AND ben.persona = perBen
            AND dsa.idCuentaAdministradorSubsidio = cas.idCuentaAdministradorSubsidio
            ORDER BY dsa.periodoLiquidado ASC
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.DetalleSubsidioAsignadoDTO.asociado.cuentaAdministradorSubsidio.ordenadosPorFecha">
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.DetalleSubsidioAsignadoDTO
            (dsa,empl,afi,grf,perBen,perAsu,dsa.periodoLiquidado,cas,sls)
            FROM DetalleSubsidioAsignado dsa,
            Empleador empl,
            Afiliado afi,
            GrupoFamiliar grf,
            BeneficiarioDetalle bed,
            Beneficiario ben,
            AdministradorSubsidio asu,
            Persona perAsu,
            Persona perBen,
            CuentaAdministradorSubsidio cas,
            SolicitudLiquidacionSubsidio sls
            WHERE dsa.idEmpleador = empl.idEmpleador
            AND dsa.idAfiliadoPrincipal = afi.idAfiliado
            AND dsa.idGrupoFamiliar = grf.idGrupoFamiliar
            AND dsa.idBeneficiarioDetalle = bed.idBeneficiarioDetalle
            AND bed.idBeneficiarioDetalle = ben.idBeneficiarioDetalle
            AND dsa.idAdministradorSubsidio = asu.idAdministradorSubsidio
            AND perAsu.idPersona = asu.idPersona
            AND sls.idProcesoLiquidacionSubsidio = dsa.idSolicitudLiquidacionSubsidio
            AND dsa.idCuentaAdministradorSubsidio = :idCuentaAdmonSubsidio
            AND ben.persona = perBen
            AND dsa.idCuentaAdministradorSubsidio = cas.idCuentaAdministradorSubsidio
            AND dsa.estado =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoSubsidioAsignadoEnum.DERECHO_ASIGNADO
            AND dsa.fechaTransaccionRetiro IS NULL
            ORDER BY dsa.fechaHoraCreacion ASC
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.buscarPor.tipoTransaccionAbono.estadoEnviado.MedioDePagoBancos">
        <description>Consulta que las cuentas de administrador de subsidio que sean de tipo abono, con estado enviado y
            tengan el medio de pago Bancos (Transferencia en este caso)
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas, per)
            FROM CuentaAdministradorSubsidio cas, AdministradorSubsidio adm, Persona per
            WHERE cas.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.ABONO
            AND cas.estadoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.ENVIADO
            AND cas.medioDePagoTransaccion = com.asopagos.enumeraciones.personas.TipoMedioDePagoEnum.TRANSFERENCIA
            AND cas.idAdministradorSubsidio = adm.idAdministradorSubsidio
            AND adm.idPersona = per.idPersona
        </query>
        <hint name="idCuentaAdministradorSubsidio" value="cas.idCuentaAdministradorSubsidio"></hint>
        <hint name="tipoIdAdminSubsidio" value="per.tipoIdentificacion"></hint>
        <hint name="numeroIdAdminSubsidio" value="per.numeroIdentificacion"></hint>
        <hint name="nombresApellidosAdminSubsidio" value="per.razonSocial"></hint>
        <hint name="codigoBancoAdminSubsidio" value="cas.codigoBancoAdmonSubsidio"></hint>
        <hint name="nombreBancoAdminSubsidio" value="cas.nombreBancoAdmonSubsidio"></hint>
        <hint name="tipoCuentaAdminSubsidio" value="cas.tipoCuentaAdmonSubsidio"></hint>
        <hint name="numeroCuentaAdminSubsidio" value="cas.numeroCuentaAdmonSubsidio"></hint>
        <hint name="tipoIdentificacionTitularCuentaAdminSubsidio"
              value="cas.tipoIdentificacionTitularCuentaAdmonSubsidio"></hint>
        <hint name="numeroIdentificacionTitularCuentaAdminSubsidio"
              value="cas.numeroIdentificacionTitularCuentaAdmonSubsidio"></hint>
        <hint name="nombreTitularCuentaAdminSubsidio" value="cas.nombreTitularCuentaAdmonSubsidio"></hint>
        <hint name="valorRealTransaccion" value="cas.valorRealTransaccion"></hint>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.buscarPor.tipoTransaccionAbono.estadoEnviado.MedioDePagoBancosConFiltro">
        <description>Consulta que las cuentas de administrador de subsidio que sean de tipo abono, con estado enviado y
            tengan el medio de pago Bancos (Transferencia en este caso)
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas, per)
            FROM CuentaAdministradorSubsidio cas, AdministradorSubsidio adm, Persona per
            WHERE cas.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.ABONO
            AND cas.estadoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.ENVIADO
            AND cas.medioDePagoTransaccion = com.asopagos.enumeraciones.personas.TipoMedioDePagoEnum.TRANSFERENCIA
            AND cas.idAdministradorSubsidio = adm.idAdministradorSubsidio
            AND adm.idPersona = per.idPersona
            AND (cas.codigoBancoAdmonSubsidio LIKE :textoFiltro
            OR cas.idCuentaAdministradorSubsidio LIKE :textoFiltro
            OR cas.medioDePagoTransaccion LIKE :textoFiltro
            OR cas.numeroTarjetaAdmonSubsidio LIKE :textoFiltro
            OR cas.nombreBancoAdmonSubsidio LIKE :textoFiltro
            OR cas.numeroCuentaAdmonSubsidio LIKE :textoFiltro
            OR cas.tipoIdentificacionTitularCuentaAdmonSubsidio LIKE :textoFiltro
            OR cas.numeroIdentificacionTitularCuentaAdmonSubsidio LIKE :textoFiltro
            OR cas.nombreTitularCuentaAdmonSubsidio LIKE :textoFiltro
            OR cas.tipoCuentaAdmonSubsidio LIKE :textoFiltro)
        </query>
        <hint name="idCuentaAdministradorSubsidio" value="cas.idCuentaAdministradorSubsidio"></hint>
        <hint name="tipoIdAdminSubsidio" value="per.tipoIdentificacion"></hint>
        <hint name="numeroIdAdminSubsidio" value="per.numeroIdentificacion"></hint>
        <hint name="nombresApellidosAdminSubsidio" value="per.razonSocial"></hint>
        <hint name="codigoBancoAdminSubsidio" value="cas.codigoBancoAdmonSubsidio"></hint>
        <hint name="nombreBancoAdminSubsidio" value="cas.nombreBancoAdmonSubsidio"></hint>
        <hint name="tipoCuentaAdminSubsidio" value="cas.tipoCuentaAdmonSubsidio"></hint>
        <hint name="numeroCuentaAdminSubsidio" value="cas.numeroCuentaAdmonSubsidio"></hint>
        <hint name="tipoIdentificacionTitularCuentaAdminSubsidio"
              value="cas.tipoIdentificacionTitularCuentaAdmonSubsidio"></hint>
        <hint name="numeroIdentificacionTitularCuentaAdminSubsidio"
              value="cas.numeroIdentificacionTitularCuentaAdmonSubsidio"></hint>
        <hint name="nombreTitularCuentaAdminSubsidio" value="cas.nombreTitularCuentaAdmonSubsidio"></hint>
        <hint name="valorRealTransaccion" value="cas.valorRealTransaccion"></hint>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.buscarPorEstadoAplicado.cualquierMedioDePago.adminSubsidio">
        <description>Consulta que trae las cuentas de administradores de subsidios si el estado es aplicado, con
            cualquier medio de pago y tienen el mismo administrador de subsidio
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas, per,
            cas.fechaHoraTransaccion)
            FROM CuentaAdministradorSubsidio cas, AdministradorSubsidio adm, Persona per
            WHERE cas.estadoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.APLICADO
            AND cas.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.ABONO
            AND cas.medioDePagoTransaccion = :medioDePago
            AND per.idPersona = adm.idPersona
            AND per.tipoIdentificacion = :tipoIdAdmin
            AND per.numeroIdentificacion = :numeroIdAdmin
            AND cas.idAdministradorSubsidio = adm.idAdministradorSubsidio
            AND EXISTS (SELECT 1 FROM DetalleSubsidioAsignado WHERE idCuentaAdministradorSubsidio =
            cas.idCuentaAdministradorSubsidio)
            ORDER BY cas.fechaHoraTransaccion,CASE WHEN cas.idCuentaOriginal IS NULL THEN
            cas.idCuentaAdministradorSubsidio ELSE cas.idCuentaOriginal END
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscarConvenio.usuarioGenesys">
        <description>Consulta que trae el convenio que tiene registrado un nombre de usuario especifico de genesys
        </description>
        <query>
            SELECT con
            FROM ConvenioTerceroPagador con
            WHERE con.usuarioAsignadoConvenio = :nombreUsuario
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscar.conveniosTerceroPagadorDTO.documentosSoporte">
        <description>Consulta que trae todos los convenios registrados del tercero pagador y los devuelve en forma de
            DTO
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.ConvenioTercerPagadorDTO(con,emp,ds,ubi)
            FROM ConvenioTerceroPagador con,DocumentoSoporteConvenio dsc, Ubicacion ubi, DocumentoSoporte ds, Empresa
            emp
            LEFT JOIN emp.persona per
            WHERE con.idEmpresa = emp.idEmpresa
            AND dsc.idConvenioTerceroPagador = con.idConvenio
            AND dsc.idDocumentoSoporte = ds.idDocumentoSoporte
            AND con.idUbicacion = ubi.idUbicacion
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.buscar.conveniosTerceroPagadorDTO">
        <description>Consulta que trae convenio registrado del tercero pagador</description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.ConvenioTercerPagadorDTO(con)
            FROM ConvenioTerceroPagador con
            WHERE con.idConvenio = :idConvenio
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.CuentaAdminSubsidio.buscar.todos.DTO">
        <description>Consulta que obtiene todos los registros de la cuenta del administrador de subsidio y los convierte
            en DTO
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO(cas)
            FROM CuentaAdministradorSubsidio cas
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.DetalleSubsidioAsignado.DTO.buscar.por.IDS">
        <description>Consulta que obtiene los detalles de subsidios asignados que contengan dichos IDs</description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.DetalleSubsidioAsignadoDTO (dsa)
            FROM DetalleSubsidioAsignado dsa
            WHERE dsa.idDetalleSubsidioAsignado IN (:listaIdsDetalles)
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.buscar.personaAutorizada.cobro.cuentaAdminSubsidio">
        <description>Consulta que obtiene el identificador de la persona autorizada que esta relacionada con ek registro
            de la cuenta del adminsitrador de subsidio
        </description>
        <query>
            SELECT rpa.idPersonaAutorizada
            FROM RetiroPersonaAutorizadaCobroSubsidio rpa
            WHERE rpa.idCuentaAdministradorSubsidio = :idCuentaAdmin
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.buscar.convenioTerceroPagador.por.id">
        <description>Consulta que obtiene un convenio de tercero pagador a partir del id</description>
        <query>
            SELECT con
            FROM ConvenioTerceroPagador con
            WHERE con.idConvenio = :idConvenioTerceroPagador
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.buscar.estado.archivo.retiro.tercero.pagador">
        <description>Consulta que obtiene el estado de la conciliación del documento del archivo del tercero pagador con
            la cuenta
        </description>
        <query>
            SELECT arr.estadoCargue
            FROM ArchivoRetiroTerceroPagador arr
            WHERE arr.idDocumento = :documento
            AND arr.versionDocumento = :versionDoc
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.buscar.inconsistenciasDTO.archivo.retiro.tercero.pagador">
        <description>Consulta que obtiene las incosistencias generadas en la conciliación del archivo de retiro del
            tercero pagador con la cuenta del administrado de subsidio
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.IncosistenciaConciliacionConvenioDTO(car,rar)
            FROM ArchivoRetiroTerceroPagador arr, RegistroArchivoRetiroTerceroPagador rar,
            CampoArchivoRetiroTerceroPagador car
            WHERE arr.idCargueArchivoRetTerPagSub = rar.idArchivoRetiroTerceroPagador
            AND rar.idRegistroArchivoRetTerPagSub = car.idRegistroArchivoRetiroTerceroPagador
            AND arr.idCargueArchivoRetTerPagSub = :idArchivo
            AND rar.estadoRegistro =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoRegistroCargueArchivoRetiroTerceroPagador.SIN_CONCILIAR
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.actualizar.estado.cuenta.conciliacion.archivo.retiro.tercero.pagador">
        <description>Consulta que permite actualizar el estado de todos los retiros de la cuenta del administrador del
            subsidio a CONCILIADO, los cuales fueron conciliados satisfactoriamente con sus respectivos registros de
            retiros del tercero pagador
        </description>
        <query>
            UPDATE CuentaAdministradorSubsidio cas SET cas.estadoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.CONCILIADO
            WHERE cas.idCuentaAdministradorSubsidio IN
            ( SELECT rar.idCuentaAdministradorSubsidio
            FROM ArchivoRetiroTerceroPagador arr, RegistroArchivoRetiroTerceroPagador rar
            WHERE arr.idCargueArchivoRetTerPagSub = :idArchivo
            AND arr.estadoCargue =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoArchivoRetiroTercerPagadorEnum.PROCESADO
            AND arr.idCargueArchivoRetTerPagSub = rar.idArchivoRetiroTerceroPagador
            )
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.CuentaAdminSubsidioDTO.consultar.abonos.cambio.medioDePago">
        <description>Consulta que se encarga de obtener los abonos candidatos a ser cambiados por medio de pago
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas, per)
            FROM CuentaAdministradorSubsidio cas, AdministradorSubsidio adm, Persona per
            WHERE cas.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.ABONO
            AND cas.estadoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.ENVIADO
            AND cas.fechaHoraTransaccion BETWEEN :fechaInicial AND :fechaFinal
            AND (:medioDePago IS NULL OR cas.medioDePagoTransaccion = :medioDePago)
            AND (:idCuentaAdmin IS NULL OR cas.idCuentaAdministradorSubsidio = :idCuentaAdmin)
            AND (:codigoBanco IS NULL OR cas.codigoBancoAdmonSubsidio = :codigoBanco)
            AND (:tipoCuenta IS NULL OR cas.tipoCuentaAdmonSubsidio = :tipoCuenta)
            AND (:numeroCuenta IS NULL OR cas.numeroCuentaAdmonSubsidio = :numeroCuenta)
            AND (:tipoIdTitular IS NULL OR cas.tipoIdentificacionTitularCuentaAdmonSubsidio = :tipoIdTitular)
            AND (:numeroIdTitular IS NULL OR cas.numeroIdentificacionTitularCuentaAdmonSubsidio = :numeroIdTitular)
            AND (:numeroTarjetaAdmin IS NULL OR cas.numeroTarjetaAdmonSubsidio = :numeroTarjetaAdmin)
            AND cas.idAdministradorSubsidio = adm.idAdministradorSubsidio
            AND adm.idPersona = per.idPersona
            AND (:numeroIdAdmin IS NULL OR per.numeroIdentificacion = :numeroIdAdmin)
            AND (:tipoIdAdmin IS NULL OR per.tipoIdentificacion = :tipoIdAdmin)
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.buscar.ConvenioTerceroPagador.por.Id.Empresa">
        <description>Consulta que se encarga de buscar si existe un convenio relacionado con el identificador de
            empresa
        </description>
        <query>
            SELECT con
            FROM ConvenioTerceroPagador con
            WHERE con.idEmpresa = :empresaId
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.mostar.NombreConvenios">
        <description>consulta que carga todos los nombres de los convenios de los terceros pagadores registrados
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.ConvenioTercerPagadorDTO(con.idConvenio,con.nombre)
            FROM ConvenioTerceroPagador con
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscar.registro.operacion.subsidio.por.id">
        <description>consulta encargada de buscar el registro de operación realizado en una transacción en linea
        </description>
        <query>
            SELECT rgs
            FROM RegistroOperacionTransaccionSubsidio rgs
            WHERE rgs.idRegistroOperacionesSubsidio = :idRegistro
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscar.cuenta.admin.subsidio.por.id.transaccion.tercero.pagador">
        <description>consulta encargada de buscar una cuenta de administrador de subsidio a partir del identificador de
            transacción del tercero pagador
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas)
            FROM CuentaAdministradorSubsidio cas
            WHERE cas.idTransaccionTerceroPagador = :idTransaccion
            AND ( cas.nombreTerceroPagador = :usuario
            AND cas.idPuntoDeCobro = :idPuntoCobro)
        </query>
    </named-query>
    <named-native-query
            name="PagosSubsidioMonetario.buscar.existenicia.cuenta.admin.subsidio.por.id.transaccion.tercero.pagador">
            <description>
                Consulta que permite determinar si existe ya un registro en la cuenta del administrador de subsidio que tengan los mismos parámetros de entrada que se ingresan en un retiro
            </description>
            <query>
                SELECT TOP (1) cas.casId
	                FROM CuentaAdministradorSubsidio cas WITH(NOLOCK)
	                WHERE cas.casIdTransaccionTerceroPagador = :idTransaccion
                    AND (:usuario IS NULL OR cas.casNombreTerceroPagado = :usuario)
                    AND (:idPuntoCobro IS NULL OR cas.casIdPuntoDeCobro = :idPuntoCobro)
            </query>
    </named-native-query>
    <named-query name="PagosSubsidioMonetario.buscar.cuenta.admin.subsidio.por.id.transaccion.tercero">
        <description>consulta encargada de buscar una cuenta de administrador de subsidio a partir del identificador de
            transacción del tercero pagador
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas)
            FROM CuentaAdministradorSubsidio cas
            WHERE cas.idTransaccionTerceroPagador = :idTransaccion
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscar.mediosDePagos.asociados.adminSubsidio">
        <description>consulta encargada de buscar los medios de pagos relacionados a un administrador de subsidio
        </description>
        <query>
            SELECT DISTINCT mdp.tipoMediopago
            FROM CuentaAdministradorSubsidio cas ,AdminSubsidioGrupo asg, MedioDePago mdp
            WHERE cas.idAdministradorSubsidio = asg.idAdminSubsidio
            AND asg.idMedioDePago = mdp.idMedioPago
            AND cas.idAdministradorSubsidio = :idAdminSubsidio
            AND mdp.tipoMediopago &lt;&gt; com.asopagos.enumeraciones.personas.TipoMedioDePagoEnum.EFECTIVO
            AND asg.medioPagoActivo = true
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscar.medios.de.pagos.por.tipo.tarjeta.admin.subsidio">
        <description>consulta encargada de buscar los registros de tipo tarjeta de medio de pago asociado a un
            administrador de subsidio. Se excluyen los id asociados a los abonos seleccionados en pantalla.
        </description>
        <query>
            SELECT mt
            FROM AdminSubsidioGrupo adm, MedioTarjeta mt
            WHERE adm.idMedioDePago = mt.idMedioPago
            AND adm.idAdminSubsidio = :idAdminSubsidio
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscar.medios.de.pagos.inactivo.por.tipo.tarjeta.admin.subsidio">
        <description>consulta encargada de buscar los registros de tipo tarjeta de medio de pago asociado a un
            administrador de subsidio. Se excluyen los id asociados a los abonos seleccionados en pantalla.
        </description>
        <query>
            SELECT mt
            FROM AdminSubsidioGrupo adm, MedioTarjeta mt
            WHERE adm.idMedioDePago = mt.idMedioPago
            AND adm.idAdminSubsidio = :idAdminSubsidio
            AND adm.medioPagoActivo = false
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscar.medios.de.pagos.por.tipo.transferencia.admin.subsidio">
        <description>consulta encargada de buscar los registros de tipo transferencia de medio de pago asociado a un
            administrador de subsidio. Se excluyen los id asociados a los abonos seleccionados en pantalla.
        </description>
        <query>
            SELECT new com.asopagos.dto.modelo.MedioDePagoModeloDTO(mt,ban)
            FROM AdminSubsidioGrupo adm, MedioTransferencia mt, Banco ban
            WHERE adm.idMedioDePago= mt.idMedioPago
            AND adm.idAdminSubsidio = :idAdminSubsidio
            AND ban.id = mt.idBanco
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscar.medios.de.pagos.inactivo.por.tipo.transferencia.admin.subsidio">
        <description>consulta encargada de buscar los registros de tipo transferencia de medio de pago asociado a un
            administrador de subsidio. Se excluyen los id asociados a los abonos seleccionados en pantalla.
        </description>
        <query>
            SELECT new com.asopagos.dto.modelo.MedioDePagoModeloDTO(mt,ban)
            FROM AdminSubsidioGrupo adm, MedioTransferencia mt, Banco ban
            WHERE adm.idMedioDePago= mt.idMedioPago
            AND adm.idAdminSubsidio = :idAdminSubsidio
            AND ban.id = mt.idBanco
            AND adm.medioPagoActivo = false
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscar.medios.de.pagos.por.tipo.efectivo.admin.subsidio">
        <description>consulta encargada de buscar los registros de tipo EFECTIVO de medio de pago asociado a un
            administrador de subsidio
        </description>
        <query>
            SELECT me
            FROM AdminSubsidioGrupo adm, MedioEfectivo me
            WHERE adm.idMedioDePago = me.idMedioPago
            AND adm.idAdminSubsidio = :idAdminSubsidio
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscar.medios.de.pagos.inactivo.por.tipo.efectivo.admin.subsidio">
        <description>consulta encargada de buscar los registros de tipo EFECTIVO de medio de pago asociado a un
            administrador de subsidio
        </description>
        <query>
            SELECT me
            FROM AdminSubsidioGrupo adm, MedioEfectivo me
            WHERE adm.idMedioDePago = me.idMedioPago
            AND adm.idAdminSubsidio = :idAdminSubsidio
            AND adm.medioPagoActivo = false
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.buscar.abonos.retiros.estado.solicitado.por.adminSubsidio">
        <description>Consulta que trae los abonos que estan en estado 'SOLICITADO' por transacción de retiro de un
            administrador de subsidio con un identificador de transacción de tercero pagador.
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas)
            FROM CuentaAdministradorSubsidio cas, AdministradorSubsidio adm, Persona per
            WHERE cas.estadoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.SOLICITADO
            AND cas.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.ABONO
            AND cas.idCuentaAdmonSubsidioRelacionado IN (
            SELECT cass.idCuentaAdministradorSubsidio
            FROM CuentaAdministradorSubsidio cass
            WHERE cass.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.RETIRO
            AND cass.idTransaccionTerceroPagador = :idTransaccionTerceroPagador
            )
            AND per.idPersona = adm.idPersona
            AND per.tipoIdentificacion = :tipoIdAdmin
            AND per.numeroIdentificacion = :numeroIdAdmin
            AND cas.idAdministradorSubsidio = adm.idAdministradorSubsidio
            ORDER BY cas.fechaHoraTransaccion ASC
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.buscar.abonos.retiros.estado.solicitado.por.adminSubsidio.puntoCobro">
        <description>Consulta que trae los abonos que estan en estado 'SOLICITADO' por transacción de retiro de un
            administrador de subsidio con un identificador de transacción de tercero pagador y un sitio cobro.
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas)
            FROM CuentaAdministradorSubsidio cas, AdministradorSubsidio adm, Persona per
            WHERE cas.estadoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.SOLICITADO
            AND cas.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.ABONO
            AND cas.idCuentaAdmonSubsidioRelacionado IN (
            SELECT cass.idCuentaAdministradorSubsidio
            FROM CuentaAdministradorSubsidio cass
            WHERE cass.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.RETIRO
            AND cass.idTransaccionTerceroPagador = :idTransaccionTerceroPagador
            AND cass.idPuntoDeCobro = :idPuntoCobro
            AND cass.nombreTerceroPagador = :usuario
            )
            AND per.idPersona = adm.idPersona
            AND per.tipoIdentificacion = :tipoIdAdmin
            AND per.numeroIdentificacion = :numeroIdAdmin
            AND cas.idAdministradorSubsidio = adm.idAdministradorSubsidio
            ORDER BY cas.fechaHoraTransaccion ASC
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.obtener.valor.retiro.por.adminSubsidio.idTerceroPagador">
        <description>Consulta que obtiene el valor del retiro realizado por un administrador de subsidio en especifico,
            asociado a un identificador de tercero pagador único.
        </description>
        <query>
            SELECT cas.valorRealTransaccion
            FROM CuentaAdministradorSubsidio cas,AdministradorSubsidio adm, Persona per
            WHERE cas.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.RETIRO
            AND cas.idTransaccionTerceroPagador = :idTransaccionTerceroPagador
            AND per.idPersona = adm.idPersona
            AND per.tipoIdentificacion = :tipoIdAdmin
            AND per.numeroIdentificacion = :numeroIdAdmin
            AND cas.idAdministradorSubsidio = adm.idAdministradorSubsidio
            ORDER BY cas.fechaHoraCreacionRegistro ASC
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.obtener.valor.retiro.por.id.cuenta">
        <description>Consulta que obtiene el valor del retiro realizado por un administrador de subsidio en especifico,
            asociado a un identificador de tercero pagador único.
        </description>
        <query>
            SELECT cas.valorRealTransaccion
            FROM CuentaAdministradorSubsidio cas
            WHERE cas.idCuentaAdministradorSubsidio = :idCuentaAdminSubsidio
        </query>
    </named-query>


    <named-query name="PagosSubsidioMonetario.consultar.cuentasAdministradorSubsidio.numeroRadicacion">
        <description>Consulta que permite obtener las cuentas de administrador de subsidio para los medios de pagos
            parametrizados en una liquidación
        </description>
        <query>
            SELECT cas FROM CuentaAdministradorSubsidio cas
            WHERE cas.idCuentaAdministradorSubsidio
            IN (SELECT DISTINCT cas.idCuentaAdministradorSubsidio FROM CuentaAdministradorSubsidio cas,
            DetalleSubsidioAsignado dsa, SolicitudLiquidacionSubsidio sls JOIN sls.solicitudGlobal sol
            WHERE cas.idCuentaAdministradorSubsidio = dsa.idCuentaAdministradorSubsidio
            AND dsa.idSolicitudLiquidacionSubsidio = sls.idProcesoLiquidacionSubsidio
            AND sol.numeroRadicacion = :numeroRadicacion
            AND (coalesce(:mediosDePago, null) is null or cas.medioDePagoTransaccion IN (:mediosDePago))
            AND cas.estadoLiquidacionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.GENERADO
            )
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.consultar.cuentaAdmini.medioTarjeta">
        <description>Consulta que permite obtener la cuenta para el medio de pago tarjeta en una devolucion
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas,per,tar)
            FROM CuentaAdministradorSubsidio cas, AdministradorSubsidio ads, Persona per, MedioTarjeta tar
            WHERE cas.idAdministradorSubsidio = ads.idAdministradorSubsidio
            AND ads.idPersona = per.idPersona
            AND cas.idMedioDePago = tar.idMedioPago
            AND cas.medioDePagoTransaccion = com.asopagos.enumeraciones.personas.TipoMedioDePagoEnum.TARJETA
            <!--AND cas.estadoLiquidacionSubsidio = com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.GENERADO-->
            AND cas.idCuentaAdministradorSubsidio = :idCuentaAdminSubsidio
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.consultar.cuentasAdministradorSubsidio.numeroRadicacion.ids">
        <description>Consulta que permite obtener las cuentas de administrador de subsidio para los medios de pagos
            parametrizados en una liquidación
        </description>
        <query>
            SELECT cas FROM CuentaAdministradorSubsidio cas
            WHERE cas.idCuentaAdministradorSubsidio
            IN (SELECT DISTINCT cas.idCuentaAdministradorSubsidio FROM CuentaAdministradorSubsidio cas,
            DetalleSubsidioAsignado dsa, SolicitudLiquidacionSubsidio sls JOIN sls.solicitudGlobal sol
            WHERE cas.idCuentaAdministradorSubsidio = dsa.idCuentaAdministradorSubsidio
            AND dsa.idSolicitudLiquidacionSubsidio = sls.idProcesoLiquidacionSubsidio
            AND sol.numeroRadicacion = :numeroRadicacion
            AND cas.medioDePagoTransaccion IN (:mediosDePago)
            AND cas.idCuentaAdministradorSubsidio IN (:identificadoresAbonesExitosos)
            AND cas.estadoLiquidacionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.GENERADO
            )
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscar.conveniosTerceroPagadorDTO.SinDocumentosSoporte">
        <description>Consulta que trae todos los convenios registrados del tercero pagador sin documentos de soporte y
            los devuelve en forma de DTO
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.ConvenioTercerPagadorDTO(con,emp,ubi)
            FROM ConvenioTerceroPagador con, Empresa emp, Ubicacion ubi
            LEFT JOIN emp.persona per
            WHERE con.idEmpresa = emp.idEmpresa
            AND con.idUbicacion = ubi.idUbicacion
            AND con.idConvenio NOT IN(
            SELECT dsc.idConvenioTerceroPagador
            FROM DocumentoSoporteConvenio dsc
            )
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.consultar.cuentasAdministradorSubsidio.ids">
        <description>Consulta que permite obtener las cuentas de administradores de subsidio asociadas a los
            identificadores parametrizados
        </description>
        <query>
            SELECT cas FROM CuentaAdministradorSubsidio cas
            WHERE cas.idCuentaAdministradorSubsidio IN (:identificadoresCuentas)
            AND cas.medioDePagoTransaccion IN (:mediosDePago)
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.consultar.cuentasAdministradorSubsidio.medioTarjeta.ids">
        <description>Consulta que permite obtener las cuentas de administradores de subsidio asociadas a los
            identificadores parametrizados en el medio de pago tarjeta
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas,per)
            FROM CuentaAdministradorSubsidio cas, AdministradorSubsidio ads, Persona per
            WHERE cas.idAdministradorSubsidio = ads.idAdministradorSubsidio
            AND ads.idPersona = per.idPersona
            AND cas.idCuentaAdministradorSubsidio IN (:identificadoresCuentas)
            AND cas.medioDePagoTransaccion = com.asopagos.enumeraciones.personas.TipoMedioDePagoEnum.TARJETA
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.consultar.retiro.tarjeta.para.reversion">
        <description>consulta que permite obtener el retiro asociado a un identificador de transacción del tercero
            pagador de tipo TARJETA.
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO(cas)
            FROM CuentaAdministradorSubsidio cas
            WHERE cas.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.RETIRO
            AND cas.medioDePagoTransaccion = com.asopagos.enumeraciones.personas.TipoMedioDePagoEnum.TARJETA
            AND cas.idTransaccionTerceroPagador = :idTransaccionTerceroPagador
            AND cas.numeroTarjetaAdmonSubsidio = :numeroTarjeta
        </query>
    </named-query>
    <named-query
            name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.buscar.abonos.asociados.estado.cobrado.retiros.para.reversion">
        <description>Consulta que trae los abonos que estan en estado 'COBRADO' asociados al retiro al cual se le
            efectuara el reverso
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas)
            FROM CuentaAdministradorSubsidio cas
            WHERE cas.estadoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.COBRADO
            AND cas.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.ABONO
            AND cas.idCuentaAdmonSubsidioRelacionado IN (
            SELECT cass.idCuentaAdministradorSubsidio
            FROM CuentaAdministradorSubsidio cass
            WHERE cass.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.RETIRO
            AND cass.idTransaccionTerceroPagador = :idTransaccionTerceroPagador
            )
            ORDER BY cas.fechaHoraCreacionRegistro ASC
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.SolicitudAnulacionSubsidioCobrado.idSolicitudAnulacionSubsidioCobrado">
        <description>Consulta de una solicitud de anulacion de subsidio cobrado por identificador</description>
        <query>
            SELECT sas
            FROM SolicitudAnulacionSubsidioCobrado sas
            WHERE sas.idSolicitudAnulacionSubsidioCobrado = :idSolicitudAnulacionSubsidioCobrado
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.consultar.archivo.consumo.ANIBOL.por.nombre">
        <description>Consulta que se encarga de buscar un archivo de consumo de tarjeta referente de ANIBOL por el
            nombre
        </description>
        <query>
            SELECT aca
            FROM ArchivoConsumosAnibol aca
            WHERE aca.nombreArchivo = :nombreDocumento
            AND aca.estadoArchivo =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.anibol.EstadoArchivoConsumoAnibolEnum.PROCESADO
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.consultar.archivo.consumo.tercero.pagador.efectivo.por.nombre">
        <description>Consulta que se encarga de buscar un archivo de consumo de tarjeta referente a tercero pagador
            efectivo
        </description>
        <query>
            SELECT ate
            FROM ArchivoRetiroTerceroPagadorEfectivo ate
            WHERE ate.nombreArchivo = :nombreDocumento
            AND ate.estadoArchivo =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.anibol.EstadoArchivoConsumoTerceroPagadorEfectivo.PROCESADO
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.buscar.ArchivoRetiroTerceroPagadorEfectivo.por.Id">
        <description>Consulta que se encarga de buscar un archivo de consumo de tarjeta referente a tercero pagador
            efectivo
        </description>
        <query>
            SELECT ate
            FROM ArchivoRetiroTerceroPagadorEfectivo ate
            WHERE ate.idArchivoRetiroTerceroPagadorEfectivo = :id
        </query>
    </named-query>

    <named-query
            name="PagosSubsidioMonetario.consultar.CuentaAdministradorSubsidioDTO.relacionadas.numero.tarjeta.registro.ANIBOL">
        <description>Consulta que se encarga de buscar las cuentas de administradores de subsidio relacionadas a un
            registro de tarjeta en el archivo de consumo de ANIBOL
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas)
            FROM CuentaAdministradorSubsidio cas
            WHERE cas.numeroTarjetaAdmonSubsidio = :numeroTarjeta
            AND cas.estadoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.APLICADO
            AND cas.medioDePagoTransaccion = com.asopagos.enumeraciones.personas.TipoMedioDePagoEnum.TARJETA
            ORDER BY cas.fechaHoraTransaccion ASC
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.consultar.Municipio.codigo.por.id">
        <description>Consulta que se encarga de buscar el codigo de un municipio de la CCF</description>
        <query>
            SELECT mun.codigo
            FROM Municipio mun
            WHERE mun.idMunicipio = :idMunicipio
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.consultar.registroSolicitudAnibol.por.id">
        <description></description>
        <query>
            SELECT rsa
            FROM RegistroSolicitudAnibol rsa
            WHERE rsa.idRegistroSolicitudAnibol = :idRegistroSolicitud
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.consultar.registroSolicitudAnibol.por.idProceso">
        <description></description>
        <query>
            SELECT rsa
            FROM RegistroSolicitudAnibol rsa
            WHERE rsa.idProceso = :idProceso
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.consultar.convenioTerceroPagador.por.nombre">
        <description>Consulta que permite obtener un convenio del tercero pagador por el nombre</description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.ConvenioTercerPagadorDTO(conv)
            FROM ConvenioTerceroPagador conv
            WHERE conv.nombre = :nombreConvenio
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.consultar.convenioTerceroPagador.por.nombre.genesys">
        <description>Consulta que permite obtener un convenio del tercero pagador por el nombre genesys</description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.ConvenioTercerPagadorDTO(conv)
            FROM ConvenioTerceroPagador conv
            WHERE conv.usuarioAsignadoConvenio = :nombreUsuarioGenesys
        </query>
    </named-query>
    <named-query name="PagosSubsidioMonetario.consultar.detalles.retiros.por.id">
        <description>Consulta que obtiene los detalles asociados a las cuentas cobradas a partir del id del retiro
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.DetalleSubsidioAsignadoDTO
            (dsa,empl,afi,grf,perBen,perAsu,dsa.periodoLiquidado,cas,sls)
            FROM DetalleSubsidioAsignado dsa,
            Empleador empl,
            Afiliado afi,
            GrupoFamiliar grf,
            BeneficiarioDetalle bed,
            Beneficiario ben,
            AdministradorSubsidio asu,
            Persona perAsu,
            Persona perBen,
            CuentaAdministradorSubsidio cas,
            SolicitudLiquidacionSubsidio sls
            WHERE dsa.idEmpleador = empl.idEmpleador
            AND dsa.idAfiliadoPrincipal = afi.idAfiliado
            AND dsa.idGrupoFamiliar = grf.idGrupoFamiliar
            AND ben.grupoFamiliar = grf.idGrupoFamiliar
            AND dsa.idBeneficiarioDetalle = bed.idBeneficiarioDetalle
            AND bed.idBeneficiarioDetalle = ben.idBeneficiarioDetalle
            AND dsa.idAdministradorSubsidio = asu.idAdministradorSubsidio
            AND perAsu.idPersona = asu.idPersona
            AND sls.idProcesoLiquidacionSubsidio = dsa.idSolicitudLiquidacionSubsidio
            AND ben.persona = perBen
            AND dsa.idCuentaAdministradorSubsidio = cas.idCuentaAdministradorSubsidio
            AND dsa.idCuentaAdministradorSubsidio IN (
            SELECT cuenta.idCuentaAdministradorSubsidio
            FROM CuentaAdministradorSubsidio cuenta
            WHERE cuenta.idCuentaAdmonSubsidioRelacionado = :idRetiro
            )
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.consultar.detalles.retiros.por.id.segundo.nivel">
        <description>Consulta que obtiene los detalles asociados a las cuentas cobradas a partir del id del retiro
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.DetalleSubsidioAsignadoDTO
            (dsa,empl,afi,grf,perBen,perAsu,dsa.periodoLiquidado,cas,sls)
            FROM DetalleSubsidioAsignado dsa,
            Empleador empl,
            Afiliado afi,
            GrupoFamiliar grf,
            BeneficiarioDetalle bed,
            Beneficiario ben,
            AdministradorSubsidio asu,
            Persona perAsu,
            Persona perBen,
            CuentaAdministradorSubsidio cas,
            SolicitudLiquidacionSubsidio sls
            WHERE dsa.idEmpleador = empl.idEmpleador
            AND dsa.idAfiliadoPrincipal = afi.idAfiliado
            AND dsa.idGrupoFamiliar = grf.idGrupoFamiliar
            AND ben.grupoFamiliar = grf.idGrupoFamiliar
            AND dsa.idBeneficiarioDetalle = bed.idBeneficiarioDetalle
            AND bed.idBeneficiarioDetalle = ben.idBeneficiarioDetalle
            AND dsa.idAdministradorSubsidio = asu.idAdministradorSubsidio
            AND perAsu.idPersona = asu.idPersona
            AND sls.idProcesoLiquidacionSubsidio = dsa.idSolicitudLiquidacionSubsidio
            AND ben.persona = perBen
            AND dsa.idCuentaAdministradorSubsidio = cas.idCuentaAdministradorSubsidio
            AND dsa.idCuentaAdministradorSubsidio IN (
            SELECT cuenta.idTransaccionOriginal
            FROM CuentaAdministradorSubsidio cuenta
            WHERE cuenta.idCuentaAdmonSubsidioRelacionado = :idRetiro
            )
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.consultar.detalles.cuentasAdmin.por.id">
        <description>Consulta que obtiene los detalles de subsidios por el id de la cuenta administrador</description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.DetalleSubsidioAsignadoDTO
            (dsa,empl,afi,grf,perBen,perAsu,dsa.periodoLiquidado,cas,sls)
            FROM DetalleSubsidioAsignado dsa,
            Empleador empl,
            Afiliado afi,
            GrupoFamiliar grf,
            BeneficiarioDetalle bed,
            Beneficiario ben,
            AdministradorSubsidio asu,
            Persona perAsu,
            Persona perBen,
            CuentaAdministradorSubsidio cas,
            SolicitudLiquidacionSubsidio sls
            WHERE dsa.idEmpleador = empl.idEmpleador
            AND dsa.idAfiliadoPrincipal = afi.idAfiliado
            AND dsa.idGrupoFamiliar = grf.idGrupoFamiliar
            AND dsa.idBeneficiarioDetalle = bed.idBeneficiarioDetalle 
            AND (ben.idBeneficiarioDetalle = bed.idBeneficiarioDetalle AND ben.afiliado = dsa.idAfiliadoPrincipal)
            AND dsa.idAdministradorSubsidio = asu.idAdministradorSubsidio
            AND perAsu.idPersona = asu.idPersona
            AND sls.idProcesoLiquidacionSubsidio = dsa.idSolicitudLiquidacionSubsidio
            AND ben.persona = perBen
            AND dsa.idCuentaAdministradorSubsidio = cas.idCuentaAdministradorSubsidio
            AND dsa.idCuentaAdministradorSubsidio = :idCuentaAdmin
        </query>
    </named-query>


    <named-query
            name="PagosSubsidioMonetario.buscarCuentaAdminSubsidioDTO.porListas">
        <description>Consulta que busca una cuenta de administrado del subsidio a partir del id de los empleadores y
            convierte la respuesta en DTO
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas)
            FROM CuentaAdministradorSubsidio cas, DetalleSubsidioAsignado dsa
            WHERE cas.idCuentaAdministradorSubsidio = dsa.idCuentaAdministradorSubsidio
            AND (coalesce(:listaIdEmpleadores, null) is null or dsa.idEmpleador in (:listaIdEmpleadores))
            AND (coalesce(:listaIdAfiliados, null) is null or dsa.idAfiliadoPrincipal in (:listaIdAfiliados))
            AND (coalesce(:listaIdBeneficiarios, null) is null or dsa.idBeneficiarioDetalle in (:listaIdBeneficiarios))
            AND (coalesce(:listaIdAdmin, null) is null or dsa.idAdministradorSubsidio in (:listaIdAdmin))
        </query>
    </named-query>

    <named-query
            name="PagosSubsidioMonetario.buscarCuentaAdminSubsidioDTO.porListas.anul">
        <description>Consulta que busca una cuenta anulada de administrado del subsidio a partir del id de los
            empleadores y convierte la respuesta en DTO
        </description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (casAnulada)
            FROM CuentaAdministradorSubsidio cas, DetalleSubsidioAsignado dsa, CuentaAdministradorSubsidio casAnulada
            WHERE cas.idCuentaAdministradorSubsidio = dsa.idCuentaAdministradorSubsidio
            AND cas.idCuentaAdmonSubsidioRelacionado = casAnulada.idCuentaAdministradorSubsidio
            AND (coalesce(:listaIdEmpleadores, null) is null or dsa.idEmpleador in (:listaIdEmpleadores))
            AND (coalesce(:listaIdAfiliados, null) is null or dsa.idAfiliadoPrincipal in (:listaIdAfiliados))
            AND (coalesce(:listaIdBeneficiarios, null) is null or dsa.idBeneficiarioDetalle in (:listaIdBeneficiarios))
            AND (coalesce(:listaIdAdmin, null) is null or dsa.idAdministradorSubsidio in (:listaIdAdmin))
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.buscar.medios.de.pagos.por.tipo.tarjeta.admin.subsidio.activo.cambio">
        <description>consulta encargada de buscar los registros de tipo tarjeta de medio de pago asociado a un
            administrador de subsidio. Se excluyen los id asociados a los abonos seleccionados en pantalla.
        </description>
        <query>
            SELECT DISTINCT mt
            FROM AdminSubsidioGrupo adm, MedioTarjeta mt
            WHERE adm.idMedioDePago = mt.idMedioPago
            AND adm.idAdminSubsidio = :idAdminSubsidio
            AND adm.medioPagoActivo = true
            AND mt.numeroTarjeta NOT IN (SELECT DISTINCT ISNULL(numeroTarjetaAdmonSubsidio,-1) FROM
            CuentaAdministradorSubsidio WHERE idCuentaAdministradorSubsidio IN (:lstIdsCuentas))


            <!-- SELECT DISTINCT mt
			FROM AdminSubsidioGrupo adm, MedioTarjeta mt
			WHERE adm.idMedioDePago = mt.idMedioPago
			AND adm.idAdminSubsidio = :idAdminSubsidio
			AND adm.medioPagoActivo = true
			AND mt.numeroTarjeta NOT IN (SELECT DISTINCT numeroTarjetaAdmonSubsidio FROM CuentaAdministradorSubsidio WHERE idCuentaAdministradorSubsidio IN (:lstIdsCuentas)) -->
        </query>
    </named-query>

    <named-query
            name="PagosSubsidioMonetario.buscar.medios.de.pagos.por.tipo.transferencia.admin.subsidio.activo.cambio">
        <description>consulta encargada de buscar los registros de tipo transferencia de medio de pago asociado a un
            administrador de subsidio. Se excluyen los id asociados a los abonos seleccionados en pantalla.
        </description>
        <query>
            SELECT DISTINCT new com.asopagos.dto.modelo.MedioDePagoModeloDTO(mt,ban)
            FROM AdminSubsidioGrupo adm, MedioTransferencia mt, Banco ban
            WHERE adm.idMedioDePago= mt.idMedioPago
            AND adm.idAdminSubsidio = :idAdminSubsidio
            AND ban.id = mt.idBanco
            AND adm.medioPagoActivo = true
            AND NOT EXISTS (SELECT c FROM CuentaAdministradorSubsidio c
            WHERE c.codigoBancoAdmonSubsidio = ban.codigo
            AND c.tipoCuentaAdmonSubsidio = mt.tipoCuenta
            AND c.numeroCuentaAdmonSubsidio = mt.numeroCuenta
            AND c.idCuentaAdministradorSubsidio IN (:lstIdsCuentas))
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.buscar.medios.de.pagos.por.tipo.efectivo.admin.subsidio.cambio">
        <description>consulta encargada de buscar los registros de tipo EFECTIVO de medio de pago asociado a un
            administrador de subsidio
        </description>
        <query>
            SELECT me
            FROM AdminSubsidioGrupo adm, MedioEfectivo me
            WHERE adm.idMedioDePago = me.idMedioPago
            AND adm.idAdminSubsidio = :idAdminSubsidio
            ORDER BY me.idMedioPago
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.buscar.medioDePagos.Id">
        <description></description>
        <query>
            SELECT new com.asopagos.dto.modelo.MedioDePagoModeloDTO(mt,ban)
            FROM MedioTransferencia mt, Banco ban
            WHERE ban.id = mt.idBanco
            AND mt.idMedioPago = :idMedioDePago
        </query>
    </named-query>

    <named-query
            name="PagosSubsidioMonetario.buscarTempArchivoRetiroTerceroPagadorEfectivoDTO.porIDConvenio">
        <description>Consulta que busca una TempArchivoRetiroTerceroPagadorEfectivo del id del convenio</description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.TempArchivoRetiroTerceroPagadorEfectivoDTO (t)
            FROM TempArchivoRetiroTerceroPagadorEfectivo t
            WHERE idConvenio = :idConvenio
            AND archivoRetiroTerceroPagadorEfectivo = :idArchivoRetiroTerceroPagadorEfectivo
            AND resultado = com.asopagos.enumeraciones.core.ReultadoValidacionCampoEnum.EXITOSO
        </query>
    </named-query>

    <named-query
            name="PagosSubsidioMonetario.consultar.retiros.estado.solicitado">
        <description>Consulta que busca los retiros en estado solicitado</description>
        <query>
            SELECT new com.asopagos.subsidiomonetario.pagos.dto.CuentaAdministradorSubsidioDTO (cas, per, mun, dep)
            FROM CuentaAdministradorSubsidio cas, AdministradorSubsidio adm, Persona per, SitioPago sip, Infraestructura
            inf, Municipio mun, Departamento dep
            WHERE cas.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.RETIRO
            AND cas.idCuentaAdministradorSubsidio IN (
            SELECT cass.idCuentaAdmonSubsidioRelacionado
            FROM CuentaAdministradorSubsidio cass
            WHERE cass.estadoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.EstadoTransaccionSubsidioEnum.SOLICITADO
            AND cass.tipoTransaccionSubsidio =
            com.asopagos.enumeraciones.subsidiomonetario.pagos.TipoTransaccionSubsidioMonetarioEnum.ABONO

            )
            AND per.idPersona = adm.idPersona
            AND cas.idAdministradorSubsidio = adm.idAdministradorSubsidio
            AND sip.id = cas.idSitioDeCobro
            AND inf.id = sip.infraestructura
            AND mun.idMunicipio = inf.municipio
            AND dep.idDepartamento = mun.idDepartamento
            AND cas.fechaHoraCreacionRegistro BETWEEN :fechaInicio AND :fechaFin
            ORDER BY cas.fechaHoraTransaccion DESC
        </query>
    </named-query>


    <named-query
            name="PagosSubsidioMonetario.consultar.archivoTransDetSubTodos">
        <description>Consulta todos los ArchivoTransDetaSubsidio</description>
        <query>
            SELECT atds
            FROM ArchivoTransDetaSubsidio atds ORDER BY atds.fechaGeneracion desc
        </query>
    </named-query>


    <named-query
            name="PagosSubsidioMonetario.consultar.archivoTransDetSubEstado">
        <description>Consulta todos los ArchivoTransDetaSubsidio por un estado</description>
        <query>
            SELECT atds
            FROM ArchivoTransDetaSubsidio atds WHERE atds.estado =:estado
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.buscar.detalles.subsidio">
        <description>Consulta los detalles asociados a la administrador del subsidio</description>
        <query>
            SELECT dsa
            FROM DetalleSubsidioAsignado dsa
            WHERE dsa.idCuentaAdministradorSubsidio IN (:id)
            ORDER BY dsa.fechaHoraUltimaModificacion asc
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.buscar.cuenta.administrador.subsidio">
        <description>Consulta la tabla cuentaAdminitradorSubsidio</description>
        <query>
            SELECT cas
            FROM CuentaAdministradorSubsidio cas
            WHERE cas.idTransaccionOriginal IN (SELECT cass.idCuentaAdministradorSubsidio
            FROM CuentaAdministradorSubsidio cass
            WHERE cass.idCuentaAdmonSubsidioRelacionado = :idRetiro)
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.buscar.abonos.relacionados.retiro">
        <description>Consulta la tabla cuentaAdminitradorSubsidio</description>
        <query>
            SELECT cass
            FROM CuentaAdministradorSubsidio cass
            WHERE cass.idCuentaAdmonSubsidioRelacionado = :idRetiro
        </query>
    </named-query>

    <!-- ESPACIO PARA NAMED QUERIES NATIVOS -->
    <named-native-query
            name="PagosSubsidioMonetario.TransaccionesFallidasSubsidio.buscarTransacionesFallidasDTO.porRangoDeFechas">
        <description>Consulta que obtiene las transacciones fallidas DTO por un rango de fechas
        </description>
        <query>
            SELECT
            tfs.tfsId,
            tfs.tfsFechaHoraRegistro,
            tfsCanal,
            tfsEstadoResolucion,
            tfsResultadoGestion,
            tfs.tfsAccionesRealizadaParaResolverCaso,
            tfsTipoTransaccionPagoSubsidio,
            tfsCuentaAdministradorSubsidio,
            cas.casId,
            cas.casFechaHoraCreacionRegistro,
            cas.casUsuarioCreacionRegistro,
            cas.casTipoTransaccionSubsidio,
            cas.casEstadoTransaccionSubsidio,
            cas.casOrigenTransaccion,
            cas.casMedioDePagoTransaccion,
            cas.casValorOriginalTransaccion,
            cas.casCodigoBanco,
            cas.casNombreTitularCuentaAdmonSubsidio,
            cas.casTipoCuentaAdmonSubsidio,
            cas.casNumeroCuentaAdmonSubsidio,
            cas.casTipoIdentificacionTitularCuentaAdmonSubsidio,
            cas.casNumeroIdentificacionTitularCuentaAdmonSubsidio,
            cas.casValorRealTransaccion,
            cas.casFechaHoraTransaccion,
            cas.casUsuarioTransaccion,
            cas.casIdCuentaAdmonSubsidioRelacionado,
            cas.casFechaHoraUltimaModificacion,
            cas.casUsuarioUltimaModificacion,
            cas.casAdministradorSubsidio,
            cas.casMedioDePago,
            cas.casEmpleador,
            cas.casAfiliadoPrincipal,
            cas.casBeneficiarioDetalle,
            cas.casGrupoFamiliar,
            cas.casSolicitudLiquidacionSubsidio
            FROM TransaccionesFallidasSubsidio tfs , CuentaAdministradorSubsidio cas, AdministradorSubsidio adm, Persona
            per
            WHERE tfsFechaHoraRegistro BETWEEN :fechaInicial AND :fechaFinal
            AND tfs.tfsCuentaAdministradorSubsidio = cas.casId
            AND cas.casAdministradorSubsidio = adm.asuId
            AND adm.asuPersona = per.perId
            AND tfs.tfsEstadoResolucion != 'CERRADO'
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.buscar.mediosDePagosInactivos.asociados.adminSubsidio">
        <description>consulta encargada de buscar los medios de pagos relacionados a un administrador de subsidio
        </description>
        <query>
            SELECT DISTINCT mdp.mdpTipo
            FROM AdminSubsidioGrupo asg
            LEFT JOIN MedioDePago mdp ON asg.asgMedioDePago = mdp.mdpId
            LEFT JOIN MedioTarjeta mtr ON mtr.mdpId = mdp.mdpId
            LEFT JOIN MedioTransferencia met ON met.mdpId = mdp.mdpId
            LEFT JOIN Banco ban ON ban.banId = met.metBanco
            LEFT JOIN (SELECT cas.casId, cas.casNumeroTarjetaAdmonSubsidio,cas.casCodigoBanco,
            cas.casTipoCuentaAdmonSubsidio,casNumeroCuentaAdmonSubsidio
            FROM CuentaAdministradorSubsidio cas
            WHERE cas.casId in(:cuentas)) cuenta ON mtr.mtrNumeroTarjeta = cuenta.casNumeroTarjetaAdmonSubsidio
            OR (ban.banCodigo = cuenta.casCodigoBanco
            AND met.metTipoCuenta = cuenta.casTipoCuentaAdmonSubsidio
            AND met.metNumeroCuenta = cuenta.casNumeroCuentaAdmonSubsidio)
            WHERE 1=1
            AND asg.asgMedioPagoActivo = 1
            AND mdp.mdpTipo &lt;&gt; 'EFECTIVO'
            AND asg.asgAdministradorSubsidio = :idAdminSubsidio
            AND cuenta.casId IS NULL
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.acualizar.dispesion.estado">
        <description></description>
        <query>
            UPDATE cas
            SET cas.casEstadoTransaccionSubsidio = CASE WHEN cas.casValorRealTransaccion = 0 THEN 'COBRADO' ELSE
            :estadoTransaccion END
            FROM CuentaAdministradorSubsidio cas
            WHERE cas.casId
            IN (SELECT DISTINCT cas.casId
            FROM CuentaAdministradorSubsidio cas,
            DetalleSubsidioAsignado dsa,
            SolicitudLiquidacionSubsidio sls,
            solicitud sol
            WHERE cas.casId = dsa.dsaCuentaAdministradorSubsidio
            AND dsa.dsaSolicitudLiquidacionSubsidio = sls.slsId
            AND sol.solId=sls.slsSolicitudGlobal
            AND sol.solNumeroRadicacion = :numeroRadicacion
            AND cas.casMedioDePagoTransaccion IN (:lstMediosPago)
            AND cas.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND (:sizeabonosExitosos IS NULL OR cas.casId in (:abonosExitosos)))
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.CuentaAdminSubsidioDTO.generar.informes.retiro.uno">
        <description>
            Consulta que se encarga de filtrar los registros de la cuenta del administrador del subsidio para generar
            los informes de retiro SIN CONCILIAR con las dos listas diferentes de null.
            3-3-2022: Se modifica la consulta adicionando los cambios para el GLPI 49367. Campos: establecimientoCodigo,
            establecimientoNombre, fechaTransaccionConsumo
        </description>
        <query>
            SELECT DISTINCT casId,
            casFechaHoraCreacionRegistro ,
            casUsuarioCreacionRegistro ,
            casTipoTransaccionSubsidio ,
            casEstadoTransaccionSubsidio ,
            casEstadoLiquidacionSubsidio ,
            casOrigenTransaccion ,
            casMedioDePagoTransaccion ,
            casNumeroTarjetaAdmonSubsidio ,
            casCodigoBanco ,
            casNombreBanco ,
            casTipoCuentaAdmonSubsidio ,
            casNumeroCuentaAdmonSubsidio ,
            casTipoIdentificacionTitularCuentaAdmonSubsidio ,
            casNumeroIdentificacionTitularCuentaAdmonSubsidio ,
            casNombreTitularCuentaAdmonSubsidio ,
            casFechaHoraTransaccion ,
            casUsuarioTransaccion ,
            casValorOriginalTransaccion ,
            casValorRealTransaccion ,
            casIdTransaccionOriginal ,
            casIdRemisionDatosTerceroPagador ,
            casIdTransaccionTerceroPagador ,
            casNombreTerceroPagado ,
            casIdCuentaAdmonSubsidioRelacionado ,
            casFechaHoraUltimaModificacion ,
            casUsuarioUltimaModificacion ,
            casAdministradorSubsidio ,
            casSitioDePago ,
            casSitioDeCobro ,
            casMedioDePago ,
            casSolicitudLiquidacionSubsidio ,
            casCondicionPersonaAdmin ,
            CASE
            WHEN cas.casSitioDePago IS NOT NULL
            THEN (
            SELECT dbo.SitioPago.sipNombre
            FROM dbo.SitioPago
            WHERE dbo.SitioPago.sipId = cas.casSitioDePago
            )
            ELSE NULL
            END AS nombreSitioPago,
            CASE
            WHEN cas.casSitioDeCobro IS NOT NULL
            THEN (
            SELECT CONCAT(dbo.Departamento.depNombre,',',dbo.Municipio.munNombre)
            FROM dbo.SitioPago
            INNER JOIN dbo.Infraestructura ON dbo.SitioPago.sipInfraestructura = dbo.Infraestructura.infId
            INNER JOIN dbo.Municipio ON dbo.Municipio.munId = dbo.Infraestructura.infMunicipio
            INNER JOIN dbo.Departamento ON dbo.Departamento.depId = dbo.Municipio.munDepartamento
            WHERE dbo.SitioPago.sipId = cas.casSitioDeCobro
            )
            ELSE NULL
            END AS nombreSitioCobro,
            adminPer.perRazonSocial AS adminSubsidio,
            personaAutorizada.perRazonSocial AS personaAutorizada ,
            adminPer.perTipoIdentificacion,
            adminPer.perNumeroIdentificacion,
            casEmpleador,
            casAfiliadoPrincipal,
            casBeneficiarioDetalle,
            casIdPuntoDeCobro,
            cas.casNombreTerceroPagado as establecimientoCodigo,
            est.estNombre AS establecimientoNombre,
            rac.racFechaTransaccion as fechaTransaccionConsumo
            FROM dbo.CuentaAdministradorSubsidio AS cas
            LEFT join DetalleSubsidioAsignado dsa on cas.casId = dsa.dsaCuentaAdministradorSubsidio
            INNER JOIN dbo.AdministradorSubsidio AS admin ON admin.asuId = cas.casAdministradorSubsidio
            INNER JOIN dbo.Persona AS adminPer ON adminPer.perId = admin.asuPersona
            LEFT JOIN dbo.RetiroPersonaAutorizadaCobroSubsidio AS retPer ON cas.casId =
            retPer.rpaCuentaAdministradorSubsidio
            LEFT JOIN dbo.Persona AS personaAutorizada ON personaAutorizada.perId = retPer.rpaPersonaAutorizada
            LEFT JOIN EstablecimientosMediosPago AS est ON est.estCodigo = cas.casNombreTerceroPagado
            LEFT JOIN RegistroArchivoConsumosAnibol AS rac on rac.racCodigoAutorizacion =
            cas.casIdTransaccionTerceroPagador
            WHERE cas.casTipoTransaccionSubsidio IN ('RETIRO', 'AJUSTE_TRANSACCION_RETIRO_INCOMPLETA')
            AND (:nombreConvenio IS NULL OR (:nombreConvenio = 'TODOS' AND cas.casNombreTerceroPagado IS NOT NULL AND
            cas.casNombreTerceroPagado IN (select distinct(con.conNombre) from ConvenioTerceroPagador con)) OR
            cas.casNombreTerceroPagado = :nombreConvenio)
            AND cas.casEstadoTransaccionSubsidio IS NULL
            AND cas.casFechaHoraTransaccion BETWEEN :fechaInicial AND :fechaFinal
            AND (:numTarjetaAdmon IS NULL OR cas.casNumeroTarjetaAdmonSubsidio = :numTarjetaAdmon)
            AND (:numIdTitularCuentaAdmon IS NULL OR cas.casNumeroIdentificacionTitularCuentaAdmonSubsidio =
            :numIdTitularCuentaAdmon)
            AND (:tipoIdTitularCuentaAdmon IS NULL OR cas.casTipoIdentificacionTitularCuentaAdmonSubsidio =
            :tipoIdTitularCuentaAdmon)
            AND (:periodoLiquidado IS NULL OR dsa.dsaPeriodoLiquidado = CAST(:periodoLiquidado AS DATE))
            AND (:sizeListaIdsAfiliados = 0 OR dsa.dsaAfiliadoPrincipal IN (:listaIdsAfiliados))
            AND (:sizeListaIdsBeneficiarios = 0 OR dsa.dsaBeneficiarioDetalle IN (:listaIdsBeneficiarios))
            AND (:idDetalleSubsidio IS NULL OR dsa.dsaId = :idDetalleSubsidio)
            AND (:medioDePago IS NULL OR cas.casmedioDePagoTransaccion = :medioDePago)
            AND (:codigoBanco IS NULL OR cas.cascodigoBanco = :codigoBanco)
            AND (:tipoCuenta IS NULL OR cas.castipoCuentaAdmonSubsidio = :tipoCuenta)
            AND (:numCuentaAdmon IS NULL OR cas.casNumeroCuentaAdmonSubsidio = :numCuentaAdmon)


            UNION ALL

            SELECT DISTINCT casId,
            casFechaHoraCreacionRegistro ,
            casUsuarioCreacionRegistro ,
            casTipoTransaccionSubsidio ,
            casEstadoTransaccionSubsidio ,
            casEstadoLiquidacionSubsidio ,
            casOrigenTransaccion ,
            casMedioDePagoTransaccion ,
            casNumeroTarjetaAdmonSubsidio ,
            casCodigoBanco ,
            casNombreBanco ,
            casTipoCuentaAdmonSubsidio ,
            casNumeroCuentaAdmonSubsidio ,
            casTipoIdentificacionTitularCuentaAdmonSubsidio ,
            casNumeroIdentificacionTitularCuentaAdmonSubsidio ,
            casNombreTitularCuentaAdmonSubsidio ,
            casFechaHoraTransaccion ,
            casUsuarioTransaccion ,
            casValorOriginalTransaccion ,
            casValorRealTransaccion ,
            casIdTransaccionOriginal ,
            casIdRemisionDatosTerceroPagador ,
            casIdTransaccionTerceroPagador ,
            casNombreTerceroPagado ,
            casIdCuentaAdmonSubsidioRelacionado ,
            casFechaHoraUltimaModificacion ,
            casUsuarioUltimaModificacion ,
            casAdministradorSubsidio ,
            casSitioDePago ,
            casSitioDeCobro ,
            casMedioDePago ,
            casSolicitudLiquidacionSubsidio ,
            casCondicionPersonaAdmin ,
            CASE
            WHEN cas.casSitioDePago IS NOT NULL
            THEN (
            SELECT dbo.SitioPago.sipNombre
            FROM dbo.SitioPago
            WHERE dbo.SitioPago.sipId = cas.casSitioDePago
            )
            ELSE NULL
            END AS nombreSitioPago,
            CASE
            WHEN cas.casSitioDeCobro IS NOT NULL
            THEN (
            SELECT CONCAT(dbo.Departamento.depNombre,',',dbo.Municipio.munNombre)
            FROM dbo.SitioPago
            INNER JOIN dbo.Infraestructura ON dbo.SitioPago.sipInfraestructura = dbo.Infraestructura.infId
            INNER JOIN dbo.Municipio ON dbo.Municipio.munId = dbo.Infraestructura.infMunicipio
            INNER JOIN dbo.Departamento ON dbo.Departamento.depId = dbo.Municipio.munDepartamento
            WHERE dbo.SitioPago.sipId = cas.casSitioDeCobro
            )
            ELSE NULL
            END AS nombreSitioCobro,
            adminPer.perRazonSocial AS adminSubsidio,
            personaAutorizada.perRazonSocial AS personaAutorizada ,
            adminPer.perTipoIdentificacion,
            adminPer.perNumeroIdentificacion,
            casEmpleador,
            casAfiliadoPrincipal,
            casBeneficiarioDetalle,
            casIdPuntoDeCobro,
            cas.casNombreTerceroPagado as establecimientoCodigo,
            est.estNombre AS establecimientoNombre,
            rac.racFechaTransaccion as fechaTransaccionConsumo
            FROM dbo.CuentaAdministradorSubsidio AS cas
            LEFT join DetalleSubsidioAsignado dsa on cas.casId = dsa.dsaCuentaAdministradorSubsidio
            INNER JOIN dbo.AdministradorSubsidio AS admin ON admin.asuId = cas.casAdministradorSubsidio
            INNER JOIN dbo.Persona AS adminPer ON adminPer.perId = admin.asuPersona
            LEFT JOIN dbo.RetiroPersonaAutorizadaCobroSubsidio AS retPer ON cas.casId =
            retPer.rpaCuentaAdministradorSubsidio
            LEFT JOIN dbo.Persona AS personaAutorizada ON personaAutorizada.perId = retPer.rpaPersonaAutorizada
            LEFT JOIN EstablecimientosMediosPago AS est ON est.estCodigo = cas.casNombreTerceroPagado
            LEFT JOIN RegistroArchivoConsumosAnibol AS rac on rac.racCodigoAutorizacion =
            cas.casIdTransaccionTerceroPagador
            WHERE cas.casTipoTransaccionSubsidio IN ('RETIRO', 'AJUSTE_TRANSACCION_RETIRO_INCOMPLETA')
            AND (:nombreConvenio IS NULL OR (:nombreConvenio = 'TODOS' AND cas.casNombreTerceroPagado IS NOT NULL AND
            cas.casNombreTerceroPagado IN (select distinct(con.conNombre) from ConvenioTerceroPagador con)) OR
            cas.casNombreTerceroPagado = :nombreConvenio)
            AND cas.casEstadoTransaccionSubsidio IS NULL
            AND cas.casFechaHoraTransaccion BETWEEN :fechaInicial AND :fechaFinal
            AND (:numTarjetaAdmon IS NULL OR cas.casNumeroTarjetaAdmonSubsidio = :numTarjetaAdmon)
            AND (:numIdTitularCuentaAdmon IS NULL OR cas.casNumeroIdentificacionTitularCuentaAdmonSubsidio =
            :numIdTitularCuentaAdmon)
            AND (:tipoIdTitularCuentaAdmon IS NULL OR cas.casTipoIdentificacionTitularCuentaAdmonSubsidio =
            :tipoIdTitularCuentaAdmon)
            AND (:periodoLiquidado IS NULL OR dsa.dsaPeriodoLiquidado = CAST(:periodoLiquidado AS DATE))
            AND (:sizeListaIdsAfiliados = 0 OR dsa.dsaAfiliadoPrincipal IN (:listaIdsAfiliados))
            AND (:sizeListaIdsBeneficiarios = 0 OR dsa.dsaBeneficiarioDetalle IN (:listaIdsBeneficiarios))
            AND (:idDetalleSubsidio IS NULL OR dsa.dsaId = :idDetalleSubsidio)
            AND (:medioDePago IS NULL OR cas.casmedioDePagoTransaccion = :medioDePago)
            AND (:codigoBanco IS NULL OR cas.cascodigoBanco = :codigoBanco)
            AND (:tipoCuenta IS NULL OR cas.castipoCuentaAdmonSubsidio = :tipoCuenta)
            AND (:numCuentaAdmon IS NULL OR cas.casNumeroCuentaAdmonSubsidio = :numCuentaAdmon)
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.CuentaAdminSubsidioDTO.generar.informes.retiro.dos">
        <description>
            Consulta que se encarga de filtrar los registros de la cuenta del administrador del subsidio para generar
            los informes de retiro cuando el estado es CONCILIADO con las dos listas diferentes de null.
            3-3-2022: Se modifica la consulta adicionando los cambios para el GLPI 49367. Campos: establecimientoCodigo,
            establecimientoNombre, fechaTransaccionConsumo.
        </description>
        <query>
            SELECT DISTINCT casId,
            casFechaHoraCreacionRegistro ,
            casUsuarioCreacionRegistro ,
            casTipoTransaccionSubsidio ,
            casEstadoTransaccionSubsidio ,
            casEstadoLiquidacionSubsidio ,
            casOrigenTransaccion ,
            casMedioDePagoTransaccion ,
            casNumeroTarjetaAdmonSubsidio ,
            casCodigoBanco ,
            casNombreBanco ,
            casTipoCuentaAdmonSubsidio ,
            casNumeroCuentaAdmonSubsidio ,
            casTipoIdentificacionTitularCuentaAdmonSubsidio ,
            casNumeroIdentificacionTitularCuentaAdmonSubsidio ,
            casNombreTitularCuentaAdmonSubsidio ,
            casFechaHoraTransaccion ,
            casUsuarioTransaccion ,
            casValorOriginalTransaccion ,
            casValorRealTransaccion ,
            casIdTransaccionOriginal ,
            casIdRemisionDatosTerceroPagador ,
            casIdTransaccionTerceroPagador ,
            casNombreTerceroPagado ,
            casIdCuentaAdmonSubsidioRelacionado ,
            casFechaHoraUltimaModificacion ,
            casUsuarioUltimaModificacion ,
            casAdministradorSubsidio ,
            casSitioDePago ,
            casSitioDeCobro ,
            casMedioDePago ,
            casSolicitudLiquidacionSubsidio ,
            casCondicionPersonaAdmin ,
            CASE
            WHEN cas.casSitioDePago IS NOT NULL
            THEN (
            SELECT dbo.SitioPago.sipNombre
            FROM dbo.SitioPago
            WHERE dbo.SitioPago.sipId = cas.casSitioDePago
            )
            ELSE NULL
            END AS nombreSitioPago,
            CASE
            WHEN cas.casSitioDeCobro IS NOT NULL
            THEN (
            SELECT CONCAT(dbo.Departamento.depNombre,',',dbo.Municipio.munNombre)
            FROM dbo.SitioPago
            INNER JOIN dbo.Infraestructura ON dbo.SitioPago.sipInfraestructura = dbo.Infraestructura.infId
            INNER JOIN dbo.Municipio ON dbo.Municipio.munId = dbo.Infraestructura.infMunicipio
            INNER JOIN dbo.Departamento ON dbo.Departamento.depId = dbo.Municipio.munDepartamento
            WHERE dbo.SitioPago.sipId = cas.casSitioDeCobro
            )
            ELSE NULL
            END AS nombreSitioCobro,
            adminPer.perRazonSocial AS adminSubsidio,
            personaAutorizada.perRazonSocial AS personaAutorizada ,
            adminPer.perTipoIdentificacion,
            adminPer.perNumeroIdentificacion,
            casEmpleador,
            casAfiliadoPrincipal,
            casBeneficiarioDetalle,
            casIdPuntoDeCobro,
            cas.casNombreTerceroPagado as establecimientoCodigo,
            est.estNombre AS establecimientoNombre,
            rac.racFechaTransaccion as fechaTransaccionConsumo
            FROM dbo.CuentaAdministradorSubsidio AS cas
            LEFT join DetalleSubsidioAsignado dsa on cas.casId = dsa.dsaCuentaAdministradorSubsidio
            INNER JOIN dbo.AdministradorSubsidio AS admin ON admin.asuId = cas.casAdministradorSubsidio
            INNER JOIN dbo.Persona AS adminPer ON adminPer.perId = admin.asuPersona
            LEFT JOIN dbo.RetiroPersonaAutorizadaCobroSubsidio AS retPer ON cas.casId =
            retPer.rpaCuentaAdministradorSubsidio
            LEFT JOIN dbo.Persona AS personaAutorizada ON personaAutorizada.perId = retPer.rpaPersonaAutorizada
            LEFT JOIN EstablecimientosMediosPago AS est ON est.estCodigo = cas.casNombreTerceroPagado
            LEFT JOIN RegistroArchivoConsumosAnibol AS rac on rac.racCodigoAutorizacion =
            cas.casIdTransaccionTerceroPagador
            WHERE cas.casTipoTransaccionSubsidio IN ('RETIRO', 'AJUSTE_TRANSACCION_RETIRO_INCOMPLETA')
            AND (:nombreConvenio IS NULL OR (:nombreConvenio = 'TODOS' AND cas.casNombreTerceroPagado IS NOT NULL AND
            cas.casNombreTerceroPagado IN (select distinct(con.conNombre) from ConvenioTerceroPagador con)) OR
            cas.casNombreTerceroPagado = :nombreConvenio)
            AND (:estadoTransaccion is null or cas.casEstadoTransaccionSubsidio = :estadoTransaccion)
            AND cas.casFechaHoraTransaccion BETWEEN :fechaInicial AND :fechaFinal
            AND (:numTarjetaAdmon IS NULL OR cas.casNumeroTarjetaAdmonSubsidio = :numTarjetaAdmon)
            AND (:numIdTitularCuentaAdmon IS NULL OR cas.casNumeroIdentificacionTitularCuentaAdmonSubsidio =
            :numIdTitularCuentaAdmon)
            AND (:tipoIdTitularCuentaAdmon IS NULL OR cas.casTipoIdentificacionTitularCuentaAdmonSubsidio =
            :tipoIdTitularCuentaAdmon)
            AND (:periodoLiquidado IS NULL OR dsa.dsaPeriodoLiquidado = CAST(:periodoLiquidado AS DATE))
            AND (:sizeListaIdsAfiliados = 0 OR dsa.dsaAfiliadoPrincipal IN (:listaIdsAfiliados))
            AND (:sizeListaIdsBeneficiarios = 0 OR dsa.dsaBeneficiarioDetalle IN (:listaIdsBeneficiarios))
            AND (:idDetalleSubsidio IS NULL OR dsa.dsaId = :idDetalleSubsidio)
            AND (:medioDePago IS NULL OR cas.casmedioDePagoTransaccion = :medioDePago)
            AND (:codigoBanco IS NULL OR cas.cascodigoBanco = :codigoBanco)
            AND (:tipoCuenta IS NULL OR cas.castipoCuentaAdmonSubsidio = :tipoCuenta)
            AND (:numCuentaAdmon IS NULL OR cas.casNumeroCuentaAdmonSubsidio = :numCuentaAdmon)



            UNION

            SELECT DISTINCT casId,
            casFechaHoraCreacionRegistro ,
            casUsuarioCreacionRegistro ,
            casTipoTransaccionSubsidio ,
            casEstadoTransaccionSubsidio ,
            casEstadoLiquidacionSubsidio ,
            casOrigenTransaccion ,
            casMedioDePagoTransaccion ,
            casNumeroTarjetaAdmonSubsidio ,
            casCodigoBanco ,
            casNombreBanco ,
            casTipoCuentaAdmonSubsidio ,
            casNumeroCuentaAdmonSubsidio ,
            casTipoIdentificacionTitularCuentaAdmonSubsidio ,
            casNumeroIdentificacionTitularCuentaAdmonSubsidio ,
            casNombreTitularCuentaAdmonSubsidio ,
            casFechaHoraTransaccion ,
            casUsuarioTransaccion ,
            casValorOriginalTransaccion ,
            casValorRealTransaccion ,
            casIdTransaccionOriginal ,
            casIdRemisionDatosTerceroPagador ,
            casIdTransaccionTerceroPagador ,
            casNombreTerceroPagado ,
            casIdCuentaAdmonSubsidioRelacionado ,
            casFechaHoraUltimaModificacion ,
            casUsuarioUltimaModificacion ,
            casAdministradorSubsidio ,
            casSitioDePago ,
            casSitioDeCobro ,
            casMedioDePago ,
            casSolicitudLiquidacionSubsidio ,
            casCondicionPersonaAdmin ,
            CASE
            WHEN cas.casSitioDePago IS NOT NULL
            THEN (
            SELECT dbo.SitioPago.sipNombre
            FROM dbo.SitioPago
            WHERE dbo.SitioPago.sipId = cas.casSitioDePago
            )
            ELSE NULL
            END AS nombreSitioPago,
            CASE
            WHEN cas.casSitioDeCobro IS NOT NULL
            THEN (
            SELECT CONCAT(dbo.Departamento.depNombre,',',dbo.Municipio.munNombre)
            FROM dbo.SitioPago
            INNER JOIN dbo.Infraestructura ON dbo.SitioPago.sipInfraestructura = dbo.Infraestructura.infId
            INNER JOIN dbo.Municipio ON dbo.Municipio.munId = dbo.Infraestructura.infMunicipio
            INNER JOIN dbo.Departamento ON dbo.Departamento.depId = dbo.Municipio.munDepartamento
            WHERE dbo.SitioPago.sipId = cas.casSitioDeCobro
            )
            ELSE NULL
            END AS nombreSitioCobro,
            adminPer.perRazonSocial AS adminSubsidio,
            personaAutorizada.perRazonSocial AS personaAutorizada ,
            adminPer.perTipoIdentificacion,
            adminPer.perNumeroIdentificacion,
            casEmpleador,
            casAfiliadoPrincipal,
            casBeneficiarioDetalle,
            casIdPuntoDeCobro,
            cas.casNombreTerceroPagado as establecimientoCodigo,
            est.estNombre AS establecimientoNombre,
            rac.racFechaTransaccion as fechaTransaccionConsumo
            FROM dbo.CuentaAdministradorSubsidio AS cas
            INNER JOIN dbo.AdministradorSubsidio AS admin ON admin.asuId = cas.casAdministradorSubsidio
            INNER JOIN dbo.Persona AS adminPer ON adminPer.perId = admin.asuPersona
            LEFT JOIN dbo.RetiroPersonaAutorizadaCobroSubsidio AS retPer ON cas.casId =
            retPer.rpaCuentaAdministradorSubsidio
            LEFT JOIN dbo.Persona AS personaAutorizada ON personaAutorizada.perId = retPer.rpaPersonaAutorizada
            LEFT JOIN EstablecimientosMediosPago AS est ON est.estCodigo = cas.casNombreTerceroPagado
            LEFT JOIN RegistroArchivoConsumosAnibol AS rac on rac.racCodigoAutorizacion =
            cas.casIdTransaccionTerceroPagador
            LEFT join DetalleSubsidioAsignado dsa on cas.casId = dsa.dsaCuentaAdministradorSubsidio
            WHERE cas.casTipoTransaccionSubsidio IN ('RETIRO', 'AJUSTE_TRANSACCION_RETIRO_INCOMPLETA')
            AND (:nombreConvenio IS NULL OR (:nombreConvenio = 'TODOS' AND cas.casNombreTerceroPagado IS NOT NULL AND
            cas.casNombreTerceroPagado IN (select distinct(con.conNombre) from ConvenioTerceroPagador con)) OR
            cas.casNombreTerceroPagado = :nombreConvenio)
            AND (:estadoTransaccion is null or cas.casEstadoTransaccionSubsidio = :estadoTransaccion)
            AND cas.casFechaHoraTransaccion BETWEEN :fechaInicial AND :fechaFinal
            AND (:numIdTitularCuentaAdmon IS NULL OR cas.casNumeroIdentificacionTitularCuentaAdmonSubsidio =
            :numIdTitularCuentaAdmon)
            AND (:tipoIdTitularCuentaAdmon IS NULL OR cas.casTipoIdentificacionTitularCuentaAdmonSubsidio =
            :tipoIdTitularCuentaAdmon)
            AND (:periodoLiquidado IS NULL OR dsa.dsaPeriodoLiquidado = CAST(:periodoLiquidado AS DATE))
            AND (:sizeListaIdsAfiliados = 0 OR dsa.dsaAfiliadoPrincipal IN (:listaIdsAfiliados))
            AND (:sizeListaIdsBeneficiarios = 0 OR dsa.dsaBeneficiarioDetalle IN (:listaIdsBeneficiarios))
            AND (:idDetalleSubsidio IS NULL OR dsa.dsaId = :idDetalleSubsidio)
            AND (:medioDePago IS NULL OR cas.casmedioDePagoTransaccion = :medioDePago)
            AND (:codigoBanco IS NULL OR cas.cascodigoBanco = :codigoBanco)
            AND (:tipoCuenta IS NULL OR cas.castipoCuentaAdmonSubsidio = :tipoCuenta)
            AND (:numCuentaAdmon IS NULL OR cas.casNumeroCuentaAdmonSubsidio = :numCuentaAdmon)
        </query>
    </named-native-query>

    <!--Aqui-->
    <named-native-query
            name="PagosSubsidioMonetario.buscarSitioDePago.municipio">
        <description>Consulta que trae el sitio de pago relacionado con el medio de pago del administrador de grupo con
            el código del municipio respectivo
        </description>
        <query>
            select DISTINCT(sit.sipId), sit.sipCodigo, sit.sipNombre, sit.sipInfraestructura, sit.sipActivo,
            sit.sipPrincipal
            from SitioPago AS sit
            inner JOIN Infraestructura AS inf on inf.infId = sit.sipInfraestructura
            inner JOIN Municipio AS mun on mun.munId = inf.infMunicipio
            where mun.munCodigo = :codigoMunicipio
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.buscarDapartamento.municipio">
        <description>Consulta que trae el codigo del departamento relacionado con el Codigo del municipio</description>
        <query>
            SELECT dep.depCodigo FROM Municipio AS mun
            INNER JOIN Departamento AS dep ON dep.depId = mun.munDepartamento
            WHERE mun.munCodigo = :codigoMunicipio
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.generar.listado.anulacion.por.perdidad.de.derecho">
        <description>Consulta que obtiene los datos relevantes asociados a la cuenta y al detalle para ser anulados por
            perdida de derecho
        </description>
        <query>
            SELECT DISTINCT cas.casId as IdentificadorTransaccionAbono, 
			cas.casFechaHoraCreacionRegistro as FechaHoraCreacionRegistro,
			cas.casUsuarioCreacionRegistro as UsuarioCreacionRegistro,
			cas.casTipoTransaccionSubsidio as TipoTransaccionSubsidio , 
			cas.casEstadoTransaccionSubsidio as EstadoTransaccionSubsidio ,
			cas.casOrigenTransaccion as OrigenTransaccion ,
			perAfi.perTipoIdentificacion as tipoIdAdm, perAfi.perNumeroIdentificacion as numIdAdm,
			perAfi.perPrimerNombre as priNombreAdm, perAfi.perSegundoNombre as segNombreAdm, perAfi.perPrimerApellido as
            priApellidoAdm, perAfi.perSegundoApellido as segApellidoAdm,
			cas.casMedioDePagoTransaccion as MedioDePagoTransaccion ,
			cas.casNumeroTarjetaAdmonSubsidio as NumeroTarjetaAdmonSubsidio , 
			cas.casCodigoBanco as CodigoBanco, 
			cas.casNombreBanco as NombreBanco ,
			cas.casTipoCuentaAdmonSubsidio as TipoCuentaAdmonSubsidio ,
			cas.casNumeroCuentaAdmonSubsidio as NumeroCuentaAdmonSubsidio,
			cas.casTipoIdentificacionTitularCuentaAdmonSubsidio as TipoIdentificacionTitularCuentaAdmonSubsidio ,
			cas.casNumeroIdentificacionTitularCuentaAdmonSubsidio as NumeroIdentificacionTitularCuentaAdmonSubsidio ,
			cas.casNombreTitularCuentaAdmonSubsidio as NombreTitularCuentaAdmonSubsidio ,
			cas.casSitioDePago as SitioDePago,
			cas.casValorOriginalTransaccion as ValorOriginalTransaccion ,
			cas.casValorRealTransaccion as ValorRealTransaccion,
			cas.casFechaHoraTransaccion as FechaHoraTransaccion ,
		    cas.casUsuarioTransaccion as UsuarioTransaccion ,
			cas.casFechaHoraUltimaModificacion as FechaHoraUltimaModificacion ,
			cas.casUsuarioUltimaModificacion as suarioUltimaModificacion ,
			cas.casIdCuentaAdmonSubsidioRelacionado as IdCuentaAdmonSubsidioRelacionado , 
			cas.casIdTransaccionOriginal as IdTransaccionOriginal 
            FROM CuentaAdministradorSubsidio as cas
            INNER JOIN DetalleSubsidioAsignado as dsa on cas.casId = dsa.dsaCuentaAdministradorSubsidio
            INNER JOIN SolicitudLiquidacionSubsidio as sls on sls.slsId = dsa.dsaSolicitudLiquidacionSubsidio
            INNER JOIN Empleador as empl on empl.empId = dsa.dsaEmpleador
            INNER JOIN Empresa as emp on emp.empId = empl.empEmpresa
            INNER JOIN Persona as emplPer on emplper.perId = emp.empPersona
            INNER JOIN Afiliado as afi on afi.afiId = dsa.dsaAfiliadoPrincipal
            INNER JOIN Persona as perAfi on perAfi.perId = afi.afiPersona
            INNER JOIN BeneficiarioDetalle as ben on ben.bedId = dsa.dsaBeneficiarioDetalle
            INNER JOIN PersonaDetalle as perDet on perDet.pedId = ben.bedPersonaDetalle
            INNER JOIN Persona as perBen on perBen.perId = perDet.pedPersona
            INNER JOIN Beneficiario as benf on benf.benPersona = perBen.perId
            INNER JOIN AdministradorSubsidio as adm on adm.asuId = cas.casAdministradorSubsidio
            INNER JOIN Persona as perAdm on perAdm.perId = adm.asuPersona
            INNER JOIN GrupoFamiliar as grf on grf.grfAfiliado = dsa.dsaAfiliadoPrincipal
            WHERE 
			(:periodoLiquidado IS NULL OR dsa.dsaPeriodoLiquidado = CAST(:periodoLiquidado as DATE))
            AND (:idDetalleSubsidio is null OR dsa.dsaId = :idDetalleSubsidio)
            AND cas.casFechaHoraTransaccion BETWEEN :fechaInicial AND DATEADD(day,1,:fechaFinal)
            AND (:sizeListaIdAfiliados IS NULL OR dsa.dsaAfiliadoPrincipal IN (:listaIdAfiliados))
            AND (:sizeListaIdBeneficiarios IS NULL OR benf.benId IN (:listaIdBeneficiarios))
            AND (:sizeListaIdGrupoFamiliar IS NULL OR dsa.dsaGrupoFamiliar IN (:listaIdGrupoFamiliar))
            AND  cas.casTipoTransaccionSubsidio = 'ABONO'
            AND cas.casEstadoTransaccionSubsidio = 'APLICADO'
            AND cas.casMedioDePagoTransaccion IN (:mediosDePago)
            AND (cas.casNumeroTarjetaAdmonSubsidio = :numTarjetaAdmon or :numTarjetaAdmon is null)
            AND benf.benGrupoFamiliar = grf.grfId
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.dispersion.totalesPendientes">
        <description>Consulta que permite obtener los totales asociados a la dispersión de un proceso de liquidación
        </description>
        <query>
            SELECT Acumulados.montoDispersar,
            Acumulados.totalDescuentos,
            Acumulados.totalLiquidar,
            Acumulados.cantidadCuotas,
            TotalAdministradores.totalAdministradores
            FROM (SELECT COUNT(*) AS totalAdministradores
            FROM (SELECT COUNT(*) AS cantidadAdministradores
            FROM DetalleSubsidioAsignado
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN AdministradorSubsidio ON CuentaAdministradorSubsidio.casAdministradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona ON AdministradorSubsidio.asuPersona = Persona.perId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            GROUP BY Persona.perNumeroIdentificacion, Persona.perTipoIdentificacion,
            CuentaAdministradorSubsidio.casMedioDePagoTransaccion) AS CantidadAdministradores) AS TotalAdministradores,
            (SELECT COALESCE(SUM(DetalleSubsidioAsignado.dsaValorSubsidioMonetario), 0) AS montoDispersar,
            COALESCE(SUM(DetalleSubsidioAsignado.dsaValorDescuento), 0) AS totalDescuentos,
            COALESCE(SUM(DetalleSubsidioAsignado.dsaValorOriginalAbonado), 0) AS totalLiquidar,
            COUNT(*) AS cantidadCuotas
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND DetalleSubsidioAsignado.dsaOrigenRegistroSubsidio = 'LIQUIDACION_SUBSIDIO_MONETARIO') AS Acumulados
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.resumen.pagosTarjeta">
        <description>Consulta que permite obtener la información de los totales para dispersión al medio de pago
            tarjeta
        </description>
        <query>
            SELECT TotalAdministradores.totalAdministradores AS numeroRegistros,
            Acumulados.montoTotal, Acumulados.cantidadCuotas,
            TotalAdministradores.totalAdministradores AS numeroAdministradores
            FROM (SELECT COUNT(*) AS totalAdministradores
            FROM (SELECT COUNT(*) AS numeroRegistros
            FROM DetalleSubsidioAsignado
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN AdministradorSubsidio ON CuentaAdministradorSubsidio.casAdministradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona ON AdministradorSubsidio.asuPersona = Persona.perId
            WHERE CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'TARJETA'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            GROUP BY Persona.perNumeroIdentificacion, CuentaAdministradorSubsidio.casMedioDePagoTransaccion,
            CuentaAdministradorSubsidio.casId ) AS CantidadAdministradores) AS TotalAdministradores,
            (SELECT COALESCE(SUM(DetalleSubsidioAsignado.dsaValorOriginalAbonado), 0) AS montoTotal,
            COUNT(DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio) AS cantidadCuotas
            FROM DetalleSubsidioAsignado
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN AdministradorSubsidio ON CuentaAdministradorSubsidio.casAdministradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona ON AdministradorSubsidio.asuPersona = Persona.perId
            WHERE CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'TARJETA'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion) AS Acumulados
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.resumen.pagosEfectivo">
        <description>Consulta que permite obtener la información de los totales para dispersión al medio de pago
            efectivo
        </description>
        <query>
            SELECT Acumulados.montoTotal, Acumulados.cantidadCuotas,
            TotalAdministradores.totalAdministradores
            FROM (SELECT COALESCE(SUM(DetalleSubsidioAsignado.dsaValorOriginalAbonado), 0) AS montoTotal,
            COUNT(DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio) AS cantidadCuotas
            FROM DetalleSubsidioAsignado
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            WHERE CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'EFECTIVO'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion) AS Acumulados,
            (SELECT COUNT(*) AS totalAdministradores FROM
            (SELECT COUNT(*) AS numeroAdministradores
            FROM DetalleSubsidioAsignado
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN AdministradorSubsidio ON CuentaAdministradorSubsidio.casAdministradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona ON AdministradorSubsidio.asuPersona = Persona.perId
            WHERE CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'EFECTIVO'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            GROUP BY Persona.perNumeroIdentificacion, CuentaAdministradorSubsidio.casMedioDePagoTransaccion) AS
            CantidadAdministradores) AS TotalAdministradores
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.resumen.pagosBanco">
        <description>Consulta que permite obtener la información de los totales para dispersión al medio de pago banco
        </description>
        <query>
            SELECT Banco.banId, Banco.banNombre, COALESCE(SUM(DetalleSubsidioAsignado.dsaValorOriginalAbonado), 0) AS
            totalBanco, isnull(MedioTransferencia.metCobroJudicial,0) as metCobroJudicial
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            INNER JOIN MedioTransferencia ON CuentaAdministradorSubsidio.casMedioDePago = MedioTransferencia.mdpId
            INNER JOIN Banco ON MedioTransferencia.metBanco = Banco.banId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'TRANSFERENCIA'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            GROUP BY Banco.banId, Banco.banNombre, isnull(MedioTransferencia.metCobroJudicial,0)
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.resumen.pagosEntidadesDescuento.interna">
        <description>Consulta que permite obtener la información de los totales pignorados para las entidades de
            descuento internas
        </description>
        <query>
            SELECT EntidadDescuento.endCodigo, EntidadDescuento.endId,
            EntidadDescuento.endNombre, Totales.totalDescuentosEntidad
            FROM EntidadDescuento
            INNER JOIN (SELECT EntidadDescuento.endId AS identificadorEntidad,
            COALESCE(SUM(DescuentosSubsidioAsignado.desMontoDescontado), 0) AS totalDescuentosEntidad
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            INNER JOIN DescuentosSubsidioAsignado ON DetalleSubsidioAsignado.dsaId =
            DescuentosSubsidioAsignado.desDetalleSubsidioAsignado
            INNER JOIN EntidadDescuento ON DescuentosSubsidioAsignado.desEntidadDescuento = EntidadDescuento.endId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND EntidadDescuento.endTipo = 'INTERNA'
            GROUP BY EntidadDescuento.endId ) AS Totales
            ON EntidadDescuento.endId = Totales.identificadorEntidad
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.resumen.pagosEntidadesDescuento.externa">
        <description>Consulta que permite obtener la información de los totales pignorados para las entidades de
            descuento externas
        </description>
        <query>
            SELECT EntidadDescuento.endCodigo, EntidadDescuento.endId,
            Persona.perRazonSocial, Totales.totalDescuentosEntidad
            FROM EntidadDescuento
            INNER JOIN (SELECT EntidadDescuento.endId AS identificadorEntidad,
            COALESCE(SUM(DescuentosSubsidioAsignado.desMontoDescontado), 0) AS totalDescuentosEntidad
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            INNER JOIN DescuentosSubsidioAsignado ON DetalleSubsidioAsignado.dsaId =
            DescuentosSubsidioAsignado.desDetalleSubsidioAsignado
            INNER JOIN EntidadDescuento ON DescuentosSubsidioAsignado.desEntidadDescuento = EntidadDescuento.endId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND EntidadDescuento.endTipo = 'EXTERNA'
            GROUP BY EntidadDescuento.endId) AS Totales
            ON EntidadDescuento.endId = Totales.identificadorEntidad
            INNER JOIN Empresa ON EntidadDescuento.endEmpresa = Empresa.empId
            INNER JOIN Persona ON Empresa.empPersona = Persona.perId
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.detallePagos.encabezado">
        <description>Consulta que permite obtener la información de encabezado para el detalle de los pagos a un medio
            establecido
        </description>
        <query>
            SELECT TOP 1
            Periodo.priPeriodo,
            CAST(SolicitudLiquidacionSubsidio.slsFechaInicio AS DATE) slsFechaInicio,
            CAST(CuentaAdministradorSubsidio.casFechaHoraCreacionRegistro AS DATE) casFechaHoraCreacionRegistro
            FROM PeriodoLiquidacion
            INNER JOIN SolicitudLiquidacionSubsidio ON PeriodoLiquidacion.pelSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Periodo ON PeriodoLiquidacion.pelPeriodo = Periodo.priId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN DetalleSubsidioAsignado ON SolicitudLiquidacionSubsidio.slsId =
            DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            WHERE PeriodoLiquidacion.pelTipoPeriodo = 'REGULAR'
            AND CuentaAdministradorSubsidio.casMedioDePagoTransaccion = :medioDePago
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.detallePagos.medioTarjeta">
        <description>Consulta que permite obtener la información detallada de los pagos al medio tarjeta</description>
        <query>
            SELECT AdministradorDeSubsidio.perTipoIdentificacion AS tipoIdentificacionAdministrador,
            AdministradorDeSubsidio.perNumeroIdentificacion AS numeroIdentificacionAdministrador,
            CONCAT(AdministradorDeSubsidio.perPrimerNombre, ' ', AdministradorDeSubsidio.perPrimerApellido) AS
            nombreAdministrador,
            CuentaAdministradorSubsidio.casNumeroTarjetaAdmonSubsidio AS numeroTarjeta,
            Trabajador.perTipoIdentificacion AS tipoIdentificacionTrabajador,
            Trabajador.perNumeroIdentificacion AS numeroIdentificacionTrabajador,
            CONCAT(Trabajador.perPrimerNombre, ' ', Trabajador.perPrimerApellido) AS nombreTrabajador,
            TotalesPorAfiliado.monto AS montoAfiliado,
            CuentaAdministradorSubsidio.casCondicionPersonaAdmin,
            TotalesPorAfiliado.condicionAfiliado
            FROM CuentaAdministradorSubsidio
            INNER JOIN (SELECT CuentaAdministradorSubsidio.casId AS identificadorCuentaAdministrador,
            DetalleSubsidioAsignado.dsaAfiliadoPrincipal AS identificadorAfiliadoPrincipal,
            COALESCE(SUM(DetalleSubsidioAsignado.dsaValorOriginalAbonado), 0) AS monto,
            DetalleSubsidioAsignado.dsaCondicionPersonaAfiliado AS condicionAfiliado
            FROM DetalleSubsidioAsignado
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            WHERE CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'TARJETA'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            GROUP BY CuentaAdministradorSubsidio.casId, DetalleSubsidioAsignado.dsaAfiliadoPrincipal,
            DetalleSubsidioAsignado.dsaCondicionPersonaAfiliado) AS TotalesPorAfiliado
            ON CuentaAdministradorSubsidio.casId = TotalesPorAfiliado.identificadorCuentaAdministrador
            INNER JOIN AdministradorSubsidio ON CuentaAdministradorSubsidio.casAdministradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona AS AdministradorDeSubsidio ON AdministradorSubsidio.asuPersona =
            AdministradorDeSubsidio.perId
            INNER JOIN Afiliado ON TotalesPorAfiliado.identificadorAfiliadoPrincipal = Afiliado.afiId
            INNER JOIN Persona AS Trabajador ON Afiliado.afiPersona = Trabajador.perId
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.detallePagos.medioEfectivo">
        <description>Consulta que permite obtener la información detallada de los pagos al medio efectivo</description>
        <query>
            SELECT CuentaAdministradorSubsidio.casId,
            Persona.perTipoIdentificacion,
            Persona.perNumeroIdentificacion,
            CONCAT(Persona.perPrimerNombre, ' ', Persona.perPrimerApellido) AS nombreAdministrador,
            CuentaAdministradorSubsidio.casValorOriginalTransaccion,
            CuentaAdministradorSubsidio.casCondicionPersonaAdmin
            FROM CuentaAdministradorSubsidio
            INNER JOIN (SELECT CuentaAdministradorSubsidio.casId AS identificadorCuentaAdministradorSubsidio
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'EFECTIVO'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            GROUP BY CuentaAdministradorSubsidio.casId) AS CuentaAdministrador
            ON CuentaAdministradorSubsidio.casId = CuentaAdministrador.identificadorCuentaAdministradorSubsidio
            INNER JOIN AdministradorSubsidio ON CuentaAdministradorSubsidio.casAdministradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona ON AdministradorSubsidio.asuPersona = Persona.perId
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.detallePagos.medioBanco">
        <description>Consulta que permite obtener la información detallada de los pagos al medio banco</description>
        <query>
            SELECT Banco.banId, Banco.banNombre, Banco.banNit AS nit,
            Persona.perTipoIdentificacion, Persona.perNumeroIdentificacion,
            CONCAT(Persona.perPrimerNombre, ' ', Persona.perPrimerApellido) AS nombreAdministrador,
            CuentaAdministradorSubsidio.casTipoCuentaAdmonSubsidio,
            CuentaAdministradorSubsidio.casNumeroCuentaAdmonSubsidio,
            CuentaAdministradorSubsidio.casValorOriginalTransaccion,
            CuentaAdministradorSubsidio.casCondicionPersonaAdmin,
            MedioTransferencia.metCobroJudicial
            FROM CuentaAdministradorSubsidio
            INNER JOIN MedioTransferencia ON CuentaAdministradorSubsidio.casMedioDePago = MedioTransferencia.mdpId
            INNER JOIN Banco ON MedioTransferencia.metBanco = Banco.banId
            INNER JOIN AdministradorSubsidio ON CuentaAdministradorSubsidio.casAdministradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona ON AdministradorSubsidio.asuPersona = Persona.perId
            WHERE CuentaAdministradorSubsidio.casId IN
            (SELECT CuentaAdministradorSubsidio.casId AS identificador
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'TRANSFERENCIA'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            GROUP BY CuentaAdministradorSubsidio.casId)
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.detallePagos.entidadesDescuento">
        <description>Consulta que permite obtener la información detallada de los pagos a las entidades de descuento
        </description>
        <query>
            SELECT EntidadDescuento.endId AS identificadorEntidad,
            DescuentosSubsidioAsignado.desNombreEntidadDescuento AS nombreEntidad,
            '' AS nitEntidad,
            Persona.perTipoIdentificacion AS tipoIdentificacionAdministrador,
            Persona.perNumeroIdentificacion AS numeroIdentificacionAdministrador,
            CONCAT(Persona.perPrimerNombre, ' ', Persona.perPrimerApellido) AS nombreAdministrador,
            DetalleSubsidioAsignado.dsaId AS numeroOperacion,
            DescuentosSubsidioAsignado.desMontoDescontado AS totalDescontado,
            CuentaAdministradorSubsidio.casCondicionPersonaAdmin
            FROM DescuentosSubsidioAsignado
            INNER JOIN DetalleSubsidioAsignado ON DescuentosSubsidioAsignado.desDetalleSubsidioAsignado =
            DetalleSubsidioAsignado.dsaId
            INNER JOIN EntidadDescuento ON DescuentosSubsidioAsignado.desEntidadDescuento = EntidadDescuento.endId
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            INNER JOIN AdministradorSubsidio ON CuentaAdministradorSubsidio.casAdministradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona ON AdministradorSubsidio.asuPersona = Persona.perId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND EntidadDescuento.endTipo = 'INTERNA'
            UNION ALL
            SELECT EntidadDescuento.endId AS identificadorEntidad,
            DescuentosSubsidioAsignado.desNombreEntidadDescuento AS nombreEntidad,
            EntidadEmpresa.perNumeroIdentificacion AS nitEntidad,
            AdministradorDeSubsidio.perTipoIdentificacion AS tipoIdentificacionAdministrador,
            AdministradorDeSubsidio.perNumeroIdentificacion AS numeroIdentificacionAdministrador,
            CONCAT(AdministradorDeSubsidio.perPrimerNombre, ' ', AdministradorDeSubsidio.perPrimerApellido) AS
            nombreAdministrador,
            DetalleSubsidioAsignado.dsaId AS numeroOperacion,
            DescuentosSubsidioAsignado.desMontoDescontado AS totalDescontado,
            CuentaAdministradorSubsidio.casCondicionPersonaAdmin
            FROM DescuentosSubsidioAsignado
            INNER JOIN DetalleSubsidioAsignado ON DescuentosSubsidioAsignado.desDetalleSubsidioAsignado =
            DetalleSubsidioAsignado.dsaId
            INNER JOIN EntidadDescuento ON DescuentosSubsidioAsignado.desEntidadDescuento = EntidadDescuento.endId
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            INNER JOIN AdministradorSubsidio ON CuentaAdministradorSubsidio.casAdministradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona AS AdministradorDeSubsidio ON AdministradorSubsidio.asuPersona =
            AdministradorDeSubsidio.perId
            INNER JOIN Empresa ON EntidadDescuento.endEmpresa = Empresa.empId
            INNER JOIN Persona AS EntidadEmpresa ON Empresa.empPersona = EntidadEmpresa.perId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND EntidadDescuento.endTipo = 'EXTERNA'
        </query>
    </named-native-query>

    <named-native-query
            name="PagosSubsidioMonetario.consultar.pagosBanco.archivoTransacciones">
        <description>Consulta que permite obtener la información detallada de los pagos al medio banco para la
            generación del archivo de transacciones
        </description>
        <query>
            SELECT
            ' ' AS codigoEmpresa,
            ccc.cccNumeroCuenta AS numeroCuentaSudameris,
            CASE
            WHEN ccc.cccTipoCuenta = 'AHORROS' THEN 2
            WHEN ccc.cccTipoCuenta = 'CORRIENTE' THEN 1
            END AS tipoCuentaSudameris,
            (SELECT Parametro.prmValor FROM Parametro WHERE Parametro.prmNombre = 'NOMBRE_CCF') AS nombreEmpresa,
            'PAGO A PROVEEDORES' AS descripcionGeneral,
            Banco.banCodigo AS codigoBancoReceptor,
            CASE
            WHEN CuentaAdministradorSubsidio.casTipoCuentaAdmonSubsidio = 'DAVIPLATA' then 3
            WHEN CuentaAdministradorSubsidio.casTipoCuentaAdmonSubsidio = 'AHORROS' THEN 2
            WHEN CuentaAdministradorSubsidio.casTipoCuentaAdmonSubsidio = 'CORRIENTE' THEN 1
            END AS tipoCuentaReceptora,
            CuentaAdministradorSubsidio.casNumeroCuentaAdmonSubsidio AS numeroCuentaReceptora,
            Persona.perNumeroIdentificacion AS numeroIdentificacion,
            CONCAT(Persona.perPrimerNombre, ' ', Persona.perPrimerApellido) AS nombreDestinatario,
            '' descripcionPago,
            SUM(CuentaAdministradorSubsidio.casValorOriginalTransaccion) AS valorPago,
            MedioTransferencia.metCobroJudicial as esJudicial
            FROM CuentaCCF ccc,CuentaAdministradorSubsidio
            INNER JOIN MedioTransferencia ON CuentaAdministradorSubsidio.casMedioDePago = MedioTransferencia.mdpId
            INNER JOIN Banco ON MedioTransferencia.metBanco = Banco.banId
            INNER JOIN AdministradorSubsidio ON CuentaAdministradorSubsidio.casAdministradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona ON AdministradorSubsidio.asuPersona = Persona.perId
            WHERE CuentaAdministradorSubsidio.casId IN
            (SELECT CuentaAdministradorSubsidio.casId AS identificador
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'TRANSFERENCIA'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            GROUP BY CuentaAdministradorSubsidio.casId)
            GROUP BY
            ccc.cccNumeroCuenta,
            ccc.cccTipoCuenta,
            Banco.banCodigo,
            CuentaAdministradorSubsidio.casTipoCuentaAdmonSubsidio,
            CuentaAdministradorSubsidio.casNumeroCuentaAdmonSubsidio,
            Persona.perNumeroIdentificacion,
            Persona.perPrimerNombre,Persona.perPrimerApellido,
            MedioTransferencia.metCobroJudicial
            HAVING SUM(CuentaAdministradorSubsidio.casValorOriginalTransaccion) > 0
        </query>
    </named-native-query>

    <named-native-query
            name="PagosSubsidioMonetario.consultar.pagosBanco.archivoTransacciones.mesPorMes">
        <description>Consulta que permite obtener la información detallada de los pagos al medio banco para la
            generación del archivo de transacciones
        </description>
        <query>
            SELECT
            ' ' AS codigoEmpresa,
            ccc.cccNumeroCuenta AS numeroCuentaSudameris,
            CASE
            WHEN ccc.cccTipoCuenta = 'AHORROS' THEN 2
            WHEN ccc.cccTipoCuenta = 'CORRIENTE' THEN 1
            END AS tipoCuentaSudameris,
            (SELECT Parametro.prmValor FROM Parametro WHERE Parametro.prmNombre = 'NOMBRE_CCF') AS nombreEmpresa,
            'PAGO A PROVEEDORES' AS descripcionGeneral,
            Banco.banCodigo AS codigoBancoReceptor,
            CASE
            WHEN CuentaAdministradorSubsidioProgramada.capTipoCuentaAdmonSubsidio = 'AHORROS' THEN 2
            WHEN CuentaAdministradorSubsidioProgramada.capTipoCuentaAdmonSubsidio = 'CORRIENTE' THEN 1
            END AS tipoCuentaReceptora,
            CuentaAdministradorSubsidioProgramada.capNumeroCuentaAdmonSubsidio AS numeroCuentaReceptora,
            Persona.perNumeroIdentificacion AS numeroIdentificacion,
            CONCAT(Persona.perPrimerNombre, ' ', Persona.perPrimerApellido) AS nombreDestinatario,
            '' descripcionPago,
            SUM(CuentaAdministradorSubsidioProgramada.capValorOriginalTransaccion ) AS valorPago,
            MedioTransferencia.metCobroJudicial as esJudicial
            FROM CuentaCCF ccc,CuentaAdministradorSubsidioProgramada
            INNER JOIN MedioTransferencia ON CuentaAdministradorSubsidioProgramada.capMedioDePago =
            MedioTransferencia.mdpId
            INNER JOIN Banco ON MedioTransferencia.metBanco = Banco.banId
            INNER JOIN AdministradorSubsidio ON CuentaAdministradorSubsidioProgramada.capAdministradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona ON AdministradorSubsidio.asuPersona = Persona.perId
            WHERE CuentaAdministradorSubsidioProgramada.capId IN
            (SELECT CuentaAdministradorSubsidioProgramada.capId AS identificador
            FROM DetalleSubsidioAsignadoProgramado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio
            = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidioProgramada ON
            DetalleSubsidioAsignadoProgramado.dprCuentaAdministradorSubsidioProgramada =
            CuentaAdministradorSubsidioProgramada.capId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidioProgramada.capMedioDePagoTransaccion = 'TRANSFERENCIA'
            AND CuentaAdministradorSubsidioProgramada.capEstadoLiquidacionSubsidio = 'GENERADO'
            GROUP BY CuentaAdministradorSubsidioProgramada.capId )
            GROUP BY
            ccc.cccNumeroCuenta,
            ccc.cccTipoCuenta,
            Banco.banCodigo,
            CuentaAdministradorSubsidioProgramada.capTipoCuentaAdmonSubsidio ,
            CuentaAdministradorSubsidioProgramada.capNumeroCuentaAdmonSubsidio ,
            Persona.perNumeroIdentificacion,
            Persona.perPrimerNombre,Persona.perPrimerApellido,
            MedioTransferencia.metCobroJudicial
            HAVING SUM(CuentaAdministradorSubsidioProgramada.capValorOriginalTransaccion ) > 0
        </query>
    </named-native-query>

    <named-native-query
            name="PagosSubsidioMonetario.consultar.solicitud.tipoDesembolso">
        <description>Consulta que permite obtener el tipo de desembolso de la solicitud</description>
        <query>
            select sls.slsTipoDesembolso from SolicitudLiquidacionSubsidio sls
            join Solicitud s on s.solId = sls.slsSolicitudGlobal
            where s.solNumeroRadicacion = :numeroRadicacion
        </query>
    </named-native-query>

    <named-native-query
            name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.consultar.saldo.cualquierMedioDePago.adminSubsidio">
        <description>Consulta que obtiene el saldo a favor de los abonos asociados a un administrador de subsidio
        </description>
        <query>
            select saldo,nombreAdmin,idAdmin
            from Vista_SaldoAdministrador with(nolock)
            where casMedioDePagoTransaccion = :medioDePago
		    and perTipoIdentificacion = :tipoIdAdmin
			and perNumeroIdentificacion = :numeroIdAdmin
        </query>
    </named-native-query>
    
    <named-native-query
            name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.consultar.saldo.abono.cualquierMedioDePago.adminSubsidio">
        <description>Consulta que obtiene el saldo a favor de los abonos asociados a un administrador de subsidio
        </description>
        <query>
            SELECT SUM(cas.casValorRealTransaccion) as saldo,
            CONCAT(per.perPrimerNombre,' ',per.perSegundoNombre, ' ', per.perPrimerApellido, ' ',per.perSegundoApellido)
            as nombreAdmin, cas.casAdministradorSubsidio as idAdmin
            FROM CuentaAdministradorSubsidio as cas
            INNER JOIN AdministradorSubsidio as adm on cas.casAdministradorSubsidio = adm.asuid
            INNER JOIN Persona as per on adm.asupersona = per.perid
            WHERE cas.casMedioDePagoTransaccion = :medioDePago
            AND per.perTipoIdentificacion = :tipoIdAdmin
            AND per.perNumeroIdentificacion = :numeroIdAdmin
            AND cas.casEstadoTransaccionSubsidio IN ('APLICADO')
            AND cas.casTipoTransaccionSubsidio IN ('ABONO')
            AND EXISTS (SELECT 1 FROM DetalleSubsidioAsignado WHERE dsaCuentaAdministradorSubsidio = cas.casId)
            GROUP BY per.perPrimerNombre,per.perSegundoNombre,per.perPrimerApellido,per.perSegundoApellido,
            cas.casAdministradorSubsidio
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.consultar.abonos.cobrados">
        <description>Consulta que se encarga de filtrar los registros de la cuenta del administrador del subsidio y
            detalle de subsidio asignado para obtener la transacciones de tipo abono en estado cobrado
        </description>
        <query>
            SELECT cas.casId,
            dsa.dsaPeriodoLiquidado as PeriodoLiquidado,
            dsa.dsaSolicitudLiquidacionSubsidio as idSolicitudLiquidacionSubsidio,
            sls.slsFechaEvaluacionSegundoNivel as fechaLiquidacionAsociada,
            dsa.dsaEmpleador as idEmpleador,
            emplPer.perTipoIdentificacion as emplTipoIdentificacion,
            emplPer.perNumeroIdentificacion as emplNumeroIdentificacion,
            emplPer.perRazonSocial as emplRazonSocial,
            dsa.dsaAfiliadoPrincipal as idAfiliadoPrincipal,
            perAfi.perTipoIdentificacion as AfiTipoIdentificacion,
            perAfi.perNumeroIdentificacion as AfiNumeroIdentificacion,
            perAfi.perPrimerNombre as AfiPrimerNombre,
            perAfi.perSegundoNombre as AfiSegundoNombre,
            perAfi.perPrimerApellido as AfiPrimerApellido,
            perAfi.perSegundoApellido as AfiSegundoApellido,
            dsa.dsaBeneficiarioDetalle as idBeneficiarioDetalle,
            perBen.perTipoIdentificacion as benTipoIdentificacion,
            perBen.perNumeroIdentificacion as benNumeroIdentificacion,
            perBen.perPrimerNombre as benPrimerNombre,
            perBen.perSegundoNombre as benSegundoNombre,
            perBen.perPrimerApellido as benPrimerApellido,
            perBen.perSegundoApellido as benSegundoApellido,
            dsa.dsaAdministradorSubsidio as idAdministradorSubsidio,
            perAdm.perTipoIdentificacion as admSubTipoIdentificacion,
            perAdm.perNumeroIdentificacion as admSubNumeroIdentificacion,
            perAdm.perPrimerNombre as admSubPrimerNombre,
            perAdm.perSegundoNombre as admSubSegundoNombre,
            perAdm.perPrimerApellido as admSubPrimerApellido,
            perAdm.perSegundoApellido as admSubSegundoApellido,
            cas.casMedioDePago,
            cas.casMedioDePagoTransaccion,
            cas.casNumeroTarjetaAdmonSubsidio,
            cas.casCodigoBanco,
            cas.casNombreBanco,
            cas.casTipoCuentaAdmonSubsidio,
            cas.casNumeroCuentaAdmonSubsidio,
            cas.casTipoIdentificacionTitularCuentaAdmonSubsidio,
            cas.casNumeroIdentificacionTitularCuentaAdmonSubsidio,
            cas.casNombreTitularCuentaAdmonSubsidio,
            cas.casFechaHoraTransaccion,
            cas.casUsuarioCreacionRegistro,
            cas.casValorOriginalTransaccion,
            cas.casValorRealTransaccion,
            dsa.dsaId,
            grf.grfNumero as codigoGrupoFamiliar,
            dsa.dsaFechaTransaccionRetiro
            FROM CuentaAdministradorSubsidio as cas
            INNER JOIN DetalleSubsidioAsignado as dsa on cas.casId = dsa.dsaCuentaAdministradorSubsidio
            INNER JOIN Empleador as empl on empl.empId = dsa.dsaEmpleador
            INNER JOIN Empresa as emp on emp.empId = empl.empEmpresa
            INNER JOIN Persona as emplPer on emplper.perId = emp.empPersona
            INNER JOIN Afiliado as afi on afi.afiId = dsa.dsaAfiliadoPrincipal
            INNER JOIN Persona as perAfi on perAfi.perId = afi.afiPersona
            INNER JOIN BeneficiarioDetalle as benDet on benDet.bedId = dsa.dsaBeneficiarioDetalle
            INNER JOIN PersonaDetalle as perDet on perDet.pedId = benDet.bedPersonaDetalle
            INNER JOIN Persona as perBen on perBen.perId = perDet.pedPersona
            INNER JOIN Beneficiario as ben on ben.benPersona = perBen.perId
            INNER JOIN AdministradorSubsidio as adm on adm.asuId = cas.casAdministradorSubsidio
            INNER JOIN Persona as perAdm on perAdm.perId = adm.asuPersona
            INNER JOIN GrupoFamiliar as grf on grf.grfAfiliado = dsa.dsaAfiliadoPrincipal
            INNER JOIN SolicitudLiquidacionSubsidio sls on dsa.dsaSolicitudLiquidacionSubsidio = sls.slsId
            INNER JOIN PeriodoLiquidacion prl on sls.slsId = prl.pelSolicitudLiquidacionSubsidio
            INNER JOIN Periodo per on prl.pelPeriodo = per.priId
            WHERE cas.casTipoTransaccionSubsidio = 'ABONO'
            AND (cas.casFechaHoraTransaccion BETWEEN CAST(:fechaInicial AS DATETIME2) AND CAST(:fechaFinal AS
            DATETIME2))
            AND ((:medioDePago) IS NULL OR cas.casMedioDePagoTransaccion = (:medioDePago))
            AND (:idSubsidioAsignadoLiquidado IS NULL OR dsa.dsaId = :idSubsidioAsignadoLiquidado )
            AND (:sizeListaIdAfiliadosPrincipales IS NULL OR dsa.dsaAfiliadoPrincipal IN (:listaIdAfiliadosPrincipales))
            AND (:sizeListaIdGruposFamiliares IS NULL OR dsa.dsaGrupoFamiliar IN (:listaIdGruposFamiliares))
            AND (:sizeListaIdBeneficiarios IS NULL OR dsa.dsaBeneficiarioDetalle IN (:listaIdBeneficiarios))
            AND cas.casEstadoTransaccionSubsidio = 'COBRADO'
            AND (:periodoLiquidado IS NULL OR dsa.dsaPeriodoLiquidado = CAST(:periodoLiquidado AS DATE))
            AND ben.benAfiliado = dsa.dsaAfiliadoPrincipal
            AND ben.benGrupoFamiliar = grf.grfId
            order by cas.casid
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.consultar.abonos.cobrados.numeroRadicado">
        <description>Consulta que se encarga de filtrar los registros de la cuenta del administrador del subsidio y
            detalle de subsidio asignado para
            obtener la transacciones de tipo abono en estado cobrado asociadas a una solciitud de anulacion de subsidio
            cobrado.
        </description>
        <query>
            SELECT cas.casId,
            dsa.dsaPeriodoLiquidado as PeriodoLiquidado,
            dsa.dsaSolicitudLiquidacionSubsidio as idSolicitudLiquidacionSubsidio,
            sls.slsFechaEvaluacionSegundoNivel as fechaLiquidacionAsociada,
            dsa.dsaEmpleador as idEmpleador,
            emplPer.perTipoIdentificacion as emplTipoIdentificacion,
            emplPer.perNumeroIdentificacion as emplNumeroIdentificacion,
            emplPer.perRazonSocial as emplRazonSocial,
            dsa.dsaAfiliadoPrincipal as idAfiliadoPrincipal,
            perAfi.perTipoIdentificacion as AfiTipoIdentificacion,
            perAfi.perNumeroIdentificacion as AfiNumeroIdentificacion,
            perAfi.perPrimerNombre as AfiPrimerNombre,
            perAfi.perSegundoNombre as AfiSegundoNombre,
            perAfi.perPrimerApellido as AfiPrimerApellido,
            perAfi.perSegundoApellido as AfiSegundoApellido,
            dsa.dsaBeneficiarioDetalle as idBeneficiarioDetalle,
            perBen.perTipoIdentificacion as benTipoIdentificacion,
            perBen.perNumeroIdentificacion as benNumeroIdentificacion,
            perBen.perPrimerNombre as benPrimerNombre,
            perBen.perSegundoNombre as benSegundoNombre,
            perBen.perPrimerApellido as benPrimerApellido,
            perBen.perSegundoApellido as benSegundoApellido,
            dsa.dsaAdministradorSubsidio as idAdministradorSubsidio,
            perAdm.perTipoIdentificacion as admSubTipoIdentificacion,
            perAdm.perNumeroIdentificacion as admSubNumeroIdentificacion,
            perAdm.perPrimerNombre as admSubPrimerNombre,
            perAdm.perSegundoNombre as admSubSegundoNombre,
            perAdm.perPrimerApellido as admSubPrimerApellido,
            perAdm.perSegundoApellido as admSubSegundoApellido,
            cas.casMedioDePago,
            cas.casMedioDePagoTransaccion,
            cas.casNumeroTarjetaAdmonSubsidio,
            cas.casCodigoBanco,
            cas.casNombreBanco,
            cas.casTipoCuentaAdmonSubsidio,
            cas.casNumeroCuentaAdmonSubsidio,
            cas.casTipoIdentificacionTitularCuentaAdmonSubsidio,
            cas.casNumeroIdentificacionTitularCuentaAdmonSubsidio,
            cas.casNombreTitularCuentaAdmonSubsidio,
            cas.casFechaHoraTransaccion,
            cas.casUsuarioCreacionRegistro,
            cas.casValorOriginalTransaccion,
            cas.casValorRealTransaccion,
            dsas.dssDetalleAnulacion,
            sasc.sasMotivoAnulacion,
            dsa.dsaId,
            grf.grfNumero as codigoGrupoFamiliar,
            sasc.sasId as idSolicitudAnulacionSubsidioCobrado,
            cas.casFechaHoraUltimaModificacion,
            dsa.dsaFechaTransaccionRetiro
            FROM CuentaAdministradorSubsidio as cas
            INNER JOIN DetalleSubsidioAsignado as dsa on cas.casId = dsa.dsaCuentaAdministradorSubsidio
            INNER JOIN Empleador as empl on empl.empId = dsa.dsaEmpleador
            INNER JOIN Empresa as emp on emp.empId = empl.empEmpresa
            INNER JOIN Persona as emplPer on emplper.perId = emp.empPersona
            INNER JOIN Afiliado as afi on afi.afiId = dsa.dsaAfiliadoPrincipal
            INNER JOIN Persona as perAfi on perAfi.perId = afi.afiPersona
            INNER JOIN BeneficiarioDetalle as benDet on benDet.bedId = dsa.dsaBeneficiarioDetalle
            INNER JOIN PersonaDetalle as perDet on perDet.pedId = benDet.bedPersonaDetalle
            INNER JOIN Persona as perBen on perBen.perId = perDet.pedPersona
            INNER JOIN Beneficiario as ben on ben.benPersona = perBen.perId
            INNER JOIN AdministradorSubsidio as adm on adm.asuId = cas.casAdministradorSubsidio
            INNER JOIN Persona as perAdm on perAdm.perId = adm.asuPersona
            INNER JOIN GrupoFamiliar as grf on grf.grfAfiliado = dsa.dsaAfiliadoPrincipal
            INNER JOIN SolicitudLiquidacionSubsidio sls on dsa.dsaSolicitudLiquidacionSubsidio = sls.slsId
            INNER JOIN DetalleSolicitudAnulacionSubsidioCobrado dsas on dsas.dssCuentaAdministradorSubisdio = cas.casId
            AND dsas.dssId=dsa.dsaDetalleSolicitudAnulacionSubsidioCobrado
            INNER JOIN SolicitudAnulacionSubsidioCobrado sasc on sasc.sasId = dsas.dssSolicitudAnulacionSubsidioCobrado
            INNER JOIN Solicitud sol on sol.solId = sasc.sasSolicitudGlobal
            WHERE ben.benAfiliado = dsa.dsaAfiliadoPrincipal
            AND ben.benGrupoFamiliar = grf.grfId
            AND sol.solNumeroRadicacion = :numeroRadicadoSolicitud
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.DetalleSubsidioAsignadoDTO.consultar.detalles.asociados.saldo">
        <description>Consulta encargada de buscar los detalles de subsidios asignado que estan relacionados para el
            calculo del saldo del administrador del subsidio
        </description>
        <query>
            SELECT dsa.dsaPeriodoLiquidado as periodoLiquidado,
            personaEmpleador.perRazonSocial as razonSocialEmp, personaEmpleador.perTipoIdentificacion as tipoIdEmp,
            personaEmpleador.perNumeroIdentificacion as numeroIdEmp,
            perAfi.perTipoIdentificacion as tipoIdAfi, perAfi.perNumeroIdentificacion as numeroIdAfi,
            perAfi.perPrimerNombre as primerNombreAfi,perAfi.perSegundoNombre as segundoNombreAfi,
            perAfi.perPrimerApellido as primerApellidoAfi, perAfi.perSegundoApellido as segundoApellidoAfi,
            grf.grfNumero as grupoFamiliarRelacionado,
            perBen.perTipoIdentificacion as tipoIdBen, perBen.perNumeroIdentificacion as numeroIdBen,
            perBen.perPrimerNombre as primerNombreBen, perBen.perSegundoNombre as segundoNombreBen,
            perBen.perPrimerApellido as primerApellidoBen, perBen.perSegundoApellido as segundoApellidoBen,
            dsa.dsaValorSubsidioMonetario as valorSubsidioAsignado,
            dsa.dsaValorDescuento as valorDescuento,
            dsa.dsaValorTotal as valorTotal,
            enDes.endCodigo as tipoDescuento
            FROM DetalleSubsidioAsignado as dsa
            INNER JOIN Afiliado as afi on dsa.dsaAfiliadoPrincipal = afi.afiId
            INNER JOIN Persona as perAfi on afi.afiPersona = perAfi.perId
            INNER JOIN GrupoFamiliar as grf on dsa.dsaGrupoFamiliar = grf.grfId
            INNER JOIN BeneficiarioDetalle as benDet on dsa.dsaBeneficiarioDetalle = benDet.bedId
            INNER JOIN PersonaDetalle as perDet on perDet.pedId = benDet.bedPersonaDetalle
            INNER JOIN Persona as perBen on perDet.pedPersona = perBen.perId
            LEFT JOIN DescuentosSubsidioAsignado as des on des.desDetalleSubsidioAsignado = dsa.dsaId
            LEFT JOIN EntidadDescuento as enDes on enDes.endId = des.desEntidadDescuento
            INNER JOIN (SELECT Empleador.empId, empPersona.* FROM Empleador
            INNER JOIN Empresa on Empresa.empid = Empleador.empempresa
            INNER JOIN Persona as empPersona on empPersona.perid = Empresa.empPersona
            ) as personaEmpleador on dsa.dsaEmpleador = personaEmpleador.empId
            WHERE dsa.dsaCuentaAdministradorSubsidio IN (:listaIdCuentas)
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.consultar.dispersionFallecimiento.totalesPendientes">
        <description>Consulta que permite obtener los totales pendientes por dispersar para una liquidación de
            fallecimineto
        </description>
        <query>
            SELECT COALESCE(TotalesAcumulados.totalMontoDispersar, 0) AS totalMontoDispersar,
            COALESCE(TotalesAcumulados.totalDescuentos, 0) AS totalDescuentos,
            COALESCE(TotalesAcumulados.totalLiquidar, 0) AS totalLiquidar,
            TotalesAcumulados.totalAdministradores,
            TotalCuotas.totalCuotas,
            Desembolso.tipoDesembolso
            FROM (SELECT SUM(SubtotalesAcumulados.subtotalMontoDispersar) AS totalMontoDispersar,
            SUM(SubtotalesAcumulados.subtotalDescuentos) AS totalDescuentos,
            SUM(SubtotalesAcumulados.subtotalLiquidar) AS totalLiquidar,
            COUNT(SubtotalesAcumulados.subtotalAdministradoresMedioPago) AS totalAdministradores
            FROM (SELECT COUNT(*) AS subtotalAdministradoresMedioPago,
            SUM(TotalesFallecimiento.valorSubsidioMonetario) AS subtotalMontoDispersar,
            SUM(TotalesFallecimiento.valorDescuento) AS subtotalDescuentos,
            SUM(TotalesFallecimiento.valorOriginalAbonado) AS subtotalLiquidar
            FROM ((SELECT DetalleSubsidioAsignado.dsaValorSubsidioMonetario AS valorSubsidioMonetario,
            DetalleSubsidioAsignado.dsaValorDescuento AS valorDescuento,
            DetalleSubsidioAsignado.dsaValorOriginalAbonado AS valorOriginalAbonado,
            CuentaAdministradorSubsidio.casMedioDePagoTransaccion AS medioDePagoTransaccion,
            CuentaAdministradorSubsidio.casAdministradorSubsidio AS administradorSubsidio
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO')
            UNION ALL (SELECT DetalleSubsidioAsignadoProgramado.dprValorSubsidioMonetario AS valorSubsidioMonetario,
            DetalleSubsidioAsignadoProgramado.dprValorDescuento AS valorDescuento,
            DetalleSubsidioAsignadoProgramado.dprValorOriginalAbonado AS valorOriginalAbonado,
            CuentaAdministradorSubsidioProgramada.capMedioDePagoTransaccion AS medioDePagoTransaccion,
            CuentaAdministradorSubsidioProgramada.capAdministradorSubsidio AS administradorSubsidio
            FROM DetalleSubsidioAsignadoProgramado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio
            = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidioProgramada ON
            DetalleSubsidioAsignadoProgramado.dprCuentaAdministradorSubsidioProgramada =
            CuentaAdministradorSubsidioProgramada.capId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidioProgramada.capEstadoLiquidacionSubsidio = 'GENERADO')) AS
            TotalesFallecimiento
            GROUP BY TotalesFallecimiento.administradorSubsidio, TotalesFallecimiento.medioDePagoTransaccion) AS
            SubtotalesAcumulados) AS TotalesAcumulados,
            (SELECT COUNT(DISTINCT InfoCuotas.beneficiarioDetalle) AS totalCuotas
            FROM ((SELECT DetalleSubsidioAsignado.dsaBeneficiarioDetalle AS beneficiarioDetalle
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion)
            UNION ALL (SELECT DetalleSubsidioAsignadoProgramado.dprBeneficiarioDetalle AS beneficiarioDetalle
            FROM DetalleSubsidioAsignadoProgramado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio
            = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion)) AS InfoCuotas) AS TotalCuotas,
            (SELECT SolicitudLiquidacionSubsidio.slsTipoDesembolso AS tipoDesembolso
            FROM SolicitudLiquidacionSubsidio
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion) AS Desembolso
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.consultar.cabeceraDispersion.medioPago">
        <description>Consulta que permite obtener la información de la cabecera para el medio de pago tarjeta
        </description>
        <query>
            SELECT TotalesAcumulados.totalAdministradores AS numeroRegistros,
            COALESCE(TotalesAcumulados.montoTotal, 0) AS montoTotal,
            TotalCuotas.totalCuotas,
            TotalesAcumulados.totalAdministradores AS numeroAdministradores
            FROM (SELECT SUM(SubtotalesAcumulados.subtotalMonto) AS montoTotal,
            COUNT(SubtotalesAcumulados.subtotalAdministradoresMedioPago) AS totalAdministradores
            FROM (SELECT COUNT(*) AS subtotalAdministradoresMedioPago,
            SUM(TotalesFallecimiento.montoTotal) AS subtotalMonto
            FROM ((SELECT DetalleSubsidioAsignado.dsaValorOriginalAbonado AS montoTotal,
            CuentaAdministradorSubsidio.casAdministradorSubsidio AS administradorSubsidio
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            WHERE CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'TARJETA'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion)
            UNION ALL (SELECT DetalleSubsidioAsignadoProgramado.dprValorOriginalAbonado AS montoTotal,
            CuentaAdministradorSubsidioProgramada.capAdministradorSubsidio AS administradorSubsidio
            FROM DetalleSubsidioAsignadoProgramado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio
            = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidioProgramada ON
            DetalleSubsidioAsignadoProgramado.dprCuentaAdministradorSubsidioProgramada =
            CuentaAdministradorSubsidioProgramada.capId
            WHERE CuentaAdministradorSubsidioProgramada.capMedioDePagoTransaccion = 'TARJETA'
            AND CuentaAdministradorSubsidioProgramada.capEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion)) AS TotalesFallecimiento
            GROUP BY TotalesFallecimiento.administradorSubsidio) AS SubtotalesAcumulados) AS TotalesAcumulados,
            (SELECT COUNT(DISTINCT InfoCuotas.beneficiarioDetalle) AS totalCuotas
            FROM ((SELECT DetalleSubsidioAsignado.dsaBeneficiarioDetalle AS beneficiarioDetalle
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'TARJETA'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO')
            UNION ALL (SELECT DetalleSubsidioAsignadoProgramado.dprBeneficiarioDetalle AS beneficiarioDetalle
            FROM DetalleSubsidioAsignadoProgramado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio
            = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidioProgramada ON
            DetalleSubsidioAsignadoProgramado.dprCuentaAdministradorSubsidioProgramada =
            CuentaAdministradorSubsidioProgramada.capId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidioProgramada.capMedioDePagoTransaccion = 'TARJETA'
            AND CuentaAdministradorSubsidioProgramada.capEstadoLiquidacionSubsidio = 'GENERADO')) AS InfoCuotas) AS
            TotalCuotas
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.consultar.resultadosDispersion.administradorMedioPago">
        <description>Consulta que permite obtener los resultados de dispersión para los administradores en un medio de
            pago
        </description>
        <query>
            SELECT TotalesAcumulados.condicionAdministrador, TotalesAcumulados.condicionBeneficiario,
            PersonaAdministrador.perTipoIdentificacion AS tipoIdentificacionAdministrador,
            PersonaAdministrador.perNumeroIdentificacion AS numeroIdentificacionAdministrador,
            PersonaAdministrador.perRazonSocial AS nombreAdministrador,
            PersonaBeneficiario.perTipoIdentificacion AS tipoIdentificacionBeneficiario,
            PersonaBeneficiario.perNumeroIdentificacion AS numeroIdentificacionBeneficiario,
            PersonaBeneficiario.perRazonSocial AS nombreBeneficiario,
            Beneficiario.benTipoBeneficiario, TotalesAcumulados.totalDerecho,
            TotalesAcumulados.totalDescuentos, TotalesAcumulados.totalDispersar,
            TotalesDispersados.totalDispersado AS totalDispersadoAdministrador,
            TotalesProgramados.totalProgramado AS totalProgramadoAdministrador,
            CASE
            WHEN 'TRANSFERENCIA' IN (:medioDePago) THEN
            (
            SELECT
            MedioTransferencia.metCobroJudicial
            FROM MedioTransferencia WHERE TotalesAcumulados.idMedioDePago = MedioTransferencia.mdpId
            )
            ELSE -1
            END AS pagoJudicial,
            TotalesAcumulados.totalDescuentosEntidad AS totalDescuentosEntidad
            FROM (SELECT TotalesFallecimiento.condicionAdministrador,
            TotalesFallecimiento.condicionBeneficiario, TotalesFallecimiento.beneficiarioDetalle,
            TotalesFallecimiento.administradorSubsidio, TotalesFallecimiento.afiliadoPrincipal,
            SUM(TotalesFallecimiento.valorSubsidioMonetario) AS totalDerecho,
            SUM(TotalesFallecimiento.valorDescuento) AS totalDescuentos,
            SUM(TotalesFallecimiento.valorOriginalAbonado) AS totalDispersar,
            TotalesFallecimiento.idMedioDePago,
            COALESCE(SUM(TotalesFallecimiento.totalDescuentosEntidad), 0) AS totalDescuentosEntidad
            FROM ((SELECT DetalleSubsidioAsignado.dsaBeneficiarioDetalle AS beneficiarioDetalle,
            DetalleSubsidioAsignado.dsaAdministradorSubsidio AS administradorSubsidio,
            DetalleSubsidioAsignado.dsaAfiliadoPrincipal AS afiliadoPrincipal,
            CuentaAdministradorSubsidio.casCondicionPersonaAdmin AS condicionAdministrador,
            DetalleSubsidioAsignado.dsaCondicionPersonaBeneficiario AS condicionBeneficiario,
            DetalleSubsidioAsignado.dsaValorSubsidioMonetario AS valorSubsidioMonetario,
            DetalleSubsidioAsignado.dsaValorOriginalAbonado AS valorOriginalAbonado,
            DetalleSubsidioAsignado.dsaValorDescuento AS valorDescuento,
            CuentaAdministradorSubsidio.casMedioDePago AS idMedioDePago,
            COALESCE(SUM(DescuentosSubsidioAsignado.desMontoDescontado), 0) AS totalDescuentosEntidad
            FROM DetalleSubsidioAsignado INNER JOIN SolicitudLiquidacionSubsidio ON
            DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            LEFT JOIN DescuentosSubsidioAsignado ON DetalleSubsidioAsignado.dsaId = DescuentosSubsidioAsignado.desDetalleSubsidioAsignado
            WHERE CuentaAdministradorSubsidio.casMedioDePagoTransaccion IN (:medioDePago)
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND DetalleSubsidioAsignado.dsaEstado &lt;&gt; 'PROGRAMADO_APLICADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            GROUP BY 
            DetalleSubsidioAsignado.dsaBeneficiarioDetalle,
            DetalleSubsidioAsignado.dsaAdministradorSubsidio,
            DetalleSubsidioAsignado.dsaAfiliadoPrincipal,
            CuentaAdministradorSubsidio.casCondicionPersonaAdmin,
            DetalleSubsidioAsignado.dsaCondicionPersonaBeneficiario,
            DetalleSubsidioAsignado.dsaValorSubsidioMonetario,
            DetalleSubsidioAsignado.dsaValorOriginalAbonado,
            DetalleSubsidioAsignado.dsaValorDescuento,
            CuentaAdministradorSubsidio.casMedioDePago)
            UNION ALL (SELECT DetalleSubsidioAsignadoProgramado.dprBeneficiarioDetalle AS beneficiarioDetalle,
            DetalleSubsidioAsignadoProgramado.dprAdministradorSubsidio AS administradorSubsidio,
            DetalleSubsidioAsignadoProgramado.dprAfiliadoPrincipal AS afiliadoPrincipal,
            CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin AS condicionAdministrador,
            DetalleSubsidioAsignadoProgramado.dprCondicionPersonaBeneficiario AS condicionBeneficiario,
            DetalleSubsidioAsignadoProgramado.dprValorSubsidioMonetario AS valorSubsidioMonetario,
            DetalleSubsidioAsignadoProgramado.dprValorOriginalAbonado AS valorOriginalAbonado,
            DetalleSubsidioAsignadoProgramado.dprValorDescuento AS valorDescuento,
            CuentaAdministradorSubsidioProgramada.capMedioDePago AS idMedioDePago,
            COALESCE(SUM(DescuentosSubsidioAsignado.desMontoDescontado), 0) AS totalDescuentosEntidad
            FROM DetalleSubsidioAsignadoProgramado INNER JOIN SolicitudLiquidacionSubsidio ON
            DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidioProgramada ON
            DetalleSubsidioAsignadoProgramado.dprCuentaAdministradorSubsidioProgramada =
            CuentaAdministradorSubsidioProgramada.capId
            LEFT JOIN DescuentosSubsidioAsignado ON DetalleSubsidioAsignadoProgramado.dprId = DescuentosSubsidioAsignado.desDetalleSubsidioAsignado
            WHERE CuentaAdministradorSubsidioProgramada.capMedioDePagoTransaccion IN (:medioDePago)
            AND CuentaAdministradorSubsidioProgramada.capEstadoLiquidacionSubsidio = 'GENERADO'
            AND DetalleSubsidioAsignadoProgramado.dprEstado &lt;&gt; 'PROGRAMADO_APLICADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            GROUP BY 
            DetalleSubsidioAsignadoProgramado.dprBeneficiarioDetalle,
            DetalleSubsidioAsignadoProgramado.dprAdministradorSubsidio,
            DetalleSubsidioAsignadoProgramado.dprAfiliadoPrincipal,
            CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin,
            DetalleSubsidioAsignadoProgramado.dprCondicionPersonaBeneficiario,
            DetalleSubsidioAsignadoProgramado.dprValorSubsidioMonetario,
            DetalleSubsidioAsignadoProgramado.dprValorOriginalAbonado,
            DetalleSubsidioAsignadoProgramado.dprValorDescuento,
            CuentaAdministradorSubsidioProgramada.capMedioDePago)) AS TotalesFallecimiento
            GROUP BY TotalesFallecimiento.beneficiarioDetalle, TotalesFallecimiento.administradorSubsidio,
            TotalesFallecimiento.afiliadoPrincipal,
            TotalesFallecimiento.condicionAdministrador, TotalesFallecimiento.condicionBeneficiario,
            TotalesFallecimiento.idMedioDePago
            )AS TotalesAcumulados
            INNER JOIN AdministradorSubsidio ON TotalesAcumulados.administradorSubsidio = AdministradorSubsidio.asuId
            INNER JOIN Persona AS PersonaAdministrador ON AdministradorSubsidio.asuPersona = PersonaAdministrador.perId
            INNER JOIN BeneficiarioDetalle ON TotalesAcumulados.beneficiarioDetalle = BeneficiarioDetalle.bedId
            INNER JOIN PersonaDetalle ON BeneficiarioDetalle.bedPersonaDetalle = PersonaDetalle.pedId
            INNER JOIN Persona AS PersonaBeneficiario ON PersonaDetalle.pedPersona = PersonaBeneficiario.perId
            INNER JOIN Beneficiario ON (PersonaBeneficiario.perId = Beneficiario.benPersona
            AND TotalesAcumulados.afiliadoPrincipal = Beneficiario.benAfiliado)
            LEFT JOIN (SELECT CuentaAdministradorSubsidio.casCondicionPersonaAdmin AS condicionAdministrador,
            SUM(DetalleSubsidioAsignado.dsaValorOriginalAbonado) AS totalDispersado
            FROM DetalleSubsidioAsignado INNER JOIN SolicitudLiquidacionSubsidio ON
            DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            WHERE CuentaAdministradorSubsidio.casMedioDePagoTransaccion IN (:medioDePago)
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND DetalleSubsidioAsignado.dsaEstado &lt;&gt; 'PROGRAMADO_APLICADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            GROUP BY CuentaAdministradorSubsidio.casCondicionPersonaAdmin) AS TotalesDispersados
            ON TotalesAcumulados.condicionAdministrador = TotalesDispersados.condicionAdministrador
            LEFT JOIN (SELECT CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin AS condicionAdministrador,
            SUM(DetalleSubsidioAsignadoProgramado.dprValorOriginalAbonado) AS totalProgramado
            FROM DetalleSubsidioAsignadoProgramado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio
            = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidioProgramada ON
            DetalleSubsidioAsignadoProgramado.dprCuentaAdministradorSubsidioProgramada =
            CuentaAdministradorSubsidioProgramada.capId
            WHERE CuentaAdministradorSubsidioProgramada.capMedioDePagoTransaccion IN (:medioDePago)
            AND CuentaAdministradorSubsidioProgramada.capEstadoLiquidacionSubsidio = 'GENERADO'
            AND DetalleSubsidioAsignadoProgramado.dprEstado &lt;&gt; 'PROGRAMADO_APLICADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            GROUP BY CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin) AS TotalesProgramados
            ON TotalesAcumulados.condicionAdministrador = TotalesProgramados.condicionAdministrador
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.detallePorAdministrador.liquidacionFallecimiento.pagosEfectivo">
        <description>Consulta que permite obtener la información detalla de los pagos al medio efectivo para un
            administrador en una liquidación de fallecimiento
        </description>
        <query>
            SELECT ResultadosFallecimiento.condicionAdministrador,
            ResultadosFallecimiento.condicionBeneficiario,
            PersonaAdministrador.perTipoIdentificacion AS tipoIdentificacionAdministrador,
            PersonaAdministrador.perNumeroIdentificacion AS numeroIdentificacionAdministrador,
            PersonaAdministrador.perRazonSocial AS nombreAdministrador,
            PersonaBeneficiario.perTipoIdentificacion AS tipoIdentificacionBeneficiario,
            PersonaBeneficiario.perNumeroIdentificacion AS numeroIdentificacionBeneficiario,
            PersonaBeneficiario.perRazonSocial AS nombreBeneficiario,
            ResultadosFallecimiento.periodoLiquidado,
            ResultadosFallecimiento.valorOriginalAbonado
            FROM ((SELECT DetalleSubsidioAsignado.dsaCondicionPersonaBeneficiario AS condicionBeneficiario,
            CuentaAdministradorSubsidio.casCondicionPersonaAdmin AS condicionAdministrador,
            DetalleSubsidioAsignado.dsaBeneficiarioDetalle AS beneficiarioDetalle,
            CuentaAdministradorSubsidio.casAdministradorSubsidio AS administradorSubsidio,
            DetalleSubsidioAsignado.dsaAfiliadoPrincipal AS afiliadoPrincipal,
            DetalleSubsidioAsignado.dsaPeriodoLiquidado AS periodoLiquidado,
            DetalleSubsidioAsignado.dsaValorOriginalAbonado AS valorOriginalAbonado
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            WHERE CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'EFECTIVO'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casCondicionPersonaAdmin = :condicionAdministrador
            UNION ALL SELECT DetalleSubsidioAsignadoProgramado.dprCondicionPersonaBeneficiario AS condicionBeneficiario,
            CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin AS condicionAdministrador,
            DetalleSubsidioAsignadoProgramado.dprBeneficiarioDetalle AS beneficiarioDetalle,
            CuentaAdministradorSubsidioProgramada.capAdministradorSubsidio AS administradorSubsidio,
            DetalleSubsidioAsignadoProgramado.dprAfiliadoPrincipal AS afiliadoPrincipal,
            DetalleSubsidioAsignadoProgramado.dprPeriodoLiquidado AS periodoLiquidado,
            DetalleSubsidioAsignadoProgramado.dprValorOriginalAbonado AS valorOriginalAbonado
            FROM DetalleSubsidioAsignadoProgramado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio
            = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidioProgramada ON
            DetalleSubsidioAsignadoProgramado.dprCuentaAdministradorSubsidioProgramada =
            CuentaAdministradorSubsidioProgramada.capId
            WHERE CuentaAdministradorSubsidioProgramada.capMedioDePagoTransaccion = 'EFECTIVO'
            AND CuentaAdministradorSubsidioProgramada.capEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin = :condicionAdministrador)) AS
            ResultadosFallecimiento
            INNER JOIN AdministradorSubsidio ON ResultadosFallecimiento.administradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona AS PersonaAdministrador ON AdministradorSubsidio.asuPersona = PersonaAdministrador.perId
            INNER JOIN BeneficiarioDetalle ON ResultadosFallecimiento.beneficiarioDetalle = BeneficiarioDetalle.bedId
            INNER JOIN PersonaDetalle ON BeneficiarioDetalle.bedPersonaDetalle = PersonaDetalle.pedId
            INNER JOIN Persona AS PersonaBeneficiario ON PersonaDetalle.pedPersona = PersonaBeneficiario.perId
            INNER JOIN Beneficiario ON (PersonaBeneficiario.perId = Beneficiario.benPersona
            AND ResultadosFallecimiento.afiliadoPrincipal = Beneficiario.benAfiliado)
            ORDER BY ResultadosFallecimiento.condicionBeneficiario, ResultadosFallecimiento.periodoLiquidado
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.detallePorAdministrador.liquidacionFallecimiento.pagosTarjeta">
        <description>Consulta que permite obtener la información detalla de los pagos al medio tarjeta para un
            administrador en una liquidación de fallecimiento
        </description>
        <query>
            SELECT ResultadosFallecimiento.condicionAdministrador,
            ResultadosFallecimiento.condicionBeneficiario,
            PersonaAdministrador.perTipoIdentificacion AS tipoIdentificacionAdministrador,
            PersonaAdministrador.perNumeroIdentificacion AS numeroIdentificacionAdministrador,
            PersonaAdministrador.perRazonSocial AS nombreAdministrador,
            CONCAT(REPLICATE('*',LEN(LEFT(MedioTarjeta.mtrNumeroTarjeta, LEN(MedioTarjeta.mtrNumeroTarjeta) - 4))),
            RIGHT(MedioTarjeta.mtrNumeroTarjeta,4)) AS numeroTarjeta,
            MedioTarjeta.mtrEstadoTarjetaMultiservicios AS estadoTarjeta,
            PersonaBeneficiario.perTipoIdentificacion AS tipoIdentificacionBeneficiario,
            PersonaBeneficiario.perNumeroIdentificacion AS numeroIdentificacionBeneficiario,
            PersonaBeneficiario.perRazonSocial AS nombreBeneficiario,
            ResultadosFallecimiento.periodoLiquidado,
            ResultadosFallecimiento.valorOriginalAbonado
            FROM ((SELECT DetalleSubsidioAsignado.dsaCondicionPersonaBeneficiario AS condicionBeneficiario,
            CuentaAdministradorSubsidio.casCondicionPersonaAdmin AS condicionAdministrador,
            DetalleSubsidioAsignado.dsaBeneficiarioDetalle AS beneficiarioDetalle,
            CuentaAdministradorSubsidio.casAdministradorSubsidio AS administradorSubsidio,
            DetalleSubsidioAsignado.dsaAfiliadoPrincipal AS afiliadoPrincipal,
            DetalleSubsidioAsignado.dsaPeriodoLiquidado AS periodoLiquidado,
            DetalleSubsidioAsignado.dsaValorOriginalAbonado AS valorOriginalAbonado,
            CuentaAdministradorSubsidio.casMedioDePago AS identificadorMedioPago
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            WHERE CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'TARJETA'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casCondicionPersonaAdmin = :condicionAdministrador
            UNION ALL SELECT DetalleSubsidioAsignadoProgramado.dprCondicionPersonaBeneficiario AS condicionBeneficiario,
            CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin AS condicionAdministrador,
            DetalleSubsidioAsignadoProgramado.dprBeneficiarioDetalle AS beneficiarioDetalle,
            CuentaAdministradorSubsidioProgramada.capAdministradorSubsidio AS administradorSubsidio,
            DetalleSubsidioAsignadoProgramado.dprAfiliadoPrincipal AS afiliadoPrincipal,
            DetalleSubsidioAsignadoProgramado.dprPeriodoLiquidado AS periodoLiquidado,
            DetalleSubsidioAsignadoProgramado.dprValorOriginalAbonado AS valorOriginalAbonado,
            CuentaAdministradorSubsidioProgramada.capMedioDePago AS identificadorMedioPago
            FROM DetalleSubsidioAsignadoProgramado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio
            = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidioProgramada ON
            DetalleSubsidioAsignadoProgramado.dprCuentaAdministradorSubsidioProgramada =
            CuentaAdministradorSubsidioProgramada.capId
            WHERE CuentaAdministradorSubsidioProgramada.capMedioDePagoTransaccion = 'TARJETA'
            AND CuentaAdministradorSubsidioProgramada.capEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin = :condicionAdministrador)) AS
            ResultadosFallecimiento
            INNER JOIN AdministradorSubsidio ON ResultadosFallecimiento.administradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona AS PersonaAdministrador ON AdministradorSubsidio.asuPersona = PersonaAdministrador.perId
            INNER JOIN BeneficiarioDetalle ON ResultadosFallecimiento.beneficiarioDetalle = BeneficiarioDetalle.bedId
            INNER JOIN PersonaDetalle ON BeneficiarioDetalle.bedPersonaDetalle = PersonaDetalle.pedId
            INNER JOIN Persona AS PersonaBeneficiario ON PersonaDetalle.pedPersona = PersonaBeneficiario.perId
            INNER JOIN Beneficiario ON (PersonaBeneficiario.perId = Beneficiario.benPersona
            AND ResultadosFallecimiento.afiliadoPrincipal = Beneficiario.benAfiliado)
            INNER JOIN MedioTarjeta ON ResultadosFallecimiento.identificadorMedioPago = MedioTarjeta.mdpId
            ORDER BY ResultadosFallecimiento.condicionBeneficiario, ResultadosFallecimiento.periodoLiquidado
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.detallePorAdministrador.liquidacionFallecimiento.pagosBancoConsignaciones">
        <description>Consulta que permite obtener la información detalla de los pagos al medio banco - consignaciones
            para un administrador en una liquidación de fallecimiento
        </description>
        <query>
            SELECT ResultadosFallecimiento.condicionAdministrador,
            ResultadosFallecimiento.condicionBeneficiario,
            PersonaAdministrador.perTipoIdentificacion AS tipoIdentificacionAdministrador,
            PersonaAdministrador.perNumeroIdentificacion AS numeroIdentificacionAdministrador,
            PersonaAdministrador.perRazonSocial AS nombreAdministrador,
            Banco.banNombre AS nombreBanco,
            MedioTransferencia.metTipoCuenta AS tipoCuenta,
            MedioTransferencia.metNumeroCuenta AS numeroCuenta,
            MedioTransferencia.metNombreTitularCuenta AS titularCuenta,
            PersonaBeneficiario.perTipoIdentificacion AS tipoIdentificacionBeneficiario,
            PersonaBeneficiario.perNumeroIdentificacion AS numeroIdentificacionBeneficiario,
            PersonaBeneficiario.perRazonSocial AS nombreBeneficiario,
            ResultadosFallecimiento.periodoLiquidado,
            ResultadosFallecimiento.valorOriginalAbonado
            FROM ((SELECT DetalleSubsidioAsignado.dsaCondicionPersonaBeneficiario AS condicionBeneficiario,
            CuentaAdministradorSubsidio.casCondicionPersonaAdmin AS condicionAdministrador,
            DetalleSubsidioAsignado.dsaBeneficiarioDetalle AS beneficiarioDetalle,
            CuentaAdministradorSubsidio.casAdministradorSubsidio AS administradorSubsidio,
            DetalleSubsidioAsignado.dsaAfiliadoPrincipal AS afiliadoPrincipal,
            DetalleSubsidioAsignado.dsaPeriodoLiquidado AS periodoLiquidado,
            DetalleSubsidioAsignado.dsaValorOriginalAbonado AS valorOriginalAbonado,
            CuentaAdministradorSubsidio.casMedioDePago AS identificadorMedioPago
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            WHERE CuentaAdministradorSubsidio.casMedioDePagoTransaccion = 'TRANSFERENCIA'
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casCondicionPersonaAdmin = :condicionAdministrador
            UNION ALL SELECT DetalleSubsidioAsignadoProgramado.dprCondicionPersonaBeneficiario AS condicionBeneficiario,
            CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin AS condicionAdministrador,
            DetalleSubsidioAsignadoProgramado.dprBeneficiarioDetalle AS beneficiarioDetalle,
            CuentaAdministradorSubsidioProgramada.capAdministradorSubsidio AS administradorSubsidio,
            DetalleSubsidioAsignadoProgramado.dprAfiliadoPrincipal AS afiliadoPrincipal,
            DetalleSubsidioAsignadoProgramado.dprPeriodoLiquidado AS periodoLiquidado,
            DetalleSubsidioAsignadoProgramado.dprValorOriginalAbonado AS valorOriginalAbonado,
            CuentaAdministradorSubsidioProgramada.capMedioDePago AS identificadorMedioPago
            FROM DetalleSubsidioAsignadoProgramado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio
            = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidioProgramada ON
            DetalleSubsidioAsignadoProgramado.dprCuentaAdministradorSubsidioProgramada =
            CuentaAdministradorSubsidioProgramada.capId
            WHERE CuentaAdministradorSubsidioProgramada.capMedioDePagoTransaccion = 'TRANSFERENCIA'
            AND CuentaAdministradorSubsidioProgramada.capEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin = :condicionAdministrador)) AS
            ResultadosFallecimiento
            INNER JOIN AdministradorSubsidio ON ResultadosFallecimiento.administradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona AS PersonaAdministrador ON AdministradorSubsidio.asuPersona = PersonaAdministrador.perId
            INNER JOIN BeneficiarioDetalle ON ResultadosFallecimiento.beneficiarioDetalle = BeneficiarioDetalle.bedId
            INNER JOIN PersonaDetalle ON BeneficiarioDetalle.bedPersonaDetalle = PersonaDetalle.pedId
            INNER JOIN Persona AS PersonaBeneficiario ON PersonaDetalle.pedPersona = PersonaBeneficiario.perId
            INNER JOIN Beneficiario ON (PersonaBeneficiario.perId = Beneficiario.benPersona
            AND ResultadosFallecimiento.afiliadoPrincipal = Beneficiario.benAfiliado)
            INNER JOIN MedioTransferencia ON ResultadosFallecimiento.identificadorMedioPago = MedioTransferencia.mdpId
            INNER JOIN Banco ON MedioTransferencia.metBanco = Banco.banId
            ORDER BY ResultadosFallecimiento.condicionBeneficiario, ResultadosFallecimiento.periodoLiquidado
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.consultar.primerPeriodo.cuotas.liquidacionFallecimiento">
        <description>Consulta que permite obtener el periodo relacionado a la primer cuota de fallecimiento
        </description>
        <query>
            SELECT MIN(PeriodosCuotas.periodoLiquidado) AS periodoPrimerCuota
            FROM (SELECT DetalleSubsidioAsignado.dsaPeriodoLiquidado AS periodoLiquidado
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casCondicionPersonaAdmin = :condicionAdministrador
            UNION ALL SELECT DetalleSubsidioAsignadoProgramado.dprPeriodoLiquidado AS periodoLiquidado
            FROM DetalleSubsidioAsignadoProgramado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio
            = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidioProgramada ON
            DetalleSubsidioAsignadoProgramado.dprCuentaAdministradorSubsidioProgramada =
            CuentaAdministradorSubsidioProgramada.capId
            AND CuentaAdministradorSubsidioProgramada.capEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin = :condicionAdministrador) AS
            PeriodosCuotas
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.detallePorAdministrador.liquidacionFallecimiento.descuentos">
        <description>Consulta que permite obtener la información detalla de los descuentos aplicados a los beneficiarios
            en una liquidación de fallecimiento
        </description>
        <query>
            SELECT
            ResultadosFallecimiento.condicionAdministrador,
            ResultadosFallecimiento.condicionBeneficiario,
            PersonaAdministrador.perTipoIdentificacion AS tipoIdentificacionAdministrador,
            PersonaAdministrador.perNumeroIdentificacion AS numeroIdentificacionAdministrador,
            PersonaAdministrador.perRazonSocial AS nombreAdministrador,
            EntidadDescuento.endCodigo AS codigoEntidadDescuento,
            CASE
            WHEN EntidadDescuento.endTipo = 'INTERNA' THEN NULL
            ELSE PersonaEntidadDescuento.perTipoIdentificacion
            END AS tipoIdentificacionEntidadDescuento,
            CASE
            WHEN EntidadDescuento.endTipo = 'INTERNA' THEN NULL
            ELSE PersonaEntidadDescuento.perNumeroIdentificacion
            END AS numeroIdentificacionEntidadDescuento,
            DescuentosSubsidioAsignado.desNombreEntidadDescuento AS nombreEntidadDescuento,
            PersonaBeneficiario.perTipoIdentificacion AS tipoIdentificacionBeneficiario,
            PersonaBeneficiario.perNumeroIdentificacion AS numeroIdentificacionBeneficiario,
            PersonaBeneficiario.perRazonSocial AS nombreBeneficiario,
            ResultadosFallecimiento.periodoLiquidado,
            ResultadosFallecimiento.valorDescuento
            FROM ((SELECT DetalleSubsidioAsignado.dsaId AS identificadorDetalleSubsidio,
            DetalleSubsidioAsignado.dsaCondicionPersonaBeneficiario AS condicionBeneficiario,
            CuentaAdministradorSubsidio.casCondicionPersonaAdmin AS condicionAdministrador,
            DetalleSubsidioAsignado.dsaBeneficiarioDetalle AS beneficiarioDetalle,
            CuentaAdministradorSubsidio.casAdministradorSubsidio AS administradorSubsidio,
            DetalleSubsidioAsignado.dsaAfiliadoPrincipal AS afiliadoPrincipal,
            DetalleSubsidioAsignado.dsaPeriodoLiquidado AS periodoLiquidado,
            DetalleSubsidioAsignado.dsaValorDescuento AS valorDescuento
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidio ON DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio =
            CuentaAdministradorSubsidio.casId
            AND CuentaAdministradorSubsidio.casEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidio.casCondicionPersonaAdmin = :identificadorCondicion
            UNION ALL SELECT DetalleSubsidioAsignadoProgramado.dprId AS identificadorDetalleSubsidio,
            DetalleSubsidioAsignadoProgramado.dprCondicionPersonaBeneficiario AS condicionBeneficiario,
            CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin AS condicionAdministrador,
            DetalleSubsidioAsignadoProgramado.dprBeneficiarioDetalle AS beneficiarioDetalle,
            CuentaAdministradorSubsidioProgramada.capAdministradorSubsidio AS administradorSubsidio,
            DetalleSubsidioAsignadoProgramado.dprAfiliadoPrincipal AS afiliadoPrincipal,
            DetalleSubsidioAsignadoProgramado.dprPeriodoLiquidado AS periodoLiquidado,
            DetalleSubsidioAsignadoProgramado.dprValorDescuento AS valorDescuento
            FROM DetalleSubsidioAsignadoProgramado
            INNER JOIN SolicitudLiquidacionSubsidio ON DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio
            = SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            INNER JOIN CuentaAdministradorSubsidioProgramada ON
            DetalleSubsidioAsignadoProgramado.dprCuentaAdministradorSubsidioProgramada =
            CuentaAdministradorSubsidioProgramada.capId
            AND CuentaAdministradorSubsidioProgramada.capEstadoLiquidacionSubsidio = 'GENERADO'
            AND Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND CuentaAdministradorSubsidioProgramada.capCondicionPersonaAdmin = :identificadorCondicion))
            ResultadosFallecimiento
            INNER JOIN DescuentosSubsidioAsignado ON ResultadosFallecimiento.identificadorDetalleSubsidio =
            DescuentosSubsidioAsignado.desDetalleSubsidioAsignado
            INNER JOIN EntidadDescuento ON DescuentosSubsidioAsignado.desEntidadDescuento = EntidadDescuento.endId
            LEFT JOIN Empresa ON EntidadDescuento.endEmpresa = Empresa.empId
            LEFT JOIN Persona AS PersonaEntidadDescuento ON Empresa.empPersona = PersonaEntidadDescuento.perId
            INNER JOIN AdministradorSubsidio ON ResultadosFallecimiento.administradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona AS PersonaAdministrador ON AdministradorSubsidio.asuPersona = PersonaAdministrador.perId
            INNER JOIN BeneficiarioDetalle ON ResultadosFallecimiento.beneficiarioDetalle = BeneficiarioDetalle.bedId
            INNER JOIN PersonaDetalle ON BeneficiarioDetalle.bedPersonaDetalle = PersonaDetalle.pedId
            INNER JOIN Persona AS PersonaBeneficiario ON PersonaDetalle.pedPersona = PersonaBeneficiario.perId
            INNER JOIN Beneficiario ON (PersonaBeneficiario.perId = Beneficiario.benPersona
            ORDER BY ResultadosFallecimiento.condicionBeneficiario, ResultadosFallecimiento.periodoLiquidado
            AND ResultadosFallecimiento.afiliadoPrincipal = Beneficiario.benAfiliado)
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.consultar.detallesProgramados.por.idsCondicionesBeneficiarios">
        <description>Consulta que permite obtener los detalles de subsidios programados a partir de los identificadores
            de condiciones de los beneficiarios
        </description>
        <query>
            SELECT DetalleSubsidioAsignado.*
            FROM DetalleSubsidioAsignado
            WHERE DetalleSubsidioAsignado.dsaCondicionPersonaBeneficiario IN (:lstCondicionesBeneficiarios)
        </query>
    </named-native-query>
    <named-native-query
            name="PagosSubsidioMonetario.consultar.detallesProgramados.por.idsCondicionesBeneficiariosYnumeroRadicado">
        <description>Consulta que permite obtener los detalles de subsidios programados a partir de los identificadores
            de condiciones de los beneficiarios
        </description>
        <query>
            SELECT dsa.*
            FROM DetalleSubsidioAsignado dsa
            JOIN SolicitudLiquidacionSubsidio sls ON dsa.dsaSolicitudLiquidacionSubsidio = sls.slsId
            JOIN Solicitud sol ON sls.slsSolicitudGlobal = sol.solId
            WHERE dsa.dsaCondicionPersonaBeneficiario IN (:lstCondicionesBeneficiarios)
            AND sol.solNumeroRadicacion = :numeroRadicado
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.actualizar.estado.detalles.programados">
        <description></description>
        <query>
            UPDATE DetalleSubsidioAsignadoProgramado SET dprEstado = 'PROGRAMADO_APLICADO'
            WHERE dprId IN (:idsDetallesProgramados)
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.verTransaccionesConFiltros">
        <description>Consulta que trae las cuentas de administradores de subsidios a partir de que cumplan con un
            filtro
        </description>
        <query>
            SELECT casId,
            casFechaHoraCreacionRegistro ,
            casUsuarioCreacionRegistro ,
            casTipoTransaccionSubsidio ,
            casEstadoTransaccionSubsidio ,
            casEstadoLiquidacionSubsidio ,
            casOrigenTransaccion ,
            casMedioDePagoTransaccion ,
            casNumeroTarjetaAdmonSubsidio ,
            casCodigoBanco ,
            casNombreBanco ,
            casTipoCuentaAdmonSubsidio ,
            casNumeroCuentaAdmonSubsidio ,
            casTipoIdentificacionTitularCuentaAdmonSubsidio ,
            casNumeroIdentificacionTitularCuentaAdmonSubsidio ,
            casNombreTitularCuentaAdmonSubsidio ,
            casFechaHoraTransaccion ,
            casUsuarioTransaccion ,
            casValorOriginalTransaccion ,
            casValorRealTransaccion ,
            casIdTransaccionOriginal ,
            casIdRemisionDatosTerceroPagador ,
            casIdTransaccionTerceroPagador ,
            casNombreTerceroPagado ,
            casIdCuentaAdmonSubsidioRelacionado ,
            casFechaHoraUltimaModificacion ,
            casUsuarioUltimaModificacion ,
            casAdministradorSubsidio ,
            casSitioDePago ,
            casSitioDeCobro ,
            casMedioDePago ,
            casSolicitudLiquidacionSubsidio ,
            casCondicionPersonaAdmin ,
            CASE
            WHEN cas.casSitioDePago IS NOT NULL
            THEN (
            SELECT dbo.SitioPago.sipNombre
            FROM dbo.SitioPago
            WHERE dbo.SitioPago.sipId = cas.casSitioDePago
            )
            ELSE NULL
            END AS nombreSitioPago,
            CASE
            WHEN cas.casSitioDeCobro IS NOT NULL
            THEN (
            SELECT CONCAT(dbo.Departamento.depNombre,',',dbo.Municipio.munNombre)
            FROM dbo.SitioPago
            INNER JOIN dbo.Infraestructura ON dbo.SitioPago.sipInfraestructura = dbo.Infraestructura.infId
            INNER JOIN dbo.Municipio ON dbo.Municipio.munId = dbo.Infraestructura.infMunicipio
            INNER JOIN dbo.Departamento ON dbo.Departamento.depId = dbo.Municipio.munDepartamento
            WHERE dbo.SitioPago.sipId = cas.casSitioDeCobro
            )
            ELSE NULL
            END AS nombreSitioCobro,
            adminPer.perRazonSocial AS adminSubsidio,
            personaAutorizada.perRazonSocial AS personaAutorizada ,
            adminPer.perTipoIdentificacion,
            adminPer.perNumeroIdentificacion,
            casEmpleador,
            casAfiliadoPrincipal,
            casBeneficiarioDetalle,
            casIdPuntoDeCobro
            FROM dbo.CuentaAdministradorSubsidio AS cas
            INNER JOIN dbo.AdministradorSubsidio AS admin ON admin.asuId = cas.casAdministradorSubsidio
            INNER JOIN dbo.Persona AS adminPer ON adminPer.perId = admin.asuPersona
            LEFT JOIN dbo.RetiroPersonaAutorizadaCobroSubsidio AS retPer ON cas.casId =
            retPer.rpaCuentaAdministradorSubsidio
            LEFT JOIN dbo.Persona AS personaAutorizada ON personaAutorizada.perId = retPer.rpaPersonaAutorizada
            WHERE (cas.casFechaHoraTransaccion BETWEEN :fechaInicio AND :fechaFin)
            AND (:estadoTransaccion IS NULL OR cas.casEstadoTransaccionSubsidio = :estadoTransaccion)
            AND (:medioDePago IS NULL OR cas.casMedioDePagoTransaccion = :medioDePago)
            AND (:tipoTransaccion IS NULL OR cas.casTipoTransaccionSubsidio = :tipoTransaccion)
            AND (:sizeListaIdAdmin = 0 OR cas.casAdministradorSubsidio IN (:listaIdAdminSubsidio))
            AND (:sizeListaidEmpleador = 0 OR cas.casEmpleador IN (:listaidEmpleador))
            AND (:sizeListaidAfiliadoPrincipal = 0 OR cas.casAfiliadoPrincipal IN (:listaidAfiliadoPrincipal))
            AND (:sizeListaidBeneficiarioDetalle = 0 OR cas.casBeneficiarioDetalle IN (:listaidBeneficiarioDetalle))
            AND (:sizeListaidGrupoFamiliar = 0 OR cas.casGrupoFamiliar IN (:listaidGrupoFamiliar))
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.consultar.admin.empleador.afiliado.beneficiario.por.IdsDetalles">
        <description>Consulta que permite obtener los detalles con ls informacion faltante por el id de cada detalle
        </description>
        <query>
            SELECT DISTINCT (dbo.DetalleSubsidioAsignado.dsaId),
            CASE
            WHEN perEmp.perRazonSocial IS NOT NULL
            THEN perEmp.perRazonSocial
            ELSE CONCAT(perEmp.perPrimerNombre,' ',perEmp.perSegundoNombre,' ',perEmp.perPrimerApellido,'
            ',perEmp.perSegundoApellido)
            END AS empleador,
            CONCAT(perAfi.perPrimerNombre,' ',perAfi.perSegundoNombre,' ',perAfi.perPrimerApellido,'
            ',perAfi.perSegundoApellido) AS afiliado,
            CONCAT(perBen.perPrimerNombre,' ',perBen.perSegundoNombre,' ',perBen.perPrimerApellido,'
            ',perBen.perSegundoApellido) AS beneficiario,
            CONCAT(perAdmin.perPrimerNombre,' ',perAdmin.perSegundoNombre,' ',perAdmin.perPrimerApellido,'
            ',perAdmin.perSegundoApellido) AS adminSubsidio,
            dbo.GrupoFamiliar.grfNumero, dbo.DescuentosSubsidioAsignado.desNombreEntidadDescuento,
            CASE
            WHEN dbo.SolicitudLiquidacionSubsidio.slsFechaEjecucionProgramada IS NOT NULL THEN
            dbo.SolicitudLiquidacionSubsidio.slsFechaEjecucionProgramada
            ELSE dbo.SolicitudLiquidacionSubsidio.slsFechaInicio
            END AS fechaLiquidacionDetalle,
            dbo.DetalleSubsidioAsignado.dsaUsuarioCreador,
            dbo.DetalleSubsidioAsignado.dsaFechaHoraCreacion,
            dbo.DetalleSubsidioAsignado.dsaEstado,
            dbo.DetalleSubsidioAsignado.dsaMotivoAnulacion,
            dbo.DetalleSubsidioAsignado.dsaDetalleAnulacion,
            dbo.DetalleSubsidioAsignado.dsaOrigenRegistroSubsidio,
            dbo.DetalleSubsidioAsignado.dsaTipoliquidacionSubsidio,
            dbo.DetalleSubsidioAsignado.dsaTipoCuotaSubsidio,
            dbo.DetalleSubsidioAsignado.dsaValorSubsidioMonetario,
            dbo.DetalleSubsidioAsignado.dsaValorDescuento,
            dbo.DetalleSubsidioAsignado.dsaValorOriginalAbonado,
            dbo.DetalleSubsidioAsignado.dsaValorTotal,
            dbo.DetalleSubsidioAsignado.dsaFechaTransaccionRetiro,
            dbo.DetalleSubsidioAsignado.dsaUsuarioTransaccionRetiro,
            dbo.DetalleSubsidioAsignado.dsaFechaTransaccionAnulacion,
            dbo.DetalleSubsidioAsignado.dsaUsuarioTransaccionAnulacion,
            dbo.DetalleSubsidioAsignado.dsaFechaHoraUltimaModificacion,
            dbo.DetalleSubsidioAsignado.dsaUsuarioUltimaModificacion,
            dbo.DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio,
            dbo.DetalleSubsidioAsignado.dsaEmpleador,
            dbo.DetalleSubsidioAsignado.dsaAfiliadoPrincipal,
            dbo.DetalleSubsidioAsignado.dsaGrupoFamiliar,
            dbo.DetalleSubsidioAsignado.dsaAdministradorSubsidio,
            dbo.DetalleSubsidioAsignado.dsaIdRegistroOriginalRelacionado,
            dbo.DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio,
            dbo.DetalleSubsidioAsignado.dsaBeneficiarioDetalle,
            dbo.DetalleSubsidioAsignado.dsaPeriodoLiquidado,
            dbo.DetalleSubsidioAsignado.dsaResultadoValidacionLiquidacion,
            dbo.DetalleSubsidioAsignado.dsaCondicionPersonaBeneficiario,
            dbo.DetalleSubsidioAsignado.dsaCondicionPersonaAfiliado,
            dbo.DetalleSubsidioAsignado.dsaCondicionPersonaEmpleador,
            mdp.mdpTipo,
            cas.casNumeroTarjetaAdmonSubsidio,
            cas.casCodigoBanco,
            cas.casNombreBanco,
            cas.casTipoCuentaAdmonSubsidio,
            cas.casNumeroCuentaAdmonSubsidio,
            cas.casTipoIdentificacionTitularCuentaAdmonSubsidio,
            cas.casNumeroIdentificacionTitularCuentaAdmonSubsidio,
            cas.casNombreTitularCuentaAdmonSubsidio,
            perEmp.perTipoIdentificacion AS perEmpTipoId,
            perEmp.perNumeroIdentificacion AS perEmpNumeroId,
            perAfi.perTipoIdentificacion AS perAfiTipoId,
            perAfi.perNumeroIdentificacion AS perAfiNumeroId,
            perBen.perTipoIdentificacion AS perBenTipoId,
            perBen.perNumeroIdentificacion AS perBenNumeroId,
            perAdmin.perTipoIdentificacion AS perAdminTipoId,
            perAdmin.perNumeroIdentificacion AS perAdminNumeroId
            FROM dbo.DetalleSubsidioAsignado
            INNER JOIN dbo.Empleador AS empleador ON empleador.empId = dbo.DetalleSubsidioAsignado.dsaEmpleador
            INNER JOIN dbo.Empresa AS empresa ON empleador.empEmpresa = empresa.empId
            INNER JOIN dbo.Persona AS perEmp ON perEmp.perId = empresa.empPersona
            INNER JOIN dbo.Afiliado ON dbo.DetalleSubsidioAsignado.dsaAfiliadoPrincipal = dbo.Afiliado.afiId
            INNER JOIN dbo.Persona AS perAfi ON dbo.Afiliado.afiPersona = perAfi.perId
            INNER JOIN dbo.Beneficiario ON dbo.DetalleSubsidioAsignado.dsaBeneficiarioDetalle =
            dbo.Beneficiario.benBeneficiarioDetalle
            INNER JOIN dbo.Persona AS perBen ON perBen.perId = dbo.Beneficiario.benPersona
            INNER JOIN dbo.AdministradorSubsidio ON dbo.DetalleSubsidioAsignado.dsaAdministradorSubsidio =
            dbo.AdministradorSubsidio.asuId
            INNER JOIN dbo.persona AS perAdmin ON perAdmin.perId = dbo.AdministradorSubsidio.asuPersona
            INNER JOIN dbo.GrupoFamiliar ON dbo.DetalleSubsidioAsignado.dsaGrupoFamiliar = dbo.GrupoFamiliar.grfId
            LEFT JOIN dbo.DescuentosSubsidioAsignado ON dbo.DescuentosSubsidioAsignado.desDetalleSubsidioAsignado =
            dbo.DetalleSubsidioAsignado.dsaId
            INNER JOIN dbo.SolicitudLiquidacionSubsidio ON dbo.DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            dbo.SolicitudLiquidacionSubsidio.slsId
            INNER JOIN dbo.CuentaAdministradorSubsidio cas ON cas.casId =
            dbo.DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio
            INNER JOIN MedioDePago mdp on mdp.mdpId = cas.casMedioDePago
            WHERE (:medioPago IS NULL OR mdp.mdpTipo = :medioPago)
            AND (cas.casFechaHoraTransaccion BETWEEN :fechaInicio AND :fechaFin)
            AND (:sizelstidEmpleadores = 0 OR dbo.DetalleSubsidioAsignado.dsaEmpleador IN (:lstidEmpleadores))
            AND (:sizelstidAfiliadoPrincipal = 0 OR dbo.DetalleSubsidioAsignado.dsaAfiliadoPrincipal IN
            (:lstidAfiliadoPrincipal))
            AND (:sizelstidGrupoFamiliar = 0 OR dbo.DetalleSubsidioAsignado.dsaGrupoFamiliar IN (:lstidGrupoFamiliar))
            AND (:sizelstidBeneficiarioDetalle = 0 OR dbo.DetalleSubsidioAsignado.dsaBeneficiarioDetalle IN
            (:lstidBeneficiarioDetalle))
            AND (:sizelstidAdministradorSubsidio = 0 OR dbo.DetalleSubsidioAsignado.dsaAdministradorSubsidio IN
            (:lstidAdministradorSubsidio))

        </query>
    </named-native-query>

    <named-native-query
            name="PagosSubsidioMonetario.consultar.admin.empleador.afiliado.beneficiario.por.IdsDetalles.paginado">
        <description>Consulta que permite obtener los detalles con ls informacion faltante por el id de cada detalle
        </description>
        <query>
            SELECT DISTINCT (dsa.dsaId),
            perEmp.perRazonSocial AS empleador,
            perAfi.perRazonSocial AS afiliado,
            perBen.perRazonSocial AS beneficiario,
            perAdmin.perRazonSocial AS adminSubsidio,
            dbo.GrupoFamiliar.grfNumero,
            CASE
            WHEN sls.slsFechaEjecucionProgramada IS NOT NULL THEN sls.slsFechaEjecucionProgramada
            ELSE sls.slsFechaInicio
            END AS fechaLiquidacionDetalle,
            dsa.dsaUsuarioCreador,
            dsa.dsaFechaHoraCreacion,
            dsa.dsaEstado,
            dsa.dsaMotivoAnulacion,
            dsa.dsaDetalleAnulacion,
            dsa.dsaOrigenRegistroSubsidio,
            dsa.dsaTipoliquidacionSubsidio,
            dsa.dsaTipoCuotaSubsidio,
            dsa.dsaValorSubsidioMonetario,
            dsa.dsaValorDescuento,
            dsa.dsaValorOriginalAbonado,
            dsa.dsaValorTotal,
            dsa.dsaFechaTransaccionRetiro,
            dsa.dsaUsuarioTransaccionRetiro,
            dsa.dsaFechaTransaccionAnulacion,
            dsa.dsaUsuarioTransaccionAnulacion,
            dsa.dsaFechaHoraUltimaModificacion,
            dsa.dsaUsuarioUltimaModificacion,
            dsa.dsaSolicitudLiquidacionSubsidio,
            dsa.dsaEmpleador,
            dsa.dsaAfiliadoPrincipal,
            dsa.dsaGrupoFamiliar,
            dsa.dsaAdministradorSubsidio,
            dsa.dsaIdRegistroOriginalRelacionado,
            dsa.dsaCuentaAdministradorSubsidio,
            dsa.dsaBeneficiarioDetalle,
            dsa.dsaPeriodoLiquidado,
            dsa.dsaResultadoValidacionLiquidacion,
            dsa.dsaCondicionPersonaBeneficiario,
            dsa.dsaCondicionPersonaAfiliado,
            dsa.dsaCondicionPersonaEmpleador,
            mdp.mdpTipo,
            cas.casNumeroTarjetaAdmonSubsidio,
            cas.casCodigoBanco,
            cas.casNombreBanco,
            cas.casTipoCuentaAdmonSubsidio,
            cas.casNumeroCuentaAdmonSubsidio,
            cas.casTipoIdentificacionTitularCuentaAdmonSubsidio,
            cas.casNumeroIdentificacionTitularCuentaAdmonSubsidio,
            cas.casNombreTitularCuentaAdmonSubsidio,
            perEmp.perTipoIdentificacion AS perEmpTipoId,
            perEmp.perNumeroIdentificacion AS perEmpNumeroId,
            perAfi.perTipoIdentificacion AS perAfiTipoId,
            perAfi.perNumeroIdentificacion AS perAfiNumeroId,
            perBen.perTipoIdentificacion AS perBenTipoId,
            perBen.perNumeroIdentificacion AS perBenNumeroId,
            perAdmin.perTipoIdentificacion AS perAdminTipoId,
            perAdmin.perNumeroIdentificacion AS perAdminNumeroId
            FROM dbo.DetalleSubsidioAsignado dsa
            INNER JOIN dbo.Empleador AS empleador ON empleador.empId = dsa.dsaEmpleador
            INNER JOIN dbo.Empresa AS empresa ON empleador.empEmpresa = empresa.empId
            INNER JOIN dbo.Persona AS perEmp ON perEmp.perId = empresa.empPersona
            INNER JOIN dbo.Afiliado ON dsa.dsaAfiliadoPrincipal = dbo.Afiliado.afiId
            INNER JOIN dbo.Persona AS perAfi ON dbo.Afiliado.afiPersona = perAfi.perId
            INNER JOIN dbo.Beneficiario ON dsa.dsaBeneficiarioDetalle = dbo.Beneficiario.benBeneficiarioDetalle
            INNER JOIN dbo.Persona AS perBen ON perBen.perId = dbo.Beneficiario.benPersona
            INNER JOIN dbo.AdministradorSubsidio ON dsa.dsaAdministradorSubsidio = dbo.AdministradorSubsidio.asuId
            INNER JOIN dbo.persona AS perAdmin ON perAdmin.perId = dbo.AdministradorSubsidio.asuPersona
            INNER JOIN dbo.GrupoFamiliar ON dsa.dsaGrupoFamiliar = dbo.GrupoFamiliar.grfId
            INNER JOIN dbo.SolicitudLiquidacionSubsidio sls ON dsa.dsaSolicitudLiquidacionSubsidio = sls.slsId
            INNER JOIN dbo.CuentaAdministradorSubsidio cas ON cas.casId = dsa.dsaCuentaAdministradorSubsidio
            INNER JOIN MedioDePago mdp on mdp.mdpId = cas.casMedioDePago
            WHERE (:medioPago IS NULL OR mdp.mdpTipo = :medioPago)
            AND (:filtroFechas is null or (cas.casFechaHoraTransaccion BETWEEN :fechaInicio AND :fechaFin))
            AND (:sizelstidEmpleadores = 0 OR dsa.dsaEmpleador IN (:lstidEmpleadores))
            AND (:sizelstidAfiliadoPrincipal = 0 OR dsa.dsaAfiliadoPrincipal IN (:lstidAfiliadoPrincipal))
            AND (:sizelstidBeneficiarioDetalle = 0 OR dsa.dsaBeneficiarioDetalle IN (:lstidBeneficiarioDetalle))
            AND (:sizelstidAdministradorSubsidio = 0 OR dsa.dsaAdministradorSubsidio IN (:lstidAdministradorSubsidio))
            AND (:sizelstidGrupoFamiliar = 0 OR dsa.dsaGrupoFamiliar IN (:lstidGrupoFamiliar))

        </query>
        <hint name="idDetalleSubsidioAsignado" value="dsa.dsaId"/>
        <hint name="usuarioCreador" value="dsa.dsaUsuarioCreador"/>
        <hint name="fechaHoraCreacion" value="dsa.dsaFechaHoraCreacion"/>
        <hint name="periodoLiquidado" value="dsa.dsaPeriodoLiquidado"/>
        <hint name="estado" value="dsa.dsaEstado"/>
        <hint name="motivoAnulacion" value="dsa.dsaMotivoAnulacion"/>
        <hint name="empleador.tipoIdentificacion" value="perEmpTipoId"/>
        <hint name="empleador.numeroIdentificacion" value="perEmpNumeroId"/>
        <hint name="empleador.razonSocial" value="empleador"/>
        <hint name="afiliadoPrincipal.tipoIdentificacion" value="perAfiTipoId"/>
        <hint name="afiliadoPrincipal.numeroIdentificacion" value="perAfiNumeroId"/>
        <hint name="afiliadoPrincipal.razonSocial" value="afiliado"/>
        <hint name="beneficiario.tipoIdentificacion" value="perBenTipoId"/>
        <hint name="beneficiario.numeroIdentificacion" value="perBenNumeroId"/>
        <hint name="beneficiario.razonSocial" value="beneficiario"/>
        <hint name="administradorSubsidio.tipoIdentificacion" value="perAdminTipoId"/>
        <hint name="administradorSubsidio.numeroIdentificacion" value="perAdminNumeroId"/>
        <hint name="administradorSubsidio.razonSocial" value="adminSubsidio"/>
        <hint name="medioDePago" value="mdp.mdpTipo"/>
        <hint name="numeroTarjetaAdminSubsidio" value="cas.casNumeroTarjetaAdmonSubsidio"/>
        <hint name="codigoBancoAdminSubsidio" value="cas.casCodigoBanco"/>
        <hint name="nombreBancoAdminSubsidio" value="cas.casNombreBanco"/>
        <hint name="tipoCuentaAdminSubsidio" value="cas.casTipoCuentaAdmonSubsidio"/>
        <hint name="numeroCuentaAdminSubsidio" value="cas.casNumeroCuentaAdmonSubsidio"/>
        <hint name="tipoIdentificacionTitularCuentaAdminSubsidio"
              value="cas.casTipoIdentificacionTitularCuentaAdmonSubsidio"/>
        <hint name="numeroIdentificacionTitularCuentaAdminSubsidio"
              value="cas.casNumeroIdentificacionTitularCuentaAdmonSubsidio"/>
        <hint name="nombreTitularCuentaAdminSubsidio" value="cas.casNombreTitularCuentaAdmonSubsidio"/>
        <hint name="detalleAnulacion" value="dsa.dsaDetalleAnulacion"/>
        <hint name="origenRegistroSubsidio" value="dsa.dsaOrigenRegistroSubsidio"/>
        <hint name="idSolicitudLiquidacionSubsidio" value="dsa.dsaSolicitudLiquidacionSubsidio"/>
        <hint name="fechaLiquidacionAsociada" value="fechaLiquidacionDetalle"/>
        <hint name="tipoLiquidacionSubsidio" value="dsa.dsaTipoliquidacionSubsidio"/>
        <hint name="tipoCuotaSubsidio" value="dsa.dsaTipoCuotaSubsidio"/>
        <hint name="valorSubsidioMonetario" value="dsa.dsaValorSubsidioMonetario"/>
        <hint name="nombreTipoDescuento" value="dsc.desNombreEntidadDescuento"/>
        <hint name="valorDescuento" value="dsa.dsaValorDescuento"/>
        <hint name="valorOriginalAbonado" value="dsa.dsaValorOriginalAbonado"/>
        <hint name="valorTotal" value="dsa.dsaValorTotal"/>
        <hint name="fechaTransaccionRetiro" value="dsa.dsaFechaTransaccionRetiro"/>
        <hint name="usuarioTransaccionRetiro" value="dsa.dsaUsuarioTransaccionRetiro"/>
        <hint name="fechaTransaccionAnulacion" value="dsa.dsaFechaTransaccionAnulacion"/>
        <hint name="usuarioTransaccionAnulacion" value="dsa.dsaUsuarioTransaccionAnulacion"/>
        <hint name="fechaHoraUltimaModificacion" value="dsa.dsaFechaHoraUltimaModificacion"/>
        <hint name="usuarioUltimaModificacion" value="dsa.dsaUsuarioUltimaModificacion"/>
        <hint name="idRegistroOriginalRelacionado" value="dsa.dsaIdRegistroOriginalRelacionado"/>
        <hint name="idCuentaAdministradorSubsidio" value="dsa.dsaCuentaAdministradorSubsidio"/>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.DetalleSubsidioAsignadoDTO.porResultadoValidacionLiquidacion">
        <description>Consulta que trae las cuentas de administradores de subsidios a partir de que cumplan con un
            filtro
        </description>
        <query>
            SELECT dsaId, dsaCuentaAdministradorSubsidio, dsaEstado, dsaOrigenRegistroSubsidio, dsaValorTotal,
            casEstadoTransaccionSubsidio, casIdCuentaAdmonSubsidioRelacionado
            FROM DetalleSubsidioAsignado
            INNER JOIN CuentaAdministradorSubsidio ON dsaCuentaAdministradorSubsidio = casId
            WHERE dsaResultadoValidacionLiquidacion = :idResultadoValidacionLiquidacion
            UNION
            SELECT dprId, dprCuentaAdministradorSubsidioProgramada, dprEstado, dprOrigenRegistroSubsidio, dprValorTotal,
            capEstadoTransaccionSubsidio, capIdCuentaAdmonSubsidioRelacionado
            FROM dbo.DetalleSubsidioAsignadoProgramado
            INNER JOIN CuentaAdministradorSubsidioProgramada ON dprCuentaAdministradorSubsidioProgramada = capId
            WHERE dprResultadoValidacionLiquidacion = :idResultadoValidacionLiquidacion

        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.porResultadoValidacionLiquidacion">
        <description>
            Consulta que trae las cuentas de administradores de subsidios a partir de que cumplan con un filtro
            3-3-2022: Se modifica la consulta adicionando los cambios para el GLPI 49367. Campos: establecimientoCodigo,
            establecimientoNombre, fechaTransaccionConsumo
        </description>
        <query>
            SELECT distinct casId,
            casFechaHoraCreacionRegistro ,
            casUsuarioCreacionRegistro ,
            casTipoTransaccionSubsidio ,
            casEstadoTransaccionSubsidio ,
            casEstadoLiquidacionSubsidio ,
            casOrigenTransaccion ,
            casMedioDePagoTransaccion ,
            casNumeroTarjetaAdmonSubsidio ,
            casCodigoBanco ,
            casNombreBanco ,
            casTipoCuentaAdmonSubsidio ,
            casNumeroCuentaAdmonSubsidio ,
            casTipoIdentificacionTitularCuentaAdmonSubsidio ,
            casNumeroIdentificacionTitularCuentaAdmonSubsidio ,
            casNombreTitularCuentaAdmonSubsidio ,
            casFechaHoraTransaccion ,
            casUsuarioTransaccion ,
            casValorOriginalTransaccion ,
            casValorRealTransaccion ,
            casIdTransaccionOriginal ,
            casIdRemisionDatosTerceroPagador ,
            casIdTransaccionTerceroPagador ,
            casNombreTerceroPagado ,
            casIdCuentaAdmonSubsidioRelacionado ,
            casFechaHoraUltimaModificacion ,
            casUsuarioUltimaModificacion ,
            cas.casAdministradorSubsidio ,
            casSitioDePago ,
            casSitioDeCobro ,
            casMedioDePago ,
            casSolicitudLiquidacionSubsidio ,
            casCondicionPersonaAdmin ,
            CASE
            WHEN cas.casSitioDePago IS NOT NULL
            THEN (
            SELECT dbo.SitioPago.sipNombre
            FROM dbo.SitioPago
            WHERE dbo.SitioPago.sipId = cas.casSitioDePago
            )
            ELSE NULL
            END AS nombreSitioPago,
            CASE
            WHEN cas.casSitioDeCobro IS NOT NULL
            THEN (
            SELECT CONCAT(dbo.Departamento.depNombre,',',dbo.Municipio.munNombre)
            FROM dbo.SitioPago
            INNER JOIN dbo.Infraestructura ON dbo.SitioPago.sipInfraestructura = dbo.Infraestructura.infId
            INNER JOIN dbo.Municipio ON dbo.Municipio.munId = dbo.Infraestructura.infMunicipio
            INNER JOIN dbo.Departamento ON dbo.Departamento.depId = dbo.Municipio.munDepartamento
            WHERE dbo.SitioPago.sipId = cas.casSitioDeCobro
            )
            ELSE NULL
            END AS nombreSitioCobro,
            adminPer.perRazonSocial AS adminSubsidio,
            personaAutorizada.perRazonSocial AS personaAutorizada ,
            adminPer.perTipoIdentificacion,
            adminPer.perNumeroIdentificacion,
            casEmpleador,
            casAfiliadoPrincipal,
            casBeneficiarioDetalle,
            cas.casNombreTerceroPagado as establecimientoCodigo,
            est.estNombre AS establecimientoNombre,
            rac.racFechaTransaccion as fechaTransaccionConsumo
            FROM dbo.CuentaAdministradorSubsidio AS cas
            INNER JOIN dbo.AdministradorSubsidio AS admin ON admin.asuId = cas.casAdministradorSubsidio
            INNER JOIN dbo.Persona AS adminPer ON adminPer.perId = admin.asuPersona
            LEFT JOIN dbo.RetiroPersonaAutorizadaCobroSubsidio AS retPer ON cas.casId =
            retPer.rpaCuentaAdministradorSubsidio
            LEFT JOIN dbo.Persona AS personaAutorizada ON personaAutorizada.perId = retPer.rpaPersonaAutorizada
            LEFT JOIN EstablecimientosMediosPago AS est ON est.estCodigo = cas.casNombreTerceroPagado
            LEFT JOIN RegistroArchivoConsumosAnibol AS rac on rac.racCodigoAutorizacion =
            cas.casIdTransaccionTerceroPagador
            INNER JOIN (SELECT cas.casAdministradorSubsidio AdministradorSubsidio,dsa.dsaSolicitudLiquidacionSubsidio
            SolicitudLiquidacionSubsidio
            FROM CuentaAdministradorSubsidio cas
            INNER JOIN DetalleSubsidioAsignado dsa on dsa.dsaCuentaAdministradorSubsidio=cas.casId
            WHERE dsa.dsaResultadoValidacionLiquidacion = :idResultadoValidacionLiquidacion
            UNION
            SELECT cas.capAdministradorSubsidio AdministradorSubsidio,dpr.dprSolicitudLiquidacionSubsidio
            SolicitudLiquidacionSubsidio
            FROM CuentaAdministradorSubsidioProgramada cas
            INNER JOIN DetalleSubsidioAsignadoProgramado dpr ON dpr.dprCuentaAdministradorSubsidioProgramada = cas.capId
            WHERE dpr.dprResultadoValidacionLiquidacion = :idResultadoValidacionLiquidacion
            AND cas.capEstadoTransaccionSubsidio = 'GENERADO'
            ) cuentas ON cuentas.SolicitudLiquidacionSubsidio = cas.casSolicitudLiquidacionSubsidio
            AND cuentas.AdministradorSubsidio = cas.casAdministradorSubsidio
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.detalles.por.filtros.hu31201.caso.AbonosPlusDetalles">
        <description>Consulta que permite obtener los detalles de subsidios asignados por medio de los filtros
        </description>
        <query>
            SELECT DISTINCT (dbo.DetalleSubsidioAsignado.dsaId) AS idSubsidioAsignado,
            dbo.DetalleSubsidioAsignado.dsaFechaHoraCreacion, dbo.DetalleSubsidioAsignado.dsaUsuarioCreador,
            dbo.DetalleSubsidioAsignado.dsaEstado, dbo.DetalleSubsidioAsignado.dsaPeriodoLiquidado,
            CASE
            WHEN perEmp.perRazonSocial IS NOT NULL THEN perEmp.perRazonSocial
            ELSE CONCAT(perEmp.perPrimerNombre,' ',perEmp.perSegundoNombre,' ',perEmp.perPrimerApellido,'
            ',perEmp.perSegundoApellido)
            END AS empleador,
            CONCAT(perAfi.perPrimerNombre,' ',perAfi.perSegundoNombre,' ',perAfi.perPrimerApellido,'
            ',perAfi.perSegundoApellido) AS afiliado,
            dbo.GrupoFamiliar.grfNumero,
            CONCAT(perBen.perPrimerNombre,' ',perBen.perSegundoNombre,' ',perBen.perPrimerApellido,'
            ',perBen.perSegundoApellido) AS beneficiario,
            CONCAT(perAdmin.perPrimerNombre,' ',perAdmin.perSegundoNombre,' ',perAdmin.perPrimerApellido,'
            ',perAdmin.perSegundoApellido) AS adminSubsidio,
            dbo.DetalleSubsidioAsignado.dsaOrigenRegistroSubsidio,
            dbo.DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio,
            CASE
            WHEN dbo.SolicitudLiquidacionSubsidio.slsFechaEjecucionProgramada IS NOT NULL THEN
            dbo.SolicitudLiquidacionSubsidio.slsFechaEjecucionProgramada
            ELSE dbo.SolicitudLiquidacionSubsidio.slsFechaInicio
            END AS fechaLiquidacionDetalle,
            dbo.DetalleSubsidioAsignado.dsaTipoliquidacionSubsidio,
            dbo.DetalleSubsidioAsignado.dsaTipoCuotaSubsidio,
            dbo.DetalleSubsidioAsignado.dsaValorSubsidioMonetario,
            dbo.DescuentosSubsidioAsignado.desNombreEntidadDescuento AS tipoDescuento,
            dbo.DetalleSubsidioAsignado.dsaValorDescuento,
            dbo.DetalleSubsidioAsignado.dsaValorOriginalAbonado,
            dbo.DetalleSubsidioAsignado.dsaValorTotal,
            dbo.DetalleSubsidioAsignado.dsaIdRegistroOriginalRelacionado,
            dbo.DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio,
            dbo.DetalleSubsidioAsignado.dsaFechaTransaccionRetiro,
            dbo.DetalleSubsidioAsignado.dsaUsuarioTransaccionRetiro,
            dbo.DetalleSubsidioAsignado.dsaFechaTransaccionAnulacion,
            dbo.DetalleSubsidioAsignado.dsaUsuarioTransaccionAnulacion,
            dbo.DetalleSubsidioAsignado.dsaFechaHoraUltimaModificacion,
            dbo.DetalleSubsidioAsignado.dsaUsuarioUltimaModificacion
            FROM dbo.DetalleSubsidioAsignado
            INNER JOIN dbo.Empleador AS empleador ON empleador.empId = dbo.DetalleSubsidioAsignado.dsaEmpleador
            INNER JOIN dbo.Empresa AS empresa ON empleador.empEmpresa = empresa.empId
            INNER JOIN dbo.Persona AS perEmp ON perEmp.perId = empresa.empPersona
            INNER JOIN dbo.Afiliado ON dbo.DetalleSubsidioAsignado.dsaAfiliadoPrincipal = dbo.Afiliado.afiId
            INNER JOIN dbo.Persona AS perAfi ON dbo.Afiliado.afiPersona = perAfi.perId
            INNER JOIN dbo.Beneficiario ON dbo.DetalleSubsidioAsignado.dsaBeneficiarioDetalle =
            dbo.Beneficiario.benBeneficiarioDetalle
            INNER JOIN dbo.Persona AS perBen ON perBen.perId = dbo.Beneficiario.benPersona
            INNER JOIN dbo.AdministradorSubsidio ON dbo.DetalleSubsidioAsignado.dsaAdministradorSubsidio =
            dbo.AdministradorSubsidio.asuId
            INNER JOIN dbo.persona AS perAdmin ON perAdmin.perId = dbo.AdministradorSubsidio.asuPersona
            INNER JOIN dbo.GrupoFamiliar ON dbo.DetalleSubsidioAsignado.dsaGrupoFamiliar = dbo.GrupoFamiliar.grfId
            LEFT JOIN dbo.DescuentosSubsidioAsignado ON dbo.DescuentosSubsidioAsignado.desDetalleSubsidioAsignado =
            dbo.DetalleSubsidioAsignado.dsaId
            INNER JOIN dbo.SolicitudLiquidacionSubsidio ON dbo.DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            dbo.SolicitudLiquidacionSubsidio.slsId
            WHERE ((:sizeAdmin = 0) OR (dbo.DetalleSubsidioAsignado.dsaAdministradorSubsidio IN
            (:lstIdAdministradorSubsidio)))
            AND ((:sizeEmpleador = 0) OR (dbo.DetalleSubsidioAsignado.dsaEmpleador IN (:lstIdEmpleador)))
            AND ((:sizeAfiliadoPrincipal = 0) OR (dbo.DetalleSubsidioAsignado.dsaAfiliadoPrincipal IN
            (:lstIdAfiliadoPrincipal)))
            AND ((:sizeGrupoFamiliar = 0) OR (dbo.DetalleSubsidioAsignado.dsaGrupoFamiliar IN (:lstIdGrupoFamiliar)))
            AND ((:sizeBeneficiario IS NULL) OR (dbo.DetalleSubsidioAsignado.dsaBeneficiarioDetalle IN
            (:lstIdBeneficiario)))
            AND ((:sizeLstCuenta = 0) OR (dbo.DetalleSubsidioAsignado.dsaCuentaAdministradorSubsidio IN
            (:lstIdsCuentas)))
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.obtener.pagos.subsidio.pendientes.por.programar">
        <description>Consulta que permite obtener la información de los pagos de subsidios monetarios (detalles
            programados) con la información relevante del pago de un administrador del subsidio
        </description>
        <query>
            SELECT dbo.DetalleSubsidioAsignado.dsaPeriodoLiquidado,
            NULL AS fechaParametrizadaPago,
            NULL AS fechaProgramadaPago,
            'true' AS pagado
            FROM DetalleSubsidioAsignado
            INNER JOIN SolicitudLiquidacionSubsidio ON dbo.DetalleSubsidioAsignado.dsaSolicitudLiquidacionSubsidio =
            SolicitudLiquidacionSubsidio.slsId
            INNER JOIN Solicitud ON SolicitudLiquidacionSubsidio.slsSolicitudGlobal = Solicitud.solId
            WHERE Solicitud.solNumeroRadicacion = :numeroRadicacion
            AND dbo.DetalleSubsidioAsignado.dsaAdministradorSubsidio = :adminSubsidio
            UNION
            SELECT dbo.DetalleSubsidioAsignadoProgramado.dprPeriodoLiquidado,
            CASE
            WHEN CONVERT(VARCHAR(7), DATEADD(MONTH, 1, dbo.DetalleSubsidioAsignadoProgramado.dprPeriodoLiquidado)) =
            CONVERT(VARCHAR(7), DATEADD(MONTH, 1, dbo.DetalleSubsidioAsignadoProgramado.dprFechaProgramadaPago))
            OR YEAR (dbo.DetalleSubsidioAsignadoProgramado.dprPeriodoLiquidado) &lt;
            YEAR(dbo.DetalleSubsidioAsignadoProgramado.dprFechaProgramadaPago)
            AND DAY(dbo.DetalleSubsidioAsignadoProgramado.dprFechaProgramadaPago) &lt;&gt; 2
            AND DAY(dbo.DetalleSubsidioAsignadoProgramado.dprPeriodoLiquidado) &lt;&gt; 1
            THEN
            CAST (CONCAT(CONVERT(VARCHAR(7), DATEADD(MONTH, 1,
            dbo.DetalleSubsidioAsignadoProgramado.dprPeriodoLiquidado)),'-',dbo.ParametrizacionCondicionesSubsidio.pcsCalendarioPagoFallecimiento)
            AS DATE)
            ELSE
            CAST (CONCAT(CONVERT(VARCHAR(7), DATEADD(MONTH, 1,
            dbo.DetalleSubsidioAsignadoProgramado.dprPeriodoLiquidado)),'-',DAY(dbo.DetalleSubsidioAsignadoProgramado.dprFechaProgramadaPago))
            AS DATE)
            END AS fechaParametrizadaPago,
            dbo.DetalleSubsidioAsignadoProgramado.dprFechaProgramadaPago AS fechaProgramadaPago,
            'false' AS pagado
            FROM dbo.DetalleSubsidioAsignadoProgramado
            INNER JOIN dbo.SolicitudLiquidacionSubsidio ON
            dbo.DetalleSubsidioAsignadoProgramado.dprSolicitudLiquidacionSubsidio =
            dbo.SolicitudLiquidacionSubsidio.slsId
            INNER JOIN dbo.Solicitud ON dbo.SolicitudLiquidacionSubsidio.slsSolicitudGlobal = dbo.Solicitud.solId
            INNER JOIN dbo.PeriodoLiquidacion ON dbo.PeriodoLiquidacion.pelSolicitudLiquidacionSubsidio =
            dbo.SolicitudLiquidacionSubsidio.slsId
            INNER JOIN dbo.Periodo AS per ON per.priId = dbo.PeriodoLiquidacion.pelPeriodo
            INNER JOIN dbo.ParametrizacionCondicionesSubsidio ON dbo.ParametrizacionCondicionesSubsidio.pcsId =
            (
            SELECT MAX(pmc.pcsId)
            FROM dbo.ParametrizacionCondicionesSubsidio AS pmc
            WHERE per.priPeriodo BETWEEN pmc.pcsPeriodoInicio AND pmc.pcsPeriodoFin
            )
            WHERE dbo.DetalleSubsidioAsignadoProgramado.dprAdministradorSubsidio = :adminSubsidio
            AND dbo.Solicitud.solNumeroRadicacion = :numeroRadicacion
        </query>
    </named-native-query>

    <named-native-query
            name="PagosSubsidioMonetario.consultar.pagosBancos.transacciones.archivo">
        <description>Consulta que permite obtener los registros que se cambiaron al medio de pago BANCOS para posterior
            generar el archivo
        </description>
        <query>
            SELECT
            ' ' AS codigoEmpresa,
            ccc.cccNumeroCuenta AS numeroCuentaSudameris,
            CASE
            WHEN ccc.cccTipoCuenta = 'AHORROS' THEN 2
            WHEN ccc.cccTipoCuenta = 'CORRIENTE' THEN 1
            END AS tipoCuentaSudameris,
            (SELECT Parametro.prmValor FROM Parametro WHERE Parametro.prmNombre = 'NOMBRE_CCF') AS nombreEmpresa,
            'PAGO A PROVEEDORES' AS descripcionGeneral,
            Banco.banCodigo AS codigoBancoReceptor,
            CASE
            WHEN CuentaAdministradorSubsidio.casTipoCuentaAdmonSubsidio = 'AHORROS' THEN 2
            WHEN CuentaAdministradorSubsidio.casTipoCuentaAdmonSubsidio = 'CORRIENTE' THEN 1
            END AS tipoCuentaReceptora,
            CuentaAdministradorSubsidio.casNumeroCuentaAdmonSubsidio AS numeroCuentaReceptora,
            Persona.perNumeroIdentificacion AS numeroIdentificacion,
            CONCAT(Persona.perPrimerNombre, ' ', Persona.perPrimerApellido) AS nombreDestinatario,
            '' AS descripcionPago,
            SUM(CuentaAdministradorSubsidio.casValorOriginalTransaccion) AS valorPago,
            MedioTransferencia.metCobroJudicial as esJudicial
            FROM CuentaCCF ccc, CuentaAdministradorSubsidio
            INNER JOIN MedioTransferencia ON CuentaAdministradorSubsidio.casMedioDePago = MedioTransferencia.mdpId
            INNER JOIN Banco ON MedioTransferencia.metBanco = Banco.banId
            INNER JOIN AdministradorSubsidio ON CuentaAdministradorSubsidio.casAdministradorSubsidio =
            AdministradorSubsidio.asuId
            INNER JOIN Persona ON AdministradorSubsidio.asuPersona = Persona.perId
            WHERE CuentaAdministradorSubsidio.casId IN (:lstIdCuentasTransaccion)
            GROUP BY
            ccc.cccNumeroCuenta,
            ccc.cccTipoCuenta,
            Banco.banCodigo,
            CuentaAdministradorSubsidio.casTipoCuentaAdmonSubsidio,
            CuentaAdministradorSubsidio.casNumeroCuentaAdmonSubsidio,
            Persona.perNumeroIdentificacion,
            Persona.perPrimerNombre,Persona.perPrimerApellido,
            MedioTransferencia.metCobroJudicial
            HAVING SUM(CuentaAdministradorSubsidio.casValorOriginalTransaccion) > 0
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.solicitud.tarjeta.enviado">
        <description>Consulta numeros de solicitud de liquidación de subsidio en estado enviado y medio de pago
            tarjeta
        </description>
        <query>
            SELECT casSolicitudLiquidacionSubsidio FROM CuentaAdministradorSubsidio
            WHERE casEstadoTransaccionSubsidio = 'ENVIADO'
            AND casMedioDePagoTransaccion = 'TARJETA'
            GROUP BY casSolicitudLiquidacionSubsidio
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.radicado.tarjeta.enviado">
        <description>Consulta numeros de radicado de subsidio en estado enviado y medio de pago tarjeta</description>
        <query>
            SELECT rsaSolicitudLiquidacionSubsidio FROM CuentaAdministradorSubsidio, RegistroSolicitudAnibol
            WHERE casEstadoTransaccionSubsidio = 'ENVIADO'
            AND casMedioDePagoTransaccion = 'TARJETA'
            AND casSolicitudLiquidacionSubsidio = rsaSolicitudLiquidacionSubsidio
            GROUP BY rsaSolicitudLiquidacionSubsidio
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.registro.solicitud.anibol"
                        result-set-mapping="registro.solicitud.anibol">
        <description>Consulta numeros de radicado de subsidio en estado enviado y medio de pago tarjeta</description>
        <query>
            SELECT reg.* FROM RegistroSolicitudAnibol reg
            where reg.rsaTipoOperacionAnibol = 'DISPERSION'
            and reg.rsaEstadoSolicitudAnibol = 'EN_ESPERA'
            and reg.rsaIdProceso IS NOT NULL
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.registro.solicitud.descuento.anibol"
                        result-set-mapping="registro.solicitud.anibol">
        <query>
            SELECT reg.* FROM RegistroSolicitudAnibol reg
            where reg.rsaTipoOperacionAnibol IN ('ANULACION')
            and reg.rsaEstadoSolicitudAnibol = 'EN_ESPERA'
            and reg.rsaIdProceso IS NOT NULL
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.registro.solicitud.descuento.prescripcion.anibol"
                        result-set-mapping="registro.solicitud.anibol">
        <query>
            SELECT reg.* FROM RegistroSolicitudAnibol reg
            where reg.rsaTipoOperacionAnibol IN ('ANULACION_PRESCRIPCION')
            and reg.rsaEstadoSolicitudAnibol = 'EN_ESPERA'
            and reg.rsaIdProceso IS NOT NULL
            and (:idProceso IS NULL OR reg.rsaIdProceso = :idProceso)
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.registroSolicitudLiquidacionFallecimientoAnibol"
                        result-set-mapping="registro.solicitud.anibol">
        <query>
            SELECT reg.* FROM RegistroSolicitudAnibol reg
            where reg.rsaTipoOperacionAnibol = 'DISPERSION_LIQUIDACION_FALLECIMIENTO'
            and reg.rsaEstadoSolicitudAnibol = 'EN_ESPERA'
            and reg.rsaIdProceso IS NOT NULL
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.cuentasAdministradrSubsidioPorId"
                        result-set-mapping="cuentaAdministradorSubsidioMapping">
        <query>
            SELECT cas.* FROM CuentaAdministradorSubsidio cas
            WHERE cas.casId IN (:ids)
        </query>
    </named-native-query>

    <named-native-query
            name="PagosSubsidioMonetario.buscar.registro.solicitud.dispersion.origen.cambio.medio.pago.anibol"
            result-set-mapping="registro.solicitud.anibol">
        <query>
            SELECT reg.* FROM RegistroSolicitudAnibol reg
            where reg.rsaTipoOperacionAnibol = 'DISPERSION_CAMBIO_MEDIO_PAGO'
            and reg.rsaEstadoSolicitudAnibol = 'EN_ESPERA'
            and reg.rsaIdProceso IS NOT NULL
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.PersonaExisteYTieneAsociadaLaTarjeta"
                        result-set-mapping="InfoPersonaReexpedicionDTOMapping">
        <query>
            SELECT top(1)
            per.perId AS idPersona,
            per.perRazonSocial AS nombreCompleto,
            mpt.mtrNumeroTarjeta AS numeroTarjeta,
            mpt.mtrEstadoTarjetaMultiservicios AS estadoTarjeta
            FROM Persona per
            LEFT JOIN AdministradorSubsidio asu ON asu.asuPersona = per.perId
            LEFT JOIN AdminSubsidioGrupo ON asgAdministradorSubsidio = asuId
            LEFT JOIN MedioPagoPersona mpp ON mpp.mppPersona = perId
            INNER JOIN MedioDePago mdp ON mdp.mdpId = mpp.mppMedioPago or asgMedioDePago = mdp.mdpid
            INNER JOIN MedioTarjeta mpt ON mpt.mdpId = mdp.mdpId
            WHERE per.perNumeroIdentificacion = :numeroId
            AND per.perTipoIdentificacion = :tipoId
            AND mpt.mtrNumeroTarjeta is not null
            ORDER BY mpp.mppId ASC
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.personaConTarjetaMultiservicios"
                        result-set-mapping="InfoPersonaReexpedicionDTOMapping">
        <query>
            SELECT top(1)
            per.perId AS idPersona,
            per.perRazonSocial AS nombreCompleto,
            mpt.mtrNumeroTarjeta AS numeroTarjeta,
            mpt.mtrEstadoTarjetaMultiservicios AS estadoTarjeta,
            mdp.mdpid as idMEdioPagoParaActualizar,
            mpt.mtrNumeroTarjeta as numeroTarjetaPersona
            FROM Persona per
            LEFT JOIN AdministradorSubsidio asu ON asu.asuPersona = per.perId
            LEFT JOIN AdminSubsidioGrupo ON asgAdministradorSubsidio = asuId
            LEFT JOIN MedioPagoPersona mpp ON mpp.mppPersona = perId
            INNER JOIN MedioDePago mdp ON mdp.mdpId = mpp.mppMedioPago or asgMedioDePago = mdp.mdpid
            INNER JOIN MedioTarjeta mpt ON mpt.mdpId = mdp.mdpId
            WHERE per.perNumeroIdentificacion = :numeroId
            AND per.perTipoIdentificacion = :tipoId
            AND mpt.mtrNumeroTarjeta = :numeroTarjeta
            ORDER BY mpp.mppId ASC
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.PersonaExisteYEstadoAfiliacion"
                        result-set-mapping="InfoPersonaExpedicionDTOMapping">
        <query>
            SELECT TOP 100 vw.perId AS idPersona, vw.perTipoIdentificacion AS tipoIdentificacion,
            vw.perNumeroIdentificacion AS numeroIdentificacion, vw.roaEstadoAfiliado AS estado,
            prioridad AS prioridad, per.perRazonSocial as nombreCompleto
            FROM [dbo].[VW_EstadoAfiliacionPersonaCaja] vw
            inner join Persona per on per.perId = vw.perId
            WHERE vw.perNumeroIdentificacion = :identificacion
            AND vw.perTipoIdentificacion = :tipoIdentificacion
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.PersonaExpedicionValidacion"
                        result-set-mapping="InfoPersonaExpedicionValidacionDTOMapping">
        <query>
            SELECT DISTINCT TOP 10 per.perId as idPersona, per.perTipoIdentificacion as tipoIdentificacion,
            per.perNumeroIdentificacion as numeroIdentificacion,
            asu.asuPersona as administradorSubsidio, asg.asgGrupoFamiliar as grupoFamiliar, grf.grfTarjetaMultiservicio
            as marca,
            ben.benEstadoBeneficiarioAfiliado as estadoBeneficiario
            FROM Persona per
            inner join AdministradorSubsidio asu on asuPersona = per.perid
            inner join AdminSubsidioGrupo asg on asg.asgAdministradorSubsidio = asu.asuId
            inner join GrupoFamiliar grf on grf.grfId = asg.asgGrupoFamiliar
            inner join Beneficiario ben on ben.benGrupoFamiliar = grf.grfId
            inner join MedioDePago mdp on mdp.mdpId = asg.asgMedioDePago
            inner join MedioEfectivo mdpe on mdpe.mdpId = mdp.mdpId
            WHERE per.perNumeroIdentificacion = :identificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            AND ben.benEstadoBeneficiarioAfiliado = 'ACTIVO'
            AND grf.grfTarjetaMultiservicio = 1
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.saldoTarjetaGenesys">
        <query>
            SELECT
            (ISNULL(a.abonos, 0) + ISNULL(c.retiros, 0)) as saldo
            FROM
            (SELECT asu.asuId AS asuId, SUM(cas.casValorRealTransaccion) AS abonos FROM CuentaAdministradorSubsidio cas
            JOIN AdministradorSubsidio asu ON cas.casAdministradorSubsidio = asu.asuId
            JOIN MedioTarjeta mtr ON cas.casMedioDePago = mtr.mdpId
            WHERE asu.asuPersona = :idPersona
            AND mtr.mtrNumeroTarjeta = :numeroTarjeta
            AND cas.casEstadoTransaccionSubsidio IN ('APLICADO', 'COBRADO')
            AND cas.casMedioDePagoTransaccion = 'TARJETA'
            GROUP BY asu.asuId) AS a
            LEFT JOIN
            (SELECT asu.asuId AS asuId, SUM(cas.casValorRealTransaccion) AS retiros FROM CuentaAdministradorSubsidio cas
            JOIN AdministradorSubsidio asu ON cas.casAdministradorSubsidio = asu.asuId
            JOIN Persona per ON asu.asuPersona = per.perId
            JOIN MedioTarjeta mtr ON cas.casMedioDePago = mtr.mdpId
            WHERE asu.asuPersona = :idPersona
            AND mtr.mtrNumeroTarjeta = :numeroTarjeta
            AND casTipoTransaccionSubsidio = 'RETIRO'
            GROUP BY asu.asuId) AS c ON a.asuId = c.asuId

            <!-- SELECT
				(ISNULL(a.abonos, 0) + ISNULL(b.ajustes, 0) + ISNULL(c.retiros, 0)) as saldo
			FROM
				(SELECT asu.asuId AS asuId, SUM(cas.casValorRealTransaccion) AS abonos FROM CuentaAdministradorSubsidio cas
					JOIN AdministradorSubsidio asu ON cas.casAdministradorSubsidio = asu.asuId
					JOIN MedioTarjeta mtr ON cas.casMedioDePago = mtr.mdpId
					WHERE asu.asuPersona = :idPersona
					AND mtr.mtrNumeroTarjeta = :numeroTarjeta
					AND cas.casEstadoTransaccionSubsidio IN ('APLICADO', 'COBRADO')
					AND cas.casMedioDePagoTransaccion = 'TARJETA'
					GROUP BY asu.asuId) AS a
			LEFT JOIN
				(SELECT asu.asuId AS asuId, SUM(cas.casValorRealTransaccion) AS ajustes FROM CuentaAdministradorSubsidio cas
					JOIN AdministradorSubsidio asu ON cas.casAdministradorSubsidio = asu.asuId
					JOIN Persona per ON asu.asuPersona = per.perId
					JOIN MedioTarjeta mtr ON cas.casMedioDePago = mtr.mdpId
					WHERE asu.asuPersona = :idPersona
					AND mtr.mtrNumeroTarjeta = :numeroTarjeta
					AND cas.casOrigenTransaccion = 'RETIRO_PARCIAL'
					GROUP BY asu.asuId) AS b ON a.asuId = b.asuId
			LEFT JOIN
				(SELECT asu.asuId AS asuId, SUM(cas.casValorRealTransaccion) AS retiros FROM CuentaAdministradorSubsidio cas
					JOIN AdministradorSubsidio asu ON cas.casAdministradorSubsidio = asu.asuId
					JOIN Persona per ON asu.asuPersona = per.perId
					JOIN MedioTarjeta mtr ON cas.casMedioDePago = mtr.mdpId
					WHERE asu.asuPersona = :idPersona
					AND mtr.mtrNumeroTarjeta = :numeroTarjeta
					AND casTipoTransaccionSubsidio = 'RETIRO'
					GROUP BY asu.asuId) AS c ON a.asuId = c.asuId -->
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.gruposFamiliaresTrabajadorConMedioDePagoTarjeta"
                        result-set-mapping="GruposMedioTarjetaDTOMapping">
        <query>
            SELECT
            grf.grfId AS idGrupo,
            asg.asgRelacionGrupoFamiliar AS relacionGrupo
            FROM GrupoFamiliar grf
            JOIN AdminSubsidioGrupo asg ON asg.asgGrupoFamiliar = grf.grfId
            JOIN AdministradorSubsidio asu ON asu.asuId = asg.asgAdministradorSubsidio
            JOIN Persona per ON asu.asuPersona = per.perId
            JOIN MedioTarjeta mtr ON asg.asgMedioDePago = mtr.mdpId
            WHERE per.perTipoIdentificacion = :tipoId
            AND per.perNumeroIdentificacion = :numeroId
            AND mtr.mtrNumeroTarjeta = :numeroTarjeta
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.RegistroAbonoCuentaAdministradorSubsidio"
                        result-set-mapping="cuentaAdministradorSubsidioMapping">
        <query>
            SELECT cas.*
            FROM CuentaAdministradorSubsidio cas
            JOIN AdministradorSubsidio asu ON cas.casAdministradorSubsidio = asu.asuId
            WHERE asu.asuPersona = :idPersona
            AND cas.casNumeroTarjetaAdmonSubsidio = :numeroTarjeta
            AND cas.casTipoTransaccionSubsidio = 'ABONO'
            AND cas.casEstadoTransaccionSubsidio = 'APLICADO'
            AND cas.casMedioDePagoTransaccion = 'TARJETA'
            ORDER BY cas.casFechaHoraTransaccion
            <!-- SELECT cas.*
			FROM CuentaAdministradorSubsidio cas
			JOIN AdministradorSubsidio asu ON cas.casAdministradorSubsidio = asu.asuId
			JOIN MedioTarjeta mtr ON cas.casMedioDePago = mtr.mdpId
			WHERE asu.asuPersona = :idPersona
			AND mtr.mtrNumeroTarjeta = :numeroTarjeta
			AND cas.casEstadoTransaccionSubsidio IN ('APLICADO', 'COBRADO')
			AND cas.casMedioDePagoTransaccion = 'TARJETA'
			ORDER BY cas.casFechaHoraTransaccion -->
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.actualizar.bloquearTarjetaActiva">
        <query>
            UPDATE MedioTarjeta
            SET mtrEstadoTarjetaMultiservicios = 'BLOQUEADA'
            WHERE mtrNumeroTarjeta = :numeroTarjeta
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.InformacionDetallesSubsidioAgrupados"
                        result-set-mapping="InfoDetallesSubsidioAgrupadosDTOMapping">
        <query>
            SELECT
            dsaGrupoFamiliar AS idGrupoFamiliar,
            dsaAdministradorSubsidio AS idAdministradorSubsidio,
            SUM(dsaValorTotal) AS valorTotal
            FROM detalleSubsidioAsignado
            where dsaId in (:idsDetalles)
            GROUP BY dsaGrupoFamiliar, dsaAdministradorSubsidio
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscarPor.tipoTransaccionAbono.estadoEnviado.MedioDePagoBancos">
        <query>
            SELECT cas.casId AS idCas, per.perTipoIdentificacion AS tipoId, per.perNumeroIdentificacion AS numId,
            CONCAT(per.perPrimerNombre,
            CASE WHEN per.perSegundoNombre IS NOT NULL THEN CONCAT(' ', per.perSegundoNombre) ELSE '' END, ' ',
            per.perPrimerApellido,
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN CONCAT(' ', per.perSegundoApellido) ELSE '' END) AS
            nombreAdmon,
            cas.casCodigoBanco AS codigoBanco, cas.casNombreBanco AS nombreBanco, cas.casTipoCuentaAdmonSubsidio AS
            tipoCuentaAd, cas.casNumeroCuentaAdmonSubsidio AS numCuentaAd,
            cas.casTipoIdentificacionTitularCuentaAdmonSubsidio AS tipoIdTitular,
            cas.casNumeroIdentificacionTitularCuentaAdmonSubsidio as numIDTitular,
            cas.casNombreTitularCuentaAdmonSubsidio AS nomTitular, cas.casValorRealTransaccion AS valRealTrans,
            'ABONO_EXITOSO' AS estadoAbono
            FROM CuentaAdministradorSubsidio cas
            JOIN AdministradorSubsidio adm ON cas.casAdministradorSubsidio = adm.asuId
            JOIN Persona per ON per.perId = adm.asuPersona
            WHERE cas.casTipoTransaccionSubsidio = 'ABONO'
            AND cas.casEstadoTransaccionSubsidio = 'ENVIADO'
            AND cas.casMedioDePagoTransaccion = 'TRANSFERENCIA'
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.cantidad.cuentas.por.transaccion.t.p">
        <query>
            SELECT COUNT(*)
            FROM CuentaAdministradorSubsidio cas
            INNER JOIN ConvenioTerceroPagador con ON con.conNombre = cas.casNombreTerceroPagado AND con.conId =
            :idConvenio
            WHERE cas.casIdTransaccionTerceroPagador = :idTransaccionTercerPagador
        </query>
    </named-native-query>


    <named-query name="PagosSubsidioMonetario.buscarConvenio.idConvenio">
        <description>Consulta que trae el convenio que tiene registrado un nombre de usuario especifico de genesys
        </description>
        <query>
            SELECT con
            FROM ConvenioTerceroPagador con
            WHERE con.idConvenio = :idConvenio
        </query>
    </named-query>

    <named-native-query name="PagosSubsidioMonetario.sumatoria.total.abonos.bancarios">
        <description>Consulta que trae el total de la suma de los abonos bancarios</description>
        <query>
            SELECT SUM(cas.casValorRealTransaccion)
            FROM CuentaAdministradorSubsidio cas
            WHERE cas.castipoTransaccionSubsidio = 'ABONO'
            AND cas.casestadoTransaccionSubsidio = 'ENVIADO'
            AND cas.casmedioDePagoTransaccion = 'TRANSFERENCIA'
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.encabezado.cuotas.dispersadas.por.terceroPagador">
        <description>Consulta que trae el encabezado para el archivo de cuotas dispersadas por tercero pagador
        </description>
        <query>
            SELECT dsa.dsaNombreTerceroPagado, SUM(dsa.dsaValorDescuento) AS totalAConsignar, COUNT(dsa.dsaId) AS
            cantidadCuotas
            FROM DetalleSubsidioAsignado dsa
            WHERE dsa.dsaNombreTerceroPagado = (SELECT con.conNombre FROM ConvenioTerceroPagador con WHERE con.conId =
            :idTerceroPagador)
            AND dsa.dsaEstado = 'DERECHO_ASIGNADO'
            GROUP BY dsa.dsaNombreTerceroPagado
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.cuotas.dispersadas.por.convenioTerceroPagador">
        <description>Consulta que busca las cuotas dispersadas de un tercero pagador</description>
        <query>
            SELECT dsa.dsaid, per.perTipoIdentificacion, per.perNumeroIdentificacion, CONCAT(per.perPrimerNombre,' ',
            per.perSegundoNombre,' ',
            per.perPrimerApellido,' ',
            per.perSegundoApellido) as nombreAdminSubsidio, dsa.dsaValorTotal, con.conNombre, con.conId
            FROM DetalleSubsidioAsignado dsa
            JOIN AdministradorSubsidio adm on adm.asuId = dsa.dsaAdministradorSubsidio
            JOIN Persona per on per.perId = adm.asuPersona
            JOIN ConvenioTerceroPagador con on dsa.dsaNombreTerceroPagado = con.conNombre
            WHERE dsa.dsaEstado = 'DERECHO_ASIGNADO'
            AND dsa.dsaNombreTerceroPagado = (SELECT con.conNombre FROM ConvenioTerceroPagador con WHERE con.conId =
            :idTerceroPagador)
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.CuentaAdministradorSubsidioDTO.verTransaccionesConFiltrosPaginada">
        <description>
            Consulta que trae las cuentas de administradores de subsidios a partir de que cumplan con un filtro
            3-8-2022: (Marzo)Se modifica la consulta adicionando los cambios para el GLPI 49367. Campos:
            establecimientoCodigo, establecimientoNombre, fechaTransaccionConsumo
        </description>
        <query>
            SELECT distinct casId,
            casFechaHoraCreacionRegistro ,
            casUsuarioCreacionRegistro ,
            casTipoTransaccionSubsidio ,
            casEstadoTransaccionSubsidio ,
            casOrigenTransaccion ,
            casMedioDePagoTransaccion ,
            casNumeroTarjetaAdmonSubsidio ,
            casCodigoBanco ,
            casNombreBanco ,
            casTipoCuentaAdmonSubsidio ,
            casNumeroCuentaAdmonSubsidio ,
            casTipoIdentificacionTitularCuentaAdmonSubsidio ,
            casNumeroIdentificacionTitularCuentaAdmonSubsidio ,
            casNombreTitularCuentaAdmonSubsidio ,
            casFechaHoraTransaccion ,
            casUsuarioTransaccion ,
            casValorOriginalTransaccion ,
            casValorRealTransaccion ,
            casIdTransaccionOriginal ,
            casIdRemisionDatosTerceroPagador ,
            casIdTransaccionTerceroPagador ,
            casNombreTerceroPagado ,
            casIdCuentaAdmonSubsidioRelacionado ,
            casFechaHoraUltimaModificacion ,
            casUsuarioUltimaModificacion ,
            CASE
            WHEN cas.casSitioDePago IS NOT NULL
            THEN (
            SELECT dbo.SitioPago.sipNombre
            FROM dbo.SitioPago
            WHERE dbo.SitioPago.sipId = cas.casSitioDePago
            )
            ELSE NULL
            END AS nombreSitioPago,
            CASE
            WHEN cas.casSitioDeCobro IS NOT NULL
            THEN (
            SELECT CONCAT(dbo.Departamento.depNombre,',',dbo.Municipio.munNombre)
            FROM dbo.SitioPago
            INNER JOIN dbo.Infraestructura ON dbo.SitioPago.sipInfraestructura = dbo.Infraestructura.infId
            INNER JOIN dbo.Municipio ON dbo.Municipio.munId = dbo.Infraestructura.infMunicipio
            INNER JOIN dbo.Departamento ON dbo.Departamento.depId = dbo.Municipio.munDepartamento
            WHERE dbo.SitioPago.sipId = cas.casSitioDeCobro
            )
            ELSE NULL
            END AS nombreSitioCobro,
            adminPer.perRazonSocial AS adminSubsidio,
            personaAutorizada.perRazonSocial AS personaAutorizada ,
            adminPer.perTipoIdentificacion AS tipoIdAdminSubsidio,
            adminPer.perNumeroIdentificacion AS numIdAdminSubsidio,
            casIdPuntoDeCobro,
            cas.casNombreTerceroPagado as establecimientoCodigo,
            est.estNombre AS establecimientoNombre,
            rac.racFechaTransaccion as fechaTransaccionConsumo
            FROM dbo.CuentaAdministradorSubsidio AS cas
            INNER JOIN dbo.AdministradorSubsidio AS admin ON admin.asuId = cas.casAdministradorSubsidio
            INNER JOIN dbo.Persona AS adminPer ON adminPer.perId = admin.asuPersona
            LEFT JOIN dbo.RetiroPersonaAutorizadaCobroSubsidio AS retPer ON cas.casId =
            retPer.rpaCuentaAdministradorSubsidio
            LEFT JOIN dbo.Persona AS personaAutorizada ON personaAutorizada.perId = retPer.rpaPersonaAutorizada
            LEFT JOIN EstablecimientosMediosPago AS est ON est.estCodigo = cas.casNombreTerceroPagado
            LEFT JOIN RegistroArchivoConsumosAnibol AS rac on rac.racCodigoAutorizacion =
            cas.casIdTransaccionTerceroPagador
            WHERE (cas.casFechaHoraTransaccion BETWEEN :fechaInicio AND :fechaFin)
            AND (:estadoTransaccion IS NULL OR cas.casEstadoTransaccionSubsidio = :estadoTransaccion)
            AND (:medioDePago IS NULL OR cas.casMedioDePagoTransaccion = :medioDePago)
            AND (:tipoTransaccion IS NULL OR cas.casTipoTransaccionSubsidio = :tipoTransaccion)
            AND (:sizeListaIdAdmin = 0 OR cas.casAdministradorSubsidio IN (:listaIdAdminSubsidio))
        </query>
    </named-native-query>


    <named-native-query name="PagosSubsidioMonetario.consultarCuentaAdminSubsidioPaginada">
        <description>
            Consulta que trae las cuentas de administradores de subsidios a partir de que cumplan con un filtro.
            3-3-2022: Se modifica la consulta adicionando los cambios para el GLPI 49367. Campos: establecimientoCodigo,
            establecimientoNombre, fechaTransaccionConsumo
        </description>
        <query>
            ;with cuenta as (
            select   casid,
            casFechaHoraCreacionRegistro,
            casUsuarioCreacionRegistro ,
            casTipoTransaccionSubsidio ,
            casEstadoTransaccionSubsidio ,
            casOrigenTransaccion,
            casMedioDePagoTransaccion,
            casNumeroTarjetaAdmonSubsidio ,
            casCodigoBanco ,
            casNombreBanco ,
            casTipoCuentaAdmonSubsidio ,
            casNumeroCuentaAdmonSubsidio ,
            casTipoIdentificacionTitularCuentaAdmonSubsidio ,
            casNumeroIdentificacionTitularCuentaAdmonSubsidio ,
            casNombreTitularCuentaAdmonSubsidio ,
            casFechaHoraTransaccion,
            casUsuarioTransaccion,
            casValorOriginalTransaccion ,
            casValorRealTransaccion ,
            casIdTransaccionOriginal ,
            casIdRemisionDatosTerceroPagador,
            casIdTransaccionTerceroPagador ,
            casNombreTerceroPagado ,
            casIdCuentaAdmonSubsidioRelacionado ,
            casFechaHoraUltimaModificacion ,
            casUsuarioUltimaModificacion
            ,casSitioDeCobro
            ,casIdPuntoDeCobro
            ,casSitioDePago
            ,casAdministradorSubsidio
            from dbo.CuentaAdministradorSubsidio
            where (:filtroFechas is null or (casFechaHoraTransaccion BETWEEN :fechaInicio AND :fechaFin)))

            select distinct
            casid,
            casFechaHoraCreacionRegistro,
            casUsuarioCreacionRegistro ,
            casTipoTransaccionSubsidio ,
            casEstadoTransaccionSubsidio ,
            casOrigenTransaccion,
            casMedioDePagoTransaccion,
            casNumeroTarjetaAdmonSubsidio ,
            casCodigoBanco ,
            casNombreBanco ,
            casTipoCuentaAdmonSubsidio ,
            casNumeroCuentaAdmonSubsidio ,
            casTipoIdentificacionTitularCuentaAdmonSubsidio ,
            casNumeroIdentificacionTitularCuentaAdmonSubsidio ,
            casNombreTitularCuentaAdmonSubsidio ,
            casFechaHoraTransaccion,
            casUsuarioTransaccion,
            casValorOriginalTransaccion ,
            casValorRealTransaccion ,
            casIdTransaccionOriginal ,
            casIdRemisionDatosTerceroPagador,
            casIdTransaccionTerceroPagador ,
            casNombreTerceroPagado ,
            casIdCuentaAdmonSubsidioRelacionado ,
            casFechaHoraUltimaModificacion ,
            casUsuarioUltimaModificacion,
            adminPer.perTipoIdentificacion AS tipoIdAdminSubsidio,
            adminPer.perNumeroIdentificacion AS numIdAdminSubsidio,
            adminPer.perRazonSocial AS adminSubsidio,
            CASE
            WHEN cas.casSitioDeCobro IS NOT NULL
            THEN (
            SELECT CONCAT(Departamento.depNombre,',',Municipio.munNombre)
            FROM dbo.SitioPago
            INNER JOIN Infraestructura ON SitioPago.sipInfraestructura = Infraestructura.infId
            INNER JOIN Municipio ON Municipio.munId = Infraestructura.infMunicipio
            INNER JOIN Departamento ON Departamento.depId = Municipio.munDepartamento
            WHERE SitioPago.sipId = cas.casSitioDeCobro
            )
            ELSE NULL
            END AS nombreSitioCobro,
            casIdPuntoDeCobro,

            CASE
            WHEN cas.casSitioDePago IS NOT NULL
            THEN (
            SELECT SitioPago.sipNombre
            FROM SitioPago
            WHERE SitioPago.sipId = cas.casSitioDePago
            )
            ELSE NULL
            END AS nombreSitioPago,
            personaAutorizada.perRazonSocial AS personaAutorizada,
            cas.casNombreTerceroPagado as establecimientoCodigo,
            est.estNombre AS establecimientoNombre,
            rac.racFechaTransaccion as fechaTransaccionConsumo
            from cuenta as cas
            LEFT JOIN DetalleSubsidioAsignado as dsa on cas.casid= dsa.dsaCuentaAdministradorSubsidio
            INNER JOIN AdministradorSubsidio AS admin ON admin.asuId = cas.casAdministradorSubsidio
            INNER JOIN Persona AS adminPer ON adminPer.perId = admin.asuPersona
            LEFT JOIN RetiroPersonaAutorizadaCobroSubsidio AS retPer ON cas.casId = retPer.rpaCuentaAdministradorSubsidio
            LEFT JOIN Persona AS personaAutorizada ON personaAutorizada.perId = retPer.rpaPersonaAutorizada
            LEFT JOIN EstablecimientosMediosPago AS est ON est.estCodigo = cas.casNombreTerceroPagado
            LEFT JOIN RegistroArchivoConsumosAnibol AS rac on rac.racCodigoAutorizacion = cas.casIdTransaccionTerceroPagador
            where
            (:estadoTransaccion IS NULL OR cas.casEstadoTransaccionSubsidio = :estadoTransaccion) AND
            (:tipoTransaccion IS NULL OR cas.casTipoTransaccionSubsidio = :tipoTransaccion) AND
            (:medioDePago IS NULL OR cas.casMedioDePagoTransaccion = :medioDePago) AND
            (:sizelstidEmpleadores = 0 OR dsa.dsaEmpleador IN (:lstidEmpleadores)) AND
            (:sizelstidAfiliadoPrincipal = 0 OR dsa.dsaAfiliadoPrincipal IN (:lstidAfiliadoPrincipal)) AND
            (:sizelstidBeneficiarioDetalle = 0 OR dsa.dsaBeneficiarioDetalle IN (:lstidBeneficiarioDetalle)) AND
            (:sizelstidAdministradorSubsidio = 0 OR dsa.dsaAdministradorSubsidio IN (:lstidAdministradorSubsidio) OR
            cas.casAdministradorSubsidio IN (:lstidAdministradorSubsidio))
        </query>
        <hint name="idCuentaAdministradorSubsidio" value="casId"/>
        <hint name="fechaHoraCreacionRegistro" value="casFechaHoraCreacionRegistro"/>
        <hint name="usuarioCreacionRegistro" value="casUsuarioCreacionRegistro"/>
        <hint name="tipoTransaccion" value="casTipoTransaccionSubsidio"/>
        <hint name="estadoTransaccion" value="casEstadoTransaccionSubsidio"/>
        <hint name="origenTransaccion" value="casOrigenTransaccion"/>
        <hint name="medioDePago" value="casMedioDePagoTransaccion"/>
        <hint name="numeroTarjetaAdminSubsidio" value="casNumeroTarjetaAdmonSubsidio"/>
        <hint name="codigoBancoAdminSubsidio" value="casCodigoBanco"/>
        <hint name="nombreBancoAdminSubsidio" value="casNombreBanco"/>
        <hint name="tipoCuentaAdminSubsidio" value="casTipoCuentaAdmonSubsidio"/>
        <hint name="numeroCuentaAdminSubsidio" value="casNumeroCuentaAdmonSubsidio"/>
        <hint name="tipoIdentificacionTitularCuentaAdminSubsidio"
              value="casTipoIdentificacionTitularCuentaAdmonSubsidio"/>
        <hint name="numeroIdentificacionTitularCuentaAdminSubsidio"
              value="casNumeroIdentificacionTitularCuentaAdmonSubsidio"/>
        <hint name="nombreTitularCuentaAdminSubsidio" value="casNombreTitularCuentaAdmonSubsidio"/>
        <hint name="fechaHoraTransaccion" value="casFechaHoraTransaccion"/>
        <hint name="usuarioTransaccionLiquidacion" value="casUsuarioTransaccion"/>
        <hint name="valorOriginalTransaccion" value="casValorOriginalTransaccion"/>
        <hint name="valorRealTransaccion" value="casValorRealTransaccion"/>
        <hint name="idTransaccionOriginal" value="casIdTransaccionOriginal"/>
        <hint name="idRemisionDatosTerceroPagador" value="casIdRemisionDatosTerceroPagador"/>
        <hint name="idTransaccionTerceroPagador" value="casIdTransaccionTerceroPagador"/>
        <hint name="nombreTerceroPagador" value="casNombreTerceroPagado"/>
        <hint name="idCuentaAdminSubsidioRelacionado" value="casIdCuentaAdmonSubsidioRelacionado"/>
        <hint name="fechaHoraUltimaModificacion" value="casFechaHoraUltimaModificacion"/>
        <hint name="usuarioUltimaModificacion" value="casUsuarioUltimaModificacion"/>
        <hint name="tipoIdAdminSubsidio" value="tipoIdAdminSubsidio"/>
        <hint name="numeroIdAdminSubsidio" value="numIdAdminSubsidio"/>
        <hint name="nombresApellidosAdminSubsidio" value="adminSubsidio"/>
        <hint name="nombreSitioCobro" value="nombreSitioCobro"/>
        <hint name="idPuntoDeCobro" value="casIdPuntoDeCobro"/>
        <hint name="nombreSitioPago" value="nombreSitioPago"/>
        <hint name="nombrePersonaAutorizada" value="personaAutorizada"/>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultarCuentaAdminSubsidioPaginadaCount">
        <description>
            Consulta que trae las la cantidad cuentas de administradores de subsidios a partir de que cumplan con un
            filtro.
            3-3-2022: Se modifica la consulta adicionando los cambios para el GLPI 49367. Campos: establecimientoCodigo,
            establecimientoNombre, fechaTransaccionConsumo
        </description>
        <query>

            select count(DISTINCT(cas.casid))
            from CuentaAdministradorSubsidio as cas
            LEFT JOIN DetalleSubsidioAsignado as dsa on cas.casid= dsa.dsaCuentaAdministradorSubsidio
            INNER JOIN AdministradorSubsidio AS admin ON admin.asuId = cas.casAdministradorSubsidio
            INNER JOIN Persona AS adminPer ON adminPer.perId = admin.asuPersona
            LEFT JOIN RetiroPersonaAutorizadaCobroSubsidio AS retPer ON cas.casId =
            retPer.rpaCuentaAdministradorSubsidio
            LEFT JOIN Persona AS personaAutorizada ON personaAutorizada.perId = retPer.rpaPersonaAutorizada
            LEFT JOIN EstablecimientosMediosPago AS est ON est.estCodigo = cas.casNombreTerceroPagado
            LEFT JOIN RegistroArchivoConsumosAnibol AS rac on rac.racCodigoAutorizacion =
            cas.casIdTransaccionTerceroPagador
            where
            (cas.casFechaHoraTransaccion BETWEEN :fechaInicio AND :fechaFin) AND
            (:estadoTransaccion IS NULL OR cas.casEstadoTransaccionSubsidio = :estadoTransaccion) AND
            (:tipoTransaccion IS NULL OR cas.casTipoTransaccionSubsidio = :tipoTransaccion) AND
            (:medioDePago IS NULL OR cas.casMedioDePagoTransaccion = :medioDePago) AND
            (:sizeListaIdAdmin = 0 OR dsa.dsaAdministradorSubsidio IN (:listaIdAdminSubsidio) OR
            cas.casAdministradorSubsidio IN (:listaIdAdminSubsidio))
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultarCuentaAdminSubsidioPaginadaCount2">
        <description>
            Consulta que trae las la cantidad cuentas de administradores de subsidios a partir de que cumplan con un
            filtro.
            3-3-2022: Se modifica la consulta adicionando los cambios para el GLPI 49367. Campos: establecimientoCodigo,
            establecimientoNombre, fechaTransaccionConsumo
        </description>
        <query>
            ;with cuenta as (select cas.casId, cas.casEstadoTransaccionSubsidio, cas.casTipoTransaccionSubsidio, cas.casMedioDePagoTransaccion, cas.casAdministradorSubsidio, cas.casIdTransaccionTerceroPagador, cas.casNombreTerceroPagado
            from CuentaAdministradorSubsidio as cas
            where (:filtroFechas is null or (cas.casFechaHoraTransaccion BETWEEN :fechaInicio AND :fechaFin)))
            select count(DISTINCT(cas.casid)) as cantidad
            from cuenta as cas
            LEFT JOIN DetalleSubsidioAsignado as dsa on cas.casid= dsa.dsaCuentaAdministradorSubsidio
            INNER JOIN AdministradorSubsidio AS admin ON admin.asuId = cas.casAdministradorSubsidio
            INNER JOIN Persona AS adminPer ON adminPer.perId = admin.asuPersona
            LEFT JOIN RetiroPersonaAutorizadaCobroSubsidio AS retPer ON cas.casId = retPer.rpaCuentaAdministradorSubsidio
            LEFT JOIN Persona AS personaAutorizada ON personaAutorizada.perId = retPer.rpaPersonaAutorizada
            LEFT JOIN EstablecimientosMediosPago AS est ON est.estCodigo = cas.casNombreTerceroPagado
            LEFT JOIN RegistroArchivoConsumosAnibol AS rac on rac.racCodigoAutorizacion = cas.casIdTransaccionTerceroPagador
            where
            (:estadoTransaccion IS NULL OR cas.casEstadoTransaccionSubsidio = :estadoTransaccion) AND
            (:tipoTransaccion IS NULL OR cas.casTipoTransaccionSubsidio = :tipoTransaccion) AND
            (:medioDePago IS NULL OR cas.casMedioDePagoTransaccion = :medioDePago) AND
            (:sizelstidEmpleadores = 0 OR dsa.dsaEmpleador IN (:lstidEmpleadores)) AND
            (:sizelstidAfiliadoPrincipal = 0 OR dsa.dsaAfiliadoPrincipal IN (:lstidAfiliadoPrincipal)) AND
            (:sizelstidBeneficiarioDetalle = 0 OR dsa.dsaBeneficiarioDetalle IN (:lstidBeneficiarioDetalle)) AND
            (:sizelstidAdministradorSubsidio = 0 OR dsa.dsaAdministradorSubsidio IN (:lstidAdministradorSubsidio) OR
            cas.casAdministradorSubsidio IN (:lstidAdministradorSubsidio))
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.cuentasAdministrador.medioTarjeta"
                        result-set-mapping="cuentaAdministrador.persona.medioTarjeta">
        <description>Consulta que permite obtener la lista de cuentas para el medio de pago tarjeta en una liquidación
        </description>
        <query>
            SELECT DISTINCT cas.*, per.*, tar.mtrEstadoTarjetaMultiservicios
            FROM CuentaAdministradorSubsidio cas
            JOIN DetalleSubsidioAsignado dsa ON cas.casId = dsa.dsaCuentaAdministradorSubsidio
            JOIN SolicitudLiquidacionSubsidio sls ON dsa.dsaSolicitudLiquidacionSubsidio = sls.slsId
            JOIN Solicitud sol ON sol.solId = slsSolicitudGlobal
            JOIN AdministradorSubsidio ads ON cas.casAdministradorSubsidio = ads.asuId
            JOIN Persona per ON ads.asuPersona = per.perId
            JOIN MedioTarjeta tar ON cas.casMedioDePago = tar.mdpId
            WHERE sol.solNumeroRadicacion = :numeroRadicacion
            AND cas.casMedioDePagoTransaccion = 'TARJETA'
            AND cas.casEstadoLiquidacionSubsidio = 'GENERADO'
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.mantis265820">
        <description>Cuentas a anular mantis 265820</description>
        <query>
            SELECT distinct cas.casId as IdentificadorTransaccionAbono, dsa.dsaPeriodoLiquidado,
            sls.slsId as liquidacionAsociada, sls.slsFechaInicio as fechaLiquidacion,
            emplPer.perTipoIdentificacion as tipoIdEmpl, emplPer.perNumeroIdentificacion as numIdEmpl,
            emplPer.perRazonSocial,
            perAfi.perTipoIdentificacion as tipoIdAfi, perAfi.perNumeroIdentificacion as numIdAfi,
            perAfi.perPrimerNombre as priNombreAfi, perAfi.perSegundoNombre as segNombreAfi, perAfi.perPrimerApellido as
            priApellidoAfi, perAfi.perSegundoApellido as segApellidoAfi,
            grf.grfNumero,
            perBen.perTipoIdentificacion as tipoIdBen, perBen.perNumeroIdentificacion as numIdBen,
            perBen.perPrimerNombre as priNombreBen, perBen.perSegundoNombre as segNombreBen, perBen.perPrimerApellido as
            priApellidoBen, perBen.perSegundoApellido as segApellidoBen,
            perAdm.perTipoIdentificacion as tipoIdAdm, perAdm.perNumeroIdentificacion as numIdAdm,
            perAdm.perPrimerNombre as priNombreAdm, perAdm.perSegundoNombre as segNombreAdm, perAdm.perPrimerApellido as
            priApellidoAdm, perAdm.perSegundoApellido as segApellidoAdm,
            cas.casMedioDePagoTransaccion, cas.casNumeroTarjetaAdmonSubsidio, cas.casFechaHoraTransaccion,
            cas.casUsuarioTransaccion,
            cas.casValorOriginalTransaccion, cas.casValorRealTransaccion, dsa.dsaId ,
            dsa.dsaCuentaAdministradorSubsidio
            FROM CuentaAdministradorSubsidio as cas
            INNER JOIN DetalleSubsidioAsignado as dsa on cas.casId = dsa.dsaCuentaAdministradorSubsidio
            INNER JOIN SolicitudLiquidacionSubsidio as sls on sls.slsId = dsa.dsaSolicitudLiquidacionSubsidio
            INNER JOIN Empleador as empl on empl.empId = dsa.dsaEmpleador
            INNER JOIN Empresa as emp on emp.empId = empl.empEmpresa
            INNER JOIN Persona as emplPer on emplper.perId = emp.empPersona
            INNER JOIN Afiliado as afi on afi.afiId = dsa.dsaAfiliadoPrincipal
            INNER JOIN Persona as perAfi on perAfi.perId = afi.afiPersona
            INNER JOIN BeneficiarioDetalle as ben on ben.bedId = dsa.dsaBeneficiarioDetalle
            INNER JOIN PersonaDetalle as perDet on perDet.pedId = ben.bedPersonaDetalle
            INNER JOIN Persona as perBen on perBen.perId = perDet.pedPersona
            INNER JOIN Beneficiario as benf on benf.benPersona = perBen.perId AND benf.benAfiliado = afi.afiId
            INNER JOIN AdministradorSubsidio as adm on adm.asuId = cas.casAdministradorSubsidio
            INNER JOIN Persona as perAdm on perAdm.perId = adm.asuPersona
            INNER JOIN GrupoFamiliar as grf on grf.grfAfiliado = dsa.dsaAfiliadoPrincipal AND grf.grfId =
            benf.benGrupoFamiliar
            WHERE dsa.dsaId IN (430172 ,430342 ,429050 ,431022 ,429379 ,429420 ,430145 ,431077 ,431081 ,430505 ,430204
            ,429751 ,428922 ,431106 ,430427 ,429684 ,430820 ,428744 ,431019 ,428831 ,429041 ,429871 ,430278 ,430284
            ,429386 ,429409 ,429017 ,430266 ,431219 ,429103 ,430158 ,429697 ,430391 ,429897 ,430434 ,431165 ,430559
            ,430560 ,429629 ,429185 ,429542 ,428851 ,429944 ,428780 ,429338 ,430659 ,431129 ,430415 ,430771 ,430083
            ,430086 ,431155 ,429327 ,429328 ,429847 ,430679 ,429425 ,429166 ,430171 ,430332 ,430333 ,429378 ,428968
            ,430754 ,430770 ,430339 ,429318 ,431110 ,430385 ,430386 ,429686 ,430238 ,430821 ,430239 ,431018 ,428743
            ,430173 ,428830 ,430279 ,430281 ,428846 ,431167 ,431168 ,429628 ,429975 ,430998 ,431001 ,429517 ,429514
            ,429324 ,430631 ,430632 ,429942 ,430645 ,430851 ,429195 ,429719 ,429073 ,430026 ,430027 ,430416 ,429985
            ,429588 ,430438 ,430087 ,429812 ,430816 ,430955 ,429593 ,430954 ,430956 ,430187 ,428993 ,429316 ,428897
            ,430778 ,429011 ,429815 ,429459 ,430200 ,430830 ,429906 ,428974 ,429555 ,429554 ,429774 ,428971 ,428972
            ,430449 ,429295 ,429727 ,430610 ,430175 ,429092 ,429086 ,429089 ,429091 ,429161 ,430844 ,428736 ,428737
            ,428733 ,429879 ,430458 ,430452 ,430453 ,430941 ,430937 ,430940 ,429510 ,429619 ,429671 ,428916 ,429565
            ,429566 ,431187 ,429988 ,430024 ,431089 ,430847 ,429107 ,429954 ,429351 ,431038 ,429384 ,428907 ,430902
            ,430069 ,428853 ,430798 ,430991 ,429572 ,430119 ,428813 ,429808 ,429013 ,431101 ,431226 ,431227 ,431232
            ,431233 ,430040 ,430042 ,431203 ,430592 ,430057 ,429830 ,429823 ,430140 ,429649 ,428815 ,428816 ,430013
            ,430148 ,430150 ,430875 ,430849 ,429660 ,430377 ,431268 ,431060 ,431062 ,431063 ,431065 ,430067 ,428904
            ,429482 ,430856 ,430965 ,429264 ,429450 ,428912 ,428915 ,431013 ,430189 ,429310 ,429308 ,429311 ,429117
            ,430184 ,429010 ,429458 ,429723 ,429072 ,428877 ,430886 ,431121 ,428975 ,429777 ,431023 ,429064 ,429571
            ,429666 ,430528 ,430858 ,430609 ,430694 ,430695 ,430696 ,430178 ,429090 ,431012 ,430813 ,430795 ,429245
            ,430986 ,430987 ,429439 ,430054 ,429802 ,428739 ,429881 ,429882 ,429883 ,429463 ,430942 ,430938 ,430939
            ,430855 ,429672 ,428724 ,430314 ,429564 ,429989 ,428757 ,428758 ,428750 ,430160 ,429299 ,429300 ,430916
            ,430917 ,429016 ,430861 ,430290 ,429243 ,429244 ,429255 ,430768 ,430015 ,430016 ,430805 ,431004 ,430001
            ,430003 ,429071 ,430309 ,430132 ,430487 ,430130 ,430833 ,430834 ,430836 ,431207 ,428893 ,430461 ,430878
            ,431067 ,428966 ,429503 ,431244 ,429525 ,430772 ,431157 ,429000 ,429082 ,429077 ,429080 ,431225 ,430711
            ,429280 ,429281 ,430033 ,429142 ,429143 ,430825 ,429793 ,431086 ,430897 ,429093 ,430910 ,430124 ,430261
            ,430168 ,429049 ,429445 ,430769 ,431079 ,431080 ,431074 ,429272 ,429414 ,429317 ,428839 ,431109 ,428742
            ,429653 ,430280 ,430283 ,430285 ,429385 ,429410 ,431044 ,430392 ,431000 ,429516 ,429183 ,429184 ,429340
            ,429342 ,430852 ,430198 ,429720 ,431130 ,431192 ,430562 ,429811 ,429813 ,429851 ,429725 ,429500 ,429806
            ,430388 ,430817 ,430404 ,429487 ,429024 ,429349 ,429846 ,429662 ,428741 ,429273 ,430142 ,430846 ,429052
            ,429045 ,429350 ,429698 ,430788 ,428852 ,429484 ,428848 ,428849 ,428949 ,429354 ,430078 ,429353 ,431228
            ,430038 ,430041 ,430043 ,429124 ,430139 ,429044 ,430441 ,430874 ,430870 ,429215 ,429857 ,430538 ,431202
            ,430063 ,430064 ,431064 ,429076 ,429388 ,431132 ,430065 ,429561 ,430115 ,429266 ,429344 ,430097 ,429973
            ,429036 ,429750 ,431175 ,429899 ,429664 ,430025 ,429886 ,431091 ,430845 ,430288 ,431037 ,431159 ,429986
            ,430070 ,429543 ,430019 ,430126 ,429348 ,430636 ,428812 ,430763 ,430673 ,430894 ,429657 ,430555 ,430099
            ,430037 ,429287 ,430058 ,429665 ,428809 ,430876 ,430871 ,429380 ,429381 ,429383 ,431201 ,431061 ,429075
            ,429387 ,428940 ,431042 ,429335 ,430966 ,430866 ,430050 ,429263 ,429262 ,430729 ,430408 ,429363 ,429681
            ,429682 ,429048 ,429968 ,429094 ,430170 ,430167 ,429924 ,430335 ,429447 ,430716 ,430717 ,428814 ,429929
            ,431184 ,428898 ,428899 ,431075 ,431078 ,430506 ,430507 ,429296 ,428840 ,431108 ,431020 ,429558 ,430156
            ,428847 ,428798 ,431002 ,429187 ,428850 ,429943 ,429343 ,430071 ,430853 ,430100 ,430199 ,430341 ,429715
            ,429718 ,430291 ,429816 ,430417 ,430563 ,430656 ,430429 ,430403 ,430405 ,429488 ,429274 ,428832 ,430943
            ,431090 ,429940 ,430895 ,429412 ,429965 ,429139 ,431105 ,429165 ,430169 ,430343 ,430334 ,429051 ,429398
            ,430144 ,431107 ,430213 ,429596 ,429499 ,431017 ,430282 ,431043 ,430072 ,429186 ,429182 ,429515 ,430975
            ,430166 ,429341 ,429917 ,429716 ,430908 ,430418 ,429747 ,430082 ,430084 ,430877 ,429326 ,429852 ,429023
            ,430215 ,429062 ,429898 ,430428 ,430617 ,429461 ,430118 ,430887 ,429259 ,429399 ,428990 ,430549 ,429269
            ,431174 ,431112 ,429967 ,431211 ,429818 ,430566 ,430336 ,429446 ,429443 ,429444 ,429930 ,431076 ,430508
            ,429297 ,430989 ,430384 ,430212 ,430426 ,429685 ,429683 ,430237 ,430909 ,429918 ,431021 ,429696 ,429235
            ,428870 ,431166 ,430999 ,430997 ,429156 ,428931 ,430713 ,428781 ,430101 ,430658 ,429717 ,429721 ,428808
            ,429074 ,429548 ,428801 ,430439 ,430085 ,429807 ,429501 ,430216 ,429761 ,430803 ,430134 ,430113 ,429551
            ,430379 ,429037 ,429026 ,429027 ,429102 ,430650 ,429496 ,430577 ,429485 ,428948 ,431171 ,429810 ,429809
            ,429699 ,429206 ,430761 ,429157 ,431231 ,428970 ,431204 ,430056 ,431096 ,431097 ,428817 ,430873 ,429275
            ,430712 ,430539 ,429889 ,429890 ,430590 ,429336 ,428903 ,430905 ,430490 ,430155 ,429265 ,431265 ,429208
            ,430976 ,431267 ,429261 ,430407 ,429974 ,429957 ,430364 ,430365 ,430575 ,429314 ,429133 ,429132 ,430621
            ,428930 ,428771 ,428772 ,429431 ,431193 ,429288 ,429559 ,430674 ,430671 ,430792 ,429766 ,430322 ,429576
            ,429578 ,429582 ,430931 ,429031 ,429033 ,429029 ,429644 ,429645 ,429607 ,429602 ,430399 ,430663 ,430366
            ,430165 ,430923 ,430721 ,429417 ,429330 ,429395 ,429511 ,429512 ,429167 ,429168 ,430414 ,430121 ,431162
            ,429631 ,428790 ,428785 ,431256 ,431135 ,429405 ,429805 ,431016 ,429591 ,430961 ,428995 ,430489 ,429322
            ,430777 ,430182 ,429433 ,429173 ,428879 ,430317 ,430885 ,428973 ,431046 ,429778 ,429779 ,430440 ,429278
            ,430181 ,430176 ,430177 ,430179 ,430812 ,429440 ,430654 ,430217 ,428740 ,429884 ,431117 ,430451 ,429465
            ,430794 ,429486 ,430483 ,428917 ,430223 ,430202 ,429990 ,431138 ,431139 ,429999 ,429475 ,430055 ,431234
            ,429377 ,429291 ,429455 ,430111 ,429896 ,429941 ,431092 ,429105 ,429106 ,430806 ,430564 ,429018 ,430073
            ,430437 ,429495 ,430068 ,430903 ,430904 ,428838 ,429188 ,431229 ,430044 ,430039 ,429825 ,429827 ,429828
            ,429125 ,429109 ,429110 ,429135 ,430149 ,429229 ,429610 ,430565 ,430872 ,429382 ,430481 ,430862 ,430863
            ,431058 ,431059 ,430066 ,429483 ,429845 ,430964 ,430669 ,430670 ,429054 ,429035 ,430105 ,429257 ,428914
            ,430110 ,429781 ,429592 ,430960 ,431113 ,429479 ,429012 ,430957 ,430959 ,430185 ,428994 ,429315 ,428837
            ,430183 ,429009 ,429434 ,429491 ,429492 ,430412 ,429866 ,429442 ,429853 ,428880 ,429043 ,430914 ,431045
            ,429776 ,429780 ,430367 ,430693 ,429590 ,429087 ,429088 ,430985 ,428735 ,428738 ,431088 ,429462 ,430459
            ,429533 ,430482 ,430074 ,430221 ,431098 ,429765 ,429562 ,429047 ,429735 ,430697 ,429732 ,430049 ,428833
            ,430841 ,431238 ,428918 ,429872 ,428802 ,430984 ,430642 ,428821 ,429345 ,429347 ,430021 ,429004 ,429972
            ,430801 ,431172 ,430762 ,431133 ,430046 ,430760 ,431230 ,429826 ,429824 ,429111 ,428810 ,430442 ,429611
            ,429763 ,431245 ,430062 ,429216 ,431209 ,430741 ,429480 ,429481 ,430857 ,430668 ,430727 ,430994 ,429413
            ,431206 ,428856 ,428857 ,429258 ,428987 ,430104 ,429457 ,429358 ,430698 ,429987 ,429406 ,429733 ,429404
            ,429390 ,428751 ,428746 ,430900 ,430701 ,430767 ,429648 ,430002 ,429994 ,429160 ,428795 ,428797 ,430488
            ,430837 ,430832 ,431266 ,430193 ,428967 ,430574 ,430047 ,429506 ,429238 ,429239 ,430745 ,430746 ,429319
            ,428900 ,429636 ,429116 ,431275 ,430715 ,430214 ,429744 ,429060 ,429084 ,429078 ,428776 ,430594 ,431263
            ,429601 ,429282 ,429284 ,430553 ,430570 ,429207 ,431102 ,428964 ,429426 ,431239 ,428977 ,428981 ,429333
            ,428913 ,431014 ,431015 ,429594 ,430958 ,430186 ,429306 ,429307 ,429309 ,429022 ,428836 ,429429 ,430201
            ,429907 ,431047 ,429775 ,429637 ,430859 ,429497 ,431011 ,430892 ,429200 ,429880 ,429885 ,430457 ,430454
            ,429466 ,430222 ,430224 ,429293 ,431141 ,429892 ,429563 ,429991 ,429992 ,429734 ,429403 ,430840 ,428844
            ,429476 ,430828 ,429175 ,429932 ,429731 ,428969 ,430311 ,430091 ,431224 ,431034 ,428824 ,429028 ,428805
            ,428803 ,431131 ,431122 ,429655 ,430518 ,430519 ,429163 ,430785 ,430786 ,428779 ,429112 ,428726 ,430211
            ,430628 ,430630 ,429737 ,429469 ,429241 ,430764 ,429677 ,429678 ,431104 ,428921 ,429359 ,430472 ,430274
            ,430276 ,431177 ,430486 ,430152 ,429428 ,429180 ,429971 ,431200 ,430061 ,430789 ,429058 ,428755 ,429613
            ,429997 ,430720 ,430723 ,430141 ,430766 ,428997 ,430004 ,430032 ,428886 ,430075 ,430154 ,428883 ,430839
            ,431236 ,430691 ,429323 ,428756 ,428748 ,428749 ,428747 ,429616 ,430901 ,430724 ,430079 ,430496 ,430809
            ,429995 ,430730 ,430305 ,431208 ,430494 ,430499 ,430491 ,430462 ,430884 ,429798 ,430926 ,430927 ,429504
            ,429505 ,429676 ,429674 ,428777 ,430787 ,429587 ,429635 ,430540 ,429101 ,429083 ,430127 ,428827 ,429546
            ,429279 ,429283 ,430569 ,429069 ,429070 ,429401 ,428943 ,430190 ,430191 ,430192 ,430188 ,430990 ,429411
            ,429061 ,430588 ,429298 ,428878 ,431120 ,430913 ,430915 ,429553 ,430048 ,430286 ,430368 ,431039 ,430180
            ,429441 ,428734 ,430455 ,430456 ,430936 ,429712 ,429144 ,428889 ,428989 ,428723 ,431137 ,431140 ,431136
            ,429736 ,430000 ,430358 ,428884 ,428885 ,431235 ,429456 ,430159 ,430810 ,430571 ,430354 ,429256 ,430014
            ,430757 ,430759 ,430714 ,429199 ,428999 ,430059 ,429391 ,429862 ,431237 ,428845 ,430096 ,428882 ,430867
            ,431142 ,428965 ,429652 ,428979 ,430249 ,431144 ,429688 ,430267 ,430702 ,430022 ,429371 ,430006 ,430774
            ,429936 ,429937 ,429176 ,429939 ,429935 ,430951 ,430535 ,431223 ,431221 ,429356 ,430254 ,428806 ,429236
            ,429700 ,430782 ,430709 ,429654 ,430517 ,430436 ,429095 ,429096 ,429814 ,429014 ,428732 ,430209 ,430627
            ,430624 ,428924 ,428926 ,429471 ,429477 ,430112 ,428796 ,430731 ,430308 ,429980 ,430501 ,429155 ,429915
            ,431217 ,429502 ,429252 ,428901 ,429181 ,429196 ,429567 ,430639 ,431274 ,430653 ,430509 ,431273 ,429001
            ,430080 ,430710 ,429545 ,430554 ,429068 ,430031 ,430035 ,429260 ,430826 ,431082 ,431083 ,431085 ,430623
            ,430250 ,430248 ,431143 ,430353 ,429366 ,430023 ,429418 ,430829 ,430515 ,430146 ,429817 ,430601 ,429015
            ,430661 ,429984 ,430510 ,428881 ,428752 ,428745 ,429614 ,429615 ,430719 ,429705 ,430573 ,429192 ,429858
            ,429191 ,430758 ,431264 ,428998 ,428996 ,430802 ,429993 ,430552 ,429837 ,430835 ,430502 ,428890 ,428891
            ,428892 ,430492 ,430463 ,429799 ,430194 ,429675 ,428778 ,429320 ,429667 ,430945 ,430541 ,429526 ,430921
            ,429271 ,429042 ,429059 ,429854 ,431213 ,431215 ,430036 ,430824 ,430822 ,430950 ,430529 ,429839 ,431147
            ,429365 ,430756 ,429178 ,429177 ,429933 ,431148 ,431145 ,428800 ,429597 ,429691 ,429692 ,430643 ,430703
            ,430704 ,430755 ,429419 ,431246 ,429541 ,430848 ,431007 ,429179 ,429938 ,430536 ,431163 ,429833 ,431031
            ,430662 ,431186 ,429726 ,430304 ,428941 ,430265 ,428826 ,428823 ,430252 ,429393 ,429498 ,430143 ,430520
            ,429863 ,430784 ,429771 ,428727 ,428728 ,428731 ,430207 ,430208 ,430210 ,430666 ,429832 ,430394 ,429355
            ,430537 ,428920 ,430444 ,430533 ,431119 ,429427 ,428944 ,431084 ,430974 ,431188 ,431240 ,431241 ,429820
            ,428976 ,428980 ,429367 ,429690 ,428799 ,430289 ,430120 ,430827 ,430775 ,429174 ,429934 ,429334 ,430270
            ,429804 ,430009 ,430010 ,428985 ,428986 ,428804 ,430600 ,429397 ,428753 ,429713 ,429162 ,429126 ,428835
            ,430625 ,430122 ,430665 ,428927 ,428923 ,429843 ,429472 ,430911 ,429910 ,429421 ,429740 ,429976 ,431247
            ,430273 ,430256 ,430804 ,429946 ,429770 ,429969 ,430689 ,430918 ,430611 ,429695 ,428829 ,428828 ,429981
            ,429983 ,428754 ,430433 ,430107 ,429127 ,429129 ,429131 ,430619 ,430622 ,430271 ,429612 ,429760 ,429189
            ,429039 ,430479 ,429234 ,430793 ,430791 ,429769 ,429225 ,429227 ,429579 ,430326 ,430928 ,430930 ,430135
            ,429030 ,429640 ,430401 ,430396 ,429065 ,429928 ,430470 ,431271 ,429532 ,430647 ,429394 ,429998 ,430389
            ,430947 ,429025 ,430646 ,428859 ,430011 ,429659 ,430411 ,431222 ,430634 ,428909 ,430596 ,430599 ,429392
            ,429396 ,429164 ,430667 ,428925 ,428906 ,429841 ,429842 ,429467 ,429978 ,429209 ,429210 ,430946 ,429329
            ,431180 ,431181 ,430275 ,428896 ,429977 ,429701 ,428910 ,428872 ,430269 ,431169 ,430744 ,430369 ,430370
            ,428784 ,428854 ,430551 ,429134 ,429128 ,429130 ,431170 ,430355 ,430797 ,429878 ,430272 ,429430 ,431041
            ,429634 ,431111 ,429656 ,430292 ,430030 ,429408 ,429407 ,430580 ,430576 ,429313 ,429352 ,430410 ,430655
            ,430356 ,430796 ,429875 ,429877 ,428768 ,428770 ,428766 ,428767 ,429888 ,429560 ,428888 ,430818 ,429861
            ,429768 ,429767 ,429580 ,430329 ,429581 ,430137 ,430932 ,429034 ,431158 ,429639 ,429603 ,430395 ,430151
            ,430924 ,430263 ,429710 ,429169 ,431164 ,430203 ,430357 ,430664 ,429285 ,431033 ,431258 ,431261 ,430765
            ,429360 ,429544 ,430450 ,430485 ,430641 ,430680 ,429970 ,430511 ,428841 ,429850 ,429305 ,429819 ,430838
            ,431257 ,429489 ,430981 ,430983 ,430448 ,430843 ,430740 ,428937 ,430512 ,430387 ,429996 ,429835 ,430306
            ,430129 ,430131 ,429711 ,430493 ,430500 ,430460 ,430337 ,431069 ,430925 ,429240 ,429237 ,429673 ,429253
            ,429586 ,429753 ,429552 ,430920 ,430773 ,429745 ,429079 ,429081 ,430174 ,430081 ,428761 ,431103 ,430567
            ,430568 ,431214 ,431216 ,429762 ,429706 ,430034 ,428822 ,429066 ,429838 ,431242 ,428978 ,430255 ,430688
            ,431146 ,430728 ,429370 ,429368 ,429369 ,429618 ,430869 ,428855 ,430557 ,429312 ,430620 ,430618 ,428929
            ,429876 ,430420 ,430028 ,430029 ,429724 ,429038 ,431040 ,429224 ,429982 ,430413 ,430318 ,430319 ,429577
            ,430328 ,429268 ,429032 ,429452 ,429643 ,429006 ,429609 ,430400 ,430402 ,429137 ,429925 ,430164 ,430264
            ,430722 ,429325 ,429424 ,429873 ,428858 ,431191 ,428788 ,428786 ,431262 ,429887 ,430979 ,429739 ,430229
            ,430783 ,430513 ,429454 ,429249 ,429254 ,429040 ,431160 ,429250 ,428911 ,430734 ,430737 ,429247 ,429248
            ,430147 ,429834 ,431179 ,430349 ,429758 ,429757 ,430531 ,428825 ,430253 ,431094 ,428908 ,430597 ,430521
            ,430522 ,430523 ,430516 ,431100 ,430435 ,428729 ,428730 ,428725 ,430205 ,430629 ,428928 ,428905 ,430860
            ,430302 ,430303 ,429474 ,429468 ,429242 ,430912 ,429741 ,429211 ,429909 ,429361 ,431182 ,430718 ,430484
            ,429005 ,428843 ,428871 ,430098 ,429053 ,430638 ,429302 ,429303 ,429304 ,428866 ,430919 ,430287 ,429874
            ,428769 ,430753 ,429136 ,429860 ,430480 ,429226 ,430324 ,429575 ,430934 ,430935 ,430136 ,429451 ,429641
            ,429604 ,429605 ,430398 ,430397 ,430468 ,430469 ,429416 ,429415 ,430532 ,429914 ,429402 ,429490 ,430613
            ,428984 ,428982 ,428983 ,430053 ,430993 ,429630 ,431259 ,431260 ,428867 ,428868 ,430676 ,430677 ,429966
            ,430447 ,430699 ,429197 ,429020 ,428939 ,430736 ,429400 ,430854 ,429453 ,428789 ,430982 ,428869 ,428865
            ,430230 ,429277 ,429140 ,429141 ,429891 ,430735 ,430738 ,428933 ,431093 ,430128 ,431156 ,430514 ,428935
            ,430445 ,430060 ,429534 ,430323 ,430325 ,430327 ,430933 ,430929 ,430138 ,430320 ,430321 ,429642 ,429606
            ,429608 ,430471 ,430162 ,430163 ,429926 ,429927 ,431272 ,429870 ,429513 ,431205 ,430612 ,430109 ,430116
            ,429145 ,430995 ,430012 ,428787 ,430978 ,430980 ,430977 ,429267 ,431161 ,430018 ,429276 ,429019 ,430733
            ,430739 ,606566 ,606562 ,606563 ,606565 ,606564 ,606561 ,606560 ,606559 ,606557 ,606555 ,606554 ,606553
            ,606552 ,606550 ,606551)
            ORDER BY dsa.dsaCuentaAdministradorSubsidio
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.descuentosSubsidio">
        <description>Consulta los descuentos asociados a un detalle de liquidación.</description>
        <query>
            SELECT ed.endCodigo, ed.endNombre, des.desMontoDescontado,
            asd.asdNombreOUT, des.desFechaCargueDescuento, des.desCodigoReferencia
            FROM DescuentosSubsidioAsignado des
            JOIN DetalleSubsidioAsignado dsa ON dsa.dsaId = des.desDetalleSubsidioAsignado
            JOIN SolicitudLiquidacionSubsidio sls ON sls.slsId = dsa.dsaSolicitudLiquidacionSubsidio
            JOIN Solicitud sol ON sol.solId = sls.slsSolicitudGlobal
            JOIN EntidadDescuento ed ON ed.endId = des.desEntidadDescuento
            LEFT JOIN ArchivoSalidaDescuentoSubsidio asd ON (asd.asdSolicitudLiquidacionSubsidio = sls.slsId AND
            asd.asdEntidadDescuento = ed.endId)
            WHERE dsa.dsaId = :idDetalleSubsidio
        </query>
    </named-native-query>

    <sql-result-set-mapping name="InfoDetallesSubsidioAgrupadosDTOMapping">
        <constructor-result target-class="com.asopagos.subsidiomonetario.pagos.dto.InfoDetallesSubsidioAgrupadosDTO">
            <column name="idGrupoFamiliar" class="java.lang.Long"/>
            <column name="idAdministradorSubsidio" class="java.lang.Long"/>
            <column name="valorTotal" class="java.lang.String"/>
        </constructor-result>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="InfoPersonaReexpedicionDTOMapping">
        <constructor-result target-class="com.asopagos.subsidiomonetario.pagos.dto.InfoPersonaReexpedicionDTO">
            <column name="idPersona" class="java.lang.Long"/>
            <column name="nombreCompleto" class="java.lang.String"/>
            <column name="numeroTarjeta" class="java.lang.String"/>
            <column name="estadoTarjeta" class="java.lang.String"/>
            <column name="idMEdioPagoParaActualizar" class="java.lang.Long"/> 
            <column name="numeroTarjetaPersona" class="java.lang.String"/> 
        </constructor-result>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="InfoPersonaExpedicionDTOMapping">
        <constructor-result target-class="com.asopagos.subsidiomonetario.pagos.dto.InfoPersonaExpedicionDTO">
            <column name="idPersona" class="java.lang.Long"/>
            <column name="tipoIdentificacion" class="java.lang.String"/>
            <column name="numeroIdentificacion" class="java.lang.String"/>
            <column name="estado" class="java.lang.String"/>
            <column name="prioridad" class="java.lang.String"/>
            <column name="nombreCompleto" class="java.lang.String"/>
        </constructor-result>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="InfoPersonaExpedicionValidacionDTOMapping">
        <constructor-result
                target-class="com.asopagos.subsidiomonetario.pagos.dto.InfoPersonaExpedicionValidacionesDTO">
            <column name="idPersona" class="java.lang.Long"/>
            <column name="tipoIdentificacion" class="java.lang.String"/>
            <column name="numeroIdentificacion" class="java.lang.String"/>
            <column name="administradorSubsidio" class="java.lang.Long"/>
            <column name="grupoFamiliar" class="java.lang.Long"/>
            <column name="marca" class="java.lang.String"/>
            <column name="estadoBeneficiario" class="java.lang.String"/>
        </constructor-result>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="GruposMedioTarjetaDTOMapping">
        <constructor-result target-class="com.asopagos.subsidiomonetario.pagos.dto.GruposMedioTarjetaDTO">
            <column name="idGrupo" class="java.lang.Long"/>
            <column name="relacionGrupo" class="java.lang.Short"/>
        </constructor-result>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="cuentaAdministradorSubsidioMapping">
        <entity-result
                entity-class="com.asopagos.entidades.subsidiomonetario.pagos.CuentaAdministradorSubsidio"></entity-result>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="registro.solicitud.anibol">
        <entity-result
                entity-class="com.asopagos.entidades.subsidiomonetario.pagos.RegistroSolicitudAnibol"></entity-result>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="cuentaAdministrador.persona.medioTarjeta">
        <entity-result
                entity-class="com.asopagos.entidades.subsidiomonetario.pagos.CuentaAdministradorSubsidio"></entity-result>
        <entity-result entity-class="com.asopagos.entidades.ccf.personas.Persona"></entity-result>
        <column-result name="mtrEstadoTarjetaMultiservicios" class="java.lang.String"/>
    </sql-result-set-mapping>
    <!-- ESPACIO PARA STORED PROCEDURES -->

    <named-stored-procedure-query
            name="USP_PG_ResultadosDispersionAdministradorMedioPago"
            procedure-name="USP_PG_ResultadosDispersionAdministradorMedioPago">
        <parameter class="java.lang.String" mode="IN" name="sNumeroRadicado"/>
        <parameter class="java.lang.String" mode="IN" name="sMedio"/>
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="USP_SM_GET_ResumenListadoAbonosPorVencimientoYPrescripcion"
            procedure-name="dbo.USP_SM_GET_ListadoAbonosPorVencimientoYPrescripcion">
        <parameter class="java.util.Date" mode="IN" name="fechaActual"/>
        <parameter class="java.lang.Integer" mode="IN" name="dias"/>
        <parameter class="java.lang.String" mode="IN" name="listaMediosDePago"/>
        <parameter class="java.lang.Integer" mode="IN" name="offset"/>
        <parameter class="java.lang.String" mode="IN" name="orderBy"/>
        <parameter class="java.lang.Integer" mode="IN" name="limit"/>
        <parameter class="java.lang.Boolean" mode="IN" name="primeraPeticion"/>
        <parameter class="java.lang.Boolean" mode="IN" name="consultaTotal"/>
        <parameter class="java.lang.String" mode="IN" name="numeroIdentificacionAdminSub"/>
        <parameter class="java.lang.Long" mode="OUT" name="totalRegistros"/>
    </named-stored-procedure-query>
    <named-stored-procedure-query
            name="USP_PG_ModificarCuentaYDetallePorReverso"
            procedure-name="USP_PG_ModificarCuentaYDetallePorReverso">
        <parameter class="java.lang.String" mode="IN" name="idTransaccionTerceroPagador"/>
        <parameter class="java.lang.String" mode="IN" name="nombreTerceroPagador"/>     
        <parameter class="java.lang.Integer" mode="OUT" name="Resultado"/>
        <parameter class="java.lang.String" mode="OUT" name="mensajeError"/>
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="USP_SM_GET_ListadoAbonosPorVencimientoYPrescripcionResumen"
            procedure-name="dbo.USP_SM_GET_ListadoAbonosPorVencimientoYPrescripcionResumen">
        <parameter class="java.util.Date" mode="IN" name="fechaActual"/>
        <parameter class="java.lang.Integer" mode="IN" name="dias"/>
        <parameter class="java.lang.String" mode="IN" name="listaMediosDePago"/>
        <parameter class="java.lang.Integer" mode="IN" name="offset"/>
        <parameter class="java.lang.String" mode="IN" name="orderBy"/>
        <parameter class="java.lang.Integer" mode="IN" name="limit"/>
        <parameter class="java.lang.Integer" mode="IN" name="filtro"/>
        <parameter class="java.lang.Boolean" mode="IN" name="primeraPeticion"/>
        <parameter class="java.lang.Long" mode="OUT" name="totalRegistros"/>
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="USP_SM_GET_ListadoArchivoTransDetaSubsidio"
            procedure-name="dbo.USP_SM_GET_ListadoArchivoTransDetaSubsidio">
        <parameter class="java.lang.Integer" mode="IN" name="offset"/>
        <parameter class="java.lang.String" mode="IN" name="orderBy"/>
        <parameter class="java.lang.Integer" mode="IN" name="limit"/>
        <parameter class="java.lang.String" mode="OUT" name="totalRegistros"/>
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="PagosSubsidioMonetario.registrar.retiro.SP"
            procedure-name="dbo.USP_PG_AplicarRetiros">
        <parameter class="java.lang.String" mode="IN" name="tipoIdAdmin"/>
        <parameter class="java.lang.String" mode="IN" name="numeroIdAdmin"/>
        <parameter class="java.lang.Long" mode="IN" name="valorSolicitado"/>
        <parameter class="java.lang.String" mode="IN" name="usuario"/>
        <parameter class="java.lang.String" mode="IN" name="idTransaccionTercerPagador"/>
        <parameter class="java.lang.String" mode="IN" name="departamento"/>
        <parameter class="java.lang.String" mode="IN" name="municipio"/>
        <parameter class="java.lang.String" mode="IN" name="idPuntoCobro"/>
        <parameter class="java.lang.String" mode="IN" name="usuarioGenesys"/>
    </named-stored-procedure-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.registro.solicitud.dispersion.subsidio.monetario"
                        result-set-mapping="registro.solicitud.anibol">
        <query>
            SELECT reg.* FROM RegistroSolicitudAnibol reg
            where reg.rsaTipoOperacionAnibol IN ('DISPERSION')
            and reg.rsaEstadoSolicitudAnibol = 'EN_ESPERA'
            and reg.rsaIdProceso IS NOT NULL
            and reg.rsaIdProceso = :idProceso
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.registro.solicitud.anulacion.subsidio.monetario"
                        result-set-mapping="registro.solicitud.anibol">
        <query>
            SELECT reg.* FROM RegistroSolicitudAnibol reg
            where reg.rsaTipoOperacionAnibol IN ('ANULACION')
            and reg.rsaEstadoSolicitudAnibol = 'EN_ESPERA'
            and reg.rsaIdProceso IS NOT NULL
            and reg.rsaIdProceso = :idProceso
        </query>
    </named-native-query>

    <named-native-query
            name="PagosSubsidioMonetario.actualizar.estado.transacciones.procesadas.dispersion.subsidio.monetario">
        <description>Consulta que se encarga de actualiza el estado de las transacciones de ls dispersion de subsidio
            monetario que se ejecutaron correctamente
        </description>
        <query>
            UPDATE cas
            SET cas.casEstadoTransaccionSubsidio = 'APLICADO',
            cas.casFechaHoraUltimaModificacion = GETDATE(),
            cas.casUsuarioUltimaModificacion = 'Genesys'
            FROM RegistroSolicitudAnibol rsa
            INNER JOIN SolicitudLiquidacionSubsidio sls ON sls.slsId = rsa.rsaSolicitudLiquidacionSubsidio
            INNER JOIN DetalleSubsidioAsignado dsa ON dsa.dsaSolicitudLiquidacionSubsidio = sls.slsId
            INNER JOIN CuentaAdministradorSubsidio cas ON dsa.dsaCuentaAdministradorSubsidio = cas.casId
            LEFT JOIN TransaccionesFallidasSubsidio tfs ON tfs.tfsCuentaAdministradorSubsidio = cas.casId
            WHERE rsa.rsaIdProceso = :idProceso
            AND tfs.tfsId IS NULL
            AND cas.casMedioDePagoTransaccion = 'TARJETA'
            AND cas.casOrigenTransaccion = 'LIQUIDACION_SUBSIDIO_MONETARIO'
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.cuentaAdminSubsidio.dispersion.subsidio.monetario">
        <description>Consulta que obtiene el identificador de la cuenta del administrador subsidio para la dispersion
            del subsidio monetario
        </description>
        <query>
            SELECT DISTINCT cas.casId
            FROM RegistroSolicitudAnibol rsa
            INNER JOIN SolicitudLiquidacionSubsidio sls ON sls.slsId = rsa.rsaSolicitudLiquidacionSubsidio
            INNER JOIN DetalleSubsidioAsignado dsa ON dsa.dsaSolicitudLiquidacionSubsidio = sls.slsId
            INNER JOIN CuentaAdministradorSubsidio cas ON dsa.dsaCuentaAdministradorSubsidio = cas.casId
            WHERE rsa.rsaIdProceso = :idProceso
            AND cas.casNumeroTarjetaAdmonSubsidio = :numeroTarjetaAdmonSubsidio
            AND cas.casOrigenTransaccion = 'LIQUIDACION_SUBSIDIO_MONETARIO'
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.cuentas.administrador.avisos.prescripcion">
        <description>Consulta que obtiene el identificador de los abonos que cumplen con los parámetros de avisos de
            prescripción
        </description>
        <query>
            SELECT casId FROM CuentaAdministradorSubsidio
            WHERE casTipoTransaccionSubsidio = 'ABONO' AND
            casEstadoTransaccionSubsidio = 'APLICADO' AND
            DATEADD(DAY, convert(int,:diasPrescripcion) - convert(int,:diasAvisoPrescripcion), CONVERT (DATE,
            casFechaHoraTransaccion)) = CONVERT(DATE, GETDATE())
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.correo.administrador.prescripcion">
        <description>Consulta que obtiene el email del administrador subsidio para la prescripcion de un subsidio
            monetario
        </description>
        <query>
            SELECT ubiEmail, ubiAutorizacionEnvioEmail,perId FROM CuentaAdministradorSubsidio
            INNER JOIN AdministradorSubsidio ON asuId = casAdministradorSubsidio
            INNER JOIN Persona ON perId = asuPersona
            INNER JOIN Ubicacion ON ubiId = perUbicacionPrincipal
            WHERE casId = :idCuentaAdmonSubsidio
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.usuario">
        <description>Consulta el usuario pagador tercero</description>
        <query>
            SELECT conEstado
            FROM ConvenioTerceroPagador
            WHERE conUsuarioGenesys = :usuario
        </query>
        <hint name="org.hibernate.readOnly" value="true"/>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.listado.valor.real.transaccion">
        <description>Consulta el valor real de la transaccion</description>
        <query>
            SELECT casId, casValorRealTransaccion, casAdministradorSubsidio, casIdRemisionDatosTerceroPagador
            FROM CuentaAdministradorSubsidio
            WHERE castipoTransaccionSubsidio = 'RETIRO'
            AND casIdTransaccionTerceroPagador = :idTransaccion
            AND casNombreTerceroPagado = :usuario
            AND casIdPuntoDeCobro = :idPuntoCobro
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.validar.existencia.tarjeta">
        <description>Valida la existencia de una tarjeta por el numero expedido</description>
        <query>
            SELECT CASE 
                WHEN EXISTS (SELECT 1 
                    FROM MedioTarjeta 
                    WHERE mtrNumeroTarjeta = :numeroExpedido) 
                THEN 'TRUE'
                ELSE 'FALSE'
            END AS Resultado;
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.grupos.familiares.con.marca.y.admin"
        result-set-mapping = "PagosSubsidioMonetario.consultar.grupos.familiares.con.marca.y.admin.maping">
        <description>
            Query encargada de devolver una lista de longs que representan los 
            grupos familiares de un afiliado donde se es administrador y ademas se 
            tiene prioridad sobre la tarjeta multiservicio
        </description>
        <query>
            SELECT DISTINCT
            grfId as idGrupoFamiliad
            FROM Persona per
				INNER JOIN AdministradorSubsidio asu on asuPersona = per.perid
				INNER JOIN AdminSubsidioGrupo asg on asg.asgAdministradorSubsidio = asu.asuId
				INNER JOIN GrupoFamiliar grf on grf.grfId = asg.asgGrupoFamiliar
				INNER JOIN Beneficiario ben on ben.benGrupoFamiliar = grf.grfId
				INNER JOIN MedioDePago mdp on mdp.mdpId = asg.asgMedioDePago
				LEFT JOIN MedioEfectivo mdpe on mdpe.mdpId = mdp.mdpId
                LEFT JOIN MedioTarjeta mt on mt.mdpId = mdp.mdpId
            WHERE ben.benEstadoBeneficiarioAfiliado = 'ACTIVO'
            AND (
            (:expedicion = 0)
            OR (:expedicion = 1 AND grf.grfTarjetaMultiservicio IS NOT NULL AND grf.grfTarjetaMultiservicio = 1)
            )
            AND asg.asgMedioPagoActivo = 1
			AND per.perNumeroIdentificacion = :numeroIdentificacion
			AND per.perTipoIdentificacion = :tipoIdentificacion
            AND (:numeroTarjeta = 'null' OR mt.mtrNumeroTarjeta = :numeroTarjeta)
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.listado.abonos.retiro">
        <description>Consulta los abonos asociados al retiro</description>
        <query>
            SELECT cas.casId, cas.casValorRealTransaccion
            FROM CuentaAdministradorSubsidio cas
            WHERE cas.casIdCuentaAdmonSubsidioRelacionado IN
            (SELECT casAdmin.casId from CuentaAdministradorSubsidio casAdmin
            WHERE casAdmin.castipoTransaccionSubsidio = 'RETIRO'
            AND casAdmin.casIdTransaccionTerceroPagador = :idTransaccion
            AND casAdmin.casNombreTerceroPagado = :usuario
            AND casAdmin. casIdPuntoDeCobro = :idPuntoCobro)
        </query>
    </named-native-query>
    
     <named-native-query
            name="PagosSubsidioMonetario.consultar.estado.dispercion">
        <description>Consultar el estado en el que esta el proceso
        </description>
        <query>
            SELECT cpaEstado FROM ControlProcesos
            WHERE cpaNumeroRadicado = :numeroRadicacion
        </query>
    </named-native-query>
    
<named-native-query name="PagosSubsidioMonetario.consultar.medio.de.pago.y.grupos.familiares.traslado"
        result-set-mapping = "PagosSubsidioMonetario.consultar.medio.de.pago.y.grupos.familiares.traslado.mapping">
        <description>Consulta los abonos asociados al retiro</description>
        <query>
            SELECT CONVERT(VARCHAR(MAX), (
                SELECT 
                    medioDePagoId AS id,
                    MIN(numeroOubicacion) AS numeroOubicacion,
                    MIN(tipoMedioPago) AS tipo,
                    MIN(idAdmin) AS idAdmin,
                    'TRUE' AS estadoMedioDePago,
                    (
                        select distinct d1.dsaAfiliadoPrincipal AS afiliadoPrincipalId,
                            p.perNumeroIdentificacion AS numeroIdentificacion,
                            p.perTipoIdentificacion AS tipoIdentificacion,
                            CONCAT(p.perPrimerNombre,' ',p.perPrimerApellido) as nombre,
                            (
                                SELECT distinct
                                    grfId AS id,
                                    grfNumero AS numeroGrupo,
                                    'FALSE' AS seleccionado,
                                    (
                                        SELECT distinct
                                            p.perNumeroIdentificacion AS numeroIdentificacion,
                                            p.perTipoIdentificacion AS tipoIdentificacion,
                                            CONCAT(p.perPrimerNombre, ' ', p.perPrimerApellido) AS nombre,
                                            b.benEstadoBeneficiarioAfiliado AS estado,
                                            b.benTipoBeneficiario AS parentesco,
                                            (SELECT SUM(dsaValorTotal)
                                                    FROM DetalleSubsidioAsignado dsa WITH (NOLOCK)
                                                    JOIN CuentaAdministradorSubsidio cas WITH (NOLOCK) ON dsa.dsaCuentaAdministradorSubsidio = cas.casId
                                                    WHERE dsa.dsaBeneficiarioDetalle = bd.bedId
                                                    AND dsa.dsaGrupoFamiliar = b.benGrupoFamiliar
                                                    AND dsa.dsaAfiliadoPrincipal = d1.dsaAfiliadoPrincipal
                                                    AND dsa.dsaAdministradorSubsidio = idAdmin
                                                    AND cas.casTipoTransaccionSubsidio = 'ABONO'
                                                    AND cas.casEstadoTransaccionSubsidio = 'APLICADO'
                                                    AND cas.casMedioDePago = medioDePagoId
                                                    AND dsa.dsaValorTotal &gt; 0
                                                ) AS saldo
                                        FROM Persona p with(nolock)
                                        JOIN Beneficiario b with(nolock) ON b.benPersona = p.perId
                                        JOIN BeneficiarioDetalle bd with(nolock) ON b.benBeneficiarioDetalle = bd.bedId
                                        JOIN DetalleSubsidioAsignado with(nolock) ON dsaBeneficiarioDetalle = bd.bedId
                                        JOIN CuentaAdministradorSubsidio with(nolock) ON dsaCuentaAdministradorSubsidio = casId
                                        WHERE benGrupoFamiliar = grfId
                                        AND dsaAfiliadoPrincipal = d1.dsaAfiliadoPrincipal
                                        AND dsaAdministradorSubsidio = idAdmin
                                        AND casTipoTransaccionSubsidio = 'ABONO'
                                        AND casEstadoTransaccionSubsidio = 'APLICADO'
                                        AND casMedioDePago = medioDePagoId
                                        AND dsaValorTotal &gt; 0
                                        FOR JSON PATH
                                    ) AS beneficiarios
                                FROM GrupoFamiliar with(nolock)
                                JOIN AdminSubsidioGrupo with(nolock) ON asgGrupoFamiliar = grfId
                                WHERE grfAfiliado = d1.dsaAfiliadoPrincipal
                                FOR JSON PATH
                            ) AS grupoFamiliar
                        from grupoFamiliar with(nolock) 
                        join DetalleSubsidioAsignado d1 with(nolock) on d1.dsaGrupoFamiliar = grfId
                        join CuentaAdministradorSubsidio on casid = dsaCuentaAdministradorSubsidio
                        join AdministradorSubsidio with(nolock) on asuId = casAdministradorSubsidio
                        JOIN Persona p with(nolock) ON p.perId = d1.dsaAfiliadoPrincipal
                        where medioDePagoId = casMedioDePago
                                AND dsaAfiliadoPrincipal IS NOT NULL
                                AND asuId = idAdmin
                                AND dsaValorTotal &gt; 0
                                AND casTipoTransaccionSubsidio = 'ABONO'
                                AND casEstadoTransaccionSubsidio = 'APLICADO'
                        FOR JSON PATH
                    ) AS afiliados
                FROM (
                    SELECT 
                        ma.mdpId AS medioDePagoId,
                        COALESCE(mt.mtrNumeroTarjeta, sp.sipNombre) AS numeroOubicacion,
                        ma.mdpTipo AS tipoMedioPago,
                        asuId AS idAdmin,
                        casId AS casid
                    FROM MedioDePago ma with(nolock)
                    LEFT JOIN MedioTarjeta mt with(nolock) ON mt.mdpId = ma.mdpId
                    LEFT JOIN MedioEfectivo me with(nolock) ON me.mdpId = ma.mdpId
                    LEFT JOIN sitioPago sp with(nolock) ON me.mefSitioPago = sp.sipid
                    JOIN CuentaAdministradorSubsidio with(nolock) ON casMedioDePago = ma.mdpId
                    JOIN DetalleSubsidioAsignado with(nolock) ON casId = dsaCuentaAdministradorSubsidio
                    JOIN AdministradorSubsidio with(nolock) ON asuId = casAdministradorSubsidio
                    JOIN Persona with(nolock) ON perId = asuPersona
                    WHERE ma.mdpTipo IN (:medioDePago)
                    AND perNumeroIdentificacion = :numeroDocumento
                    AND perTipoIdentificacion = :tipoDocumento
                    AND casTipoTransaccionSubsidio = 'ABONO'
                    AND casEstadoTransaccionSubsidio = 'APLICADO'
                    AND dsaValorTotal &gt; 0
                    AND dsaGrupoFamiliar is not null
                    AND (1 = (case when :numeroTarjeta is null then 1 else 0 end) OR (mt.mtrNumeroTarjeta = :numeroTarjeta))
                ) AS subquery
                GROUP BY medioDePagoId, idAdmin
                FOR JSON PATH, ROOT('MediosDePago')
            )) AS jsonResult
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.medio.tarjeta.traslado"
        result-set-mapping = "PagosSubsidioMonetario.consultar.medio.tarjeta.traslado.mapping">
        <query>
            SELECT DISTINCT m.mdpId AS idMedioDePago, 
                REPLICATE('*', LEN(mt.mtrNumeroTarjeta) - 4) + RIGHT(mt.mtrNumeroTarjeta, 4) AS numeroTarjeta,
                'FALSE' AS seleccionado
                FROM medioDePago m
                    JOIN AdminSubsidioGrupo ON asgMedioDePago = m.mdpId
                    JOIN MedioTarjeta mt ON mt.mdpId = m.mdpId
                    WHERE asgMedioPagoActivo = 1
                    AND asgAdministradorSubsidio = :idAdmin
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.consultar.medio.transferencia.traslado"
        result-set-mapping = "PagosSubsidioMonetario.consultar.medio.transferencia.traslado.mapping">
        <query>
            SELECT DISTINCT m.mdpId AS idMedioDePago,banCodigo AS codigoBanco, banNombre AS nombreBanco, 
                mt.metTipoCuenta AS tipoCuenta, REPLICATE('*', LEN(mt.metNumeroCuenta) - 4) + RIGHT(mt.metNumeroCuenta, 4) AS numeroCuenta,
                mt.metTipoIdentificacionTitular AS tipoIdentificacionTitular,
                mt.metNumeroIdentificacionTitular AS numeroIdentificacionTitular,
                mt.metNombreTitularCuenta AS nombreTitular,
                'FALSE' AS seleccionado
                FROM medioDePago m 
                    JOIN AdminSubsidioGrupo ON asgMedioDePago = m.mdpId
                    JOIN MedioTransferencia mt ON m.mdpId = mt.mdpId
                    JOIN Banco ON mt.metBanco = banId
                    WHERE asgMedioPagoActivo = 1
                    AND asgAdministradorSubsidio = :idAdmin
        </query>
    </named-native-query>
    <named-native-query name="PagosSubsidioMonetario.consultar.medio.efectivo.traslado"
        result-set-mapping = "PagosSubsidioMonetario.consultar.medio.efectivo.traslado.mapping">
        <query>
            SELECT DISTINCT m.mdpId AS idMedioDePago, 
                m.mdpTipo AS tipoMeDioDePago, s.sipNombre AS sitioPago,
                'FALSE' AS seleccionado
                FROM medioDePago m 
                    JOIN AdminSubsidioGrupo ON asgMedioDePago = m.mdpId  
                    JOIN MedioEfectivo me ON me.mdpId = m.mdpId
					JOIN SitioPago s on s.sipId = me.mefSitioPago
                    WHERE asgMedioPagoActivo = 1
                    AND asgAdministradorSubsidio = :idAdmin
        </query>
    </named-native-query>

    <named-query name="PagosSubsidioMonetario.consultar.cuentas.administrador.traslado">
        <query>
            select distinct C 
                from CuentaAdministradorSubsidio C, DetalleSubsidioAsignado D
            where D.idGrupoFamiliar IN ( :idsGrupoFamiliar )
                and C.idMedioDePago IN (:idsMediosDePagoPrevios)
                and C.idAdministradorSubsidio = :idAdmin
                and D.idCuentaAdministradorSubsidio = C.idCuentaAdministradorSubsidio
                and C.estadoTransaccionSubsidio = 'APLICADO'
                and C.tipoTransaccionSubsidio = 'ABONO'
                and D.valorTotal &gt; 0
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.consultar.detalles.cuentas.administrador.traslado">
        <query>
            select distinct D 
                from DetalleSubsidioAsignado D
            where D.idCuentaAdministradorSubsidio = :idCuenta
                and d.idGrupoFamiliar in (:idsGrupos)
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.consultar.medioPago.traslado">
        <query>
            select M 
                from MedioDePago M
            where M.idMedioPago = :idMedioPago
        </query>
    </named-query>


    <named-query
            name="PagosSubsidioMonetario.guardarJsonRespuestaAnibolTraslado">
        <query>
                UPDATE RegistroSolicitudAnibol
                SET  rsaJsonAnibol = :salidaRespuestaAnibol WHERE rsaIdProceso = :idProceso AND rsaTipoOperacionAnibol = 'TRASLADO_DE_SALDO_DESCUENTO'
        </query>
    </named-query>


    <named-query name="PagosSubsidioMonetario.consultar.persona.admin.traslado">
		<query>
			SELECT new com.asopagos.dto.modelo.PersonaModeloDTO(P)
                from Persona P , AdministradorSubsidio A
            WHERE P.idPersona = A.idPersona
                    AND A.idAdministradorSubsidio = :idAdmin
		</query>
	</named-query>

    <named-query name="PagosSubsidioMonetario.consultar.solicitudes.en.proceso.anibol.traslado.saldos">
        <query>
            select R from RegistroSolicitudAnibol R 
            	where R.tipoOperacionAnibol IN ('TRASLADO_DE_SALDO_ABONO','TRASLADO_DE_SALDO_DESCUENTO') 
		            AND R.estadoSolicitudAnibol = 'EN_ESPERA' AND R.idProceso IS NOT NULL
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.consultar.cuenta.administrador.traslado">
        <query>
            select distinct C 
                from CuentaAdministradorSubsidio C
            where C.idCuentaAdministradorSubsidio = :idCuenta
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.consultar.detalles.cuenta.retoma.traslado">
        <query>
            select distinct D 
                from DetalleSubsidioAsignado D
            where D.idCuentaAdministradorSubsidio = :idCuenta
                and d.idDetalleSubsidioAsignado in (:idsDetalle)
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.consultar.bandeja.Actualizar">
        <query>
            select distinct B 
                from BandejaDeTransacciones B
            where B.idBandejaDeTransacciones = :idBandeja
        </query>
    </named-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.datos.admin.registro.bandeja">
        <query>
            SELECT distinct p.perTipoIdentificacion , p.perNumeroIdentificacion 
            from Persona p 
                join AdministradorSubsidio a on a.asuPersona = p.perid
                where a.asuId = :idAdmin
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.bandeja.transacciones"
        result-set-mapping="PagosSubsidioMonetario.consultar.bandeja.transacciones.mapping">
        <query>
            select distinct bdtId as idBandeja
                from CuentaAdministradorSubsidio 
                    join AdministradorSubsidio on asuId = casAdministradorSubsidio 
                    join persona on perId = asuPersona 
                    join BandejaTransacciones on perTipoIdentificacion = bdtTipoIdentificacionPersona and perNumeroIdentificacion = bdtNumeroIdentificacionPersona 
                where bdtProceso = :proceso and bdtEstado = :estado and casId in (:idsCuenta)
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.ultima.solicitud"
        result-set-mapping="PagosSubsidioMonetario.consultar.ultima.solicitud.mapping">
        <query>
            select top 1 s.solId 
                from AdministradorSubsidio a 
                    join persona p on a.asuPersona = p.perId
                    join solicitudNovedadPersona snp on snp.snpPersona = p.perId 
                    join SolicitudNovedad sno on snp.snpSolicitudNovedad = sno.snoId 
                    join Solicitud s on s.solId = sno.snoSolicitudGlobal 
                where s.solTipoTransaccion = 'CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_PRESENCIAL' 
                    AND (CONVERT(DATE,solFechaCreacion)) = (CONVERT(DATE, DATEADD(HH,-5,GETDATE())))
                    AND a.asuId = :idAdmin
                order by s.solFechaRadicacion desc
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.ultima.solicitud.documento"
        result-set-mapping="PagosSubsidioMonetario.consultar.ultima.solicitud.mapping">
        <query>
            select top 1 s.solId 
                from AdministradorSubsidio a 
                    join persona p on a.asuPersona = p.perId
                    join solicitudNovedadPersona snp on snp.snpPersona = p.perId 
                    join SolicitudNovedad sno on snp.snpSolicitudNovedad = sno.snoId 
                    join Solicitud s on s.solId = sno.snoSolicitudGlobal 
                where s.solTipoTransaccion = 'CAMBIAR_MEDIO_DE_PAGO_ADMINISTRADOR_DE_SUBSIDIO_PRESENCIAL' 
                    AND (CONVERT(DATE,solFechaCreacion)) = (CONVERT(DATE, DATEADD(HH,-5,GETDATE())))
                    AND p.perNumeroIdentificacion = :numero
                    AND p.perTipoIdentificacion = :tipo
                order by s.solFechaRadicacion desc
        </query>
    </named-native-query>

    <named-query name="PagosSubsidioMonetario.consultar.bandeja.por.persona">
        <query>
            SELECT B 
                FROM BandejaDeTransacciones B
                WHERE (:proceso IS NULL OR :proceso = '' OR :proceso = 'TODOS' OR B.procesoBandeja = :proceso)
                AND B.numeroIdentificacionPersonaObjetivo = :numero
                AND B.tipoIdentificacionPersonaObjetivo = :tipo
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.consultar.cuenta.reestablecer">
        <query>
            SELECT C 
                FROM CuentaAdministradorSubsidio C
            WHERE C.idCuentaAdministradorSubsidio = :idCuenta
        </query>
    </named-query>

    <named-query name="PagosSubsidioMonetario.consultar.personas.bandeja">
        <query>
            SELECT DISTINCT NEW com.asopagos.dto.modelo.PersonaModeloDTO(P)
                FROM Persona P, BandejaDeTransacciones B
            WHERE B.numeroIdentificacionPersonaObjetivo = P.numeroIdentificacion
                AND B.tipoIdentificacionPersonaObjetivo = P.tipoIdentificacion
                AND (:proceso IS NULL OR :proceso = '' OR :proceso = 'TODOS' OR B.procesoBandeja = :proceso)
                AND (:numeroIdentificacion IS NULL OR :numeroIdentificacion = '' OR P.numeroIdentificacion = :numeroIdentificacion)
                AND (:tipoIdentificacion IS NULL OR :tipoIdentificacion = '' OR P.tipoIdentificacion = :tipoIdentificacion)
                AND (:primerNombre IS NULL OR :primerNombre = '' OR P.primerNombre = :primerNombre)
                AND (:segundoNombre IS NULL OR :segundoNombre = '' OR P.segundoNombre = :segundoNombre)
                AND (:primerApellido IS NULL OR :primerApellido = '' OR P.primerApellido = :primerApellido)
                AND (:segundoApellido IS NULL OR :segundoApellido = '' OR P.segundoApellido = :segundoApellido)
        </query>
    </named-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.detalle.bandeja"
        result-set-mapping="PagosSubsidioMonetario.consultar.detalle.bandeja.mapping">
        <query>
            SELECT DISTINCT b.bdtId as idBandeja, 
                s.solNumeroRadicacion as numeroRadicado,
                (CASE b.bdtProceso 
                        WHEN 'TRASLADO_SALDOS' THEN 'Traslado de saldos' 
                        WHEN 'EXPEDICION' THEN 'Expedicion' 
                        WHEN 'REEXPEDICION' THEN 'Reexpedicion' 
                    END) as tipoNovedad, 
                COALESCE(s.solUsuarioRadicacion, 'USUARIO') as usuarioTransaccion, 
                s.solFechaCreacion as fechaTransaccion,
                b.bdtMedioDePagoOrigen as medioDePagoOrigen, 
                b.bdtMedioDePagoDestino as medioDePagoDestino,
                'TRUE' as cambioMedioDePago,
                COALESCE(SUM(dsaValorTotal) OVER(PARTITION BY dsaGrupofamiliar), 0) as saldoTrasladado
            FROM BandejaTransacciones b
            JOIN solicitud s ON s.solId = b.bdtSolicitud
            JOIN SolicitudNovedad sno ON sno.snoSolicitudGlobal = s.solId
            JOIN SolicitudNovedadPersona snp ON snp.snpSolicitudNovedad = sno.snoId
            LEFT JOIN Persona ON perId = CASE WHEN b.bdtProceso = 'TRASLADO_SALDOS' THEN snp.snpPersona ELSE NULL END
            LEFT JOIN AdministradorSubsidio ON asuPersona = CASE WHEN b.bdtProceso = 'TRASLADO_SALDOS' THEN perId ELSE NULL END
            LEFT JOIN CuentaAdministradorSubsidio ON casAdministradorSubsidio = CASE WHEN b.bdtProceso = 'TRASLADO_SALDOS' THEN asuId ELSE NULL END
            LEFT JOIN DetalleSubsidioAsignado ON dsaCuentaAdministradorSubsidio = CASE WHEN b.bdtProceso = 'TRASLADO_SALDOS' THEN casId ELSE NULL END
            WHERE b.bdtId = :idBandeja
            AND (
                b.bdtProceso != 'TRASLADO_SALDOS' 
                OR (b.bdtProceso = 'TRASLADO_SALDOS' 
                    AND casFechaHoraUltimaModificacion BETWEEN DATEADD(n,-1,b.bdtfechaInicio) AND b.bdtfechaFin
                    AND casOrigenTransaccion = 'TRASLADO_DE_SALDO')
            ) AND dsaValorTotal &gt; 0
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.medio.pagp.detalle.bandeja"
        result-set-mapping="PagosSubsidioMonetario.consultar.medio.pagp.detalle.bandeja.mapping">
        <query>
            select m.mdpId as idMedioDePago, 
                m.mdpTipo as tipoMedioDePago,
                CONCAT(REPLICATE('*', LEN(COALESCE(mt.metNumeroCuenta,mtt.mtrNumeroTarjeta)) - 4), RIGHT(COALESCE(mt.metNumeroCuenta,mtt.mtrNumeroTarjeta),4)) AS numeroCuentaOTarjeta,
                b.banCodigo as codigoBanco,
                COALESCE(b.banNombre, '') as nombreBanco,
                COALESCE(sipNombre, '') as sitioDePago,
                COALESCE(mt.metTipoCuenta, '') as tipoCuenta,
                COALESCE(mt.metNombreTitularCuenta, '') as titularCuenta,
                COALESCE(mt.metNumeroIdentificacionTitular,'') as identificacionTitular
                from medioDePago m 
                    left join MedioTransferencia mt 
                        on m.mdpId = mt.mdpId 
                    left join Banco b 
                        on b.banId = mt.metBanco
                    left join MedioEfectivo me 
                        on m.mdpId = me.mdpId 
                    left join SitioPago 
                        on me.mefSitioPago = sipId
                    left join MedioTarjeta mtt 
                        on m.mdpId = mtt.mdpId 
            where m.mdpId = :idMedio
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.id.medio.pago.tarjeta"
        result-set-mapping="PagosSubsidioMonetario.consultar.id.medio.pago.tarjeta.mapping">
        <query>
            SELECT DISTINCT TOP 1 mdpId as idMedioDePago
                FROM Persona 
                    JOIN AdministradorSubsidio ON perId = asuPersona
                    JOIN AdminSubsidioGrupo ON asgAdministradorSubsidio = asuId
                    JOIN MedioDePago ON mdpId = asgMedioDePago
            WHERE perNumeroIdentificacion = :numeroIdentificacion 
                    AND perTipoIdentificacion = :tipoIdentificacion
            ORDER BY mdpId DESC
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.gestion.transacciones"
        result-set-mapping="PagosSubsidioMonetario.consultar.gestion.transacciones.mapping">
        <query>
            SELECT 
				COALESCE(solNumeroRadicacion,'') AS numeroRadicado,mo.mdpId AS idMedioDePagoOrigen,
				md.mdpId AS idMedioDePagoDestino, bdtfechaInicio AS fechaCreacion, 
				bdtfechaFin AS fechaCambioEstado, bdtEstado AS estado 
			FROM BandejaTransacciones 
				LEFT JOIN Solicitud ON bdtSolicitud = solId 
				LEFT JOIN MedioDePago mo ON mo.mdpId = bdtMedioDePagoOrigen 
				LEFT JOIN MedioDePago md ON md.mdpId = bdtMedioDePagoDestino 
			ORDER BY bdtEstado ASC
        </query>
    </named-native-query>

     <named-native-query name="PagosSubsidioMonetario.consultar.bandeja.transacciones.anibol"
        result-set-mapping="PagosSubsidioMonetario.consultar.bandeja.transacciones.mapping">
        <query>
            select distinct bdtId as idBandeja
                from BandejaTransacciones 
                where bdtProcesoAnibol = :idProceso
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.datos.banco.traslado">
        <query>
            select 
                banNombre,banCodigo 
            from MedioTransferencia mt 
                join Banco on mt.metBanco = banId 
            where mt.mdpId = :idMedioPago
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.datos.tarjeta.traslado">
        <query>
            select perNumeroIdentificacion,perTipoIdentificacion 
				from MedioTarjeta 
					join AdminSubsidioGrupo on asgMedioDePago = mdpId 
					join AdministradorSubsidio on asgAdministradorSubsidio = asuId 
					join Persona on perid = asuPersona 
				where mdpId = :idMedioPago
        </query>
    </named-native-query>

    <named-query name="PagosSubsidioMonetario.buscar.mediosDePagos.traslados.adminSubsidio">
        <description>consulta encargada de buscar los medios de pagos relacionados a un administrador de subsidio
        </description>
        <query>
            SELECT DISTINCT mdp.tipoMediopago
            FROM AdminSubsidioGrupo asg, MedioDePago mdp
            WHERE asg.idAdminSubsidio = :idAdminSubsidio 
            AND asg.idMedioDePago = mdp.idMedioPago
            AND mdp.tipoMediopago &lt;&gt; com.asopagos.enumeraciones.personas.TipoMedioDePagoEnum.EFECTIVO
            AND asg.medioPagoActivo = true
        </query>
    </named-query>

    <named-native-query name="PagosSubsidioMonetario.consultar.parametros.out.registro.operacion"
        result-set-mapping="PagosSubsidioMonetario.consultar.parametros.out.registro.operacion.maping">
        <query>
            SELECT rotParametrosOut
                FROM RegistroOperacionTransaccionSubsidio as r
            WHERE json_value(cast(r.rotParametrosIn as nvarchar(max)), '$.idTransaccionTercerPagador') = :idTransaccionTercerPagador
                and json_value(cast(r.rotParametrosIn as nvarchar(max)), '$.numeroIdentificadorAdmon') = :numeroIdAdmin
                and json_value(cast(r.rotParametrosIn as nvarchar(max)), '$.tipoIdentificadorAdmon') = :tipoIdAdmin
                and json_value(cast(r.rotParametrosIn as nvarchar(max)), '$.usuario') = :usuario
                and json_value(cast(r.rotParametrosIn as nvarchar(max)), '$.idPuntoCobro') = :idPuntoCobro
                and r.rotTipoOperacion = 'SOLICITAR_RETIRO_CONFIRMAR_VALOR_ENTREGADO'
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.listado.valor.real.transaccion.intermedio">
        <query>
            SELECT perNumeroIdentificacion, 
			   perTipoIdentificacion, 
			   CONCAT(perPrimerNombre,' ',perSegundoNombre,' ',perPrimerApellido,' ',perSegundoApellido) as nombreCompleto,
		       cr.casFechaHoraTransaccion,cr.casIdPuntoDeCobro,cr.casIdTransaccionTerceroPagador,cr.casid,cr.casValorRealTransaccion,
                (case 
                    when (select sum(dsavalorTotal) 
                            from CuentaAdministradorSubsidio ca 
                                join DetalleSubsidioAsignado on dsaCuentaAdministradorSubsidio = casId 
                            where ca.casIdCuentaAdmonSubsidioRelacionado = cr.casId ) = ABS(cr.casValorRealTransaccion) 
                        then 'Retiro exitoso' 
                        else 'Retiro incompleto' 
                end ) as estadoTransaccion
                FROM CuentaAdministradorSubsidio cr
                    join AdministradorSubsidio on asuId = casAdministradorSubsidio
                    join Persona on perId = asuPersona
            WHERE castipoTransaccionSubsidio = 'RETIRO' 
                AND cr.casIdPuntoDeCobro = :idPuntoCobro
                AND cr.casIdTransaccionTerceroPagador = :idTransaccion
                AND cr.casNombreTerceroPagado = :usuario
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.actualizar.lista.cuentaAdministradorSubsidio">
        <description></description>
        <query>
            UPDATE CuentaAdministradorSubsidio
            SET casEstadoTransaccionSubsidio = :estado, casEstadoOperacion = :estadoOperacion
            WHERE casId in (:listIds)
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.actualizar.lista.cuentaAdministradorSubsidio.estadoOperacion">
        <description></description>
        <query>
            UPDATE CuentaAdministradorSubsidio
            SET casEstadoTransaccionSubsidio = :estado
            WHERE casId = :id
        </query>
    </named-native-query>

    <named-native-query
            name="PagosSubsidioMonetario.transacciones.en.proceso">
        <description>Consulta que obtiene si una administrador de subsidio tiene una peticion en proceso
        </description>
        <query>
            SELECT COUNT(casid)
            FROM CuentaAdministradorSubsidio cas
            INNER JOIN AdministradorSubsidio ON asuId = cas.casAdministradorSubsidio
            INNER JOIN Persona ON perId	= asuPersona
            WHERE perTipoIdentificacion = :tipoIdAdmin
            and perNumeroIdentificacion = :numeroIdAdmin
            and casEstadoTransaccionSubsidio = 'EN_PROCESO_RETIRO' AND casTipoTransaccionSubsidio = 'RETIRO'
        </query>
    </named-native-query>

    <named-native-query name="PagosSubsidioMonetario.buscar.Abonos.retiro.intermedio">
        <description>Consulta el estado de los abonos objeto de un retiro "intermedio"</description>
        <query>
            SELECT ca.casId, ca.casEstadoTransaccionSubsidio
            FROM CuentaAdministradorSubsidio C
            join CuentaAdministradorSubsidio ca on ca.casIdCuentaAdmonSubsidioRelacionado = c.casid
            WHERE c.castipoTransaccionSubsidio = 'RETIRO'
            AND c.casIdTransaccionTerceroPagador = :idTransaccion
            AND c.casNombreTerceroPagado = :usuario
            AND c.casIdPuntoDeCobro = :idPuntoCobro
        </query>
    </named-native-query>

    <sql-result-set-mapping name="PagosSubsidioMonetario.consultar.grupos.familiares.con.marca.y.admin.maping">
        <column-result name="idGrupoFamiliad" class="java.lang.Long"/>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="PagosSubsidioMonetario.consultar.medio.de.pago.y.grupos.familiares.traslado.mapping">
        <column-result name="jsonResult" class="java.lang.String"/>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="PagosSubsidioMonetario.consultar.medio.tarjeta.traslado.mapping">
		<constructor-result target-class="com.asopagos.dto.modelo.MedioDePagoModeloDTO">
			<column name="idMedioDePago" class="java.lang.Long"/>
			<column name="numeroTarjeta" class="java.lang.String"/>
			<column name="seleccionado" class="java.lang.Boolean"/>
		</constructor-result>
	</sql-result-set-mapping>

    <sql-result-set-mapping name="PagosSubsidioMonetario.consultar.medio.transferencia.traslado.mapping">
		<constructor-result target-class="com.asopagos.dto.modelo.MedioDePagoModeloDTO">
			<column name="idMedioDePago" class="java.lang.Long"/>
			<column name="codigoBanco" class="java.lang.String"/>
			<column name="nombreBanco" class="java.lang.String"/>
			<column name="tipoCuenta" class="java.lang.String"/>
			<column name="numeroCuenta" class="java.lang.String"/>
			<column name="tipoIdentificacionTitular" class="java.lang.String"/>
			<column name="numeroIdentificacionTitular" class="java.lang.String"/>
			<column name="nombreTitular" class="java.lang.String"/>		
            <column name="seleccionado" class="java.lang.Boolean"/>	
		</constructor-result>
	</sql-result-set-mapping>

    <sql-result-set-mapping name="PagosSubsidioMonetario.consultar.medio.efectivo.traslado.mapping">
		<constructor-result target-class="com.asopagos.dto.modelo.MedioDePagoModeloDTO">
			<column name="idMedioDePago" class="java.lang.Long"/>
			<column name="tipoMeDioDePago" class="java.lang.String"/>
			<column name="sitioPago" class="java.lang.String"/>
            <column name="seleccionado" class="java.lang.Boolean"/>	
		</constructor-result>
	</sql-result-set-mapping>

    <sql-result-set-mapping name="PagosSubsidioMonetario.consultar.medio.pagp.detalle.bandeja.mapping">
		<constructor-result target-class="com.asopagos.dto.modelo.MedioDePagoModeloDTO">
			<column name="idMedioDePago" class="java.lang.Long"/>
			<column name="tipoMedioDePago" class="java.lang.String"/>
            <column name="numeroCuentaOTarjeta" class="java.lang.String"/>
            <column name="codigoBanco" class="java.lang.String"/>
            <column name="nombreBanco" class="java.lang.String"/>
            <column name="sitioDePago" class="java.lang.String"/>
            <column name="tipoCuenta" class="java.lang.String"/>
            <column name="titularCuenta" class="java.lang.String"/>
            <column name="identificacionTitular" class="java.lang.String"/>
		</constructor-result>
	</sql-result-set-mapping>

    <sql-result-set-mapping name="PagosSubsidioMonetario.consultar.bandeja.transacciones.mapping">
        <column-result name="idBandeja" class="java.lang.Long"/>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="PagosSubsidioMonetario.consultar.ultima.solicitud.mapping">
        <column-result name="solId" class="java.lang.Long"/>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="PagosSubsidioMonetario.consultar.detalle.bandeja.mapping">
		<constructor-result target-class="com.asopagos.subsidiomonetario.pagos.dto.DetalleBandejaTransaccionesDTO">
			<column name="idBandeja" class="java.lang.Long"/>
			<column name="numeroRadicado" class="java.lang.String"/>
			<column name="tipoNovedad" class="java.lang.String"/>
            <column name="usuarioTransaccion" class="java.lang.String"/>
            <column name="fechaTransaccion" class="java.util.Date"/>
            <column name="medioDePagoOrigen" class="java.lang.Long"/>
            <column name="medioDePagoDestino" class="java.lang.Long"/>
            <column name="saldoTrasladado" class="java.math.BigInteger"/>
		</constructor-result>
	</sql-result-set-mapping>

    <sql-result-set-mapping name="PagosSubsidioMonetario.consultar.id.medio.pago.tarjeta.mapping">
        <column-result name="idMedioDePago" class="java.lang.Long"/>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="PagosSubsidioMonetario.consultar.gestion.transacciones.mapping">
        <constructor-result target-class="com.asopagos.subsidiomonetario.pagos.dto.GestionDeTransaccionesDTO">
            <column name="numeroRadicado" class="java.lang.String"/>
            <column name="idMedioDePagoOrigen" class="java.lang.Long"/>
            <column name="idMedioDePagoDestino" class="java.lang.Long"/>
            <column name="fechaCreacion" class="java.util.Date"/>
            <column name="fechaCambioEstado" class="java.util.Date"/>
            <column name="estado" class="java.lang.String"/>
        </constructor-result>
    </sql-result-set-mapping>

    <sql-result-set-mapping name="PagosSubsidioMonetario.consultar.parametros.out.registro.operacion.maping">
        <column-result name="rotParametrosOut" class="java.lang.String"/>
    </sql-result-set-mapping>
    
</entity-mappings>
