<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd" version="2.1">


    <!-- ESPACIO PARA NAMED QUERIES JPA -->

    <named-query name="Certificados.consultar">
        <description>Consulta certificados por los datos enviados.</description>
        <query>
            SELECT new com.asopagos.comunicados.dto.CertificadoDTO(cer)
            FROM Certificado cer
            WHERE cer.idPersona = :idPersona
            AND cer.tipoCertificado IN (:tipoCertificado)
            AND cer.generadoComoEmpleador = :empleador
        </query>
    </named-query>
    <named-query name="Certificados.consultar.idCertificado">
        <description>Consulta certificados por los datos enviados.</description>
        <query>
            SELECT new com.asopagos.comunicados.dto.CertificadoDTO(cer)
            FROM Certificado cer
            WHERE cer.idCertificado =:idSolicitud
        </query>
    </named-query>
    <named-query name="Comunicados.Comunicado.buscarPorId">
        <description>Consulta Comunicado por id.</description>
        <query>
            SELECT c
            FROM Comunicado c
            LEFT JOIN FETCH c.plantillaComunicado p
            WHERE c.idComunicado =:idComunicado
        </query>
    </named-query>
    <named-query name="Comunicados.buscar.plantilla">
        <description>Consulta sobre la tabla PlantillaComunicado</description>
        <query>
            SELECT plantCom
            FROM PlantillaComunicado plantCom
            WHERE plantCom.etiqueta =:etiqueta
        </query>
    </named-query>
    <named-query name="Comunicados.buscar.variable">
        <description>Consulta sobre la tabla VariableComunicado</description>
        <query>
            SELECT vCom
            FROM VariableComunicado vCom
            WHERE vCom.idPlantillaComunicado =:idPlantillaComunicado
        </query>
    </named-query>
    <named-query name="Comunicados.buscar.constantes.variables">
        <description>Consulta las constantes que hay en la tabla Variables</description>
        <query>
            SELECT v
            FROM VariableComunicado v
            WHERE v.idPlantillaComunicado = :idPlantillaComunicado
            AND v.nombreConstante IS NOT NULL
        </query>
    </named-query>
    <named-query name="Comunicados.buscar.solicitud.instanciaProceso">
        <query>
            Select sol from Solicitud sol where sol.idInstanciaProceso =:idInstancia
        </query>
    </named-query>
    <named-query name="comunicados.buscar.comunicado.por.proceso">
        <query>
            SELECT new com.asopagos.comunicados.dto.EtiquetaDestinatarioDTO(des.etiqueta,desg.rolContacto) FROM
            DestinatarioComunicado des,
            PrioridadDestinatario pri,DestinatarioGrupo desg
            WHERE des.idDestinatarioComunicado=pri.idDestinatarioComunicado and
            pri.idGrupoPrioridad =desg.idGrupoPrioridad and des.proceso = :proceso
        </query>
    </named-query>
    <named-query name="Comunicados.consultar.datoTemporalComunicado">
        <query>
            SELECT dtc FROM DatoTemporalComunicado dtc
            WHERE dtc.idTarea = :idTarea
        </query>
    </named-query>
    <named-query name="Comunicados.cartera.solicitud">
        <query>
            SELECT new com.asopagos.dto.cartera.ConsolidadoCarteraDTO(car.idCartera, per.tipoIdentificacion,
            per.numeroIdentificacion, car.tipoSolicitante, sgcf.tipoAccionCobro)
            FROM Cartera car, Persona per, SolicitudGestionCobroFisico sgcf, DetalleSolicitudGestionCobro dsgc
            WHERE sgcf.solicitudGlobal.idSolicitud =:idSolicitud
            AND sgcf.idSolicitudGestionCobroFisico = dsgc.solicitudPrimeraRemision
            AND car.idCartera = dsgc.idCartera
            AND car.idPersona = per.idPersona
            AND dsgc.enviarPrimeraRemision = TRUE
        </query>
    </named-query>
    <named-query name="Comunicados.Buscar.Comunicado.id.Solicitud">
        <description>Constante que representa la consulta de un comunicado cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT c
            FROM Comunicado c
            LEFT JOIN FETCH c.plantillaComunicado p
            WHERE c.idSolicitud =:idSolicitud
        </query>
    </named-query>
    <named-native-query name="Comunicados.consultar.deuda.cartera.identificador">
		<query>
		SELECT distinct car.carPeriodoDeuda, CD.cadDeudaPresunta, PER.perTipoIdentificacion, PER.perNumeroIdentificacion, PER.perRazonSocial, R.roaValorSalarioMesadaIngresos
            FROM Cartera car
			JOIN CarteraDependiente CD ON CD.cadCartera = CAR.carId
			JOIN Persona PER ON CD.cadPersona= PER.perId
			JOIN Afiliado A ON A.afiPersona = PER.perId
			JOIN Persona P ON P.perId = car.carPersona
			JOIN empresa em on em.empPersona = p.perId
			JOIN empleador e on e.empEmpresa = em.empId
			JOIN RolAfiliado R ON (R.roaAfiliado = A.afiId AND e.empid = r.roaEmpleador)
            WHERE car.carId IN (SELECT cag.cagCartera FROM CarteraAgrupadora cag, Cartera c WHERE c.carId =
            cag.cagCartera AND cag.cagNumeroOperacion = (SELECT ca.cagNumeroOperacion FROM CarteraAgrupadora ca WHERE
            ca.cagCartera=:idCartera))
            AND car.carEstadoOperacion = 'VIGENTE'
            AND car.carDeudaPresunta&gt;0
		</query>
	</named-native-query>
    <named-query name="Comunicados.consulta.cartera">
        <query>
            SELECT per.tipoIdentificacion, per.numeroIdentificacion
            FROM Cartera car, Persona per
            WHERE car.idCartera =:idCartera
            AND car.idPersona = per.idPersona
        </query>
    </named-query>
    <named-query name="Comunicados.consulta.certificado">
        <query>
            SELECT com
            FROM Comunicado com
            WHERE com.plantillaComunicado.etiqueta =:etiqueta
            AND com.idComunicado =:idComunicado
        </query>
    </named-query>
    <named-query name="Comunicados.consulta.certificado.idCertificado">
        <query>
            SELECT com
            FROM Comunicado com
            WHERE com.plantillaComunicado.etiqueta =:etiqueta
            AND com.comCertificado=:idSolicitud
            ORDER BY com.idComunicado DESC
        </query>
    </named-query>
    <named-query name="Comunicados.consulta.notificaciones.persona">
        <description>Constante que representa la consulta de los distintos comunicados enviados a una persona
        </description>
        <query>
            SELECT com FROM Comunicado com, PlantillaComunicado plcomun, Persona per
            WHERE plcomun.idPlantillaComunicado = com.plantillaComunicado.idPlantillaComunicado
            AND com.personaComunicado.idPersona = per.idPersona
            AND per.numeroIdentificacion=:numIdentificacion
            AND per.tipoIdentificacion=:tipoIdentificacion
            ORDER BY com.fechaComunicado DESC
        </query>
    </named-query>
    <named-query name="Comunicados.consulta.notificaciones.pila.persona">
        <description>Constante que representa la consulta de los distintos comunicados enviados a una persona por medio
            del proceso PILA
        </description>
        <query>
            SELECT com FROM Comunicado com, PlantillaComunicado plcomun, Persona per
            WHERE plcomun.idPlantillaComunicado = com.plantillaComunicado.idPlantillaComunicado
            AND com.personaComunicado.idPersona = per.idPersona
            AND per.numeroIdentificacion=:numIdentificacion
            AND per.tipoIdentificacion=:tipoIdentificacion
            AND plcomun.etiqueta LIKE CONCAT(:etiqueta,'%')
            ORDER BY com.fechaComunicado DESC
        </query>
    </named-query>
    <named-query name="Comunicados.consulta.notificaciones.pila.empleador">
        <description>Constante que representa la consulta de los distintos comunicados enviados a un empleador por medio
            del proceso PILA
        </description>
        <query>
            SELECT com FROM Comunicado com, PlantillaComunicado plcomun, Persona per, Empresa emp
            WHERE plcomun.idPlantillaComunicado = com.plantillaComunicado.idPlantillaComunicado
            AND com.empresa = emp.idEmpresa
            AND emp.persona.idPersona = per.idPersona
            AND per.numeroIdentificacion=:numIdentificacion
            AND per.tipoIdentificacion=:tipoIdentificacion
            AND plcomun.etiqueta LIKE CONCAT(:etiqueta,'%')
            ORDER BY com.fechaComunicado DESC
        </query>
    </named-query>
    <named-query name="Consultar.etiqueta.comunicados.enviados.persona">
        <description>Constante que representa la consulta de los distintos comunicados enviados a una persona
        </description>
        <query>
            SELECT DISTINCT com.plantillaComunicado.etiqueta, com.plantillaComunicado.nombre
            FROM Comunicado com
            JOIN com.personaComunicado per
            WHERE com.empleador IS NULL
            AND per.tipoIdentificacion =:tipoIdentificacion
            AND per.numeroIdentificacion =:numeroIdentificacion
        </query>
    </named-query>
    <named-query name="Consultar.comunicados.enviados.persona">
        <description>Constante que representa la consulta de los distintos comunicados enviados a una persona
        </description>
        <query>
            SELECT com
            FROM Comunicado com
            JOIN com.personaComunicado per
            WHERE com.empleador IS NULL
            AND per.tipoIdentificacion =:tipoIdentificacion
            AND per.numeroIdentificacion =:numeroIdentificacion
        </query>
    </named-query>
    <named-query name="Comunicados.consulta.CorreoFront">
        <query>
            SELECT usuarioRadicacion FROM Solicitud
            WHERE idSolicitud = :idSolicitud
        </query>
    </named-query>
    <named-query name="Notificaciones.consultarPersona">
        <query>
            SELECT per FROM Persona per
            LEFT JOIN FETCH per.ubicacionPrincipal ubi
            LEFT JOIN FETCH ubi.municipio mun
            WHERE per.idPersona = :idPersona
        </query>
    </named-query>
    <named-query name="Comunicados.consultar.datoTemporalComunicado.idTarea.idInstanciaProceso">
        <query>
            SELECT dtc FROM DatoTemporalComunicado dtc
            WHERE (dtc.idTarea IS NOT NULL AND dtc.idTarea = :idTarea)
            OR (dtc.idInstanciaProceso IS NOT NULL AND dtc.idInstanciaProceso = :idInstanciaProceso)
        </query>
    </named-query>
    <named-query name="Comunicados.consultar.datoTemporalComunicado.idInstanciaProceso">
        <query>
            SELECT dtc FROM DatoTemporalComunicado dtc
            WHERE dtc.jsonPayload like CONCAT('%',:idInstanciaProceso,'%')
        </query>
    </named-query>
    <!-- ESPACIO PARA NAMED QUERIES NATIVOS -->
    <named-native-query name="Certificados.consultar.estado.aportante.empleador">
        <description>Consulta certificados por los datos enviados.</description>
        <query>
            SELECT apgEstadoAporteAportante, apgPeriodoAporte FROM aporteGeneral
            WHERE apgEmpresa IN (
            SELECT empId FROM empresa INNER JOIN
            Persona ON perId = empPersona
            WHERE perNumeroIdentificacion=:numeroIdentificacion
            AND perTipoIdentificacion=:tipoIdentificacion
            )
            AND (:anio) IN (SELECT value FROM STRING_SPLIT(apgPeriodoAporte, '-'))
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consultar.estado.aportante.persona">
        <description>Consulta certificados por los datos enviados.</description>
        <query>
            SELECT apgEstadoAporteAportante, apgPeriodoAporte FROM aporteGeneral
            WHERE apgPersona IN (
            SELECT perId FROM persona
            WHERE perNumeroIdentificacion=:numeroIdentificacion
            AND perTipoIdentificacion=:tipoIdentificacion
            )
            AND (:anio) IN (SELECT value FROM STRING_SPLIT(apgPeriodoAporte, '-'))
        </query>
    </named-native-query>


    <named-native-query name="Consultar.Historico.estadosEmpresaCore">
        <query>
            select eecEstadoAfiliacion, eecFechaCambioEstado
            from estadoAfiliacionEmpleadorCaja
            where eecPersona = :idPersona
            order by eecFechaCambioEstado desc
        </query>
    </named-native-query>
    <named-native-query name="Consultar.Historico.estadosPersonaCore">
        <query>
            select eacEstadoAfiliacion, eacFechaCambioEstado
            from estadoAfiliacionPersonaCaja
            where eacPersona = :idPersona
            order by eacFechaCambioEstado desc
        </query>
    </named-native-query>
    <named-native-query name="Consultar.HistoricoAfiliacionEmpleadorEnCore">
        <query>
            SELECT eecPersona,
            eecEstadoAfiliacion,
            fechaCambio,
            eecMotivoDesafiliacion,
            (CASE WHEN numeroTrabajadores IS NULL AND eecMotivoDesafiliacion NOT IN ('CERO_TRABAJADORES_NOVEDAD_INTERNA', 'CERO_TRABAJADORES_SOLICITUD_EMPLEADOR') THEN (
            SELECT COUNT(*) as numeroTrabajadores FROM RolAfiliado roa
            JOIN empleador empl ON empl.empId = roa.roaEmpleador
            JOIN empresa emp ON emp.empId = empl.empEmpresa
            JOIN persona per ON per.perId = emp.empPersona
            WHERE per.perNumeroIdentificacion = :numeroIdEmpleador
            AND per.perTipoIdentificacion = :tipoIdEmpleador
            AND roa.roaEstadoAfiliado = 'ACTIVO'
            ) ELSE numeroTrabajadores END) as numeroTrabajadores
            FROM(
            SELECT eecPersona,eecEstadoAfiliacion,
            eecFechaCambioEstado as fechaCambio,
            eecMotivoDesafiliacion,
            eecNumeroTrabajadores as numeroTrabajadores
            FROM EstadoAfiliacionEmpleadorCaja join Persona on perId = eecPersona
            WHERE perTipoIdentificacion = :tipoIdEmpleador
            AND perNumeroIdentificacion = :numeroIdEmpleador
            ) a
        </query>
    </named-native-query>
    <named-native-query name="Consultar.HistoricoEstadosEmpleadorCore">
        <query>
            SELECT
            eecEstadoAfiliacion,
            eecFechaCambioEstado
            FROM EstadoAfiliacionEmpleadorCaja
            JOIN Persona ON perId = eecPersona
            WHERE perTipoIdentificacion = :tipoIdEmpleador
            AND perNumeroIdentificacion = :numeroIdEmpleador
            <!-- SELECT eecEstadoAfiliacion,fechaCambio FROM(
			SELECT eecEstadoAfiliacion,
					MIN(eecFechaCambioEstado) OVER(PARTITION BY eecEstadoAfiliacion) as fechaCambio
			FROM EstadoAfiliacionEmpleadorCaja join Persona on perId = eecPersona
			WHERE perTipoIdentificacion = :tipoIdEmpleador
			AND perNumeroIdentificacion = :numeroIdEmpleador
			AND eecEstadoAfiliacion IS NOT NULL
			) a GROUP BY eecEstadoAfiliacion,fechaCambio
			ORDER BY fechaCambio -->
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consultar.estadoEmpleador">
        <query>
            SELECT
            empl.empEstadoEmpleador
            FROM Empresa empr
            INNER JOIN Empleador empl ON empl.empEmpresa = empr.empId
            WHERE empr.empPersona = :idPersona
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consultar.historicoAfiliacionEmpleador">
        <description>Consulta los estados de afiliacion de un empleador, solo se tienen en cuenta estados activos e
            inactivos
        </description>
        <query>
            SELECT
            eecEstadoAfiliacion,
            eecFechaCambioEstado
            FROM EstadoAfiliacionEmpleadorCaja eec
            WHERE eecPersona = :idPersona
            AND eecEstadoAfiliacion IN ('ACTIVO','INACTIVO')
            ORDER BY eecFechaCambioEstado
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consultar.historicoAfiliacionDependiente">
        <description>Consulta los estados de afiliacion de un trabajador dependiente, solo se tienen en cuenta estados
            activos e inactivos
        </description>
        <query>
            SELECT
            eae.eaeEstadoAfiliacion,
            eae.eaeFechaCambioEstado,
            'TRABAJADOR_DEPENDIENTE'
            FROM EstadoAfiliacionPersonaEmpresa eae
            WHERE eae.eaePersona = :idPersona
            AND eae.eaeEmpleador = :idEmpleador
            AND eae.eaeEstadoAfiliacion IN ('ACTIVO','INACTIVO')
            ORDER BY eae.eaeFechaCambioEstado
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consultar.historicoAfiliacionPensionado">
        <description>Consulta los estados de afiliacion de un pensionado, solo se tienen en cuenta estados activos e
            inactivos
        </description>
        <query>
            SELECT
            eap.eapEstadoAfiliacion,
            eap.eapFechaCambioEstado,
            'PENSIONADO'
            FROM EstadoAfiliacionPersonaPensionado eap
            WHERE eap.eapPersona = :idPersona
            AND eap.eapEstadoAfiliacion IN ('ACTIVO','INACTIVO')
            ORDER BY eap.eapFechaCambioEstado
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consultar.historicoAfiliacionIndependiente">
        <description>Consulta los estados de afiliacion de un trabajador independiente, solo se tienen en cuenta estados
            activos e inactivos
        </description>
        <query>
            SELECT
            eai.eaiEstadoAfiliacion,
            eai.eaiFechaCambioEstado,
            'TRABAJADOR_INDEPENDIENTE'
            FROM EstadoAfiliacionPersonaIndependiente eai
            WHERE eai.eaiPersona = :idPersona
            AND eai.eaiEstadoAfiliacion IN ('ACTIVO','INACTIVO')
            ORDER BY eai.eaiFechaCambioEstado
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consultar.estadoDependiente">
        <description>Consulta el estado actual de un trabajador dependiente</description>
        <query>
            SELECT
            roaEstadoAfiliado
            FROM Afiliado afi
            INNER JOIN RolAfiliado roa ON roa.roaAfiliado = afi.afiId
            WHERE afi.afiPersona = :idPersona
            AND roa.roaEmpleador = :idEmpleador
            AND roa.roaTipoAfiliado = :tipoAfiliado
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consultar.estadoIndependientePensionado">
        <description>Consulta el estado actual de un trabajador independiente o pensionado</description>
        <query>
            SELECT
            roaEstadoAfiliado
            FROM Afiliado afi
            INNER JOIN RolAfiliado roa ON roa.roaAfiliado = afi.afiId
            WHERE afi.afiPersona = :idPersona
            AND roa.roaTipoAfiliado = :tipoAfiliado
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consulta.estadoActualAfiliadoDependienteCore">
        <query>
            SELECT * FROM vw_estadoAfiliacionPersonaEmpresa
            WHERE perTipoIdentificacionEmpleador = :tipoIdEmpleador
            AND perNumeroIdentificacionEmpleador = :numeroIdEmpleador
            AND perTipoIdentificacion = :tipoIdAfiliado
            AND perNumeroIdentificacion = :numeroIdAfiliado
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consulta.estadoActualAfiliadoIndependienteCore">
        <query>
            SELECT * FROM vw_estadoAfiliacionPersonaCaja
            WHERE perTipoIdentificacion = :tipoIdAfiliado
            AND perNumeroIdentificacion = :numeroIdAfiliado
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consulta.estadoActualPensionadoCore">
        <query>
            SELECT * FROM vw_estadoAfiliacionPersonaPensionado
            WHERE perTipoIdentificacion = :tipoIdAfiliado
            AND perNumeroIdentificacion = :numeroIdAfiliado
        </query>
    </named-native-query>
    <named-native-query name="Ceritifcados.consulta.estadoActualEmpleadorCore">
        <query>
            SELECT
            per.perId,
            eaec.empEstadoEmpleador,
            empl.empMotivoDesafiliacion,
            (SELECT COUNT(*) FROM RolAfiliado where roaEmpleador = empl.empId where roaEstadoAfiliado = 'ACTIVO')
            FROM vw_estadoAfiliacionEmpleadorCaja eaec
            JOIN persona per ON eaec.perId = per.perId
            LEFT JOIN empresa emp ON emp.empPersona = per.perId
            LEFT JOIN empleador empl ON empl.empEmpresa = emp.empId
            WHERE eaec.perTipoIdentificacion = :tipoIdEmpleador
            AND eaec.perNumeroIdentificacion = :numeroIdEmpleador
        </query>
    </named-native-query>

    <named-native-query name="Certificados.consulta.idPersona">
        <description>Consulta el id de una persona y la info de la afiliacion actual</description>
        <query>
            select top(1)
            perId,
            roaFechaIngreso,
            roaFechaRetiro,
            solCanalRecepcion,
            solNumeroRadicacion,
            solInstanciaProceso,
            solId,
            roaClaseIndependiente
            from solicitudAfiliacionPersona
            join solicitud on sapSolicitudGlobal = solId
            join rolAfiliado on sapRolAfiliado = roaId
            join afiliado on roaAfiliado = afiId
            join persona on afiPersona = perId
            where perTipoIdentificacion = :tipoIdentificacion and perNumeroIdentificacion = :numeroIdentificacion
            order by solId desc
        </query>
    </named-native-query>

    <named-native-query name="Comunicados.consulta.idSolicitud">
        <query>
            select
            solInstanciaProceso,
            solId
            from Solicitud
            where solNumeroRadicacion = :numeroRadicado
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionDeResultadosDeSolicitudDeNovedadEmpleador">
        <description>
            Consulta para resolver las variables del comunicado del proceso 1.3.1
            enum: NTF_NVD_EMP
        </description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            GETDATE() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            perRpl.perPrimerNombre +' '+ CASE WHEN perRpl.perSegundoNombre IS NOT NULL THEN perRpl.perSegundoNombre ELSE
            '' END + ' ' + perRpl.perPrimerApellido + ' ' +
            CASE WHEN perRpl.perSegundoApellido IS NOT NULL THEN perRpl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' as razonSocialNombre,
            CASE WHEN ISNULL(perEmp.perPrimerNombre, '') = '' THEN perEmp.perRazonSocial
            ELSE (
            perEmp.perPrimerNombre +
            CASE WHEN perEmp.perSegundoNombre IS NULL THEN ' ' ELSE ' '+perEmp.perSegundoNombre+' ' END +
            perEmp.perPrimerApellido +
            CASE WHEN perEmp.perSegundoApellido IS NULL THEN '' ELSE ' '+perEmp.perSegundoApellido END
            ) END AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'resultadoNovedad' AS resultadoNovedad,
            sno.snoEstadoSolicitud AS valorResultadoNovedad,
            'departamento' AS departamento,
            dep.depNombre AS valorDepartamento,
            'municipioEmpleador' AS municipioEmpleador,
            mun.munNombre AS valorMunicipioEmpleador,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN perEmp.perDigitoVerificacion IS NOT NULL THEN
            perEmp.perNumeroIdentificacion+'-'+CAST(perEmp.perDigitoVerificacion AS VARCHAR(1)) ELSE
            perEmp.perNumeroIdentificacion END AS valorNumeroIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            perRpl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            perEmp.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            perRpl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            sol.solNumeroRadicacion as valorNumeroDeRadicacion
            FROM Solicitud sol
            INNER JOIN SolicitudNovedad sno ON sno.snoSolicitudGlobal = sol.solId
            INNER JOIN SolicitudNovedadEmpleador sne ON sne.sneIdSolicitudNovedad = sno.snoId
            INNER JOIN Empleador empl ON empl.empId = sne.sneIdEmpleador
            INNER JOIN Empresa empr ON empr.empId = empl.empEmpresa
            INNER JOIN Persona perEmp ON perEmp.perId = empr.empPersona
            INNER JOIN Persona perRpl ON perRpl.perId = empr.empRepresentanteLegal
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empr.empId AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionParaRequerirSubsanacionNovedadEmpleador">
        <description>NTF_PARA_SBC_NVD_EMP
            AND ubiE.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'---com.asopagos.enumeraciones.core.TipoUbicacionEnum.ENVIO_CORRESPONDENCIA
        </description>
        <query>
            SELECT
            'ciudadSolicitud' AS ciudadSolicitud,
            sol.solCiudadUsuarioRadicacion AS valorCiudadSolicitud,
            'fechaDelSistema' AS fechaDelSistema,
            getDate() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' AS nombreYApellidosRepresentanteLegal,
            perRpl.perPrimerNombre +' '+ CASE WHEN perRpl.perSegundoNombre IS NOT NULL THEN perRpl.perSegundoNombre ELSE
            '' END + ' ' + perRpl.perPrimerApellido + ' ' +
            CASE WHEN perRpl.perSegundoApellido IS NOT NULL THEN perRpl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            perRpl.perRazonSocial AS valorRazonSocialNombre,
            'direccionEmpleador' AS direccionEmpleador,
            ubi.ubiDireccionFisica AS valorDireccionEmpleador,
            'telefonoEmpleador' AS telefonoEmpleador,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefonoEmpleador,
            'resultadoNovedad' AS resultadoNovedad,
            sno.snoEstadoSolicitud AS valorResultadoNovedad,
            'departamento' AS departamento,
            dep.depNombre AS valorDepartamento,
            'municipioEmpleador' AS municipioEmpleador,
            mun.munNombre AS valorMunicipioEmpleador,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN perEmpr.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(perEmpr.perNumeroIdentificacion,'-',perEmpr.perDigitoVerificacion) ELSE
            perEmpr.perNumeroIdentificacion END AS valorNumeroIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            perRpl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            perEmpr.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            perRpl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal
            FROM Solicitud sol
            INNER JOIN SolicitudNovedad sno ON sno.snoSolicitudGlobal = sol.solId
            INNER JOIN SolicitudNovedadEmpleador sne ON sne.sneIdSolicitudNovedad = sno.snoId
            INNER JOIN Empleador empl ON empl.empId = sne.sneIdEmpleador
            INNER JOIN Empresa empr ON empr.empId = empl.empEmpresa
            INNER JOIN Persona perEmpr ON perEmpr.perId = empr.empId
            INNER JOIN Persona perRpl ON perRpl.perId = empr.empRepresentanteLegal
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empr.empId AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionRadicacionSolicitudNovedadEmpleador">
        <description>
            Consulta para resolver las variables del comunicado del proceso 1.3.1
            enum: NTF_RAD_NVD_EMP
        </description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            GETDATE() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' AS nombreYApellidosRepresentanteLegal,
            CONCAT(perRpl.perPrimerNombre,ISNULL(' '+ perRpl.perSegundoNombre + ' ','
            '),perRpl.perPrimerApellido,ISNULL(' '+perRpl.perSegundoApellido,'')) AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            perRpl.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'resultadoNovedad' AS resultadoNovedad,
            sno.snoEstadoSolicitud AS valorResultadoNovedad,
            'nombreEmpresa' AS nombreEmpresa,
            empr.empNombreComercial AS valorNombreEmpresa,
            'departamento' AS departamento,
            dep.depNombre AS valorDepartamento,
            'municipioEmpleador' AS municipioEmpleador,
            mun.munNombre AS valorMunicipioEmpleador,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN perEmp.perDigitoVerificacion IS NOT NULL THEN
            perEmp.perNumeroIdentificacion+'-'+CAST(perEmp.perDigitoVerificacion AS VARCHAR(1)) ELSE
            perEmp.perNumeroIdentificacion END AS valorNumeroIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            perRpl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            perEmp.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            perRpl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            sol.solNumeroRadicacion as valorNumeroDeRadicacion
            FROM Solicitud sol
            INNER JOIN SolicitudNovedad sno ON sno.snoSolicitudGlobal = sol.solId
            INNER JOIN SolicitudNovedadEmpleador sne ON sne.sneIdSolicitudNovedad = sno.snoId
            INNER JOIN Empleador empl ON empl.empId = sne.sneIdEmpleador
            INNER JOIN Empresa empr ON empr.empId = empl.empEmpresa
            INNER JOIN Persona perEmp ON perEmp.perId = empr.empPersona
            INNER JOIN Persona perRpl ON perRpl.perId = empr.empRepresentanteLegal
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empr.empId AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.rechazoSolicitudNovedadEmpleadorProductoNoConformeNoSubsanable">
        <description>RCHZ_NVD_EMP_PROD_NSUBLE</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            GETDATE() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' AS nombreYApellidosRepresentanteLegal,
            perRpl.perPrimerNombre +' '+ CASE WHEN perRpl.perSegundoNombre IS NOT NULL THEN perRpl.perSegundoNombre ELSE
            '' END + ' ' + perRpl.perPrimerApellido + ' ' +
            CASE WHEN perRpl.perSegundoApellido IS NOT NULL THEN perRpl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            perRpl.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'productoNoConformeNoSubsanado' AS productoNoConformeNoSubsanado,
            'GrupoCampo: '+pncGrupoCampos+', '+
            'Campo: '+pncCampo+', '+
            'TipoError: '+pncTipoError AS valorProductoNoConformeNoSubsanado,
            'departamento' AS departamento,
            dep.depNombre AS valorDepartamento,
            'municipioEmpleador' AS municipioEmpleador,
            mun.munNombre AS valorMunicipioEmpleador,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            per.perNumeroIdentificacion+'-'+CAST(per.perDigitoVerificacion AS VARCHAR(1)) ELSE
            per.perNumeroIdentificacion END AS valorNumeroIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            perRpl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            perRpl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            sol.solNumeroRadicacion as valorNumeroDeRadicacion
            FROM Solicitud sol
            INNER JOIN ProductoNoConforme pnc ON pnc.pncSolicitud = sol.solId
            INNER JOIN SolicitudNovedad sno ON sno.snoSolicitudGlobal = sol.solId
            INNER JOIN SolicitudNovedadEmpleador sne ON sne.sneIdSolicitudNovedad = sno.snoId
            INNER JOIN Empleador empl ON empl.empId = sne.sneIdEmpleador
            INNER JOIN Empresa empr ON empr.empId = empl.empEmpresa
            INNER JOIN Persona per ON per.perId = empr.empPersona
            INNER JOIN Persona perRpl ON perRpl.perId = empr.empRepresentanteLegal
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empEmpresa AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.solicitudConfirmacionRetiroAportante">
        <description>CNFR_RET_APRT, DSTMTO_NVD_RET_APRT</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            GETDATE() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' AS nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' '+ CASE WHEN prl.perSegundoNombre IS NOT NULL THEN prl.perSegundoNombre ELSE '' END +
            ' ' + prl.perPrimerApellido + ' ' +
            CASE WHEN prl.perSegundoApellido IS NOT NULL THEN prl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            CASE WHEN perTra.perId IS NOT NULL THEN perTra.perRazonSocial ELSE perEmpr.perRazonSocial END AS
            valorRazonSocialNombre,
            'direccionEmpleador' AS direccionEmpleador,
            CASE WHEN empl.empId IS NOT NULL THEN ubi.ubiDireccionFisica ELSE '' END AS valorDireccionEmpleador,
            'telefonoEmpleador' AS telefonoEmpleador,
            CASE WHEN empl.empId IS NOT NULL THEN CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END ELSE '' END AS valorTelefonoEmpleador,
            'novedadEmpleador' AS novedadEmpleador,
            nov.novTipoTransaccion AS valorNovedadEmpleador,
            'departamento' AS departamento,
            CASE WHEN snp.snpPersona IS NOT NULL THEN dep.depNombre ELSE '' END AS valorDepartamento,
            'departamentoEmpleador' AS departamentoEmpleador,
            CASE WHEN empl.empId IS NOT NULL THEN dep.depNombre ELSE '' END AS valorDepartamentoEmpleador,
            'municipio' AS municipio,
            CASE WHEN snp.snpPersona IS NOT NULL THEN mun.munNombre ELSE '' END AS valorMunicipio,
            'municipioEmpleador' AS municipioEmpleador,
            CASE WHEN empl.empId IS NOT NULL THEN mun.munNombre ELSE '' END AS valorMunicipioEmpleador,
            'nombresYApellidosEmpleador' AS nombresYApellidosEmpleador,
            perEmpr.perPrimerNombre +' '+ CASE WHEN perEmpr.perSegundoNombre IS NOT NULL THEN perEmpr.perSegundoNombre
            ELSE '' END + ' ' + perEmpr.perPrimerApellido + ' ' +
            CASE WHEN perEmpr.perSegundoApellido IS NOT NULL THEN perEmpr.perSegundoApellido ELSE '' END AS
            valorNombresYApellidosEmpleador,
            'nombresYApellidosTrabajador' AS nombresYApellidosTrabajador,
            perTra.perPrimerNombre +' '+ CASE WHEN perTra.perSegundoNombre IS NOT NULL THEN perTra.perSegundoNombre ELSE
            '' END + ' ' + perTra.perPrimerApellido + ' ' +
            CASE WHEN perTra.perSegundoApellido IS NOT NULL THEN perTra.perSegundoApellido ELSE '' END AS
            valorNombresYApellidosTrabajador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'numeroIdentificacionTrabajador' AS numeroIdentificacionTrabajador,
            perTra.perNumeroIdentificacion AS valorNumeroIdentificacionTrabajador,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN perEmpr.perDigitoVerificacion IS NOT NULL THEN perEmpr.perNumeroIdentificacion +'-'+
            CAST(perEmpr.perDigitoVerificacion AS VARCHAR(1)) ELSE perEmpr.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            perEmpr.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'tipoIdentificacionTrabajador' AS tipoIdentificacionTrabajador,
            perTra.perTipoIdentificacion AS valorTipoIdentificacionTrabajador,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            sol.solNumeroRadicacion as valorNumeroDeRadicacion
            FROM Solicitud sol
            INNER JOIN SolicitudNovedad sno ON sno.snoSolicitudGlobal = sol.solId
            INNER JOIN ParametrizacionNovedad nov ON nov.novId = sno.snoNovedad
            LEFT JOIN SolicitudNovedadEmpleador sne ON sne.sneIdSolicitudNovedad = sno.snoId
            LEFT JOIN Empleador empl ON empl.empId = sne.sneIdEmpleador
            LEFT JOIN Empresa empr ON empr.empId = empl.empEmpresa
            LEFT JOIN Persona perEmpr ON perEmpr.perId = empr.empPersona
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empr.empId AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Persona prl ON prl.perId = empr.empRepresentanteLegal
            LEFT JOIN SolicitudNovedadPersona snp ON snp.snpSolicitudNovedad = sno.snoId
            LEFT JOIN Persona perTra ON perTra.perId = snp.snpPersona
            LEFT JOIN Ubicacion ubi ON ((ubi.ubiId = ube.ubeUbicacion) OR (ubi.ubiId = perTra.perUbicacionPrincipal))
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.solicitudConfirmacionSubsanacionDepWeb">
        <description>NTF_PARA_SBC_NVD_WEB_TRB_EMP</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            GETDATE() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' AS nombreYApellidosRepresentanteLegal,
            per.perPrimerNombre +' '+ CASE WHEN per.perSegundoNombre IS NOT NULL THEN per.perSegundoNombre ELSE '' END +
            ' '+ per.perPrimerApellido + ' '+
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN per.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            perEmp.perRazonSocial AS valorRazonSocialNombre,
            'direccionEmpleador' AS direccionEmpleador,
            ubi.ubiDireccionFisica AS valorDireccionEmpleador,
            'telefonoEmpleador' AS telefonoEmpleador,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefonoEmpleador,
            'novedadEmpleador' AS novedadEmpleador,
            nov.novTipoTransaccion AS valorNovedadEmpleador,
            'departamento' AS departamento,
            dep.depNombre AS valorDepartamento,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN perEmp.perDigitoVerificacion IS NOT NULL THEN perEmp.perNumeroIdentificacion +'-'+
            CAST(perEmp.perDigitoVerificacion AS VARCHAR(1)) ELSE perEmp.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'numeroIdentificacionTrabajador' AS numeroIdentificacionTrabajador,
            perTra.perNumeroIdentificacion AS valorNumeroIdentificacionTrabajador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            perEmp.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            per.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'tipoIdentificacionTrabajador' AS tipoIdentificacionTrabajador,
            perTra.perTipoIdentificacion AS valorTipoIdentificacionTrabajador
            FROM Solicitud sol
            JOIN SolicitudNovedad sno ON sno.snoSolicitudGlobal = sol.solId
            JOIN ParametrizacionNovedad nov ON sno.snoNovedad = nov.novId
            JOIN SolicitudNovedadPersona snp ON snp.snpSolicitudNovedad = sno.snoId
            JOIN RolAfiliado roa ON snp.snpRolAfiliado = roa.roaId
            JOIN Afiliado afi ON afi.afiId = roa.roaAfiliado
            JOIN Persona perTra ON perTra.perId = afi.afiPersona
            JOIN Empleador empl ON roa.roaEmpleador = empl.empId
            JOIN Empresa emp ON empl.empEmpresa = emp.empId
            JOIN UbicacionEmpresa ube ON emp.empId = ube.ubeEmpresa
            JOIN Ubicacion ubi ON ube.ubeUbicacion = ubi.ubiId
            JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            JOIN Departamento dep ON dep.depId = mun.munDepartamento
            JOIN Persona per ON emp.empRepresentanteLegal = per.perId
            JOIN Persona perEmp ON emp.empPersona = perEmp.perId
            WHERE ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            AND sol.solId = :idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="plantilla.notificacionDeResultadosRadicacionSolicitudDepWeb">
        <description>NTF_RAD_NVD_WEB_TRB_EMP, NTF_NVD_WEB_TRB_EMP,
            NTF_APRB_NVD_WEB_TRB_EMP, RCHZ_NVD_WEB_TRB_REP_POR_EMP_POR_PROD_NSUBLE
        </description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            getDate() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' AS nombreYApellidosRepresentanteLegal,
            CONCAT(per.perPrimerNombre, ' ',
            CASE WHEN per.perSegundoNombre IS NOT NULL THEN per.perSegundoNombre ELSE '' END,
            per.perPrimerApellido, ' ',
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN per.perSegundoApellido ELSE '' END)
            AS valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            perEmp.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'resultadoNovedad' AS resultadoNovedad,
            sno.snoEstadoSolicitud AS valorResultadoNovedad,
            'solicitudDeNovedad' AS solicitudDeNovedad,
            sol.solNumeroRadicacion AS valorSolicitudDeNovedad,
            'departamento' AS departamento,
            dep.depNombre AS valorDepartamento,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN perEmp.perDigitoVerificacion IS NOT NULL THEN perEmp.perNumeroIdentificacion +'-'+
            CAST(perEmp.perDigitoVerificacion AS VARCHAR(1)) ELSE perEmp.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN per.perNumeroIdentificacion +'-'+
            CAST(per.perDigitoVerificacion AS VARCHAR(1)) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionRepresentanteLegal,
            'numeroIdentificacionTrabajador' AS numeroIdentificacionTrabajador,
            perTra.perNumeroIdentificacion AS valorNumeroIdentificacionTrabajador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            perEmp.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            per.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'tipoIdentificacionTrabajador' AS tipoIdentificacionTrabajador,
            perTra.perTipoIdentificacion AS valorTipoIdentificacionTrabajador
            FROM Solicitud sol
            JOIN SolicitudNovedad sno ON sno.snoSolicitudGlobal = sol.solId
            JOIN SolicitudNovedadPersona snp ON snp.snpSolicitudNovedad = sno.snoId
            JOIN RolAfiliado roa ON snp.snpRolAfiliado = roa.roaId
            JOIN Afiliado afi ON afi.afiId = roa.roaAfiliado
            JOIN Persona perTra ON perTra.perId = afi.afiPersona
            JOIN Empleador empl ON roa.roaEmpleador = empl.empId
            JOIN Empresa emp ON empl.empEmpresa = emp.empId
            JOIN UbicacionEmpresa ube ON emp.empId = ube.ubeEmpresa
            JOIN Ubicacion ubi ON ube.ubeUbicacion = ubi.ubiId
            JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            JOIN Departamento dep ON dep.depId = mun.munDepartamento
            JOIN Persona per ON emp.empRepresentanteLegal = per.perId
            JOIN Persona perEmp ON emp.empPersona = perEmp.perId
            WHERE ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            AND sol.solId = :idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="plantilla.rechazoSolicitudNovedadPersonaProductoNoConformeNoSubsanable">
        <description>RCHZ_NVD_PERS_PROD_NSUBLE</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            GETDATE() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' AS nombresYApellidosDelAfiliadoPrincipal,
            CONCAT(per.perPrimerNombre,ISNULL(' '+ per.perSegundoNombre + ' ',' '),per.perPrimerApellido,ISNULL('
            '+per.perSegundoApellido,'')) AS valorNombresYApellidosDelAfiliadoPrincipal,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'resultadoNovedad' AS resultadoNovedad,
            sno.snoEstadoSolicitud AS valorResultadoNovedad,
            'productoNoConformeNoSubsanado' AS productoNoConformeNoSubsanado,
            'GrupoCampo: '+pncGrupoCampos+', '+
            'Campo: '+pncCampo+', '+
            'TipoError: '+pncTipoError AS valorProductoNoConformeNoSubsanado,
            'departamento' AS departamento,
            dep.depNombre AS valorDepartamento,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio,
            'numeroIdentificacion' AS numeroIdentificacion,
            per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'tipoIdentificacion' AS tipoIdentificacion,
            per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            sol.solNumeroRadicacion as valorNumeroDeRadicacion
            FROM Solicitud sol
            INNER JOIN ProductoNoConforme pnc ON pnc.pncSolicitud = sol.solId
            INNER JOIN SolicitudNovedad sno ON sno.snoSolicitudGlobal = sol.solId
            INNER JOIN SolicitudNovedadPersona snp ON snp.snpSolicitudNovedad = sno.snoId
            INNER JOIN Persona per ON per.perId = snp.snpPersona
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionResultadosSolicitudNovedadPersonas">
        <description>NTF_NVD_PERS</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            GETDATE() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' AS nombresYApellidosDelAfiliadoPrincipal,
            per.perPrimerNombre +' '+ CASE WHEN per.perSegundoNombre IS NOT NULL THEN per.perSegundoNombre ELSE '' END +
            ' ' + per.perPrimerApellido + ' ' +
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN per.perSegundoApellido ELSE '' END AS
            valorNombresYApellidosDelAfiliadoPrincipal,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'resultadoNovedad' AS resultadoNovedad,
            sno.snoEstadoSolicitud AS valorResultadoNovedad,
            'solicitudDeNovedad' AS solicitudDeNovedad,
            sol.solNumeroRadicacion AS valorSolicitudDeNovedad,
            'departamento' AS departamento,
            dep.depNombre AS valorDepartamento,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio,
            'numeroIdentificacion' AS numeroIdentificacion,
            per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'tipoIdentificacion' AS tipoIdentificacion,
            per.perTipoIdentificacion AS valorTipoIdentificacion
            FROM Solicitud sol
            INNER JOIN SolicitudNovedad sno ON sno.snoSolicitudGlobal = sol.solId
            INNER JOIN SolicitudNovedadPersona snp ON snp.snpSolicitudNovedad = sno.snoId
            INNER JOIN Persona per ON per.perId = snp.snpPersona
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionRadicacionSolicitudNovedadPersona">
        <description>NTF_RAD_NVD_PER</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            GETDATE() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' AS nombresYApellidosDelAfiliadoPrincipal,
            CONCAT(per.perPrimerNombre,ISNULL(' '+ per.perSegundoNombre + ' ',' '),per.perPrimerApellido,ISNULL('
            '+per.perSegundoApellido,'')) AS valorNombresYApellidosDelAfiliadoPrincipal,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'solicitudDeNovedad' AS solicitudDeNovedad,
            sol.solNumeroRadicacion AS valorSolicitudDeNovedad,
            'departamento' AS departamento,
            dep.depNombre AS valorDepartamento,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio,
            'numeroIdentificacion' AS numeroIdentificacion,
            per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'tipoIdentificacion' AS tipoIdentificacion,
            per.perTipoIdentificacion AS valorTipoIdentificacion
            FROM Solicitud sol
            INNER JOIN SolicitudNovedad sno ON sno.snoSolicitudGlobal = sol.solId
            INNER JOIN SolicitudNovedadPersona snp ON snp.snpSolicitudNovedad = sno.snoId
            INNER JOIN Persona per ON per.perId = snp.snpPersona
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionRequerirSubsanacionNovedadPersonas">
        <description>NTF_PARA_SBC_NVD_PERS</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            GETDATE() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' AS nombresYApellidosDelAfiliadoPrincipal,
            per.perPrimerNombre +' '+ CASE WHEN per.perSegundoNombre IS NOT NULL THEN per.perSegundoNombre ELSE '' END +
            ' ' + per.perPrimerApellido + ' ' +
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN per.perSegundoApellido ELSE '' END AS
            valorNombresYApellidosDelAfiliadoPrincipal,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'resultadoNovedad' AS resultadoNovedad,
            sno.snoEstadoSolicitud AS valorResultadoNovedad,
            'departamento' AS departamento,
            dep.depNombre AS valorDepartamento,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio,
            'numeroIdentificacion' AS numeroIdentificacion,
            per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'tipoIdentificacion' AS tipoIdentificacion,
            per.perTipoIdentificacion AS valorTipoIdentificacion
            FROM Solicitud sol
            INNER JOIN SolicitudNovedad sno ON sno.snoSolicitudGlobal = sol.solId
            INNER JOIN SolicitudNovedadPersona snp ON snp.snpSolicitudNovedad = sno.snoId
            INNER JOIN Persona per ON per.perId = snp.snpPersona
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionDeIntentoDeAfiliacionEmpleador">
        <description>
            Consulta para resolver las variables del comunicado del proceso 1.1.1
            atributo enum: NTF_INT_AFL
        </description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            GETDATE() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' AS nombreYApellidosRepresentanteLegal,
            perRpl.perPrimerNombre +' '+ CASE WHEN perRpl.perSegundoNombre IS NOT NULL THEN perRpl.perSegundoNombre ELSE
            '' END + ' ' + perRpl.perPrimerApellido + ' ' +
            CASE WHEN perRpl.perSegundoApellido IS NOT NULL THEN perRpl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'tipoIdentificacion' AS tipoIdentificacion,
            per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion,
            per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'departamentoEmpleador' AS departamentoEmpleador,
            dep.depNombre AS valorDepartamentoEmpleador,
            'municipioEmpresa' AS municipioEmpresa,
            mun.munNombre AS valorMunicipioEmpresa,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            perRpl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            perRpl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'departamentoAfiliado' AS departamentoAfiliado,
            depar.depNombre AS valorDepartamentoAfiliado,
            'municipioAfiliado' AS nombreMunicipio,
            muni.munNombre AS valorMunicipioAfiliado
            FROM Solicitud sol
            INNER JOIN SolicitudAfiliaciEmpleador sae ON sae.saeSolicitudGlobal = sol.solId
            INNER JOIN Empleador empl ON empl.empId = sae.saeEmpleador
            INNER JOIN Empresa empr ON empr.empId = empl.empEmpresa
            INNER JOIN Persona per ON per.perId = empr.empPersona
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empr.empId AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            LEFT JOIN Persona perRpl ON perRpl.perId = empr.empRepresentanteLegal
            LEFT JOIN SolicitudNovedadPersona soliNovPer ON soliNovPer.snpSolicitudNovedad = :idSolicitud
            LEFT JOIN Persona perso ON perso.perId = soliNovPer.snpPersona
            LEFT JOIN Ubicacion ubiM ON ubiM.ubiId = perso.perUbicacionPrincipal
            LEFT JOIN Municipio muni ON muni.munId = ubiM.ubiMunicipio
            LEFT JOIN Departamento depar ON depar.depId = muni.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionDeIntentoDeAfiliacionPersona">
        <description>No se usa en el momento : NTF_INT_AFL_PER</description>
        <query>
            SELECT 'ciudadSolicitud' as ciudadSolicitud, s.solCiudadUsuarioRadicacion AS valorCiudadSolicitud,
            'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' as nombresYApellidosDelAfiliadoPrincipal,
            p.perPrimerNombre +' '
            + CASE WHEN p.perSegundoNombre IS NOT NULL
            THEN p.perSegundoNombre
            ELSE '' END + ' '
            + p.perPrimerApellido + ' '
            + CASE WHEN p.perSegundoApellido IS NOT NULL
            THEN p.perSegundoApellido
            ELSE '' END AS valorNombresYApellidosDelAfiliadoPrincipal,
            'razonSocial/Nombre' as razonSocialNombre, p.perRazonSocial AS valorRazonSocialNombre,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'tipoIdentificacion' as tipoIdentificacion, p.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, p.perNumeroIdentificacion AS valorNumeroIdentificacion
            FROM SolicitudAfiliacionPersona sap,
            'municipioAfiliado' AS 'municipioAfiliado',
            mun.munNombre AS valorMunicipioAfiliado,
            'departamentoAfiliado' AS 'departamentoAfiliado',
            dep.depNombre AS valorDepartamentoAfiliado
            Solicitud s,
            RolAfiliado roa,
            Afiliado afi,
            Persona p,
            Ubicacion ubi,
            Municipio mun,
            Departamento dep
            WHERE sap.sapSolicitudGlobal = s.solId
            AND sap.sapRolAfiliado = roa.roaId
            AND afi.afiId = roa.roaAfiliado
            AND p.perId = afi.afiPersona
            AND ubi.ubiId = p.perUbicacionPrincipal
            AND s.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.cartaDeBienvenidaParaEmpleador">
        <description>
            Consulta para resolver las variables del comunicado del proceso 1.1.1
            atributo enum: CRT_BVD_EMP
        </description>
        <query>
            SELECT DISTINCT 'ciudadSede' as ciudadSede, s.solCiudadUsuarioRadicacion AS valorCiudadSede,
            'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' '
            + CASE WHEN prl.perSegundoNombre IS NOT NULL
            THEN prl.perSegundoNombre
            ELSE '' END + ' '
            + prl.perPrimerApellido + ' '
            + CASE WHEN prl.perSegundoApellido IS NOT NULL
            THEN prl.perSegundoApellido
            ELSE '' END AS valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' as razonSocialNombre, p.perRazonSocial AS valorRazonSocialNombre,
            'direccionRepresentanteLegal' as direccionRepresentanteLegal, ubi.ubiDireccionFisica AS
            valorDireccionRepresentanteLegal,
            'telefonoRepresentanteLegal' as telefonoRepresentanteLegal, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefonoRepresentanteLegal,
            'ciudadRepresentanteLegal' as ciudadRepresentanteLegal, munRpl.munNombre AS valorCiudadRepresentanteLegal,
            'responsableAfiliacionCcf' as responsableAfiliacionCcf, s.solUsuarioRadicacion AS
            valorResponsableAfiliacionCcf,
            'departamentoEmpresa' AS departamentoEmpresa,
            dep.depNombre AS valorDepartamentoEmpresa,
            'direccionEmpleador' AS direccionEmpleador,
            ubi.ubiDireccionFisica AS valorDireccionEmpleador,
            'municipioEmpleador' AS municipioEmpleador,
            mun.munNombre AS valorMunicipioEmpleador,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN p.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(p.perNumeroIdentificacion,'-',p.perDigitoVerificacion) ELSE p.perNumeroIdentificacion END
            valorNumeroIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            p.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
           'numeroDeRadicacion' AS numeroDeRadicacion,
			s.solNumeroRadicacion as valorNumeroDeRadicacion,
            'cargogerentecomercial' AS cargogerentecomercial,
			(Select prmValor from Parametro
			where prmNombre = 'CARGO_GERENTE_COMERCIAL') AS valorcargogerentecomercial,
			'firmagerentecomercial' AS firmagerentecomercial,
			(Select prmValor from Parametro
			where prmNombre = 'FIRMA_GERENTE_COMERCIAL') AS valorfirmagerentecomercial,
			'gerentecomercial' AS gerentecomercial,
			(Select prmValor from Parametro
			where prmNombre = 'GERENTE_COMERCIAL') AS valorgerentecomercial,
			'FirmaDirectorAdminppalCCF' AS FirmaDirectorAdminppalCCF,
			(Select prmValor from Parametro
			where prmNombre = 'FIRMA_DIRECTOR_ADMINISTRATIVO_PRINCIPAL') AS valorFirmaDirectorAdminppalCCF,
			'FirmaDirectorAdminsplCCF' AS FirmaDirectorAdminsplCCF,
			(Select prmValor from Parametro
			where prmNombre = 'FIRMA_DIRECTOR_ADMINISTRATIVO_SEGUNDO_SUPLENTE') AS valorFirmaDirectorAdminsplCCF
            FROM SolicitudAfiliaciEmpleador sa
            JOIN Solicitud s ON sa.saeSolicitudGlobal = s.solId
            JOIN Empleador e ON sa.saeEmpleador = e.empId
            JOIN Empresa empr ON e.empEmpresa = empr.empId
            JOIN Persona p ON empr.empPersona = p.perId
            JOIN Persona prl ON empr.empRepresentanteLegal= prl.perId
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empr.empId AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubi ON ube.ubeUbicacion = ubi.ubiId
            LEFT JOIN Municipio mun ON ubi.ubiMunicipio = mun.munId
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            LEFT JOIN Ubicacion url ON empr.empUbicacionRepresentanteLegal = url.ubiId
            LEFT JOIN Municipio munRpl ON munRpl.munId = url.ubiMunicipio
            WHERE s.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.cartaDeAceptacionDeEmpleador">
        <description>
            Consulta para resolver las variables del comunicado del proceso 1.1.1
            atributo enum: CRT_ACP_EMP
        </description>
        <query>
            SELECT DISTINCT 'ciudadSede' as ciudadSede, s.solCiudadUsuarioRadicacion AS valorCiudadSede,
            'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' '
            + CASE WHEN prl.perSegundoNombre IS NOT NULL
            THEN prl.perSegundoNombre
            ELSE '' END + ' '
            + prl.perPrimerApellido + ' '
            + CASE WHEN prl.perSegundoApellido IS NOT NULL
            THEN prl.perSegundoApellido
            ELSE '' END AS valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' as razonSocialNombre, p.perRazonSocial AS valorRazonSocialNombre,
            'direccionPrincipal' as direccionPrincipal, u.ubiDireccionFisica AS valordireccionPrincipal,
            'telefonoPrincipal' as telefonoPrincipal, u.ubiTelefonoFijo AS valorTelefonoPrincipal,
            'celularPrincipal' as celularPrincipal, u.ubiTelefonoCelular as valorCelularPrincipal,
            'ciudadRepresentanteLegal' as ciudadRepresentanteLegal, m.munNombre AS valorCiudadRepresentanteLegal,
            'POR DEFINIR' AS sede,
            'POR DEFINIR' AS direccion_sede,
            'parametroValorCuotaMonetariaUrbano' as parametroValorCuotaMonetariaUrbano,
            pcsValorCuotaAnualBase as valorParametroValorCuotaMonetariaUrbano,
            'parametroValorCuotaMonetariaRural' as parametroValorCuotaMonetariaRural,
            pcsValorCuotaAnualAgraria as valorParametroValorCuotaMonetariaRural,
            'direccionRepresentanteLegal' as direccionRepresentanteLegal, url.ubiDireccionFisica AS
            valorDireccionRepresentanteLegal,
            'telefonoRepresentanteLegal' as telefonoRepresentanteLegal, CASE WHEN url.ubiTelefonoFijo IS NOT NULL
            THEN url.ubiTelefonoFijo
            ELSE url.ubiTelefonoCelular END AS valorTelefonoRepresentanteLegal,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador, CASE WHEN p.perDigitoVerificacion IS NOT
            NULL
            THEN CONCAT(p.perNumeroIdentificacion,'-',p.perDigitoVerificacion)
            ELSE p.perNumeroIdentificacion END AS valorNumeroIdentificacionEmpleador,
            'departamentoEmpresa' AS departamentoEmpresa,
            depCor.depNombre AS valorDepartamentoEmpresa,
            'direccionEmpleador' AS direccionEmpleador,
            ubiCor.ubiDireccionFisica AS valorDireccionEmpleador,
            'municipioEmpleador' AS municipioEmpleador,
            munCor.munNombre AS valorMunicipioEmpleador,
            'nombreRazonSocial' AS nombreRazonSocial,
            p.perRazonSocial AS valorNombreRazonSocial,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'periodoAfiliacion' AS periodoAfiliacion,
            CAST(CONVERT(DATE,e.empFechaCambioEstadoAfiliacion,23) AS VARCHAR(7)) AS valorPeriodoAfiliacion,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            p.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            s.solNumeroRadicacion as valorNumeroDeRadicacion,
			'cargogerentecomercial' AS cargogerentecomercial,
			(Select prmValor from Parametro
			where prmNombre = 'CARGO_GERENTE_COMERCIAL') AS valorcargogerentecomercial,
			'firmagerentecomercial' AS firmagerentecomercial,
			(Select prmValor from Parametro
			where prmNombre = 'FIRMA_GERENTE_COMERCIAL') AS valorfirmagerentecomercial,
			'gerentecomercial' AS gerentecomercial,
			(Select prmValor from Parametro
			where prmNombre = 'GERENTE_COMERCIAL') AS valorgerentecomercial
            FROM SolicitudAfiliaciEmpleador sa
            JOIN Solicitud s ON sa.saeSolicitudGlobal = s.solId
            JOIN Empleador e ON sa.saeEmpleador = e.empId
            JOIN Empresa empr ON e.empEmpresa = empr.empId
            JOIN Persona p ON empr.empPersona = p.perId
            JOIN Persona prl ON empr.empRepresentanteLegal= prl.perId
            LEFT JOIN UbicacionEmpresa ue ON ue.ubeEmpresa = empr.empId AND ue.ubeTipoUbicacion = 'UBICACION_PRINCIPAL'
            LEFT JOIN Ubicacion u ON ue.ubeUbicacion = u.ubiId
            LEFT JOIN Municipio m ON u.ubiMunicipio = m.munId
            LEFT JOIN UbicacionEmpresa ubeCor ON ubeCor.ubeEmpresa = empr.empId AND ubeCor.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubiCor ON ubeCor.ubeUbicacion = ubiCor.ubiId
            LEFT JOIN Municipio munCor ON ubiCor.ubiMunicipio = munCor.munId
            LEFT JOIN Departamento depCor ON depCor.depId = munCor.munDepartamento
            LEFT JOIN Ubicacion url ON empr.empUbicacionRepresentanteLegal = url.ubiId
            LEFT JOIN ParametrizacionCondicionesSubsidio pcs ON getdate() BETWEEN pcs.pcsPeriodoInicio AND
            pcs.pcsPeriodoFin
            WHERE s.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.rechazoDeSolicitudDeAfiliacionDeEmpresa">
        <description>
            Consulta para resolver las variables del comunicado del proceso 1.1.1
            atributo enum: RCHZ_AFL_EMP
        </description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'tipoIdentificacion' as tipoIdentificacion, per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'departamentoEmpleador' AS departamentoEmpleador,
            dep.depNombre AS valorDepartamentoEmpleador,
            'direccionEmpresa' AS direccionEmpresa,
            ubi.ubiDireccionFisica AS valorDireccionEmpresa,
            'municipioEmpleador' AS municipioEmpleador,
            mun.munNombre AS valorMunicipioEmpleador,
            'nombreYApellidosRepresentanteLegal' AS nombreYApellidosRepresentanteLegal,
            CONCAT(perRpl.perPrimerNombre,ISNULL(' '+ perRpl.perSegundoNombre + ' ','
            '),perRpl.perPrimerApellido,ISNULL(' '+perRpl.perSegundoApellido,'')) AS
            valorNombreYApellidosRepresentanteLegal,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            perRpl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'telefonoRepresentanteLegal' AS telefonoRepresentanteLegal,
            CASE WHEN LEN(ubiRpl.ubiTelefonoFijo) > 0 THEN ubiRpl.ubiTelefonoFijo ELSE ubiRpl.ubiTelefonoCelular END AS
            valorTelefonoRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            perRpl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            sol.solNumeroRadicacion as valorNumeroDeRadicacion
            FROM SolicitudAfiliaciEmpleador solAfi
            INNER JOIN Solicitud sol ON solAfi.saeSolicitudGlobal = sol.solId
            INNER JOIN Empleador empl ON solAfi.saeEmpleador = empl.empId
            INNER JOIN Empresa empr ON empl.empEmpresa = empr.empId
            INNER JOIN Persona perRpl ON perRpl.perId = empr.empRepresentanteLegal
            LEFT JOIN Ubicacion ubiRpl ON ubiRpl.ubiId = perUbicacionPrincipal
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empr.empId AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            INNER JOIN Persona per ON empr.empPersona = per.perId
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.rechazoSolicitudAfiliacionEmpleadorInconsistenciaValidacion">
        <description>
            Consulta para resolver las variables del comunicado del proceso 1.1.2
            atributo enum: RCHZ_AFL_EMP_INC_VAL, NTF_SBC_AFL_EMP, RCHZ_AFL_EMP_PROD_NSUBLE
        </description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            perRpl.perPrimerNombre +' '
            + CASE WHEN per.perSegundoNombre IS NOT NULL
            THEN perRpl.perSegundoNombre
            ELSE '' END + ' '
            + perRpl.perPrimerApellido + ' '
            + CASE WHEN perRpl.perSegundoApellido IS NOT NULL
            THEN perRpl.perSegundoApellido
            ELSE '' END AS valorNombreYApellidosRepresentanteLegal,
            'direccion' as direccion, u.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN u.ubiTelefonoFijo is null
            THEN u.ubiTelefonoCelular
            ELSE u.ubiTelefonoFijo END AS valorTelefono,
            'municipioEmpleador' AS municipioEmpleador,
            mun.munNombre AS valorMunicipioEmpleador,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN per.perNumeroIdentificacion +'-'+
            CAST(per.perDigitoVerificacion AS VARCHAR(1)) ELSE per.perNumeroIdentificacion END
            valorNumeroIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            perRpl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            perRpl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal
            FROM SolicitudAfiliaciEmpleador solAfi
            JOIN Solicitud sol ON solAfi.saeSolicitudGlobal = sol.solId
            JOIN Empleador empl ON solAfi.saeEmpleador = empl.empId
            JOIN Empresa empr ON empl.empEmpresa = empr.empId
            JOIN UbicacionEmpresa ue ON ue.ubeEmpresa = empr.empId and ue.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            JOIN Ubicacion u ON ue.ubeUbicacion = u.ubiId
            JOIN Municipio mun ON mun.munId = u.ubiMunicipio
            JOIN Persona per ON empr.empPersona = per.perId
            JOIN Persona perRpl ON perRpl.perId = empr.empRepresentanteLegal
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="plantilla.rechazoSolicitudProductoNoConformeNoSubsanado">
        <description>
            Consulta para resolver las variables del comunicado del proceso 1.1.1
            atributo enum proceso 1.1.1: RCHZ_AFL_EMP_PROD_NSUB
        </description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono, CASE WHEN ubi.ubiTelefonoFijo IS NULL THEN ubi.ubiTelefonoCelular ELSE
            ubi.ubiTelefonoFijo END AS valorTelefono,
            'municipioEmpleador' AS municipioEmpleador,
            mun.munNombre AS valorMunicipioEmpleador,
            'municipio' AS municipio,
            munCor.munNombre AS valorMunicipio,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador
            FROM SolicitudAfiliaciEmpleador solAfi
            INNER JOIN Solicitud sol ON solAfi.saeSolicitudGlobal = sol.solId
            INNER JOIN Empleador empl ON solAfi.saeEmpleador = empl.empId
            INNER JOIN Empresa empr ON empl.empEmpresa = empr.empId
            INNER JOIN Persona per ON empr.empPersona = per.perId
            LEFT JOIN UbicacionEmpresa ue ON ue.ubeEmpresa = empr.empId AND ue.ubeTipoUbicacion = 'UBICACION_PRINCIPAL'
            LEFT JOIN Ubicacion ubi ON ue.ubeUbicacion = ubi.ubiId
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN UbicacionEmpresa ueCor ON ueCor.ubeEmpresa = empr.empId AND ueCor.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubiCor ON ueCor.ubeUbicacion = ubiCor.ubiId
            LEFT JOIN Municipio munCor ON munCor.munId = ubiCor.ubiMunicipio
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionRechazoProceso1_2_1">
        <description>
            Consulta para resolver las variables de los comunicados de varios procesos
            Atributos enums proceso 1.2.1: NTF_RAD_AFL_PER, RCHZ_AFL_PER_POR_PROD_NSUB,RCHZ_AFL_PER_POR_PROD_NSUBLE

            Atributos enums proceso 1.2.2:
            RCHZ_AFL_DPT_INC_VAL_TRAB, RCHZ_AFL_DPT_PROD_NSUB_TRB, RCHZ_AFL_DPT_PROD_NSUBLE_TRB

            Atributos enums proceso 1.2.3:
            NTF_ACPT_AFL_PNS_DSP_SUB, NTF_RCHZ_AFL_PNS_DSP_SUB, NTF_ACPT_AFL_IDPE_DSP_SUB
            NTF_RCHZ_AFL_IDPE_DSP_SUB, RCHZ_AFL_PNS_INC_VAL, RCHZ_AFL_IDPE_INC_VAL
            RCHZ_AFL_PNS_PROD_NSUBLE, RCHZ_AFL_IDPE_PROD_NSUBLE, NTF_SBC_AFL_PNS
            NTF_SBC_AFL_IDPE, NTF_RAD_AFL_IDPE_WEB, NTF_RAD_AFL_PNS_WEB
            CRT_BVD_IDPE, CRT_BVD_PNS, CRT_ACP_IDPE, CRT_ACP_PNS
            RCHZ_AFL_PNS_PROD_NSUB, RCHZ_AFL_IDPE_PROD_NSUB, RCHZ_AFL_PER_INC_VAL
        </description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            getDate() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' AS nombresYApellidosDelAfiliadoPrincipal,
            per.perPrimerNombre +' '+ CASE WHEN per.perSegundoNombre IS NOT NULL THEN per.perSegundoNombre ELSE '' END +
            ' ' + per.perPrimerApellido + ' ' +
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN per.perSegundoApellido ELSE '' END AS
            valorNombresYApellidosDelAfiliadoPrincipal,
            'direccionResidencia' AS direccionResidencia, u.ubiDireccionFisica AS valorDireccionResidencia,
            'telefono' AS telefono,
            CASE WHEN u.ubiTelefonoFijo IS NULL THEN u.ubiTelefonoCelular ELSE u.ubiTelefonoFijo END AS valorTelefono,
            'municipio' AS municipio,
            ISNULL(mun.munNombre,'') AS valorMunicipio,
            'departamento' AS departamento,
            ISNULL(dep.depNombre,'') AS valorDepartamento,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            ISNULL(sol.solNumeroRadicacion,'') AS valorNumeroDeRadicacion,
            'numeroIdentificacion' AS numeroIdentificacion,
            per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'tipoIdentificacion' AS tipoIdentificacion,
            per.perTipoIdentificacion AS valorTipoIdentificacion,
            'departamentoEmpresa' AS departamentoEmpresa,
            depEmpr.depNombre AS valorDepartamentoEmpresa,
            'municipioEmpresa' AS municipioEmpresa,
            munEmpr.munNombre AS valorMunicipioEmpresa,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            perRpl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            perRpl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'departamentoAfiliado' AS departamentoAfiliado,
            depar.depNombre AS valorDepartamentoAfiliado,
            'municipioAfiliado' AS nombreMunicipio,
            muni.munNombre AS valorMunicipioAfiliado
            FROM SolicitudAfiliacionPersona solAfiPer
            INNER JOIN Solicitud sol ON solAfiPer.sapSolicitudGlobal = sol.solId
            INNER JOIN RolAfiliado rol ON solAfiPer.sapRolAfiliado = rol.roaId
            INNER JOIN Afiliado a ON rol.roaAfiliado = a.afiId
            INNER JOIN Persona per ON a.afiPersona = per.perId
            LEFT JOIN Ubicacion u ON per.perUbicacionPrincipal = u.ubiId
            LEFT JOIN Municipio mun ON mun.munId = u.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            LEFT JOIN Empleador empl ON empl.empId = rol.roaEmpleador
            LEFT JOIN Empresa empr ON empr.empId = empl.empEmpresa
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empr.empId AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubiEmpr ON ubiEmpr.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio munEmpr ON munEmpr.munId = ubiEmpr.ubiMunicipio
            LEFT JOIN Departamento depEmpr ON depEmpr.depId = munEmpr.munDepartamento
            LEFT JOIN Persona perRpl ON perRpl.perId = empr.empRepresentanteLegal
            LEFT JOIN SolicitudNovedadPersona soliNovPer ON soliNovPer.snpSolicitudNovedad = :idSolicitud
            LEFT JOIN Persona perso ON perso.perId = soliNovPer.snpPersona
            LEFT JOIN Ubicacion ubiM ON ubiM.ubiId = per.perUbicacionPrincipal
            LEFT JOIN Municipio muni ON muni.munId = ubiM.ubiMunicipio
            LEFT JOIN Departamento depar ON depar.depId = muni.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionRadicacionSolicitudAfiliacionEmpleadorWeb">
        <description>
            Consulta para resolver las variables del comunicado del proceso 1.1.2
            atributo enum: NTF_RAD_AFL_EMP_WEB
        </description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' '
            + CASE WHEN prl.perSegundoNombre IS NOT NULL
            THEN prl.perSegundoNombre
            ELSE '' END + ' '
            + prl.perPrimerApellido + ' '
            + CASE WHEN prl.perSegundoApellido IS NOT NULL
            THEN prl.perSegundoApellido
            ELSE '' END AS valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' as direccion, u.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN u.ubiTelefonoFijo IS NOT NULL
            THEN u.ubiTelefonoFijo
            ELSE u.ubiTelefonoCelular END AS valorTelefono,
            'municipioEmpleador' AS municipioEmpleador,
            mun.munNombre AS valorMunicipioEmpleador,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio,
            'departamentoEmpleador' AS departamentoEmpleador,
            dep.depNombre AS valorDepartamentoEmpleador,
            'numeroIdentificacionEmpleador'AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN per.perNumeroIdentificacion +'-'+
            CAST(per.perDigitoVerificacion AS VARCHAR(1)) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal
            FROM SolicitudAfiliaciEmpleador solAfi
            JOIN Solicitud sol ON solAfi.saeSolicitudGlobal = sol.solId
            JOIN Empleador empl ON solAfi.saeEmpleador = empl.empId
            JOIN Empresa empr ON empl.empEmpresa = empr.empId
            JOIN UbicacionEmpresa ue ON ue.ubeEmpresa = empr.empId
            JOIN Ubicacion u ON ue.ubeUbicacion = u.ubiId
            JOIN Municipio mun ON mun.munId = u.ubiMunicipio
            JOIN Departamento dep on dep.depId = mun.munDepartamento
            JOIN Persona prl ON empr.empRepresentanteLegal = prl.perId
            JOIN Persona per ON empr.empPersona = per.perId
            WHERE ue.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            AND sol.solId = :idSolicitud
        </query>
    </named-native-query>

    <!-- Las variables del comnicado son todas consultadas de la tabla de parametros, por
lo que es innecesario realizar la consulta -->
    <!--<named-native-query
		name="plantilla.notificacionEnrolamientoAfiliacionEmpleadorWeb">
		<description>
			Consulta para resolver las variables del comunicado del proceso 1.1.2
			atributo enum: NTF_ENRL_AFL_EMP_WEB
		</description>
		<query>
			SELECT 'ciudadSolicitud' as ciudadSolicitud, sol.solCiudadUsuarioRadicacion AS valorCiudadSolicitud,
    		'fechaDelSistema' as fechaDelSistema, getDate()	AS valorFechaDelSistema,
    		'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre
			FROM SolicitudAfiliaciEmpleador solAfi
			JOIN Solicitud sol ON solAfi.saeSolicitudGlobal  = sol.solId
			JOIN Empleador empl ON solAfi.saeEmpleador 	 	 = empl.empId
			JOIN Empresa empr ON empl.empEmpresa 			 = empr.empId
			JOIN Persona per ON empr.empPersona			     = per.perId
			WHERE sol.solId									 = :idSolicitud
        </query>
	</named-native-query>-->

    <named-native-query name="plantilla.rechazoSolicitudAfiTrabDepInconsValidCasoEmpleador">
        <description>
            Consulta para resolver las variables del comunicado:
            Rechazo de solicitud de afiliación de trabajador dependiente inconsistencia validación caso empleador
            (HU-122-369)
            Atributo enum: RCHZ_AFL_DPT_INC_VAL_EMP
            comunicado: Rechazo de solicitud de afiliación de trabajador dependiente por producto no conforme no
            subsanado dirigida a empleador (HU-122-369)
            Atributo enum: RCHZ_AFL_DPT_PROD_NSUB_EMP
            comunicado: Rechazo de solicitud de afiliación de trabajador dependiente por producto no conforme no
            subsanable dirigida a empleador (HU-122-369)
            Atributo enum: RCHZ_AFL_DPT_PROD_NSUBLE_EMP
            comunicado: Notificación para empleador de resultados de afiliación múltiple trabajadores web (HU-122-360)
            Atributo enum: NTF_EMP_AFL_MLT_TRBW
        </description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' '
            + CASE WHEN prl.perSegundoNombre IS NOT NULL
            THEN prl.perSegundoNombre
            ELSE '' END + ' '
            + prl.perPrimerApellido + ' '
            + CASE WHEN prl.perSegundoApellido IS NOT NULL
            THEN prl.perSegundoApellido
            ELSE '' END AS valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' as razonSocialNombre, pemp.perRazonSocial AS valorRazonSocialNombre,
            'direccion' as direccion, u.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN u.ubiTelefonoFijo IS NOT NULL
            THEN u.ubiTelefonoFijo
            ELSE u.ubiTelefonoCelular END AS valorTelefono,
            'departamentoEmpresa' AS departamentoEmpresa,
            dep.depNombre AS valorDepartamentoEmpresa,
            'municipioEmpresa' AS municipioEmpresa,
            mun.munNombre AS valorMunicipioEmpresa,
            'numeroDeRadicacion' AS 'numeroDeRadicacion',
            sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'numeroIdentificacionAfiliadoPrincipal' AS numeroIdentificacionAfiliadoPrincipal,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionAfiliadoPrincipal,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionAfiliadoPrincipal' AS tipoIdentificacionAfiliadoPrincipal,
            per.perTipoIdentificacion AS valorTipoIdentificacionAfiliadoPrincipal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal
            FROM 
			SolicitudAfiliacionPersona solAfiPer
            INNER JOIN Solicitud sol ON solAfiPer.sapSolicitudGlobal = sol.solId
            INNER JOIN RolAfiliado rol ON solAfiPer.sapRolAfiliado = rol.roaId
            INNER JOIN Afiliado a ON rol.roaAfiliado = a.afiId
            INNER JOIN Persona per ON a.afiPersona = per.perId
            INNER JOIN Empleador e ON rol.roaEmpleador = e.empId
            INNER JOIN Empresa em ON e.empEmpresa = em.empId
            INNER JOIN Persona pemp ON pemp.perId= e.empId
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = em.empId AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            INNER JOIN Ubicacion u ON u.ubiId = ube.ubeUbicacion
			LEFT JOIN Municipio mun ON mun.munId = u.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            INNER JOIN Persona prl ON em.empRepresentanteLegal = prl.perId
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionIndividualResultadoAfiliacionTrabajadorWeb">
        <description>Consulta para resolver las variables del comunicado:
            Notificación individual de resultado de afiliación trabajador web (trabajador) (HU-122-360 y 361)
            Atributo enum:NTF_INVL_AFL_TRBW,
        </description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' as nombresYApellidosDelAfiliadoPrincipal,
            per.perPrimerNombre +' '
            + CASE WHEN per.perSegundoNombre IS NOT NULL
            THEN per.perSegundoNombre
            ELSE '' END + ' '
            + per.perPrimerApellido + ' '
            + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN per.perSegundoApellido
            ELSE '' END AS valorNombresYApellidosDelAfiliadoPrincipal,
            'nombreEmpleador' as nombreEmpleador,
            pemp.perPrimerNombre +' '
            + CASE WHEN pemp.perSegundoNombre IS NOT NULL
            THEN pemp.perSegundoNombre
            ELSE '' END + ' '
            + pemp.perPrimerApellido + ' '
            + CASE WHEN pemp.perSegundoApellido IS NOT NULL
            THEN pemp.perSegundoApellido
            ELSE '' END AS valorNombreEmpleador,
            'direccionResidencia' as direccionResidencia, u.ubiDireccionFisica AS valorDireccionResidencia,
            'telefono' as telefono, CASE WHEN u.ubiTelefonoFijo is null
            THEN u.ubiTelefonoCelular
            ELSE u.ubiTelefonoFijo END AS valorTelefono,
            'razonSocial/Nombre' as razonSocialNombre, pemp.perRazonSocial AS valorRazonSocialNombre,
            'departamentoEmpresa' AS departamentoEmpresa,
            dep.depNombre AS valorDepartamentoEmpresa,
            'municipioEmpresa' AS municipioEmpresa,
            mun.munNombre AS valorMunicipioEmpresa,
            'numeroDeRadicacion'AS numeroDeRadicacion,
            sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'numeroIdentificacionAfiliadoPrincipal' AS numeroIdentificacionAfiliadoPrincipal,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionAfiliadoPrincipal,
            'tipoIdentificacionAfiliadoPrincipal' AS tipoIdentificacionAfiliadoPrincipal,
            per.perTipoIdentificacion AS valorTipoIdentificacionAfiliadoPrincipal,
            'departamentoAfiliado' AS departamentoAfiliado,
            depar.depNombre AS valorDepartamentoAfiliado,
            'municipioAfiliado' AS nombreMunicipio,
            muni.munNombre AS valorMunicipioAfiliado
            FROM SolicitudAfiliacionPersona solAfiPer
            JOIN Solicitud sol ON solAfiPer.sapSolicitudGlobal = sol.solId
            JOIN RolAfiliado rol ON solAfiPer.sapRolAfiliado = rol.roaId
            JOIN Afiliado a ON rol.roaAfiliado = a.afiId
            JOIN Persona per ON a.afiPersona = per.perId
            JOIN Ubicacion u ON per.perUbicacionPrincipal = u.ubiId
            JOIN Empleador e ON rol.roaEmpleador = e.empId
            JOIN Empresa em ON e.empEmpresa = em.empId
            JOIN Persona pemp ON em.empPersona = pemp.perId
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = em.empId
            JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion AND ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            JOIN Departamento dep ON dep.depId = mun.munDepartamento
            LEFT JOIN SolicitudNovedadPersona soliNovPer ON soliNovPer.snpSolicitudNovedad = :idSolicitud
            LEFT JOIN Persona perso ON perso.perId = soliNovPer.snpPersona
            LEFT JOIN Ubicacion ubiM ON ubiM.ubiId = per.perUbicacionPrincipal
            LEFT JOIN Municipio muni ON muni.munId = ubiM.ubiMunicipio
            LEFT JOIN Departamento depar ON depar.depId = muni.munDepartamento
            WHERE sol.solId =:idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="plantilla.notificacionResultadosRegistroBeneficiariosSolicitudWebTrabajadorDirigidaTrabajador">
        <description>
            comunicado: Notificación de resultados del registro de beneficiarios en la solicitud web de una trabajador
            dirigida al trabajador (HU-122-361)
            Atributo enum:NTF_REG_BNF_WEB_TRB
        </description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' as nombresYApellidosDelAfiliadoPrincipal,
            per.perPrimerNombre +' '
            + CASE WHEN per.perSegundoNombre IS NOT NULL
            THEN per.perSegundoNombre
            ELSE '' END + ' '
            + per.perPrimerApellido + ' '
            + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN per.perSegundoApellido
            ELSE '' END AS valorNombresYApellidosDelAfiliadoPrincipal,
            'direccionResidencia' as direccionResidencia, u.ubiDireccionFisica AS valorDireccionResidencia,
            'telefono' as telefono, CASE WHEN u.ubiTelefonoFijo is null
            THEN u.ubiTelefonoCelular
            ELSE u.ubiTelefonoFijo END AS valorTelefono,
            'razonSocial/Nombre' as razonSocialNombre, pemp.perRazonSocial AS valorRazonSocialNombre,
            'nombreDelBeneficiario' as nombreDelBeneficiario,
            pb.perPrimerNombre +' '
            + CASE WHEN pb.perSegundoNombre IS NOT NULL
            THEN pb.perSegundoNombre
            ELSE '' END + ' '
            + pb.perPrimerApellido + ' '
            + CASE WHEN pb.perSegundoApellido IS NOT NULL
            THEN pb.perSegundoApellido
            ELSE '' END as valorNombreDelBeneficiario,
            'parentesco' as parentesco, b.benTipoBeneficiario as valorParentesco,
            'departamentoEmpresa' AS departamentoEmpresa,
            dep.depNombre AS valorDepartamentoEmpresa,
            'municipioEmpresa' AS municipioEmpresa,
            mun.munNombre AS valorMunicipioEmpresa,
            'numeroIdentificacionAfiliadoPrincipal' AS numeroIdentificacionAfiliadoPrincipal,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionAfiliadoPrincipal,
            'tipoIdentificacionAfiliadoPrincipal' AS tipoIdentificacionAfiliadoPrincipal,
            per.perTipoIdentificacion AS valorTipoIdentificacionAfiliadoPrincipal,
            'departamentoAfiliado' AS departamentoAfiliado,
            depar.depNombre AS valorDepartamentoAfiliado,
            'municipioAfiliado' AS nombreMunicipio,
            muni.munNombre AS valorMunicipioAfiliado,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            sol.solNumeroRadicacion as valorNumeroDeRadicacion
            FROM SolicitudAfiliacionPersona solAfiPer
            INNER JOIN Solicitud sol ON solAfiPer.sapSolicitudGlobal = sol.solId
            INNER JOIN RolAfiliado rol ON solAfiPer.sapRolAfiliado = rol.roaId
            INNER JOIN Afiliado a ON rol.roaAfiliado = a.afiId
            INNER JOIN Persona per ON a.afiPersona = per.perId
            INNER JOIN Ubicacion u ON per.perUbicacionPrincipal = u.ubiId
            INNER JOIN Beneficiario b ON b.benAfiliado = a.afiId
            INNER JOIN Persona pb ON b.benPersona = pb.perId
            INNER JOIN Empleador e ON rol.roaEmpleador = e.empId
            INNER JOIN Empresa em ON e.empEmpresa = em.empId
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = em.empId AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            INNER JOIN Persona pemp ON em.empPersona = pemp.perId
            LEFT JOIN SolicitudNovedadPersona soliNovPer ON soliNovPer.snpSolicitudNovedad = :idSolicitud
            LEFT JOIN Persona perso ON perso.perId = soliNovPer.snpPersona
            LEFT JOIN Ubicacion ubiM ON ubiM.ubiId = per.perUbicacionPrincipal
            LEFT JOIN Municipio muni ON muni.munId = ubiM.ubiMunicipio
            LEFT JOIN Departamento depar ON depar.depId = muni.munDepartamento
            WHERE sol.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionRequerirSubsanacionSolAfiTrabajadorDependiente">
        <description>
            Consulta para resolver las variables del comunicado:
            Notificación para requerir subsanación de solicitud de afiliación de trabajador dependiente (HU-122-369)
            Atributo enum: NTF_SUB_AFL_TRB_DPT
            comunicado: Notificación individual de resultados de afiliación de trabajadores web (empleador) (HU-112-361)
            Atributo enum: NTF_INVL_AFL_TRBW_EMP
        </description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' as nombresYApellidosDelAfiliadoPrincipal,
            per.perPrimerNombre +' '
            + CASE WHEN per.perSegundoNombre IS NOT NULL
            THEN per.perSegundoNombre
            ELSE '' END + ' '
            + per.perPrimerApellido + ' '
            + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN per.perSegundoApellido
            ELSE '' END AS valorNombresYApellidosDelAfiliadoPrincipal,
            'razonSocial/Nombre' as razonSocialNombre, pemp.perRazonSocial AS valorRazonSocialNombre,
            'direccion' as direccion, u.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN u.ubiTelefonoFijo IS NOT NULL
            THEN u.ubiTelefonoFijo
            ELSE u.ubiTelefonoCelular END AS valorTelefono,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' '
            + CASE WHEN prl.perSegundoNombre IS NOT NULL
            THEN prl.perSegundoNombre
            ELSE '' END + ' '
            + prl.perPrimerApellido + ' '
            + CASE WHEN prl.perSegundoApellido IS NOT NULL
            THEN prl.perSegundoApellido
            ELSE '' END AS valorNombreYApellidosRepresentanteLegal,
            'departamentoEmpresa' AS departamentoEmpresa,
            dep.depNombre AS valorDepartamentoEmpresa,
            'municipioEmpresa' AS municipioEmpresa,
            mun.munNombre AS valorMunicipioEmpresa,
            'numeroDeRadicacion'AS numeroDeRadicacion,
            sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'numeroIdentificacionAfiliadoPrincipal' AS numeroIdentificacionAfiliadoPrincipal,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionAfiliadoPrincipal,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionAfiliadoPrincipal' AS tipoIdentificacionAfiliadoPrincipal,
            per.perTipoIdentificacion AS valorTipoIdentificacionAfiliadoPrincipal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'departamentoAfiliado' AS departamentoAfiliado,
            dep.depNombre AS valorDepartamentoAfiliado,
            'municipioAfiliado' AS nombreMunicipio,
            mun.munNombre AS valorMunicipioAfiliado
            FROM SolicitudAfiliacionPersona solAfiPer
            JOIN Solicitud sol ON solAfiPer.sapSolicitudGlobal = sol.solId
            JOIN RolAfiliado rol ON solAfiPer.sapRolAfiliado = rol.roaId
            JOIN Afiliado a ON rol.roaAfiliado = a.afiId
            JOIN Persona per ON a.afiPersona = per.perId
            JOIN Empleador e ON rol.roaEmpleador = e.empId
            JOIN Empresa em ON e.empEmpresa = em.empId
            JOIN Persona pemp ON em.empPersona = pemp.perId
            JOIN Ubicacion u ON per.perUbicacionPrincipal = u.ubiId
            JOIN Persona prl ON em.empRepresentanteLegal = prl.perId
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = em.empId
            JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion AND ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            JOIN Departamento dep ON dep.depId = mun.munDepartamento
            WHERE sol.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionResultadosRegistroBeneficiariosSolicitudWebTrabajadorDirigidaEmpleador">
        <description>NTF_REG_BNF_WEB_EMP</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' as nombresYApellidosDelAfiliadoPrincipal,
            per.perPrimerNombre +' '
            + CASE WHEN per.perSegundoNombre IS NOT NULL
            THEN per.perSegundoNombre
            ELSE '' END + ' '
            + per.perPrimerApellido + ' '
            + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN per.perSegundoApellido
            ELSE '' END AS valorNombresYApellidosDelAfiliadoPrincipal,
            'razonSocial/Nombre' as razonSocialNombre, pemp.perRazonSocial AS valorRazonSocialNombre,
            'direccion' as direccion, u.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN u.ubiTelefonoFijo IS NOT NULL
            THEN u.ubiTelefonoFijo
            ELSE u.ubiTelefonoCelular END AS valorTelefono,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' '
            + CASE WHEN prl.perSegundoNombre IS NOT NULL
            THEN prl.perSegundoNombre
            ELSE '' END + ' '
            + prl.perPrimerApellido + ' '
            + CASE WHEN prl.perSegundoApellido IS NOT NULL
            THEN prl.perSegundoApellido
            ELSE '' END AS valorNombreYApellidosRepresentanteLegal,
            'nombreDelBeneficiario' as nombreDelBeneficiario,
            pb.perPrimerNombre +' '
            + CASE WHEN pb.perSegundoNombre IS NOT NULL
            THEN pb.perSegundoNombre
            ELSE '' END + ' '
            + pb.perPrimerApellido + ' '
            + CASE WHEN pb.perSegundoApellido IS NOT NULL
            THEN pb.perSegundoApellido
            ELSE '' END as valorNombreDelBeneficiario,
            'parentesco' as parentesco, b.benTipoBeneficiario as valorParentesco,
            'departamentoEmpresa' AS departamentoEmpresa,
            depEmp.depNombre AS valorDepartamentoEmpresa,
            'municipioEmpresa' AS municipioEmpresa,
            munEmp.munNombre AS valorMunicipioEmpresa,
            'numeroIdentificacionAfiliadoPrincipal' AS numeroIdentificacionAfiliadoPrincipal,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionAfiliadoPrincipal,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            CASE WHEN prl.perDigitoVerificacion IS NOT NULL THEN prl.perNumeroIdentificacion +'-'+
            CAST(prl.perDigitoVerificacion AS VARCHAR(1)) ELSE prl.perNumeroIdentificacion END AS
            valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionAfiliadoPrincipal' AS tipoIdentificacionAfiliadoPrincipal,
            per.perTipoIdentificacion AS valorTipoIdentificacionAfiliadoPrincipal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            sol.solNumeroRadicacion as valorNumeroDeRadicacion
            FROM SolicitudAfiliacionPersona solAfiPer
            JOIN Solicitud sol ON solAfiPer.sapSolicitudGlobal = sol.solId
            JOIN RolAfiliado rol ON solAfiPer.sapRolAfiliado = rol.roaId
            JOIN Afiliado a ON rol.roaAfiliado = a.afiId
            JOIN Persona per ON a.afiPersona = per.perId
            JOIN Empleador e ON rol.roaEmpleador = e.empId
            JOIN Empresa em ON e.empEmpresa = em.empId
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = em.empId AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubiEmp ON ubiEmp.ubiId = ube.ubeUbicacion
            JOIN Persona pemp ON em.empPersona = pemp.perId
            JOIN Ubicacion u ON pemp.perUbicacionPrincipal = u.ubiId
            LEFT JOIN Municipio munEmp ON munEmp.munId = u.ubiMunicipio
            LEFT JOIN Departamento depEmp ON depEmp.depId = munEmp.munDepartamento
            JOIN Beneficiario b ON b.benAfiliado = a.afiId
            JOIN Persona pb ON b.benPersona = pb.perId
            JOIN Persona prl ON em.empRepresentanteLegal = prl.perId
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionEnrolamientoAfiliacionIndependiente">
        <description>
            Consulta para resolver las variables del comunicado:
            Notificación de enrolamiento afiliación independiente web (HU-123-374)
            Atributo enum: NTF_ENRL_AFL_IDPE_WEB
            comunicado: Notificación de enrolamiento afiliación pensionado web (HU-123-374)
            Atributo enum: NTF_ENRL_AFL_PNS_WEB
        </description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            getDate() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' as nombresYApellidosDelAfiliadoPrincipal,
            per.perPrimerNombre +' '
            + CASE WHEN per.perSegundoNombre IS NOT NULL
            THEN per.perSegundoNombre
            ELSE '' END + ' '
            + per.perPrimerApellido + ' '
            + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN per.perSegundoApellido
            ELSE '' END AS valorNombresYApellidosDelAfiliadoPrincipal,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio
            FROM SolicitudAfiliacionPersona solAfiPer
            JOIN Solicitud sol ON solAfiPer.sapSolicitudGlobal = sol.solId
            JOIN RolAfiliado rol ON solAfiPer.sapRolAfiliado = rol.roaId
            JOIN Afiliado a ON rol.roaAfiliado = a.afiId
            JOIN Persona per ON a.afiPersona = per.perId
            LEFT JOIN Ubicacion ubi on per.perUbicacionPrincipal = ubi.ubiId
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionResultadosRegistroBeneficiariosSolicitudWebIndependiente">
        <description>
            Consulta para resolver las variables del comunicado 45:
            Notificación de resultados del registro de beneficiarios en la solicitud web para independiente (HU-122-380)
            Atributo enum: NTF_REG_BNF_WEB_IDPE
            comunicado 46: Notificación de resultados del registro de beneficiarios en la solicitud web para pensionado
            (HU-122-380)
            Atributo enum: NTF_REG_BNF_WEB_PNS
        </description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' as nombresYApellidosDelAfiliadoPrincipal,
            per.perPrimerNombre +' '
            + CASE WHEN per.perSegundoNombre IS NOT NULL
            THEN per.perSegundoNombre
            ELSE '' END + ' '
            + per.perPrimerApellido + ' '
            + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN per.perSegundoApellido
            ELSE '' END AS valorNombresYApellidosDelAfiliadoPrincipal,
            'direccionResidencia' as direccionResidencia, u.ubiDireccionFisica AS valorDireccionResidencia,
            'telefono' as telefono, CASE WHEN u.ubiTelefonoFijo is null
            THEN u.ubiTelefonoCelular
            ELSE u.ubiTelefonoFijo END AS valorTelefono,
            'nombresYApellidosDelBeneficiario' AS nombresYApellidosDelBeneficiario,
            pb.perPrimerNombre +' '
            + CASE WHEN pb.perSegundoNombre IS NOT NULL
            THEN pb.perSegundoNombre
            ELSE '' END + ' '
            + pb.perPrimerApellido + ' '
            + CASE WHEN pb.perSegundoApellido IS NOT NULL
            THEN pb.perSegundoApellido
            ELSE '' END AS valorNombresYApellidosDelBeneficiario,
            'parentesco' as parentesco, benTipoBeneficiario AS valorParentesco,
            'departamento' AS departamento,
            dep.depNombre AS valorDepartamento,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio,
            'numeroIdentificacion' AS numeroIdentificacion,
            per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'tipoIdentificacion' AS tipoIdentificacion,
            per.perTipoIdentificacion AS valorTipoIdentificacion
            FROM SolicitudAfiliacionPersona solAfiPer
            INNER JOIN Solicitud sol ON solAfiPer.sapSolicitudGlobal = sol.solId
            INNER JOIN RolAfiliado rol ON solAfiPer.sapRolAfiliado = rol.roaId
            INNER JOIN Afiliado a ON rol.roaAfiliado = a.afiId
            INNER JOIN Persona per ON a.afiPersona = per.perId
            LEFT JOIN Ubicacion u ON per.perUbicacionPrincipal = u.ubiId
            LEFT JOIN Municipio mun ON mun.munId = u.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            INNER JOIN Beneficiario b ON b.benAfiliado = a.afiId
            INNER JOIN Persona pb ON b.benPersona = pb.perId
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionDeIntentoDeAfiliacionDependiente">
        <description>
            Consulta para resolver las variables del comunicado del proceso 1.1.1
            atributo enum: NTF_INT_AFL_DEP
        </description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' as nombresYApellidosDelAfiliadoPrincipal,
            per.perPrimerNombre +' '
            + CASE WHEN per.perSegundoNombre IS NOT NULL
            THEN per.perSegundoNombre
            ELSE '' END + ' '
            + per.perPrimerApellido + ' '
            + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN per.perSegundoApellido
            ELSE '' END AS valorNombresYApellidosDelAfiliadoPrincipal,
            'razonSocial/Nombre' as razonSocialNombre, p.perRazonSocial AS valorRazonSocialNombre,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'tipoIdentificacion' as tipoIdentificacion, p.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, p.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'tipoSolicitante' as tipoSolicitante, roa.roaTipoAfiliado AS valorTipoSolicitante,
            'clasificacion' as clasificacion, s.solClasificacion AS valorClasificacion,
            'municipioEmpleador' AS municipioEmpleador,
            m.munNombre AS valorMunicipioEmpleador,
            'departamentoEmpleador' AS departamentoEmpleador,
            dep.depNombre AS valorDepartamentoEmpleador,
            'tipoIdentificacionAfiliado' AS tipoIdentificacionAfiliado,
            perAfi.perTipoIdentificacion AS valorTipoIdentificacionAfiliado,
            'numeroIdentificacionAfiliado' AS numeroIdentificacionAfiliado,
            perAfi.perNumeroIdentificacion AS valorNumeroIdentificacionAfiliado,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            p.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            p.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal
            FROM SolicitudAfiliaciEmpleador sa,
            Solicitud s,
            Empleador e,
            Empresa empr,
            RolAfiliado roa,
            Persona p,
            Persona per,
            Afiliado afi,
            Persona perAfi,
            Municipio m,
            Departamento dep,
            Ubicacion ubi,
            UbicacionEmpresa ue
            WHERE sa.saeSolicitudGlobal = s.solId
            AND sa.saeEmpleador = e.empId
            AND e.empEmpresa = empr.empId
            AND empr.empRepresentanteLegal = p.perId
            AND empr.empPersona = per.perId
            AND roa.roaEmpleador = e.empId
            AND roa.roaAfiliado = afi.afiId
            AND perAfi.perId = afi.afiPersona
            AND ue.ubeEmpresa = empr.empId
            AND ue.ubeUbicacion = ubi.ubiId
            AND ue.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            AND ubi.ubiMunicipio = m.munId
            AND m.munDepartamento = dep.depId
            AND s.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionIntentoAfiliacionIndependiente">
        <description>NTF_INT_AFL_IDPE, NTF_INT_AFL_PNS</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' as nombresYApellidosDelAfiliadoPrincipal,
            p.perPrimerNombre +' '
            + CASE WHEN p.perSegundoNombre IS NOT NULL
            THEN p.perSegundoNombre
            ELSE '' END + ' '
            + p.perPrimerApellido + ' '
            + CASE WHEN p.perSegundoApellido IS NOT NULL
            THEN p.perSegundoApellido
            ELSE '' END AS valorNombresYApellidosDelAfiliadoPrincipal,
            'razonSocial/Nombre' as razonSocialNombre, p.perRazonSocial AS valorRazonSocialNombre,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'tipoIdentificacion' as tipoIdentificacion, p.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, p.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'tipoSolicitante' as tipoSolicitante, roa.roaTipoAfiliado AS valorTipoSolicitante,
            'clasificacion' as clasificacion, s.solClasificacion AS valorClasificacion,
            'direccionAfiliado' AS 'direccionAfiliado',
            ubi.ubiDireccionFisica AS 'valorDireccionAfiliado',
            'telefonoFijoAfiliado' AS 'telefonoFijoAfiliado',
            ubi.ubiTelefonoFijo AS valorTelefonoFijoAfiliado,
            'telefonoCelularAfiliado' AS 'telefonoCelularAfiliado',
            ubi.ubiTelefonoCelular AS valorTelefonoCelularAfiliado,
            'municipioAfiliado' AS 'municipioAfiliado',
            mun.munNombre AS valorMunicipioAfiliado,
            'departamentoAfiliado' AS 'departamentoAfiliado',
            dep.depNombre AS valorDepartamentoAfiliado
            FROM SolicitudAfiliacionPersona sap,
            Solicitud s,
            RolAfiliado roa,
            Afiliado afi,
            Persona p,
            Ubicacion ubi,
            Municipio mun,
            Departamento dep
            WHERE sap.sapSolicitudGlobal = s.solId
            AND sap.sapRolAfiliado = roa.roaId
            AND afi.afiId = roa.roaAfiliado
            AND p.perId = afi.afiPersona
            AND ubi.ubiId = p.perUbicacionPrincipal
            AND ubi.ubiMunicipio = mun.munId
            AND dep.depId = mun.munDepartamento
            AND s.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.rechazoAfiliacionEmpresaPresencial">
        <description>RCHZ_AFL_EMP_PRE</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            GETDATE() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' AS nombreYApellidosRepresentanteLegal,
            perRpl.perPrimerNombre +' '+ CASE WHEN perRpl.perSegundoNombre IS NOT NULL THEN perRpl.perSegundoNombre ELSE
            '' END + ' '+ perRpl.perPrimerApellido + ' '+
            CASE WHEN perRpl.perSegundoApellido IS NOT NULL THEN perRpl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'direccion' AS direccion,
            ubiPri.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono, CASE WHEN ubiPri.ubiTelefonoFijo IS NULL THEN ubiPri.ubiTelefonoCelular ELSE
            ubiPri.ubiTelefonoFijo END AS valorTelefono,
            'nombreEmpresa' AS nombreEmpresa,
            empr.empNombreComercial AS valorNombreEmpresa,
            'departamentoEmpleador' AS departamentoEmpleador,
            depCor.depNombre AS valorDepartamentoEmpleador,
            'direccionEmpresa' AS direccionEmpresa,
            ubiCor.ubiDireccionFisica AS valorDireccionEmpresa,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            perRpl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'telefonoRepresentanteLegal' AS telefonoRepresentanteLegal,
            CASE WHEN LEN(ubiRpl.ubiTelefonoFijo) > 0 THEN ubiRpl.ubiTelefonoFijo ELSE ubiRpl.ubiTelefonoCelular END AS
            valorTelefonoRepresentanteLegal,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            perRpl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            sol.solNumeroRadicacion as valorNumeroDeRadicacion
            FROM SolicitudAfiliaciEmpleador solAfi
            INNER JOIN Solicitud sol ON solAfi.saeSolicitudGlobal = sol.solId
            INNER JOIN Empleador empl ON solAfi.saeEmpleador = empl.empId
            INNER JOIN Empresa empr ON empl.empEmpresa = empr.empId
            INNER JOIN Persona per ON empr.empPersona = per.perId
            LEFT JOIN UbicacionEmpresa ubePri ON ubePri.ubeEmpresa = empr.empId AND ubePri.ubeTipoUbicacion =
            'UBICACION_PRINCIPAL'
            LEFT JOIN Ubicacion ubiPri ON ubiPri.ubiId = ubePri.ubeUbicacion
            LEFT JOIN UbicacionEmpresa ubeCor ON ubeCor.ubeEmpresa = empr.empId AND ubeCor.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubiCor ON ubiCor.ubiId = ubeCor.ubeUbicacion
            LEFT JOIN Municipio munCor ON munCor.munId = ubiCor.ubiMunicipio
            LEFT JOIN Departamento depCor ON depCor.depId = munCor.munDepartamento
            INNER JOIN Persona perRpl ON perRpl.perId = empr.empRepresentanteLegal
            LEFT JOIN Ubicacion ubiRpl ON ubiRpl.ubiId = perRpl.perUbicacionPrincipal
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionPagoAportesDependientes">
        <description>NTF_PAG_APT_DEP_APTE_CTZ ,NTF_PAG_APT_DEP_APTE</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' AS razonSocialNombre,
            soa.soaNombreAportante AS valorRazonSocialNombre,
            'tipoSolicitante' AS tipoSolicitante,
            apg.apgTipoSolicitante AS valorTipoSolicitante,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'fechaRecepcionAporte' AS fechaRecepcionAporte,
            apg.apgFechaRecaudo AS valorFechaRecepcionAporte,
            'periodoPago' AS periodoPago,
            apg.apgPeriodoAporte AS valorPeriodoPago,
            'montoAporteRecibido' AS montoAporteRecibido,
            apg.apgValTotalApoObligatorio AS valorMontoAporteRecibido,
            'numeroTrabajadores' AS numeroTrabajadores,
            ISNULL(numTraPla.trabajadoresPlanilla,0) AS valorNumeroTrabajadores,
            'numeroTrabajadoresActivo' AS numeroTrabajadoresActivo,
            ISNULL(numTra.trabajadoresActivos,0) AS valorNumeroTrabajadoresActivo,
            'numeroTrabajadoresNoActivo' AS numeroTrabajadoresNoActivo,
            ISNULL(numTra.trabajadoresNoActivos,0) AS valorNumeroTrabajadoresNoActivo,
            'departamentoAfiliado' AS departamentoAfiliado,
            ISNULL(depar.depNombre, 'Sin información') AS valorDepartamentoAfiliado,
            'municipio' AS municipio,
            ISNULL(mun.munNombre, 'Sin información') AS valorMunicipio,
            'tipoDeIdentificacion' as tipoDeIdentificacion,
            ISNULL(per.perTipoIdentificacion, 'Sin información') AS valorTipoDeIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion,
            ISNULL(per.perNumeroIdentificacion, 'Sin información') AS valorNumeroIdentificacion
            FROM Solicitud sol
            INNER JOIN SolicitudAporte soa ON soa.soaSolicitudGlobal = sol.solId
            INNER JOIN AporteGeneral apg ON apg.apgRegistroGeneral = soa.soaRegistroGeneral
            LEFT JOIN( SELECT
            apd.apdAporteGeneral,
            COUNT(apd.apdId) AS trabajadoresPlanilla
            FROM AporteGeneral apg
            INNER JOIN AporteDetallado apd ON apg.apgId = apd.apdAporteGeneral
            GROUP BY apd.apdAporteGeneral) AS numTraPla ON numTraPla.apdAporteGeneral =apg.apgId
            LEFT JOIN Empresa empr ON empr.empId = apg.apgEmpresa
            LEFT JOIN Empleador empl ON empl.empEmpresa = empr.empId
            LEFT JOIN( SELECT
            roa.roaEmpleador,
            SUM(CASE WHEN roa.roaEstadoAfiliado = 'ACTIVO' THEN 1 ELSE 0 END) AS trabajadoresActivos,
            SUM(CASE WHEN roa.roaEstadoAfiliado != 'ACTIVO' THEN 1 ELSE 0 END) AS trabajadoresNoActivos
            FROM VW_EstadoAfiliacionPersonaEmpresa roa
            GROUP BY roa.roaEmpleador) AS numTra ON numTra.roaEmpleador = empl.empId
            LEFT JOIN Persona per ON empr.empPersona = per.perId
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empr.empId
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN SolicitudNovedadPersona soliNovPer ON soliNovPer.snpSolicitudNovedad = sol.solId
            LEFT JOIN Persona perso ON perso.perId = soliNovPer.snpPersona
            LEFT JOIN Ubicacion ubiM ON ubiM.ubiId = perso.perUbicacionPrincipal
            LEFT JOIN Municipio muni ON muni.munId = ubiM.ubiMunicipio
            LEFT JOIN Departamento depar ON depar.depId = muni.munDepartamento
            WHERE  (apg.apgEstadoAportante = 'NO_FORMALIZADO_SIN_AFILIACION_CON_APORTES' OR ube.ubeTipoUbicacion = 'UBICACION_PRINCIPAL')
            AND sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionPagoTerceros">
        <description>NTF_PAG_APT_TRC</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' as razonSocialNombre, sa.soaNombreAportante AS valorRazonSocialNombre,
            'tipoSolicitante' as tipoSolicitante, ag.apgTipoSolicitante as valorTipoSolicitante,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'fechaRecepcionAporte'as fechaRecepcionAporte, ag.apgFechaRecaudo AS valorFechaRecaudo,
            'periodoPago' as periodoPago, ag.apgPeriodoAporte AS valorPeriodoAporte,
            'montoAporteRecibido' as montoAporteRecibido, ag.apgValTotalApoObligatorio AS valorSaldoAporte,
            'razonSocial/NombreEntidadPagadora' as razonSocialNombreEntidadPagadora, sa.soaNombreAportante as
            valorRazonSocialNombreEntidadPagadora,
            'numeroIdentificacionEntidadPagadora' as numeroIdentificacionEntidadPagadora, sa.soaNumeroIdentificacion as
            valorNumeroIdentificacionEntidadPagadora,
            'tipoIdentificacionEntidadPagadora' as tipoIdentificacionEntidadPagadora, sa.soaTipoIdentificacion as
            valorTipoIdentificacionEntidadPagadora
            FROM Solicitud s,
            SolicitudAporte sa,
            AporteGeneral ag,
            Persona p,
            Ubicacion ubi
            WHERE s.solId = sa.soaSolicitudGlobal
            AND sa.soaRegistroGeneral = ag.apgRegistroGeneral
            AND ag.apgPersona = p.perId
            AND ubi.ubiId = p.perUbicacionPrincipal
            AND s.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionInformacionFaltantePagoManual">
        <description>NTF_GST_INF_PAG_APT</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' as razonSocialNombre, sa.soaNombreAportante AS valorRazonSocialNombre,
            'tipoSolicitante' as tipoSolicitante, sa.soaTipoSolicitante as valorTipoSolicitante,
            'fechaGestion' as fechaGestion, getDate() as valorFechaGestion
            FROM Solicitud s,
            SolicitudAporte sa
            WHERE s.solId = sa.soaSolicitudGlobal
            AND s.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionInformacionFaltanteDevolucionAporte">
        <description>NTF_GST_INF_FLT_APT</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'tipoSolicitante' AS tipoSolicitante,
            sda.sdaTipoSolicitante AS valorTipoSolicitante,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'fechaRecepcionSolicitud' AS fechaRecepcionSolicitud,
            sol.solFechaRadicacion AS valorFechaRecepcionSolicitud,
            'ciudadEmpleador' AS ciudadEmpleador,
            CASE WHEN emp.empId IS NOT NULL THEN mun.munNombre ELSE '' END AS valorCiudadEmpleador,
            'numeroIdentificacion' AS numeroIdentificacion,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacion,
            'tipoIdentificacion' AS tipoIdentificacion,
            per.perTipoIdentificacion AS valorTipoIdentificacion,
            'municipioRepesentanteLegal' AS municipioRepesentanteLegal,
            mun.munNombre as valorMunicipioRepresentanteLegal,
            'departamentoRepesentanteLegal' AS departamentoRepesentanteLegal,
            d.depNombre as valorDepartamentoRepresentanteLegal,
            'ciudadRepresentanteLegal' as ciudadRepresentanteLegal, mun.munNombre AS valorCiudadRepresentanteLegal
            FROM Solicitud sol
            INNER JOIN SolicitudDevolucionAporte sda ON sda.sdaSolicitudGlobal = sol.solId
            INNER JOIN Persona per ON per.perId = sda.sdaPersona
            LEFT JOIN Empresa emp ON emp.empPersona = per.perId
            LEFT JOIN UbicacionEmpresa ube ON emp.empId = ube.ubeEmpresa and ube.ubeTipoUbicacion =
            'UBICACION_PRINCIPAL'
            LEFT JOIN Ubicacion ubi ON (
            (ube.ubeUbicacion = ubi.ubiId and emp.empId is not null)
            OR (per.perUbicacionPrincipal = ubi.ubiId and emp.empId is null)
            )
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT join Departamento d on d.depId=mun.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionAprobacionRechazoDevolucionAporte">
        <description>NTF_APR_DVL_APT</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' AS razonSocialNombre,
            CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perRazonSocial ELSE pip.perRazonSocial END AS
            valorRazonSocialNombre,
            'tipoSolicitante' AS tipoSolicitante,
            apg.apgTipoSolicitante AS valorTipoSolicitante,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'fechaRegistroSolicitud' AS fechaRegistroSolicitud,
            sol.solFechaCreacion AS valorFechaRegistroSolicitud,
            'numeroSolicitud' AS numeroRadicacion,
            sol.solNumeroRadicacion AS valorNumeroSolicitud,
            'resultadoEvaluacionSupervisor' AS resultadoEvaluacionSupervisor,
            sda.sdaResultadoSupervisor AS valorResultadoEvaluacionSupervisor,
            'numeroIdentificacionAportante' AS numeroIdentificacionAportante,
            CASE WHEN apg.apgEmpresa IS NOT NULL THEN CASE WHEN pem.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(pem.perNumeroIdentificacion,'-',pem.perDigitoVerificacion) ELSE pem.perNumeroIdentificacion END ELSE
            pip.perNumeroIdentificacion END AS valorNumeroIdentificacionAportante,
            'tipoIdentificacionAportante' AS tipoIdentificacionAportante,
            CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perTipoIdentificacion ELSE pip.perTipoIdentificacion END AS
            valorTipoIdentificacionAportante,
            'municipioRepesentanteLegal' AS municipioRepesentanteLegal,
            mun.munNombre as valorMunicipioRepresentanteLegal,
            'departamentoRepesentanteLegal' AS departamentoRepesentanteLegal,
            d.depNombre as valorDepartamentoRepresentanteLegal,
            'ciudadRepresentanteLegal' as ciudadRepresentanteLegal, mun.munNombre AS valorCiudadRepresentanteLegal
            FROM Solicitud sol
            INNER JOIN SolicitudDevolucionAporte sda ON sda.sdaSolicitudGlobal = sol.solId
            INNER JOIN DevolucionAporte dap ON dap.dapId = sda.sdaDevolucionAporte
            INNER JOIN DevolucionAporteDetalle dad ON dad.dadDevolucionAporte = dap.dapId
            INNER JOIN MovimientoAporte moa ON dad.dadMovimientoAporte = moa.moaId
            INNER JOIN AporteGeneral apg ON moa.moaAporteGeneral = apg.apgId
            LEFT JOIN Empresa emp ON apg.apgEmpresa = emp.empId
            LEFT JOIN Persona pem ON emp.empPersona = pem.perId
            LEFT JOIN Persona pip ON apg.apgPersona = pip.perId
            LEFT JOIN UbicacionEmpresa ube ON emp.empId = ube.ubeEmpresa and ube.ubeTipoUbicacion =
            'UBICACION_PRINCIPAL'
            LEFT JOIN Ubicacion ubi ON (
            (ube.ubeUbicacion = ubi.ubiId and emp.empId is not null)
            OR (pip.perUbicacionPrincipal = ubi.ubiId and emp.empId is null)
            )
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT join UbicacionEmpresa ue on ue.ubeEmpresa=apg.apgEmpresa
            LEFT join Departamento d on d.depId=mun.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionRechazoDevolucionAporte">
        <description>NTF_RCHZ_DVL_APT</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema, getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' AS razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'tipoSolicitante' AS tipoSolicitante, sda.sdaTipoSolicitante as valorTipoSolicitante,
            'direccion' AS direccion, CASE WHEN sda.sdaTipoSolicitante = 'EMPLEADOR' THEN ubiE.ubiDireccionFisica ELSE
            ubiP.ubiDireccionFisica END AS valorDireccion,
            'municipio' AS municipio, CASE WHEN sda.sdaTipoSolicitante = 'EMPLEADOR' THEN munE.munNombre ELSE
            munP.munNombre END AS valorMunicipio,
            'departamento' AS departamento, CASE WHEN sda.sdaTipoSolicitante = 'EMPLEADOR' THEN depE.depNombre ELSE
            depP.depNombre END AS valorDepartamento,
            'telefono' AS telefono, CASE WHEN sda.sdaTipoSolicitante = 'EMPLEADOR'
            THEN CASE WHEN ubiE.ubiTelefonoFijo IS NOT NULL THEN ubiE.ubiTelefonoFijo ELSE ubiE.ubiTelefonoCelular END
            ELSE CASE WHEN ubiP.ubiTelefonoFijo IS NOT NULL THEN ubiP.ubiTelefonoFijo ELSE ubiP.ubiTelefonoCelular END
            END AS valorTelefono,
            'fechaRegistroSolicitud' AS fechaRegistroSolicitud,sol.solFechaCreacion as valorFechaRegistroSolicitud,
            'numeroSolicitud' AS numeroRadicacion, sol.solNumeroRadicacion as valorNumeroSolicitud,
            'resultadoFinal' as resultadoFinal, sol.solResultadoProceso as valorResultadoFinal,
            'departamentoAportante' AS departamentoAportante,
            CASE WHEN ubiE.ubiId IS NOT NULL THEN depE.depNombre ELSE depP.depNombre END AS valorDepartamentoAportante,
            'numeroIdentificacionAportante' AS numeroIdentificacionAportante,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionAportante,
            'tipoIdentificacionAportante' AS tipoIdentificacionAportante,
            per.perTipoIdentificacion AS valorTipoIdentificacionAportante,
            'municipioRepesentanteLegal' AS municipioRepesentanteLegal,
            munP.munNombre as valorMunicipioRepresentanteLegal,
            'departamentoRepesentanteLegal' AS departamentoRepesentanteLegal,
            depP.depNombre as valorDepartamentoRepresentanteLegal,
            'ciudadRepresentanteLegal' as ciudadRepresentanteLegal, munE.munNombre AS valorCiudadRepresentanteLegal
            FROM Solicitud sol
            JOIN SolicitudDevolucionAporte sda ON sda.sdaSolicitudGlobal = sol.solId
            JOIN Persona per ON per.perId = sda.sdaPersona
            LEFT JOIN Empresa empr ON per.perId = empr.empPersona
            LEFT JOIN UbicacionEmpresa ube ON (empr.empId = ube.ubeEmpresa AND ube.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA')
            LEFT JOIN Ubicacion ubiE ON ubiE.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio munE ON munE.munId = ubiE.ubiMunicipio
            LEFT JOIN Departamento depE ON depE.depId = munE.munDepartamento
            LEFT JOIN Ubicacion ubiP ON ubiP.ubiId = per.perUbicacionPrincipal
            LEFT JOIN Municipio munP ON munP.munId = ubiP.ubiMunicipio
            LEFT JOIN Departamento depP ON depP.depId = munP.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionPagoDeAportes">
        <description>NTF_PAG_PAG_SIM</description>
        <query>
            SELECT
            'razonSocial/Nombre' AS razonSocialNombre,
            soa.soaNombreAportante AS valorRazonSocialNombre,
            'tipoSolicitante' AS tipoSolicitante,
            apg.apgTipoSolicitante AS valorTipoSolicitante,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio,
            'departamento' AS departamento,
            dep.depNombre AS valorDepartamento,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'fechaDeRecepcionAporte' AS fechaDeRecepcionAporte,
            apg.apgFechaRecaudo AS valorApgFechaRecaudo,
            'periodoDePago' AS periodoDePago,
            apg.apgPeriodoAporte AS valorPeriodoDePago,
            'montoAporteRecibido' AS montoAporteRecibido,
            apg.apgValTotalApoObligatorio AS valorMontoAporteRecibido
            FROM Solicitud sol
            INNER JOIN SolicitudAporte soa ON soa.soaSolicitudGlobal = sol.solId
            INNER JOIN AporteGeneral apg ON apg.apgRegistroGeneral = soa.soaRegistroGeneral
            INNER JOIN Persona per ON apg.apgPersona = per.perId
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento dep ON mun.munDepartamento = dep.depId
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionAprobacionSolicitudCorreccionAportes">
        <description>NTF_APR_COR_APT</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema, getDate() AS valorFechaDelSistema
            , 'razonSocial/Nombre' AS razonSocialNombre, CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perRazonSocial
            ELSE pip.perRazonSocial END AS valorRazonSocialNombre
            , 'tipoSolicitante' AS tipoSolicitante, apg.apgTipoSolicitante AS valorTipoSolicitante
            , 'direccion' AS direccion, ubi.ubiDireccionFisica AS valorDireccion
            , 'municipio' AS municipio, mun.munNombre AS valorMunicipio
            , 'departamento' AS departamento, dep.depNombre AS valorDepartamento
            , 'telefono' AS telefono
            , CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular
            END AS valorTelefono
            , 'fechaRegistroSolicitud' as fechaRegistroSolicitud, sol.solFechaCreacion as valorFechaRegistroSolicitud
            , 'numeroSolicitud' as numeroRadicacion, sol.solNumeroRadicacion as valorNumeroSolicitud
            , 'resultadoEvaluacionSupervisor' as resultadoEvaluacionSupervisor, sca.scaResultadoSupervisor as
            valorResultadoEvaluacionSupervisor
            FROM Solicitud sol
            inner join SolicitudCorreccionAporte sca ON sca.scaSolicitudGlobal = sol.solId
            inner join AporteGeneral apg ON sca.scaAporteGeneral = apg.apgId
            left join Empresa emp ON apg.apgEmpresa = emp.empId
            left join Persona pem ON emp.empPersona = pem.perId
            left join Persona pip ON apg.apgPersona = pip.perId
            left join UbicacionEmpresa ube ON emp.empId = ube.ubeEmpresa and ube.ubeTipoUbicacion =
            'UBICACION_PRINCIPAL'
            left join Ubicacion ubi ON (
            (ube.ubeUbicacion = ubi.ubiId and emp.empId is not null)
            OR (pip.perUbicacionPrincipal = ubi.ubiId and emp.empId is null)
            )
            left join Municipio mun ON ubi.ubiMunicipio = mun.munId
            left join Departamento dep ON mun.munDepartamento = dep.depId
            WHERE sol.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionRechazoSolicitudCorreccionAportes">
        <description>NTF_RCHZ_COR_APT</description>
        <query>
            SELECT TOP 1
            'fechaDelSistema' AS fechaDelSistema, getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' AS razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'tipoSolicitante' AS tipoSolicitante, sca.scaTipoSolicitante as valorTipoSolicitante,
            'direccion' AS direccion, CASE WHEN sca.scaTipoSolicitante = 'EMPLEADOR' THEN ubiE.ubiDireccionFisica ELSE
            ubiP.ubiDireccionFisica END AS valorDireccion,
            'municipio' AS municipio, CASE WHEN sca.scaTipoSolicitante = 'EMPLEADOR' THEN munE.munNombre ELSE
            munP.munNombre END AS valorMunicipio,
            'departamento' AS departamento, CASE WHEN sca.scaTipoSolicitante = 'EMPLEADOR' THEN depE.depNombre ELSE
            depP.depNombre END AS valorDepartamento,
            'telefono' AS telefono, CASE WHEN sca.scaTipoSolicitante = 'EMPLEADOR'
            THEN CASE WHEN ubiE.ubiTelefonoFijo IS NOT NULL THEN ubiE.ubiTelefonoFijo ELSE ubiE.ubiTelefonoCelular END
            ELSE CASE WHEN ubiP.ubiTelefonoFijo IS NOT NULL THEN ubiP.ubiTelefonoFijo ELSE ubiP.ubiTelefonoCelular END
            END AS valorTelefono,
            'fechaRegistroSolicitud' AS fechaRegistroSolicitud,sol.solFechaCreacion as valorFechaRegistroSolicitud,
            'numeroSolicitud' AS numeroRadicacion, sol.solNumeroRadicacion as valorNumeroSolicitud,
            'resultadoFinal' as resultadoFinal, sol.solResultadoProceso as valorResultadoFinal
            FROM Solicitud sol
            JOIN SolicitudCorreccionAporte sca ON sol.solId = sca.scaSolicitudGlobal
            JOIN Persona per ON per.perId = sca.scaPersona
            LEFT JOIN Empresa empr ON per.perId = empr.empPersona
            LEFT JOIN UbicacionEmpresa ube ON (empr.empId = ube.ubeEmpresa AND ube.ubeTipoUbicacion =
            'UBICACION_PRINCIPAL')
            LEFT JOIN Ubicacion ubiE ON ubiE.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio munE ON munE.munId = ubiE.ubiMunicipio
            LEFT JOIN Departamento depE ON depE.depId = munE.munDepartamento
            LEFT JOIN Ubicacion ubiP ON ubiP.ubiId = per.perUbicacionPrincipal
            LEFT JOIN Municipio munP ON munP.munId = ubiP.ubiMunicipio
            LEFT JOIN Departamento depP ON depP.depId = munP.munDepartamento
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionSolicitudAportes">
        <description>NTF_PAG_DVL_APT</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' as razonSocialNombre, sa.soaNombreAportante AS valorRazonSocialNombre,
            'tipoSolicitante' as tipoSolicitante, ag.apgTipoSolicitante as valorTipoSolicitante,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'municipio' as municipio, mun.munNombre as valorMunicipio,
            'departamento' as departamento, dep.depNombre as valorDepartamento,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'fechaRegistroSolicitud' as fechaRegistroSolicitud,s.solFechaCreacion as valorFechaRegistroSolicitud,
            'numeroSolicitud' as numeroRadicacion, s.solNumeroRadicacion as valorNumeroSolicitud,
            'resultadoFinal' as resultadoFinal, s.solResultadoProceso as valorResultadoFinal,
            'reporte' as reporte, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado111' as valorReporte,
            'totalDescuentos' as totalDescuentos, (CASE WHEN dev.dapMontoAportes IS NOT NULL
            THEN dev.dapMontoAportes ELSE 0 END + CASE WHEN dev.dapMontoIntereses IS NOT NULL
            THEN dev.dapMontoIntereses ELSE 0 END ) as valorTotalDescuentos,
            'descuentosOperadorInformacion' as descuentosOperadorInformacion, CASE WHEN dev.dapDescuentoGestionPagoOI IS
            NOT NULL
            THEN dev.dapDescuentoGestionPagoOI ELSE 0 END as valorDescuentosOperadorInformacion,
            'descuentosFinanciera' as descuentosFinanciera, CASE WHEN dev.dapDescuentoGestionFinanciera IS NOT NULL
            THEN dev.dapDescuentoGestionFinanciera ELSE 0 END as valorDescuentosFinanciera,
            'otros' as otros, CASE WHEN dev.dapDescuentoOtro IS NOT NULL
            THEN dev.dapDescuentoOtro ELSE 0 END as valorOtros,
            'totalDevolucion' as totalDevolucion,
            ((CASE WHEN dev.dapMontoAportes IS NOT NULL THEN dev.dapMontoAportes ELSE 0 END +
            CASE WHEN dev.dapMontoIntereses IS NOT NULL THEN dev.dapMontoIntereses ELSE 0 END)-
            (CASE WHEN dev.dapDescuentoGestionPagoOI IS NOT NULL THEN dev.dapDescuentoGestionPagoOI ELSE 0 END +
            CASE WHEN dev.dapDescuentoGestionFinanciera IS NOT NULL THEN dev.dapDescuentoGestionFinanciera ELSE 0 END +
            CASE WHEN dev.dapDescuentoOtro IS NOT NULL THEN dev.dapDescuentoOtro ELSE 0 END)) as valorTotalDevolucion,
            'datosPago' as datosPago, mep.mdpTipo as valorDatosPago,
            'titularCuenta' as titularCuenta, CASE WHEN mep.mdpTipo = 'TRANSFERENCIA'
            THEN met.metNombreTitularCuenta END as valorTitularCuenta,
            'tipoIdentificacion' as tipoIdentificacion, CASE WHEN mep.mdpTipo = 'TRANSFERENCIA'
            THEN met.metTipoIdentificacionTitular END as valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, CASE WHEN mep.mdpTipo = 'TRANSFERENCIA'
            THEN met.metNumeroIdentificacionTitular END as valorNumeroIdentificacion,
            'numeroCuentaBancaria' as numeroCuentaBancaria, CASE WHEN mep.mdpTipo = 'TRANSFERENCIA'
            THEN met.metNumeroCuenta END as valorNumeroCuentaBancaria,
            'tipoCuentaBancaria' as tipoCuentaBancaria, CASE WHEN mep.mdpTipo = 'TRANSFERENCIA'
            THEN met.metTipoCuenta END as valorTipoCuentaBancaria,
            'nombreBanco' as nombreBanco, CASE WHEN mep.mdpTipo = 'TRANSFERENCIA'
            THEN ban.banNombre END as valorNombreBanco,
            'municipioRepesentanteLegal' AS municipioRepesentanteLegal,
            mun.munNombre as valorMunicipioRepresentanteLegal,
            'departamentoRepesentanteLegal' AS departamentoRepesentanteLegal,
            dep.depNombre as valorDepartamentoRepresentanteLegal,
            'ciudadRepresentanteLegal' as ciudadRepresentanteLegal, mun.munNombre AS valorCiudadRepresentanteLegal
            FROM Solicitud s,
            AporteGeneral ag,
            SolicitudAporte sa,
            Empresa empr,
            UbicacionEmpresa ubiE,
            Ubicacion ubi,
            Municipio mun,
            Departamento dep,
            SolicitudDevolucionAporte sda,
            DevolucionAporte dev,
            MedioDePago mep
            left outer join MedioTransferencia met on (mep.mdpId = met.mdpId)
            left outer join Banco ban on (ban.banId = met.metBanco)
            WHERE s.solId = sa.soaSolicitudGlobal
            AND ag.apgRegistroGeneral = sa.soaRegistroGeneral
            AND ag.apgEmpresa = empr.empId
            AND ubiE.ubeEmpresa = empr.empId
            AND ubi.ubiId = ubiE.ubeUbicacion
            AND ubiE.ubeTipoUbicacion = 'UBICACION_PRINCIPAL'
            AND ubi.ubiMunicipio = mun.munId
            AND mun.munDepartamento = dep.depId
            AND s.solId = sda.sdaSolicitudGlobal
            AND dev.dapId = sda.sdaDevolucionAporte
            AND dev.dapMedioPago = mep.mdpId
            AND s.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="comunicados.solicitud.devolucion.aportes">
        <description>Consulta tabla para el comunicado 111 NTF_PAG_DVL_APT:CONSULTA_COMUNICADO_SOL_DEV_APORTES
        </description>
        <query>
            SELECT ad.apdId as numeroOperacionRecaudo,
            ag.apgFechaRecaudo as fechaRecaudo,
            ag.apgModalidadRecaudoAporte as metodoRecaudo,
            'planilla_' as numeroPlanilla,
            'tipoPlanilla_' as tipoPlanilla,
            REPLACE(CONVERT(VARCHAR,CONVERT(money, moa.moaValorAporte)),'.00','') as montoDevolucion,
            REPLACE(CONVERT(VARCHAR,CONVERT(money, moa.moaValorInteres)),'.00','') as interesDevolucion,
            REPLACE(CONVERT(VARCHAR,CONVERT(money, (CASE WHEN moa.moaValorAporte IS NOT NULL THEN moa.moaValorAporte
            ELSE 0 END +
            CASE WHEN moa.moaValorInteres IS NOT NULL THEN moa.moaValorInteres ELSE 0 END))),'.00','') as
            totalDevolucion
            FROM Solicitud s,
            SolicitudAporte sa,
            SolicitudDevolucionAporte sda,
            AporteGeneral ag,
            AporteDetallado ad,
            DevolucionAporte dap,
            DevolucionAporteDetalle dad,
            MovimientoAporte moa
            WHERE s.solId = sa.soaSolicitudGlobal
            AND ag.apgRegistroGeneral = sa.soaRegistroGeneral
            AND ag.apgId = ad.apdAporteGeneral
            AND s.solId = sda.sdaSolicitudGlobal
            AND dap.dapId = sda.sdaDevolucionAporte
            AND dap.dapId = dad.dadDevolucionAporte
            AND moa.moaId = dad.dadMovimientoAporte
            AND s.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.recordatorioPlazoLimitePagoAportes">
        <description>REC_PLZ_LMT_PAG</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' '
            + CASE WHEN prl.perSegundoNombre IS NOT NULL
            THEN prl.perSegundoNombre
            ELSE '' END + ' '
            + prl.perPrimerApellido + ' '
            + CASE WHEN prl.perSegundoApellido IS NOT NULL
            THEN prl.perSegundoApellido
            ELSE '' END AS valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            s.solNumeroRadicacion as valorNumeroDeRadicacion,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'clasificacion' as clasificacion,
            (SELECT top 1 sol.solClasificacion FROM Solicitud sol LEFT
            JOIN SolicitudAfiliaciEmpleador sae ON sol.solid=sae.saeSolicitudGlobal
            LEFT JOIN Empleador empl ON empl.empId=sae.saeEmpleador
            WHERE empl.empEmpresa= empr.empId and sol.solresultadoProceso='APROBADA' order by solid desc)AS
            valorClasificacion
            FROM Solicitud s,
            SolicitudPreventiva spr,
            Empresa empr
            LEFT JOIN Persona prl ON prl.perId= empr.empRepresentanteLegal
            LEFT JOIN Ubicacion ubi ON ubi.ubiId= empr.empUbicacionRepresentanteLegal,
            Persona per
            WHERE s.solId = spr.sprSolicitudGlobal
            AND spr.sprPersona = empr.empPersona
            AND spr.sprPersona = per.perId
            AND s.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.recordatorioPlazoLimitePagoAportesPersona">
        <description>REC_PLZ_LMT_PAG_PER : Faltan dos variables (Periodo a evaluar, fecha vencimiento)</description>
        <query>
            SELECT 'ciudadSolicitud' as ciudadSolicitud,
            CASE WHEN mun.munNombre IS NOT NULL
            THEN mun.munNombre ELSE prm.prmValor END AS valorCiudadSolicitud,
            'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombresYApellidosDelAfiliadoPrincipal' as nombresYApellidosDelAfiliadoPrincipal,
            per.perPrimerNombre +' '
            + CASE WHEN per.perSegundoNombre IS NOT NULL
            THEN per.perSegundoNombre
            ELSE '' END + ' '
            + per.perPrimerApellido + ' '
            + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN per.perSegundoApellido
            ELSE '' END AS valorNombresYApellidosDelAfiliadoPrincipal,
            'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            sol.solNumeroRadicacion as valorNumeroDeRadicacion,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'tipoIdentificacion' as tipoIdentificacion,
            per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion,
            per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio
            FROM Solicitud sol
            JOIN SolicitudPreventiva spr ON sol.solId = spr.sprSolicitudGlobal
            JOIN Persona per ON spr.sprPersona = per.perId
            JOIN Parametro prm ON prm.prmNombre = 'CIUDAD_CCF'
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            LEFT JOIN Municipio mun on mun.munId = sol.solCiudadUsuarioRadicacion
            LEFT JOIN Ubicacion ubiPer on per.perUbicacionPrincipal = ubiPer.ubiId
            LEFT JOIN Municipio munPer ON munPer.munId = ubiPer.ubiMunicipio
            WHERE sol.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicadosFovis">
        <description>COMUNICADOS_POSTULACION_FOVIS</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema, getDate() AS valorFechaDelSistema,
            'direccionResidencia' AS direccionResidencia, ubi.ubiDireccionFisica AS valorDireccion,
            'municipio' AS municipio, mun.munNombre AS nombreMunicipio,
            'departamento' AS departamento, dep.depNombre AS nombreDepartamento,
            'telefono' AS telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'fechaRadicacionSolicitud' AS fechaRadicacionSolicitud, s.solFechaRadicacion AS
            valorFechaRadicacionSolicitud,
            'numeroSolicitud' AS numeroSolicitud, s.solNumeroRadicacion AS valorNumeroSolicitud,
            'modalidad' AS modalidad, pf.pofModalidad AS valorModalidad,
            'cicloAsignacion' AS cicloAsignacion, ca.ciaNombre AS valorCicloAsignacion,
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion as valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'nombresYApellidosDelJefeDelHogar' AS nombresYApellidosDelJefeDelHogar, CASE WHEN per.perRazonSocial IS NOT
            NULL
            THEN per.perRazonSocial ELSE (
            per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' +
            per.perSegundoApellido ELSE '' END)
            END AS valorNombresYApellidosDelJefeDelHogar
            FROM
            SOLICITUD s
            JOIN SOLICITUDPOSTULACION sp ON s.solId = sp.spoSolicitudGlobal
            JOIN POSTULACIONFOVIS pf ON pf.pofId = sp.spoPostulacionFOVIS
            JOIN JEFEHOGAR jh ON jh.jehId = pf.pofJefeHogar
            JOIN AFILIADO afi ON afi.afiId = jh.jehAfiliado
            JOIN PERSONA per ON per.perId = afi.afiPersona
            JOIN UBICACION ubi ON per.perUbicacionPrincipal = ubi.ubiId
            JOIN MUNICIPIO mun ON mun.munId = ubi.ubiMunicipio
            JOIN DEPARTAMENTO dep ON dep.depId = mun.munDepartamento
            JOIN CICLOASIGNACION ca ON pf.pofCicloAsignacion = ca.ciaId
            WHERE s.solId =:idSolicitud
            UNION ALL
            SELECT
            'fechaDelSistema' AS fechaDelSistema, getDate() AS valorFechaDelSistema,
            'direccionResidencia' AS direccionResidencia, ubi.ubiDireccionFisica AS valorDireccion,
            'municipio' AS municipio, mun.munNombre AS nombreMunicipio,
            'departamento' AS departamento, dep.depNombre AS nombreDepartamento,
            'telefono' AS telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'fechaRadicacionSolicitud' AS fechaRadicacionSolicitud, s.solFechaRadicacion AS
            valorFechaRadicacionSolicitud,
            'numeroSolicitud' AS numeroSolicitud, s.solNumeroRadicacion AS valorNumeroSolicitud,
            'modalidad' AS modalidad, pf.pofModalidad AS valorModalidad,
            'cicloAsignacion' AS cicloAsignacion, ca.ciaNombre AS valorCicloAsignacion,
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion as valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'nombresYApellidosDelJefeDelHogar' AS nombresYApellidosDelJefeDelHogar, CASE WHEN per.perRazonSocial IS NOT
            NULL
            THEN per.perRazonSocial ELSE (
            per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' +
            per.perSegundoApellido ELSE '' END)
            END AS valorNombresYApellidosDelJefeDelHogar
            FROM SOLICITUD s
            JOIN SOLICITUDVerificacionFovis sp ON s.solId = sp.svfSolicitudGlobal
            JOIN POSTULACIONFOVIS pf ON pf.pofId = sp.svfPostulacionFOVIS
            JOIN JEFEHOGAR jh ON jh.jehId = pf.pofJefeHogar
            JOIN AFILIADO afi ON afi.afiId = jh.jehAfiliado
            JOIN PERSONA per ON per.perId = afi.afiPersona
            JOIN UBICACION ubi ON per.perUbicacionPrincipal = ubi.ubiId
            JOIN MUNICIPIO mun ON mun.munId = ubi.ubiMunicipio
            JOIN DEPARTAMENTO dep ON dep.depId = mun.munDepartamento
            JOIN CICLOASIGNACION ca ON pf.pofCicloAsignacion = ca.ciaId
            WHERE s.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.empleador">
        <description>Constante que representa la consulta de un encabezado cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoSolicitante' as tipoSolicitante, 'EMPLEADOR' AS valorTipoSolicitante,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'clasificacion' as clasificacion, solicitud.solclasificacion AS valorClasificacion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsarioQueRadico,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, solicitud.solResultadoProceso AS valorResultado,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicEmpleador.saeEstadoSolicitud AS valorEstadoDeLaSolicitud,
            'estadoDeAfiliacion' AS estadoDeAfiliacion, empleador.empEstadoEmpleador AS valorEstadoDeAfiliacion,
            'usuarioVerificador' AS usuarioEscalo,
            (SELECT esoDestinatario FROM EscalamientoSolicitud WHERE esoSolicitud = solicitud.solId) AS
            valorUsuarioVerificador
            FROM Persona persona
            INNER JOIN Empresa empresa ON empresa.empPersona = persona.perId
            INNER JOIN Empleador empleador ON empleador.empEmpresa = empresa.empId
            INNER JOIN SolicitudAfiliaciEmpleador solicEmpleador ON solicEmpleador.saeEmpleador = empleador.empId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicEmpleador.saeSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.empleador.escalamiento">
        <description>Constante que representa la consulta de un encabezado cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoSolicitante' as tipoSolicitante, 'EMPLEADOR' AS valorTipoSolicitante,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'clasificacion' as clasificacion, solicitud.solclasificacion AS valorClasificacion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'asuntoDeEscalamiento' AS asuntoDeEscalamiento, escalamientoSolicitud.esoAsunto AS
            valorAsuntoDeEscalamiento,
            'descripcionDeEscalamiento' AS descripcionDeEscalamiento, escalamientoSolicitud.esodescripcion AS
            valorDescripcionDeEscalamiento,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico
            FROM Persona persona
            INNER JOIN Empresa empresa ON empresa.empPersona = persona.perId
            INNER JOIN Empleador empleador ON empleador.empEmpresa = empresa.empId
            INNER JOIN SolicitudAfiliaciEmpleador solicEmpleador ON solicEmpleador.saeEmpleador = empleador.empId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicEmpleador.saeSolicitudGlobal
            INNER JOIN EscalamientoSolicitud escalamientoSolicitud ON escalamientoSolicitud.esoSolicitud =
            solicitud.solId
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezadoProcesos_TRA_111">
        <description>Constante que representa la consulta de un encabezado cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'nombreRemitente' AS nombreRemitente, cajaCorrespondencia.ccoRemitente AS valorNombreRemitente,
            'sedeRemitente' AS sedeRemitente, cajaCorrespondencia.ccoSederemitente AS valorSedeRemitente
            FROM CajaCorrespondencia cajaCorrespondencia INNER JOIN Solicitud solicitud ON
            solicitud.solCajaCorrespondencia = cajaCorrespondencia.ccoId
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.persona">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoSolicitante' as tipoSolicitante, rolAfiliado.roaTipoAfiliado AS valorTipoSolicitante,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'clasificacion' as clasificacion, solicitud.solclasificacion AS valorClasificacion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud,solicitud.solfechaCreacion AS
            valorFechaYHoraDeSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, solicitud.solResultadoProceso AS valorResultado,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solFechaRadicacion As
            valorFechaYHoraDeAsignacion,
            'usuarioVerificador' as usuarioVerificador, solicitud.solDestinatario as valorUsuarioVerificador,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud, (CASE
            WHEN solicAfiPersona.sapEstadoSolicitud='RADICADA' THEN ('RADICADA')
            WHEN solicAfiPersona.sapEstadoSolicitud='CERRADA' THEN ('CERRADA')
            WHEN solicAfiPersona.sapEstadoSolicitud='NO_CONFORME_GESTIONADA' THEN ('NO_CONFORME_GESTIONADA')
            ELSE ('EN_PROCESO') END) AS valorEstadoDeLaSolicitud,
            'nombreDelTrabajador' AS nombreDelTrabajador, persona.perRazonSocial AS valorNombreDelTrabajador,
            'centroDeTrabajo' AS centroDeTrabajo,
            (SELECT sueNombre FROM SucursalEmpresa WHERE sueId = rolAfiliado.roaSucursalEmpleador) AS
            valorCentroDeTrabajo
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN RolAfiliado rolAfiliado ON rolAfiliado.roaAfiliado = afiliado.afiId
            INNER JOIN SolicitudAfiliacionPersona solicAfiPersona ON solicAfiPersona.sapRolAfiliado = rolAfiliado.roaId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicAfiPersona.sapSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.persona2">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoSolicitante' as tipoSolicitante, rolAfiliado.roaTipoAfiliado AS valorTipoSolicitante,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'clasificacion' as clasificacion, solicitud.solclasificacion AS valorClasificacion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, solicitud.solResultadoProceso AS valorResultado,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud, solicAfiPersona.sapEstadoSolicitud AS
            valorEstadoDeLaSolicitud,
            'nombreDelTrabajador' AS nombreDelTrabajador, persona.perRazonSocial AS valorNombreDelTrabajador,
            'centroDeTrabajo' AS centroDeTrabajo,
            (SELECT sueNombre FROM SucursalEmpresa WHERE sueId = rolAfiliado.roaSucursalEmpleador) AS
            valorCentroDeTrabajo
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN RolAfiliado rolAfiliado ON rolAfiliado.roaAfiliado = afiliado.afiId
            INNER JOIN SolicitudAfiliacionPersona solicAfiPersona ON solicAfiPersona.sapRolAfiliado = rolAfiliado.roaId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicAfiPersona.sapSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.persona.personaDetalle">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoSolicitante' as tipoSolicitante, rolAfiliado.roaTipoAfiliado AS valorTipoSolicitante,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'clasificacion' as clasificacion, solicitud.solclasificacion AS valorClasificacion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, solicitud.solResultadoProceso AS valorResultado,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud, (CASE
            WHEN solicAfiPersona.sapEstadoSolicitud='RADICADA' THEN ('RADICADA')
            WHEN solicAfiPersona.sapEstadoSolicitud='CERRADA' THEN ('CERRADA')
            ELSE ('EN_PROCESO') END) AS valorEstadoDeLaSolicitud,
            'nombreDelTrabajador' AS nombreDelTrabajador, (persona.perPrimerApellido + SPACE(1) +
            persona.perSegundoApellido + SPACE(1) + persona.perPrimerNombre+ SPACE(1) + persona.perSegundoNombre)AS
            valorNombreDelTrabajador,
            'fechaDeNacimiento' AS fechaDeNacimiento, personadetalle.pedFechaNacimiento AS valorFechaDeNacimiento,
            'telefonoFijo' AS telefonoFijo, ubicacion.ubiTelefonoFijo AS valorTelefonoFijo,
            'celular' AS celular, ubicacion.ubiTelefonoCelular AS valorCelular,
            'autorizoInformacion' AS autorizoInformacion, personadetalle.pedAutorizaUsodatosPersonales AS
            valorAutorizoInformacion,
            'correoElectronico' AS correoElectronico, ubicacion.ubiEmail AS valorCorreoElectronico
            FROM Persona persona
            INNER JOIN Ubicacion ubicacion ON ubicacion.ubiId = persona.perUbicacionPrincipal
            INNER JOIN PersonaDetalle personadetalle ON personadetalle.pedpersona = persona.perId
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN RolAfiliado rolAfiliado ON rolAfiliado.roaAfiliado = afiliado.afiId
            INNER JOIN SolicitudAfiliacionPersona solicAfiPersona ON solicAfiPersona.sapRolAfiliado = rolAfiliado.roaId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicAfiPersona.sapSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.persona.entidadPagadora">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion AS valorDv,
            'entidadPagadora' AS entidadPagadora, entidadP.epaEstadoEntidadPagadora AS valorEntidadPagadora,
            'tipoDeAfiliacion' AS tipoDeAfiliacion, entidadP.epaTipoAfiliacion AS valorTipoDeAfiliacion
            FROM Persona persona
            INNER JOIN Empresa empresa ON empresa.empPersona = persona.perId
            INNER JOIN Entidadpagadora entidadP ON entidadP.epaEmpresa = empresa.empid
            INNER JOIN RolAfiliado rolA ON entidadP.epaId=rolA.roapagadorAportes
            INNER JOIN SolicitudAfiliacionPersona solicAfiPersona ON solicAfiPersona.sapRolAfiliado = rolA.roaId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicAfiPersona.sapSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.empleador.solicitudNovedad">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoSolicitante' as tipoSolicitante, 'EMPLEADOR' AS valorTipoSolicitante,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'clasificacion' as clasificacion, solicitud.solclasificacion AS valorClasificacion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsarioQueRadico,
			'usuarioVerificador' AS usuarioEscalo, (CASE WHEN(SELECT esoDestinatario FROM EscalamientoSolicitud WHERE
            esoSolicitud = solicitud.solId) IS NULL
            THEN(
            solicitud.solDestinatario
            )ELSE (
            SELECT esoDestinatario FROM EscalamientoSolicitud WHERE esoSolicitud = solicitud.solId
            )END)AS valorUsuarioVerificador,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, solicitud.solResultadoProceso AS valorResultado,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudNovedad.snoEstadoSolicitud AS
            valorEstadoDeLaSolicitud,
            'sucursal' AS sucursal, sucursalEmpresa.sueNombre AS valorSucursal,
            'sedeRemitente' AS sederemitente, (case when solicitud.solMetodoEnvio ='FISICO' then (
            SELECT ccoSedeRemitente FROM CajaCorrespondencia WHERE ccoId = solicitud.solCajaCorrespondencia
            ) else NULL end)AS valorSedeRemitente
            FROM Persona persona
            INNER JOIN Empresa empresa ON empresa.empPersona = persona.perId
            INNER JOIN SucursalEmpresa sucursalEmpresa ON sucursalEmpresa.sueEmpresa = empresa.empid
            INNER JOIN Empleador empleador ON empleador.empEmpresa = empresa.empId
            INNER JOIN SolicitudNovedadEmpleador solicitudNovedadEmpleador ON
            solicitudNovedadEmpleador.sneIdEmpleador=empleador.empId
            INNER JOIN SolicitudNovedad solicitudNovedad ON solicitudNovedad.snoId =
            solicitudNovedadEmpleador.sneIdSolicitudNovedad
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudNovedad.snoSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.empleador.gestionNovedad">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoSolicitante' as tipoSolicitante, 'EMPLEADOR' AS valorTipoSolicitante,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'clasificacion' as clasificacion, solicitud.solclasificacion AS valorClasificacion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, solicitud.solResultadoProceso AS valorResultado,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudNovedad.snoEstadoSolicitud AS
            valorEstadoDeLaSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'usuarioVerificador' AS usuarioEscalo,
            (SELECT esoDestinatario FROM EscalamientoSolicitud WHERE esoSolicitud = solicitud.solId) AS
            valorUsuarioVerificador
            FROM Persona persona
            INNER JOIN Empresa empresa ON empresa.empPersona = persona.perId
            INNER JOIN Empleador empleador ON empleador.empEmpresa = empresa.empId
            INNER JOIN SolicitudNovedadEmpleador solicitudNovedadEmpleador ON
            solicitudNovedadEmpleador.sneIdEmpleador=empleador.empId
            INNER JOIN SolicitudNovedad solicitudNovedad ON solicitudNovedad.snoId =
            solicitudNovedadEmpleador.sneIdSolicitudNovedad
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudNovedad.snoSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.persona.solicitudNovedad">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoSolicitante' as tipoSolicitante, NULL
            <!--  (SELECT rolAfiliado.roaTipoAfiliado  AS roaTipoAfiliado
				FROM RolAfiliado rolAfiliado, Afiliado afiliado,
				SolicitudNovedadPersona solicitudNovedadPersona,
				SolicitudNovedad solicitudNovedad,
				Solicitud solicitud WHERE rolAfiliado.roaAfiliado = afiliado.afiId
				AND solicitudNovedadPersona.snpRolAfiliado = rolAfiliado.roaId
				AND solicitudNovedad.snoId = solicitudNovedadPersona.snpSolicitudNovedad
				AND solicitud.solId = solicitudNovedad.snoSolicitudGlobal
				AND solicitud.solId = :idSolicitud)-->
            AS valorTipoSolicitante,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'clasificacion' as clasificacion, solicitud.solclasificacion AS valorClasificacion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, solicitud.solResultadoProceso AS valorResultado,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud, solicitudNovedad.snoEstadoSolicitud AS
            valorEstadoDeLaSolicitud,
            'nombreDelTrabajador' AS nombreDelTrabajador, (persona.perPrimerApellido + SPACE(1) +
            persona.perSegundoApellido + SPACE(1) + persona.perPrimerNombre+ SPACE(1) + persona.perSegundoNombre)AS
            valorNombreDelTrabajador ,
            'solId' AS solId, solicitud.solId AS valorSolId,
            'sucursal' as sucursal, sucursalEmpresa.sueNombre AS valorSucursal,
            'sedeRemitente' AS sederemitente, (CASE WHEN solicitud.solMetodoEnvio ='FISICO'
            THEN(
            SELECT sccfNombre FROM SedeCajaCompensacion WHERE sccfId = (SELECT ccoSedeRemitente FROM CajaCorrespondencia
            WHERE ccoId = solicitud.solCajaCorrespondencia)
            )ELSE (
            SELECT sccfNombre FROM SedeCajaCompensacion WHERE sccfId = solicitud.solSedeDestinatario
            )END)AS valorSedeRemitente,
            'usuarioVerificador' AS usuarioEscalo, (CASE WHEN(SELECT esoDestinatario FROM EscalamientoSolicitud WHERE
            esoSolicitud = solicitud.solId) IS NULL
            THEN(
            solicitud.solDestinatario
            )ELSE (
            SELECT esoDestinatario FROM EscalamientoSolicitud WHERE esoSolicitud = solicitud.solId
            )END)AS valorUsuarioVerificador,
            'municipio' AS municipio,
            (select mun.munNombre from Persona p INNER JOIN Empresa e ON p.perId  = e.empRepresentanteLegal
            INNER JOIN UbicacionEmpresa u ON e.empId = u.ubeEmpresa INNER JOIN Ubicacion ubi ON ubi.ubiId = u.ubeUbicacion
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio WHERE u.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA' and p.perId=persona.perId)
            AS valorMunicipio
            FROM Persona persona
            INNER JOIN SolicitudNovedadPersona solicitudNovedadPersona ON solicitudNovedadPersona.snpPersona =
            persona.perId
            LEFT JOIN RolAfiliado rolAfiliado ON rolAfiliado.roaId = solicitudNovedadPersona.snpRolAfiliado
            LEFT JOIN SucursalEmpresa sucursalEmpresa ON sucursalEmpresa.sueId = rolAfiliado.roaSucursalEmpleador
            INNER JOIN SolicitudNovedad solicitudNovedad ON solicitudNovedad.snoId =
            solicitudNovedadPersona.snpSolicitudNovedad
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudNovedad.snoSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.persona.gestionNovedad">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'tipoSolicitante' as tipoSolicitante, rolAfiliado.roaTipoAfiliado AS valorTipoSolicitante,
            'clasificacion' as clasificacion, solicitud.solclasificacion AS valorClasificacion,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, solicitud.solResultadoProceso AS valorResultado,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud, solicitudNovedad.snoEstadoSolicitud AS
            valorEstadoDeLaSolicitud,
            'usuarioVerificador' as usuarioVerificador, (CASE WHEN escalamientoSolicitud.esoDestinatario IS NULL
            THEN(
            solicitud.solDestinatario
            )ELSE(
            escalamientoSolicitud.esoDestinatario
            )END) as valorUsuarioVerificador
            FROM Solicitud solicitud
            INNER JOIN SolicitudNovedad solicitudNovedad ON solicitud.solId = solicitudNovedad.snoSolicitudGlobal
            LEFT JOIN SolicitudNovedadPersona solicitudNovedadPersona ON solicitudNovedad.snoId =
            solicitudNovedadPersona.snpSolicitudNovedad
            LEFT JOIN Persona persona ON solicitudNovedadPersona.snpPersona = persona.perId
            LEFT JOIN EscalamientoSolicitud escalamientoSolicitud ON escalamientoSolicitud.esoSolicitud =
            solicitud.solId
            LEFT JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            LEFT JOIN RolAfiliado rolAfiliado ON rolAfiliado.roaAfiliado = afiliado.afiId
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.persona.postulacionFovis">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'jefeDeHogar' as jefeHogar, CASE WHEN persona.perRazonSocial IS NOT NULL THEN persona.perRazonSocial ELSE (
            persona.perPrimerNombre + CASE WHEN persona.perSegundoNombre IS NOT NULL THEN ' ' + persona.perSegundoNombre
            ELSE '' END
            + ' ' + persona.perPrimerApellido + CASE WHEN persona.perSegundoApellido IS NOT NULL THEN ' ' +
            persona.perSegundoApellido ELSE '' END)
            END AS valorJefeHogar,
            'cicloDeAsignacion' AS cicloDeAsignacion,
            (SELECT ciaNombre FROM CicloAsignacion WHERE ciaId = postulacionFovis.pofCicloAsignacion) AS
            valorCicloDeAsignacion,
            'modalidad' AS modalidad, postulacionFovis.pofModalidad,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudPostulacion.spoEstadoSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, (CASE WHEN solicitud.solResultadoProceso IS NULL
            THEN (
            'EN PROCESO'
            )ELSE (
            solicitud.solResultadoProceso
            )END) AS valorResultado,
            'usuarioQueEscalo' AS usuarioQueEscalo,
            (SELECT TOP(1) esoDestinatario FROM EscalamientoSolicitud WHERE esoSolicitud = solicitud.solId) AS
            valorUsuarioQueEscalo,
            'backControlInternoFovis' AS backControlInternoFovis,
            (SELECT TOP(1) solSvf.solUsuarioRadicacion FROM SolicitudVerificacionFovis svf JOIN Solicitud solSvf ON
            (svf.svfSolicitudGlobal = solsvf.solId AND svf.svfPostulacionFovis = postulacionFovis.pofId)) AS
            valorBackControlInternoFovis,
            'usuarioVerificador' AS usuarioVerificador, solicitud.solDestinatario AS valorUsuarioVerificador
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN JefeHogar jefeHogar ON jefeHogar.jehAfiliado = afiliado.afiId
            INNER JOIN PostulacionFOVIS postulacionFovis ON postulacionFovis.pofJefeHogar = jefeHogar.jehId
            INNER JOIN SolicitudPostulacion solicitudPostulacion ON solicitudPostulacion.spoPostulacionFOVIS =
            postulacionFovis.pofId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudPostulacion.spoSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
            UNION ALL
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'jefeDeHogar' as jefeHogar, CASE WHEN persona.perRazonSocial IS NOT NULL THEN persona.perRazonSocial ELSE (
            persona.perPrimerNombre + CASE WHEN persona.perSegundoNombre IS NOT NULL THEN ' ' + persona.perSegundoNombre
            ELSE '' END
            + ' ' + persona.perPrimerApellido + CASE WHEN persona.perSegundoApellido IS NOT NULL THEN ' ' +
            persona.perSegundoApellido ELSE '' END)
            END AS valorJefeHogar,
            'cicloDeAsignacion' AS cicloDeAsignacion,
            (SELECT ciaNombre FROM CicloAsignacion WHERE ciaId = postulacionFovis.pofCicloAsignacion) AS
            valorCicloDeAsignacion,
            'modalidad' AS modalidad, postulacionFovis.pofModalidad,
            'numeroDeSolicitud' AS numeroDeSolicitud, sol.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, sol.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudPostulacion.spoEstadoSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, sol.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, sol.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, sol.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, sol.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, (CASE WHEN sol.solResultadoProceso IS NULL
            THEN (
            'EN PROCESO'
            )ELSE (
            sol.solResultadoProceso
            )END) AS valorResultado,
            'usuarioQueEscalo' AS usuarioQueEscalo,
            (SELECT TOP(1) esoDestinatario FROM EscalamientoSolicitud WHERE esoSolicitud = sol.solId) AS
            valorUsuarioQueEscalo,
            'backControlInternoFovis' AS backControlInternoFovis,
            sol.solDestinatario AS valorBackControlInternoFovis,
            'usuarioVerificador' AS usuarioVerificador, null AS valorUsuarioVerificador
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN JefeHogar jefeHogar ON jefeHogar.jehAfiliado = afiliado.afiId
            INNER JOIN PostulacionFOVIS postulacionFovis ON postulacionFovis.pofJefeHogar = jefeHogar.jehId
            INNER JOIN SolicitudPostulacion solicitudPostulacion ON solicitudPostulacion.spoPostulacionFOVIS =
            postulacionFovis.pofId
            INNER JOIN Solicitud sol ON sol.solId = solicitudPostulacion.spoSolicitudGlobal
            INNER JOIN SolicitudVerificacionFovis solicitudVerificacion ON solicitudVerificacion.svfPostulacionFOVIS =
            postulacionFovis.pofId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudVerificacion.svfSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
            UNION ALL
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'jefeDeHogar' as jefeHogar, CASE WHEN persona.perRazonSocial IS NOT NULL THEN persona.perRazonSocial ELSE (
            persona.perPrimerNombre + CASE WHEN persona.perSegundoNombre IS NOT NULL THEN ' ' + persona.perSegundoNombre
            ELSE '' END
            + ' ' + persona.perPrimerApellido + CASE WHEN persona.perSegundoApellido IS NOT NULL THEN ' ' +
            persona.perSegundoApellido ELSE '' END)
            END AS valorJefeHogar,
            'cicloDeAsignacion' AS cicloDeAsignacion,
            (SELECT ciaNombre FROM CicloAsignacion WHERE ciaId = postulacionFovis.pofCicloAsignacion) AS
            valorCicloDeAsignacion,
            'modalidad' AS modalidad, postulacionFovis.pofModalidad,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudPostulacion.spoEstadoSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, (CASE WHEN solicitud.solResultadoProceso IS NULL
            THEN (
            'EN PROCESO'
            )ELSE (
            solicitud.solResultadoProceso
            )END) AS valorResultado,
            'usuarioQueEscalo' AS usuarioQueEscalo,
            (SELECT TOP(1) esoDestinatario FROM EscalamientoSolicitud WHERE esoSolicitud = solicitud.solId) AS
            valorUsuarioQueEscalo,
            'backControlInternoFovis' AS backControlInternoFovis,
            (SELECT TOP(1) solSvf.solUsuarioRadicacion FROM SolicitudVerificacionFovis svf JOIN Solicitud solSvf ON
            (svf.svfSolicitudGlobal = solsvf.solId AND svf.svfPostulacionFovis = postulacionFovis.pofId)) AS
            valorBackControlInternoFovis,
            'usuarioVerificador' AS usuarioVerificador, solicitud.solDestinatario AS valorUsuarioVerificador
            FROM SolicitudGestionCruce sgc
            INNER JOIN Solicitud sol ON (sgc.sgcSolicitudGlobal = sol.solId)
            INNER JOIN SolicitudPostulacion solicitudPostulacion ON (sgc.sgcSolicitudPostulacion =
            solicitudPostulacion.spoId)
            INNER JOIN Solicitud solicitud ON (solicitudPostulacion.spoSolicitudGlobal = solicitud.solId)
            INNER JOIN PostulacionFOVIS postulacionFovis ON (solicitudPostulacion.spoPostulacionFOVIS =
            postulacionFovis.pofId)
            INNER JOIN JefeHogar jefeHogar ON (postulacionFovis.pofJefeHogar = jefeHogar.jehId)
            INNER JOIN Afiliado afiliado ON (jefeHogar.jehAfiliado = afiliado.afiId)
            INNER JOIN Persona persona ON (afiliado.afiPersona = persona.perId )
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.persona.asignacionFovis">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'jefeDeHogar' as jefeHogar, CASE WHEN persona.perRazonSocial IS NOT NULL THEN persona.perRazonSocial ELSE (
            persona.perPrimerNombre + CASE WHEN persona.perSegundoNombre IS NOT NULL THEN ' ' + persona.perSegundoNombre
            ELSE '' END
            + ' ' + persona.perPrimerApellido + CASE WHEN persona.perSegundoApellido IS NOT NULL THEN ' ' +
            persona.perSegundoApellido ELSE '' END)
            END AS valorJefeHogar,
            'cicloDeAsignacion' AS cicloDeAsignacion,
            (SELECT ciaNombre FROM CicloAsignacion WHERE ciaId = postulacionFovis.pofCicloAsignacion) AS
            valorCicloDeAsignacion,
            'modalidad' AS modalidad, postulacionFovis.pofModalidad,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudGestionCruce.sgcEstado AS valorEstadoDeLaSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'usuarioEscalo' AS usuarioEscalo,
            (SELECT TOP(1) esoDestinatario FROM EscalamientoSolicitud WHERE esoSolicitud = solicitud.solId) AS
            valorUsuarioEscalo
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN JefeHogar jefeHogar ON jefeHogar.jehAfiliado = afiliado.afiId
            INNER JOIN PostulacionFOVIS postulacionFovis ON postulacionFovis.pofJefeHogar = jefeHogar.jehId
            INNER JOIN SolicitudPostulacion solicitudPostulacion ON SolicitudPostulacion.spoPostulacionFOVIS =
            postulacionFovis.pofId
            JOIN SolicitudGestionCruce solicitudGestionCruce on solicitudPostulacion.spoId = solicitudGestionCruce.sgcSolicitudPostulacion
            JOIN Solicitud solicitud on solicitudGestionCruce.sgcSolicitudGlobal = solicitud.solId
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.aporte.manual">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, solicitudAporte.soaTipoidentificacion AS
            valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, solicitudAporte.soaNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, solicitudAporte.soaNombreAportante AS valorRazonSocialNombre,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudAporte.soaEstadoSolicitud AS
            valorEstadoDeLaSolicitud,
            'estadoComoAportante' AS estadoComoAportante, aporteGeneral.apgEstadoAportante AS valorEstadoComoAportante,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'tipoSolicitante' AS tipoSolicitante, solicitudAporte.soaTipoSolicitante AS valorTipoSolicitante,
            'pagadorPorTerceros' AS pagadorPorTerceros, aporteGeneral.apgPagadorPorTerceros AS valorPagadorPorTerceros,
            'montoDeAporteRecibido' AS montoDeAporteRecibido, NULL as valorMontoDeAporteRecibido,
            'moraDelAporte' AS moraDelAporte, cast(aporteGeneral.apgValorintMora AS varchar) AS valorMoraDelAporte,
            'totalDelAporte' AS totalDelAporte, cast(aporteGeneral.apgValTotalApoObligatorio AS varchar) AS
            valorTotalDelAporte
            FROM SolicitudAporte solicitudAporte
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudAporte.soaSolicitudGlobal
            LEFT JOIN AporteGeneral aporteGeneral ON aporteGeneral.apgRegistroGeneral =
            solicitudAporte.soaRegistroGeneral
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.aporte.devolucion.empleador">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion AS valorDv,
            'tipoSolicitante' AS tipoSolicitante, devolucionAporte.sdaTipoSolicitante,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoTransaccion as valorTipoDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, devolucionAporte.sdaEstadoSolicitud AS
            valorEstadoDeLaSolicitud
            FROM Persona persona
            INNER JOIN SolicitudDevolucionAporte devolucionAporte ON devolucionAporte.sdaPersona = persona.perId
            INNER JOIN Solicitud solicitud ON solicitud.solId = devolucionAporte.sdaSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.aporte.devolucion">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion AS valorDv,
            'tipoSolicitante' AS tipoSolicitante, devolucionAporte.sdaTipoSolicitante,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoTransaccion as valorTipoDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, devolucionAporte.sdaEstadoSolicitud AS
            valorEstadoDeLaSolicitud,
            'estadoDeAfiliacion' AS estadoComoAportante, NULL AS valorEstadoDeAfiliacion
            FROM Persona persona
            INNER JOIN SolicitudDevolucionAporte devolucionAporte ON devolucionAporte.sdaPersona = persona.perId
            INNER JOIN Solicitud solicitud ON solicitud.solId = devolucionAporte.sdaSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.aporte.correcion">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion AS valorDv,
            'tipoSolicitante' AS tipoSolicitante, devolucionCorreccionAporte.scaTipoSolicitante,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, devolucionCorreccionAporte.scaEstadoSolicitud AS
            valorEstadoDeLaSolicitud
            FROM Persona persona
            INNER JOIN SolicitudCorreccionAporte devolucionCorreccionAporte ON devolucionCorreccionAporte.scaPersona =
            persona.perId
            INNER JOIN Solicitud solicitud ON solicitud.solId = devolucionCorreccionAporte.scaSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.aporte.cierre">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'numeroDeSolicitud' as numeroDeSolicitud, solNumeroRadicacion AS valorNumeroDeSolicitud,
            'usuarioQueRadico' as usuarioQueRadico, solUsuarioRadicacion AS valorUsuarioQueRadico,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud, sciEstadoSolicitud AS valorEstadoDeLaSolicitud,
            'fechaInicio' as fechaInicio, sciFechaInicio AS valorFechaInicio,
            'fechaFin' as fechaFin, sciFechaFin AS valorFechaFin,
            'gestionCierreDeRecaudo' AS gestionCierreDeRecaudo, sciTipoCierre valorGestionCierreDeRecaudo
            FROM SolicitudCierreRecaudo sci
            JOIN Solicitud on solicitud.solId= sciSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="comunicados.solicitud.fovis.actaAsignacion">
        <description>Consulta para el comunicado 102 ACT_ASIG_FOVIS:CONSULTA_FOVIS_ACTA_ASIGNACION</description>
        <query>
          SELECT DISTINCT('numeroActaAsignacion') as numeroActaAsignacion, aaf.aafId AS valorNumeroActaAsignacion,
            'fechaDelSistema' as fechaDelSistema, CAST(FORMAT(dbo.GETLOCALDATE(), 'dd ''de'' MMMM ''de'' yyyy', 'es-CO')
            as VARCHAR(25)) AS valorFechaDelSistema,
            'fechaResolucion' as fechaResolucion, CAST(FORMAT(aaf.aafFechaResolucion, 'dd ''de'' MMMM ''de'' yyyy',
            'es-CO')as VARCHAR(25)) AS valorFechaResolucion,
            'numeroResolucionSsf' as numeroResolucionSsf, aaf.aafNumeroResolucion AS valorNumeroResolucionSsf,
            'anoResolucionSsf' as anoResolucionSsf, aaf.aafAnoResolucion AS valorAnoResolucionSsf,
            'numeroOficio' as numeroOficio, aaf.aafNumeroOficio AS valorNumeroOficio,
            'fechaOficio' as fechaOficio, CAST(FORMAT(aaf.aafFechaOficio, 'dd ''de'' MMMM ''de'' yyyy', 'es-CO')as
            VARCHAR(25)) AS valorFechaOficio,
            'cicloAsignacion' as cicloAsignacion, cia.ciaNombre AS valorCicloAsignacion,
            'fechaApertura' as fechaApertura , CAST(FORMAT(cia.ciaFechaInicio, 'dd ''de'' MMMM ''de'' yyyy', 'es-CO')as
            VARCHAR(25)) AS valorFechaApertura,
            'fechaCierre' as fechaCierre, CAST(FORMAT(cia.ciaFechaFin, 'dd ''de'' MMMM ''de'' yyyy', 'es-CO')as
            VARCHAR(25)) AS valorFechaCierre,
            'cantidadPostControlInternoLetras' as cantidadPostControlInternoLetras,
           dbo.ufn_CantidadConLetra(pc.cantPost) AS valorCantidadPostControlInternoLetras,
            'cantidadPostControlInternoNumero' AS cantidadPostControlInternoNumero,
            COALESCE(pc.cantPost, 0) AS valorCantidadPostControlInternoNumero,
            'cantidadPostCruceRatificadoLetras' as cantidadPostCruceRatificadoLetras,
            dbo.ufn_CantidadConLetra(pcr.cantPost) AS valorCantidadPostCruceRatificadoLetras,
            'cantidadPostCruceRatificadoNumero' as cantidadPostCruceRatificadoNumero, ISNULL(pcr1.cantPost,0) AS
            valorCantidadPostCruceRatificadoNumero,
            'familiasNovedadCruceInformacionLetras' as familiasNovedadCruceInformacionLetras,
           dbo.ufn_CantidadConLetra(ISNULL(pc.cantPost,0) - ISNULL(pcr.cantPost,0)) AS
           valorFamiliasNovedadCruceInformacionLetras,
            'familiasNovedadCruceInformacionNumeros' as familiasNovedadCruceInformacionNumeros, ISNULL(pc.cantPost,0) -
            ISNULL(pcr.cantPost,0) AS valorFamiliasNovedadCruceInformacionNumeros,
            'valorDisponibleLetras' as valorDisponibleLetras, dbo.ufn_CantidadConLetra(cia.ciaValorDisponible) AS
            valorDisponibleCajaLetras,
            'valorDisponibleNumero' as valorDisponibleNumero, REPLACE(CONVERT(VARCHAR,CONVERT(Money,
            cia.ciaValorDisponible),1),'.00','') AS valorDisponibleCajaNumero,
            'numeroHogaresAsignados' as numeroHogaresAsignados, pas.cantPost AS valorNumeroHogaresAsignados,
            'numeroHogaresAsignadosLetras' as numeroHogaresAsignadosLetras, dbo.ufn_CantidadConLetra(pas.cantPost) AS
           valorNumeroHogaresAsignadosLetras,
            'valorTotalSfvAsignarLetras' as valorTotalSfvAsignarLetras,
            dbo.ufn_CantidadConLetra(saf.safValorSFVAsignado) AS valorTotalSfvAsignarP,
            'valorTotalSfvAsignar' as valorTotalSfvAsignar, REPLACE(CONVERT(VARCHAR,CONVERT(Money,
            saf.safValorSFVAsignado),1),'.00','') AS valorTotalSfvAsignarE,
            'tabla1' as tabla1, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado102TablaCruce' as valorTabla1,
            'tabla2' as tabla2, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado102TablaAsignacion' as
            valorTabla2,
            'tabla3' as tabla3, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado102TablaModalidad' as
            valorTabla3,
            'nombresYApellidosResponsable1' as nombresYApellidosResponsable1, aaf.aafNombreResponsable1 AS
            valorNombresYApellidosResponsable1,
            'cargoResponsable1' as cargoResponsable1, aaf.aafCargoResponsable1 AS valorCargoResponsable1,
            'nombresYApellidosResponsable2' as nombresYApellidosResponsable2, aaf.aafNombreResponsable2 AS
            valorNombresYApellidosResponsable2,
            'cargoResponsable2' as cargoResponsable2, aaf.aafCargoResponsable2 AS valorCargoResponsable2,
            'nombresYApellidosResponsable3' as nombresYApellidosResponsable3, aaf.aafNombreResponsable3 AS
            valorNombresYApellidosResponsable3,
            'cargoResponsable3' as cargoResponsable3, aaf.aafCargoResponsable3 AS valorCargoResponsable3,
            'numeroSolicitud' as numeroSolicitud, sol.solNumeroRadicacion AS valorNumeroSolicitud
            FROM SolicitudAsignacion saf
            JOIN Solicitud sol ON (saf.safSolicitudGlobal = sol.solId)
            LEFT JOIN ActaAsignacionFovis aaf ON (saf.safId = aaf.aafSolicitudAsignacion)
            JOIN CicloAsignacion cia ON (saf.safCicloAsignacion = cia.ciaId)
            LEFT JOIN (SELECT pof.pofCicloAsignacion, COUNT(pof.pofId) AS cantPost
			FROM PostulacionFOVIS pof
			JOIN SolicitudPostulacion spo ON spo.spoPostulacionFOVIS = pof.pofId
			WHERE spo.spoEstadoSolicitud = 'PENDIENTE_ENVIO_CONTROL_INTERNO'
            GROUP BY pof.pofCicloAsignacion ) AS pcr ON (cia.ciaId = pcr.pofCicloAsignacion)
            LEFT JOIN (SELECT pof.pofCicloAsignacion, COUNT(pof.pofId) AS cantPost
			FROM PostulacionFOVIS pof
			JOIN SolicitudPostulacion spo ON spo.spoPostulacionFOVIS = pof.pofId
			WHERE spo.spoEstadoSolicitud = 'PENDIENTE_ENVIO_CONTROL_INTERNO'       
			GROUP BY pof.pofCicloAsignacion) AS pc ON (cia.ciaId = pc.pofCicloAsignacion)
            LEFT JOIN (SELECT pof.pofCicloAsignacion, COUNT(pof.pofId) AS cantPost
			FROM PostulacionFOVIS pof
			WHERE pof.pofResultadoAsignacion = 'ESTADO_ASIGNADO'
            GROUP BY pof.pofCicloAsignacion) AS pas ON (cia.ciaId = pas.pofCicloAsignacion)
			LEFT JOIN (SELECT pof.pofCicloAsignacion, COUNT(pof.pofId) AS cantPost
			FROM PostulacionFOVIS pof
			JOIN SolicitudPostulacion spo ON spo.spoPostulacionFOVIS = pof.pofId
			LEFT JOIN SolicitudGestionCruce sgc ON (spo.spoId = sgc.sgcSolicitudPostulacion)
			WHERE spo.spoEstadoSolicitud = 'POSTULACION_CERRADA'
			and sgc.sgcEstadoCruceHogar IN ('CRUCE_RATIFICADO_PENDIENTE_VERIFICACION', 'CRUCES_RATIFICADOS')
            GROUP BY pof.pofCicloAsignacion ) AS pcr1 ON (cia.ciaId = pcr1.pofCicloAsignacion)
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="comunicados.solicitud.fovis.actaAsignacion.tablaCruceInformacion">
        <description>Consulta tabla para el comunicado 102
            ACT_ASIG_FOVIS:CONSULTA_FOVIS_ACTA_ASIGNACION_TABLA_CRUCE_INFORMACION
        </description>
        <query>
            SELECT per.perTipoIdentificacion AS tipoIdentificacionJefeHogar,
            per.perNumeroIdentificacion AS numeroIdentificacionJefeHogar,
            CASE WHEN per.perRazonSocial IS NOT NULL THEN per.perRazonSocial
            ELSE (per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE
            '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' +
            per.perSegundoApellido ELSE '' END)
            END AS nombresApellidosAfiliadoJefeHogar,
            cruce.clasificacion AS parentesco,
            CASE WHEN cruce.perRazonSocial IS NOT NULL THEN cruce.perRazonSocial
            ELSE (cruce.perPrimerNombre + CASE WHEN cruce.perSegundoNombre IS NOT NULL THEN ' ' + cruce.perSegundoNombre
            ELSE '' END
            + ' ' + cruce.perPrimerApellido + CASE WHEN cruce.perSegundoApellido IS NOT NULL THEN ' ' +
            cruce.perSegundoApellido ELSE '' END)
            END AS nombresApellidosAfiliadoIntegrante,
            cruce.perTipoIdentificacion AS tipoIdentificacionIntegranteHogar,
            cruce.perNumeroIdentificacion AS numeroIdentificacionIntegranteHogar,
            cruce.crdCausalCruce AS causalCruce,
            pof.pofId
            FROM SolicitudAsignacion saf
            JOIN Solicitud sol ON (saf.safSolicitudGlobal = sol.solId)
            JOIN PostulacionFOVIS pof ON (saf.safId = pof.pofSolicitudAsignacion)
            JOIN SolicitudPostulacion spo ON (pof.pofId = spo.spoPostulacionFovis)
            JOIN JefeHogar jeh ON (pof.pofJefeHogar = jeh.jehId)
            JOIN Afiliado afi ON (jeh.jehAfiliado = afi.afiId)
            JOIN Persona per ON (afi.afiPersona = per.perId)
            JOIN (SELECT sgc.sgcSolicitudPostulacion, crd.crdCausalCruce, per.*,
            CASE WHEN inh.inhTipoIntegrante IS NULL THEN 'JEFE_HOGAR' ELSE inh.inhTipoIntegrante END AS clasificacion
            FROM SolicitudGestionCruce sgc
            JOIN Cruce cru ON (sgc.sgcId = cru.cruSolicitudGestionCruce)
            JOIN CruceDetalle crd ON (cru.cruId = crd.crdCruce)
            JOIN Persona per ON (cru.cruPersona = per.perId)
            LEFT JOIN IntegranteHogar inh ON (cru.cruPersona = inh.inhPersona)
            WHERE cru.cruEstadoCruce = 'CRUCE_RATIFICADO') AS cruce ON (spo.spoId = cruce.sgcSolicitudPostulacion)
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="comunicados.solicitud.fovis.actaAsignacion.tablaHogaresAsignados">
        <description>Consulta tabla hogares asignados para el comunicado 102
            ACT_ASIG_FOVIS:CONSULTA_FOVIS_ACTA_ASIGNACION_TABLA_HOGARES_ASIGNADOS
        </description>
        <query>
            SELECT per.perTipoidentificacion AS tipoIdentificacionJefeHogar,
            per.perNumeroidentificacion AS numeroIdentificacionJefeHogar,
            CASE WHEN per.perRazonSocial IS NOT NULL THEN per.perRazonSocial
            ELSE (per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE
            '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' +
            per.perSegundoApellido ELSE '' END)
            END AS nombresApellidosAfiliadoJefeHogar,
            pof.pofModalidad AS modalidad,
            pof.pofPuntaje AS puntaje,
            pof.pofValorAsignadoSFV AS valorAsignadoSFV,
            CASE WHEN pas.pasRecursoPrioridad IS NULL THEN ' ' ELSE pas.pasRecursoPrioridad END as recursoPrioridad
            FROM SolicitudAsignacion saf
            JOIN Solicitud sol ON (saf.safSolicitudGlobal = sol.solId)
            JOIN PostulacionFOVIS pof ON (saf.safId = pof.pofSolicitudAsignacion)
            JOIN JefeHogar jeh ON (pof.pofJefeHogar = jeh.jehId)
            JOIN Afiliado afi ON (jeh.jehAfiliado = afi.afiId)
            JOIN Persona per ON (afi.afiPersona = per.perId)
            JOIN PostulacionAsignacion pas ON (pas.pasPostulacionFovis = pof.pofId AND pas.pasSolicitudAsignacion = saf.safId)
            WHERE pof.pofResultadoAsignacion = 'ESTADO_ASIGNADO'
            AND sol.solId = :idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="comunicados.solicitud.fovis.actaAsignacion.tablaModalidad">
        <description>Consulta tabla hogares por modalidad para el comunicado 102
            ACT_ASIG_FOVIS:CONSULTA_FOVIS_ACTA_ASIGNACION_TABLA_MODALIDAD
        </description>
        <query>
            SELECT pof.pofModalidad AS modalidad,
            COUNT(pof.pofId) AS hogaresModalidad,
            SUM(pof.pofValorAsignadoSFV) AS sumatoriaValorAsignadoModalidad
            FROM SolicitudAsignacion saf
            JOIN Solicitud sol ON (saf.safSolicitudGlobal = sol.solId)
            JOIN PostulacionFOVIS pof ON (saf.safId = pof.pofSolicitudAsignacion)
            WHERE pof.pofResultadoAsignacion = 'ESTADO_ASIGNADO'
            AND sol.solId = :idSolicitud
            GROUP BY pof.pofModalidad
            ORDER BY pof.pofModalidad
        </query>
    </named-native-query>


    <named-native-query name="comunicados.solicitud.fovis.cartaAsignacion">
        <description>Consulta para el comunicado 103 CRT_ASIG_FOVIS:CONSULTA_FOVIS_CARTA_ASIGNACION</description>
        <query>
            select  'fechaResolucion' as fechaResolucion, CAST(FORMAT(a.aafFechaResolucion, 'dd ''de'' MMMM ''de''
            yyyy', 'es-CO') as VARCHAR(25)) AS valorFechaResolucion,
            'fechaInicioVigencia' as fechaInicioVigencia, CAST(FORMAT(a.aafInicioVigencia, 'dd ''de'' MMMM ''de''
            yyyy', 'es-CO') AS VARCHAR(25)) AS valorFechaInicioVigencia,
            'direccionResidencia' as direccionResidencia, u.ubiDireccionFisica AS valorDireccionResidencia,
            'municipio' as municipio, m.munNombre as valorMunicipio,
            'departamento' as departamento, d.depNombre as valorDepartamento,
            'fechaRadicacionSolicitud' as fechaRadicacionSolicitud, CAST(FORMAT(a.aafInicioVigencia, 'dd ''de'' MMMM
            ''de'' yyyy', 'es-CO') AS VARCHAR(25)) AS valorFechaRadicacionSolicitud,
            'tablaHogar' as tablaHogar, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado103CartaAsignacion' as
            valortablaHogar,
            'numeroActaAsignacion' as numeroActaAsignacion, a.aafId AS valorNumeroActaAsignacion,
            'valorSfv' as valorSfv, REPLACE(CONVERT(VARCHAR,CONVERT(Money, pf.pofValorAsignadoSFV),1),'.00','') AS
            valorSfvAsignado,
            'municipioAsociadoProyecto' as municipioAsociadoProyecto, mun2.munNombre as
            valorMunicipioAsociadoProyecto,
            'departamentoAsociadoProyecto' as departamentoAsociadoProyecto, dep2.depNombre as
            valorDepartamentoAsociadoProyecto,
            'modalidad' as modalidad, pf.pofModalidad as valorModalidad,
            'ahorroProgramadoValor' as ahorroProgramadoValor, ahorroPrevio.valorAhorroProgramado AS
            valorAhorroProgramadoValor,
            'ahorroProgramadoContractualValor' as ahorroProgramadoContractualValor, ahorroPrevio.valorAhorroFNA AS
            valorAhorroProgramadoContractualValor,
            'aportesPeriodicosEntidadValor' as aportesPeriodicosEntidadValor, ahorroPrevio.valorAportesPeriodicos AS
            valoraportesPeriodicosEntidadValor,
            'cesantiasInmovilizadasValor' as cesantiasInmovilizadasValor, ahorroPrevio.valorCesantiasInmovilizadas AS
            valorCesantiasInmovilizadasValor,
            'cuotaInicialValor' as cuotaInicialValor, ahorroPrevio.valorCuotaInicial AS valorCuotaInicialValor,
            'valorLoteTerrenoPropio' as valorLoteTerrenoPropio, ahorroPrevio.valorLoteTerreno AS valorLoteTerrenoP,
            'valorLoteOpvOngNoReembolsable' as valorLoteOpvOngNoReembolsable, ahorroPrevio.valorLoteOpv AS
            valorLoteOpvOngNoReem,
            'valorLotePorSubsidio' as valorLotePorSubsidio, ahorroPrevio.valorSubdisioMunicipal AS valorLotePorSub,
            'valorAhorroOtrasModalidades' as valorAhorroOtrasModalidades, recursoComplementario.valorOtrasModalidades AS
            valorAhorroOtraModalidad,
            'valorAportesEnteTerritorial' as valorAportesEnteTerritorial, recursoComplementario.valorEnteTerritorial AS
            valorAporteEnteTerritorial,
            'valorAportesSolidarios' as valorAportesSolidarios, recursoComplementario.valorAportesSolidarios AS
            valorAporteSolidarios,
            'valorCesantiasNoInmovilizadas' as valorCesantiasNoInmovilizadas,
            recursoComplementario.valorCesantiasNoInmovilizadas AS valorCesantiasNoInmovilizada,
            'valorCreditoAprobado' as valorCreditoAprobado, recursoComplementario.valorCreditoAprobado AS valorCreditoA,
            'valorDonacionOtrasEntidades' as valorDonacionOtrasEntidades,
            recursoComplementario.valorDonacionOtrasEntidades AS valorDonacionOtrasE,
            'valorEvaluacionCrediticia' as valorEvaluacionCrediticia, recursoComplementario.valorEvaluacionCrediticia AS
            valorEvaluacionCred,
            'valorOtrosRecursos' as valorOtrosRecursos, recursoComplementario.valorOtroRecurso AS valorOtrosRec,
            'valorOtrosRecursosEspecifico' as valorOtrosRecursosEspecifico, recursoComplementario.otroRecursoTexto AS
            valorOtrosRecursosEsp,
            'valorAvanceObra' as valorAvanceObra, recursoComplementario.valorAvanceObra AS valorAvanceO,
			'nombresYApellidosDelJefeDelHogar' AS nombresYApellidosDelJefeDelHogar, CASE WHEN p.perRazonSocial IS NOT
            NULL
            THEN p.perRazonSocial ELSE (
            p.perPrimerNombre + CASE WHEN p.perSegundoNombre IS NOT NULL THEN ' ' + p.perSegundoNombre ELSE '' END
            + ' ' + p.perPrimerApellido + CASE WHEN p.perSegundoApellido IS NOT NULL THEN ' ' +
            p.perSegundoApellido ELSE '' END)
            END AS valorNombresYApellidosDelJefeDelHogar
            from Solicitud s
            inner join SolicitudAsignacion sa on sa.safSolicitudGlobal=s.solId
            inner join ActaAsignacionFovis a on a.aafSolicitudAsignacion=sa.safId
            inner join PostulacionFOVIS pf on pf.pofSolicitudAsignacion=sa.safId
            inner join JefeHogar j on j.jehId=pf.pofJefeHogar
            inner join Afiliado af on af.afiId=j.jehAfiliado
            inner join Persona p on p.perId=af.afiPersona
            inner join CicloAsignacion c on c.ciaId=sa.safCicloAsignacion
            inner join Ubicacion u on p.perUbicacionPrincipal=u.ubiId
            inner join Municipio m on m.munId=u.ubiMunicipio
            inner join Departamento d on d.depId=m.munDepartamento
            left join ProyectoSolucionVivienda ps on ps.psvId=pf.pofProyectoSolucionVivienda
            left join Ubicacion ue2 on ue2.ubiId=ps.psvUbicacionProyecto
            left join Municipio mun2 on mun2.munId=ue2.ubiMunicipio
            left join Departamento dep2 on dep2.depId=mun2.munDepartamento
            inner join (select pfi.pofId, max(CASE WHEN ap.ahpNombreAhorro= 'AHORRO_PROGRAMADO' THEN ap.ahpValor END) as
            'valorAhorroProgramado' ,
            max(CASE WHEN ap.ahpNombreAhorro= 'AHORRO_PROGRAMADO_CONTRACTUAL_EVALUACION_CREDITICIA_FAVORABLE_FNA' THEN
            ap.ahpValor END) as 'valorAhorroFNA',
            max(CASE WHEN ap.ahpNombreAhorro= 'APORTES_PERIODICOS' THEN ap.ahpValor END) as 'valorAportesPeriodicos',
            max(CASE WHEN ap.ahpNombreAhorro= 'CESANTIAS_INMOVILIZADAS' THEN ap.ahpValor END) as
            'valorCesantiasInmovilizadas',
            max(CASE WHEN ap.ahpNombreAhorro= 'CUOTA_INICIAL' THEN ap.ahpValor END) as 'valorCuotaInicial',
            max(CASE WHEN ap.ahpNombreAhorro= 'CUOTAS_PAGADAS' THEN ap.ahpValor END) as 'valorCuotasPagadas',
            max(CASE WHEN ap.ahpNombreAhorro= 'VALOR_LOTE_O_TERRENO_PROPIO' THEN ap.ahpValor END) as 'valorLoteTerreno',
            max(CASE WHEN ap.ahpNombreAhorro= 'VALOR_LOTE_OPV' THEN ap.ahpValor END) as 'valorLoteOpv',
            max(CASE WHEN ap.ahpNombreAhorro= 'VALOR_LOTE_POR_SUBSIDIO_MUNICIPAL_O_DEPARTAMENTAL' THEN ap.ahpValor END)
            as 'valorSubdisioMunicipal'
            FROM PostulacionFOVIS pfi, AhorroPrevio ap
            WHERE pfi.pofId = ap.ahpPostulacionFOVIS
            Group by pfi.pofId
            ) ahorroPrevio on ahorroPrevio.pofId=pf.pofId
			inner join (select pfi.pofId, max(CASE WHEN rc.recNombre= 'AHORRO_OTRAS_MODALIDADES' THEN rc.recValor END) as
            'valorOtrasModalidades' ,
            max(CASE WHEN rc.recNombre= 'APORTES_ENTE_TERRITORIAL' THEN rc.recValor END) as 'valorEnteTerritorial',
            max(CASE WHEN rc.recNombre= 'APORTES_SOLIDARIOS' THEN rc.recValor END) as 'valorAportesSolidarios',
            max(CASE WHEN rc.recNombre= 'CESANTIAS_NO_INMOVILIZADAS' THEN rc.recValor END) as
            'valorCesantiasNoInmovilizadas',
            max(CASE WHEN rc.recNombre= 'CREDITO_APROBADO' THEN rc.recValor END) as 'valorCreditoAprobado',
            max(CASE WHEN rc.recNombre= 'DONACION_OTRAS_ENTIDADES' THEN rc.recValor END) as
            'valorDonacionOtrasEntidades',
            max(CASE WHEN rc.recNombre= 'EVALUACION_CREDITICIA' THEN rc.recValor END) as 'valorEvaluacionCrediticia',
            max(CASE WHEN rc.recNombre= 'OTROS_RECURSOS' THEN rc.recValor END) as 'valorOtroRecurso',
            max(CASE WHEN rc.recNombre= 'OTROS_RECURSOS' THEN rc.recOtroRecurso END) as 'otroRecursoTexto',
            max(CASE WHEN rc.recNombre= 'VALOR_AVANCE_OBRA' THEN rc.recValor END) as 'valorAvanceObra'
            FROM PostulacionFOVIS pfi, RecursoComplementario rc
            WHERE pfi.pofId = rc.recPostulacionFOVIS
            Group by pfi.pofId
            ) recursoComplementario on recursoComplementario.pofId=pf.pofId
            where pf.pofId= :idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="comunicados.solicitud.fovis.actaAsignacion.tablaCartaAsignacion">
        <description>Consulta para el comunicado 103 CRT_ASIG_FOVIS:CONSULTA_FOVIS_TABLA_CARTA_ASIGNACION</description>
        <query>
            SELECT ing.nombresApellidosPersona,ing.tipoIdentificacion, ing.numeroIdentificacion
            FROM PostulacionFovis pof
            JOIN (SELECT 'J' as tipoIntegrante, jeh.jehId AS jefeHogar, CASE WHEN per.perRazonSocial IS NOT NULL THEN
            per.perRazonSocial ELSE (
            per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN
            ' ' + per.perSegundoNombre ELSE '' END + ' ' + per.perPrimerApellido
            + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' + per.perSegundoApellido ELSE '' END)
            END AS nombresApellidosPersona,
            jeh.jehId, per.perTipoIdentificacion AS tipoIdentificacion,
            per.perNumeroIdentificacion AS numeroIdentificacion
            FROM JefeHogar jeh
            JOIN Afiliado afi ON afi.afiId = jeh.jehAfiliado
            JOIN Persona per ON per.perId = afi.afiPersona
            WHERE jeh.jehEstadoHogar = 'ACTIVO'
            UNION
            SELECT 'I' as tipoIntegrante, jeh.jehId AS jefeHogar, CASE WHEN per.perRazonSocial IS NOT NULL THEN
            per.perRazonSocial ELSE (
            per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN
            ' ' + per.perSegundoNombre ELSE '' END + ' ' + per.perPrimerApellido
            + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' + per.perSegundoApellido ELSE '' END)
            END AS nombresApellidosPersona,
            jeh.jehId,
            per.perTipoIdentificacion AS tipoIdentificacion,
            per.perNumeroIdentificacion AS numeroIdentificacion
            FROM JefeHogar jeh
            JOIN IntegranteHogar inh on jeh.jehId = inh.inhJefeHogar
            JOIN Persona per on per.perId = inh.inhPersona
            WHERE inh.inhEstadoHogar = 'ACTIVO'
            AND inh.inhPostulacionFovis = :idSolicitud) ing on pof.pofJefeHogar = ing.jefeHogar
            WHERE pof.pofResultadoAsignacion = 'ESTADO_ASIGNADO'
            AND pof.pofId =:idSolicitud
            ORDER BY ing.tipoIntegrante DESC
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.persona.asignarSolicitudPresencial">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsarioQueRadico,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud, solicAfiPersona.sapEstadoSolicitud AS valorEstadoDeLaSolicitud
            FROM SolicitudAfiliacionPersona solicAfiPersona
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicAfiPersona.sapSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.empleador.asignarSolicitudPresencial">
        <description>Constante que representa la consulta de un encabezado por empleador en la
            asignarSolicitudPresencial cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsarioQueRadico,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicEmpleador.saeEstadoSolicitud AS valorEstadoDeLaSolicitud
            FROM SolicitudAfiliaciEmpleador solicEmpleador
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicEmpleador.saeSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.fovis.asignarSolicitudPresencial">
        <description>Constante que representa la consulta de un encabezado por fovis en la asignarSolicitudPresencial
            cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsarioQueRadico,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudPostulacion.spoEstadoSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion
            FROM SolicitudPostulacion solicitudPostulacion
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudPostulacion.spoSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.fovis.legalizacion.asignarSolicitudPresencial">
        <description>Constante que representa la consulta de un encabezado por fovis en la asignarSolicitudPresencial
            cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsarioQueRadico,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudLegalizacion.sldEstadoSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion
            FROM solicitudlegalizacionDesembolso solicitudLegalizacion
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudLegalizacion.sldSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.novedad.asignarSolicitudPresencial">
        <description>Constante que representa la consulta de un encabezado por novedad en la asignarSolicitudPresencial
            cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsarioQueRadico,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud, solicitudNovedad.snoEstadoSolicitud AS
            valorEstadoDeLaSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion
            FROM SolicitudNovedad solicitudNovedad
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudNovedad.snoSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.gestionPreventiva">
        <description>Constante que representa la consulta de un encabezado por novedad en la asignarSolicitudPresencial
            cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'tipoSolicitante' as tipoSolicitante, SolicitudPreventiva.sprTipoSolicitanteMovimientoAporte AS
            valorTipoSolicitante,
            'clasificacion' as clasificacion, solicitud.solclasificacion AS valorClasificacion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudPreventiva.sprEstadoSolicitudPreventiva AS
            valorEstadoDeLaSolicitud,
            'estadoDeCartera' AS estadoDeCartera,
            ISNULL((SELECT TOP 1 car.carEstadoCartera FROM Cartera car WHERE car.carPersona = persona.perId order by
            carFechaCreacion desc), 'AL_DIA') AS valorEstadoDeCartera
            FROM Persona persona
            INNER JOIN SolicitudPreventiva solicitudPreventiva ON solicitudPreventiva.sprPersona = persona.perId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudPreventiva.sprSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.fiscalizacionAporte">
        <description>Constante que representa la consulta de un encabezado por novedad en la asignarSolicitudPresencial
            cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'estadoDeAfiliacion' AS estadoDeAfiliacion,cicloFiscalizacion.cfiEstadoCicloFiscalizacion AS
            valorEstadoDeAfiliacion,
            'nooperacion' AS noOperacion, solicitud.solNumeroRadicacion AS valorNooperacion,
            'estadoDeCartera' AS estadoDeCartera,
            (SELECT carEstadoCartera FROM Cartera WHERE carPersona = persona.perId) AS valorEstadoDeCartera,
            'estadoDeFizcalizacion' AS estadoDeFizcalizacion, solicitudFiscaliazacion.sfiEstadoFiscalizacion AS
            valorsolicitudFiscaliazacion
            FROM Persona persona
            INNER JOIN CicloAportante cicloAportante ON cicloAportante.capPersona = persona.perId
            INNER JOIN CicloFiscalizacion cicloFiscalizacion ON cicloFiscalizacion.cfiId =
            cicloAportante.capCicloFiscalizacion
            INNER JOIN SolicitudFiscalizacion solicitudFiscaliazacion ON solicitudFiscaliazacion.sfiCicloAportante =
            cicloAportante.capId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudFiscaliazacion.sfiSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.persona.fiscalizacionAporte">
        <description>Constante que representa la consulta de un encabezado por novedad en la asignarSolicitudPresencial
            cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'estadoDeAfiliacion' AS estadoDeAfiliacion, rolAfiliado.roaEstadoAfiliado AS valorEstadoDeAfiliacion,
            'nooperacion' AS noOperacion, solicitud.solNumeroradicacion AS valorNooperacion,
            'estadoDeCartera' AS estadoDeCartera,
            (SELECT carEstadoCartera FROM Cartera WHERE carPersona = persona.perId) AS valorEstadoDeCartera,
            'estadoDeFizcalizacion' AS estadoDeFizcalizacion, solicitudFiscaliazacion.sfiEstadoFiscalizacion AS
            valorsolicitudFiscaliazacion
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN RolAfiliado rolAfiliado ON rolAfiliado.roaAfiliado = afiliado.afiId
            INNER JOIN CicloAportante cicloAportante ON cicloAportante.capPersona = persona.perId
            INNER JOIN SolicitudFiscalizacion solicitudFiscaliazacion ON solicitudFiscaliazacion.sfiCicloAportante =
            cicloAportante.capId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudFiscaliazacion.sfiSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.empleador.fiscalizacionAporte">
        <description>Constante que representa la consulta de un encabezado por novedad en la asignarSolicitudPresencial
            cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'estadoDeAfiliacion' AS estadoDeAfiliacion, empleador.empEstadoEmpleador AS valorEstadoDeAfiliacion,
            'nooperacion' AS noOperacion, solicitud.solNumeroradicacion AS valorNooperacion,
            'estadoDeCartera' AS estadoDeCartera,
            (SELECT carEstadoCartera FROM Cartera WHERE carPersona = persona.perId) AS valorEstadoDeCartera,
            'estadoDeFizcalizacion' AS estadoDeFizcalizacion, solicitudFiscaliazacion.sfiEstadoFiscalizacion AS
            valorsolicitudFiscaliazacion
            FROM Persona persona
            INNER JOIN Empresa empresa ON empresa.empPersona = persona.perId
            INNER JOIN Empleador empleador ON empleador.empEmpresa = empresa.empId
            INNER JOIN CicloAportante cicloAportante ON cicloAportante.capPersona = persona.perId
            INNER JOIN SolicitudFiscalizacion solicitudFiscaliazacion ON solicitudFiscaliazacion.sfiCicloAportante =
            cicloAportante.capId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudFiscaliazacion.sfiSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="encabezado.buscar.dato.temporal.por.id.solicitud">
        <query>
            SELECT dat.dtsJsonPayload FROM DatoTemporalSolicitud dat WHERE dat.dtsSolicitud IN(:idSolicitud)
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.asignacionFovis">
        <description>Constante que representa la consulta de un encabezado por persona cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT TOP 1
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'jefeDeHogar' AS jefeHogar, CASE WHEN per.perRazonSocial IS NOT NULL THEN per.perRazonSocial ELSE (
            per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' +
            per.perSegundoApellido ELSE '' END)
            END AS valorJefeHogar,
            'cicloDeAsignacion' AS cicloDeAsignacion, ciaNombre AS valorCicloDeAsignacion,
            'tipoDeTransaccion' AS tipoDeTransaccion, solSpo.solTipoTransaccion AS valorTipoDeTransaccion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solSaf.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solSaf.solFechaRadicacion AS valorFechaYHoraDeSolicitud,
            'backControlInternoFovis' AS backControlInternoFovis, saf.safUsuario AS valorBackControlInternoFovis,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solSaf.solfechaCreacion As valorFechaYHoraDeAsignacion,
            'modalidad' AS modalidad, pof.pofModalidad,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solSpo.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, saf.safEstadoSolicitudAsignacion AS valorEstadoDeLaSolicitud
            FROM SolicitudAsignacion saf
            INNER JOIN Solicitud solSaf ON saf.safSolicitudGlobal = solSaf.solId
            INNER JOIN CicloAsignacion cia ON saf.safCicloAsignacion = cia.ciaId
            INNER JOIN PostulacionFOVIS pof ON saf.safId = pof.pofSolicitudAsignacion
            INNER JOIN JefeHogar jeh ON pof.pofJefeHogar = jeh.jehId
            INNER JOIN Afiliado afi ON jeh.jehAfiliado = afi.afiId
            INNER JOIN Persona per ON afi.afiPersona = per.perId
            INNER JOIN SolicitudPostulacion spo ON pof.pofId = spo.spoPostulacionFOVIS
            INNER JOIN Solicitud solSpo ON spo.spoSolicitudGlobal = solSpo.solId
            WHERE solSaf.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.empleador.solAfiliacion">
        <description>
            HU_PROCESO_112_124
            Constante que representa la consulta de un encabezado por persona cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoSolicitante' as tipoSolicitante, 'EMPLEADOR' AS valorTipoSolicitante,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'clasificacion' as clasificacion, solicitud.solclasificacion AS valorClasificacion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsarioQueRadico,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, solicitud.solResultadoProceso AS valorResultado,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud,
            solicEmpleador.saeEstadoSolicitud AS valorEstadoDeLaSolicitud,
            'estadoDeAfiliacion' AS estadoDeAfiliacion, empleador.empEstadoEmpleador AS valorEstadoDeAfiliacion,
            'usuarioVerificador' AS usuarioEscalo,
            (SELECT esoDestinatario FROM EscalamientoSolicitud WHERE esoSolicitud = solicitud.solId) AS
            valorUsuarioVerificador
            FROM Persona persona
            INNER JOIN Empresa empresa ON empresa.empPersona = persona.perId
            INNER JOIN Empleador empleador ON empleador.empEmpresa = empresa.empId
            INNER JOIN SolicitudAfiliaciEmpleador solicEmpleador ON solicEmpleador.saeEmpleador = empleador.empId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicEmpleador.saeSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.empleador.solAfiliacion.externo">
        <description>
            HU_PROCESO_112_124_EXT
            Constante que representa la consulta de un encabezado por persona cuando se hace por id de solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, persona.perDigitoVerificacion as valorDv,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoSolicitante' as tipoSolicitante, 'EMPLEADOR' AS valorTipoSolicitante,
            'tipoDeSolicitud' as tipoDeSolicitud, solicitud.solTipoRadicacion as valorTipoDeSolicitud,
            'clasificacion' as clasificacion, solicitud.solclasificacion AS valorClasificacion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsarioQueRadico,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'resultado' AS resultado, solicitud.solResultadoProceso AS valorResultado,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solicitud.solfechaCreacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud,
            case when solicEmpleador.saeEstadoSolicitud in ('RADICADA') then 'Radicada'
            else (case when solicEmpleador.saeEstadoSolicitud in ('CERRADA') then 'Cerrada'
            else (case when solicEmpleador.saeEstadoSolicitud not in ('RECHAZADA','APROBADA','CANCELADA','DESISTIDA')
            then 'En proceso'
            else '' end) end) END AS valorEstadoDeLaSolicitud,
            'estadoDeAfiliacion' AS estadoDeAfiliacion, empleador.empEstadoEmpleador AS valorEstadoDeAfiliacion,
            'usuarioVerificador' AS usuarioEscalo,
            (SELECT esoDestinatario FROM EscalamientoSolicitud WHERE esoSolicitud = solicitud.solId) AS
            valorUsuarioVerificador
            FROM Persona persona
            INNER JOIN Empresa empresa ON empresa.empPersona = persona.perId
            INNER JOIN Empleador empleador ON empleador.empEmpresa = empresa.empId
            INNER JOIN SolicitudAfiliaciEmpleador solicEmpleador ON solicEmpleador.saeEmpleador = empleador.empId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicEmpleador.saeSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.asignacionFovis.actaAsignacion">
        <description>Constante que representa la consulta de un encabezado de asignacion fovis en el apartado de acta de
            asignacion
        </description>
        <query>
            SELECT TOP 1
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'jefeDeHogar' AS jefeHogar, CASE WHEN per.perRazonSocial IS NOT NULL THEN per.perRazonSocial ELSE (
            per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' +
            per.perSegundoApellido ELSE '' END)
            END AS valorJefeHogar,
            'cicloDeAsignacion' AS cicloDeAsignacion, ciaNombre AS valorCicloDeAsignacion,
            'tipoDeTransaccion' AS tipoDeTransaccion, solSpo.solTipoTransaccion AS valorTipoDeTransaccion,
            'numeroDeSolicitud' AS numeroDeSolicitud, solSaf.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solSaf.solFechaRadicacion AS valorFechaYHoraDeSolicitud,
            'backControlInternoFovis' AS backControlInternoFovis, saf.safUsuario AS valorBackControlInternoFovis,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solSaf.solfechaCreacion As valorFechaYHoraDeAsignacion,
            'modalidad' AS modalidad, pof.pofModalidad,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solSpo.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, saf.safEstadoSolicitudAsignacion AS valorEstadoDeLaSolicitud
            FROM SolicitudAsignacion saf
            INNER JOIN Solicitud solSaf ON saf.safSolicitudGlobal = solSaf.solId
            INNER JOIN CicloAsignacion cia ON saf.safCicloAsignacion = cia.ciaId
            INNER JOIN PostulacionFOVIS pof ON saf.safId = pof.pofSolicitudAsignacion
            INNER JOIN JefeHogar jeh ON pof.pofJefeHogar = jeh.jehId
            INNER JOIN Afiliado afi ON jeh.jehAfiliado = afi.afiId
            INNER JOIN Persona per ON afi.afiPersona = per.perId
            INNER JOIN SolicitudPostulacion spo ON pof.pofId = spo.spoPostulacionFOVIS
            INNER JOIN Solicitud solSpo ON spo.spoSolicitudGlobal = solSpo.solId
            WHERE solSaf.solId =:idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="plantilla.cartaEntidadPagadora">
        <description>
            Consulta para resolver las variables del comunicado de entidades pagadoras CRT_ENT_PAG
        </description>
        <query>
            SELECT
            'ciudad' AS ciudad,
            sol.solCiudadUsuarioRadicacion AS valorCiudad,
            'fecha' AS fecha,
            GETDATE() AS valorFecha,
            'nombreEntidadPagadora' AS nombreEntidadPagadora,
            perRazonSocial AS valorNombreEntidadPagadora,
            'nombreEmpresa' AS nombreEmpresa,
            perRazonSocial AS valorNombreEmpresa,
            'direccion' AS direccion,
            ubiCor.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubiCor.ubiTelefonoFijo IS NOT NULL
            THEN ubiCor.ubiTelefonoFijo
            ELSE ubiCor.ubiTelefonoCelular END AS valorTelefono,
            'tipoIdentificacionEntidadPagadora' AS tipoIdentificacionEntidadPagadora,
            perTipoIdentificacion AS valorTipoIdentificacionEntidadPagadora,
            'numeroIdentificacionEntidadPagadora' AS numeroIdentificacionEntidadPagadora,
            perNumeroIdentificacion AS valorNumeroIdentificacionEntidadPagadora,
            'tipoGestion' AS tipoGestion,
            soaTipoGestion AS valorTipoGestion,
            'estadoEntidadPagadora' AS estadoEntidadPagadora,
            epaEstadoEntidadPagadora AS valorEstadoEntidadPagadora,
            'representanteLegal' As representanteLegal,
            (SELECT p.perPrimerNombre +' '
            + CASE WHEN p.perSegundoNombre IS NOT NULL
            THEN p.perSegundoNombre
            ELSE '' END + ' '
            + p.perPrimerApellido + ' '
            + CASE WHEN p.perSegundoApellido IS NOT NULL
            THEN p.perSegundoApellido
            ELSE '' END
            FROM Persona p
            WHERE p.perId = empRepresentanteLegal) As valorRepresentanteLegal,
            'tabla' AS tabla,
            'com.asopagos.comunicados.ejb.ConsultaReporteComunicado003TablaPersonas' AS valorTabla ,
            'porcentajeAportes' AS porcentajeAportes,
            CASE
            WHEN solAf.solClasificacion IN ('FIDELIDAD_25_ANIOS','MENOS_1_5_SM_0_POR_CIENTO') THEN '0'
            WHEN solAf.solClasificacion IN
            ('MENOS_1_5_SM_0_6_POR_CIENTO','MAS_1_5_SM_0_6_POR_CIENTO','TRABAJADOR_INDEPENDIENTE_0_6_POR_CIENTO') THEN
            '0,6'
            WHEN solAf.solClasificacion IN
            ('MENOS_1_5_SM_2_POR_CIENTO','MAS_1_5_SM_2_POR_CIENTO','TRABAJADOR_INDEPENDIENTE_2_POR_CIENTO') THEN '2'
            ELSE '' END AS valorPorcentajeAportes,
            'departamentoEmpleador' AS departamentoEmpleador,
            ISNULL(dep.depNombre,'') AS valorDepartamentoEmpleador,
            'fechaSistema' AS fechaSistema,
            GETDATE() AS valorFechaSistema,
            'municipioEmpleador' AS municipioEmpleador,
            ISNULL(mun.munNombre,'') AS valorMunicipioEmpleador
            FROM SolicitudAsociacionPersonaEntidadPagadora
            INNER JOIN Solicitud sol ON soaSolicitudGlobal = sol.solId
            INNER JOIN RolAfiliado ON soaRolAfiliado = roaId
            INNER JOIN EntidadPagadora ON roaPagadorAportes = epaId
            INNER JOIN Empresa ON epaEmpresa = empId
            INNER JOIN Persona ON empPersona = perId
            LEFT JOIN UbicacionEmpresa ubeCor ON empId = ubeCor.ubeEmpresa AND ubeCor.ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubiCor ON ubeCor.ubeUbicacion = ubiCor.ubiId
            LEFT JOIN Municipio mun ON mun.munId = ubiCor.ubiMunicipio
            LEFT JOIN Departamento dep ON dep.depId = mun.munDepartamento
            INNER JOIN SolicitudAfiliacionPersona ON roaId = sapRolAfiliado
            INNER JOIN Solicitud solAf ON solAf.solId = sapSolicitudGlobal
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="tabla.CartaEntidadPagadora">
        <description>
            Consulta para generar la tabla de la carta de entidad pagadora
        </description>
        <query>
            SELECT
            per.perTipoidentificacion AS tipoIdentificacionJefeHogar,
            per.perNumeroidentificacion AS numeroIdentificacionJefeHogar,
            CASE WHEN per.perRazonSocial IS NOT NULL THEN per.perRazonSocial ELSE (
            per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' +
            per.perSegundoApellido ELSE '' END)
            END AS nombresApellidosPersona,
            rolAf.roaTipoAfiliado AS tipoAfiliado,
            rolAf.roaEstadoAfiliado AS estadoAfiliado,
            sapep.soaFechaGestion AS fechaNovedad,
            sol.solNumeroRadicacion AS numeroSolicitud,
            rolAf.roaEstadoEnEntidadPagadora AS estadoEntidadPagadora,
            sapep.soaEstado AS estadoSolicitud

            FROM Persona per, Afiliado afi, RolAfiliado rolAf,
            SolicitudAsociacionPersonaEntidadPagadora sapep, Solicitud sol
            WHERE sapep.soaSolicitudGlobal = sol.solId AND sapep.soaRolAfiliado = rolAf.roaId
            AND rolAf.roaAfiliado = afi.afiId AND afi.afiPersona = per.perId
            AND sol.solId IN (:idesSolicitud)
            ORDER BY rolAf.roaEstadoEnEntidadPagadora ASC, per.perPrimerNombre ASC
        </query>
    </named-native-query>
    <named-native-query name="plantillaConsolidadoCartera.notificacionNoRecaudoAportes">
        <description>NTF_NO_REC_APO, SUS_NTF_NO_PAG</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>

        /**
     * Etiqueta para Notificacion de no recaudo de aportes, por acción de cobro 1A
     * sin suspensión automática. Proceso 223.
     */
        /**
        *INICIA GLPI 86025 R
        */
    <named-native-query name="plantillaConsolidadoCartera.notificacionNoRecaudoAportesIndependiente">
        <description>NTF_NO_REC_APO_IND, SUS_NTF_NO_PAG_IND</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>

    <named-native-query name="plantilla.notificacionNoRecaudoAportesIndependiente">
        <description>NTF_NO_REC_APO_IND, SUS_NTF_NO_PAG_IND</description>
        <query>
			SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, GETDATE(),103) AS valorFechaDelSistema,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccionEnvioCorrespondencia' AS direccionEnvioCorrespondencia,
            ubi.ubiDireccionFisica AS valorDireccionIndependiente,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudadIndependiente,
            'fechaCorte' AS fechaCorte,
            dosDca.dosFechaHoraCargue AS valorFechaCorte,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos,
            'fechaVencimientoPago' AS fechaVencimientoPago,
            dosDca.fechaVencimientoDelPago AS valorFechaVencimientoPago,
            'numeroIdentificacionIndependiente' AS numeroIdentificacionIndependiente,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionIndependiente,
            'tipoIdentificacionIndependiente' AS tipoIdentificacionIndependiente,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS valorValorDeudaPresunta,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAportePorPersona' as valorTabla
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC4')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue,
            CONVERT(VARCHAR,DATEADD(DAY, -1, car.carFechaCreacion),103) AS fechaVencimientoDelPago
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('A1','A2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
        </query>
    </named-native-query>

        <named-native-query name="plantillaConsolidadoCartera.notificacionNoRecaudoAportesPensionado">
        <description>NTF_NO_REC_APO_PEN, SUS_NTF_NO_PAG_PEN</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>

    <named-native-query name="plantilla.notificacionNoRecaudoAportesPensionado">
        <description>NTF_NO_REC_APO_PEN, SUS_NTF_NO_PAG_PEN</description>
        <query>
			SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, GETDATE(),103) AS valorFechaDelSistema,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccionEnvioCorrespondencia' AS direccionEnvioCorrespondencia,
            ubi.ubiDireccionFisica AS valorDireccionIndependiente,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudadIndependiente,
            'fechaCorte' AS fechaCorte,
            dosDca.dosFechaHoraCargue AS valorFechaCorte,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos,
            'fechaVencimientoPago' AS fechaVencimientoPago,
            dosDca.fechaVencimientoDelPago AS valorFechaVencimientoPago,
            'numeroIdentificacionIndependiente' AS numeroIdentificacionIndependiente,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionIndependiente,
            'tipoIdentificacionIndependiente' AS tipoIdentificacionIndependiente,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS valorValorDeudaPresunta,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAportePorPersona' as valorTabla
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC5')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue,
            CONVERT(VARCHAR,DATEADD(DAY, -1, car.carFechaCreacion),103) AS fechaVencimientoDelPago
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('A1','A2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
        </query>
    </named-native-query>

    /*
    *FINALIZA GLPI 86025 R
    */

    <named-native-query name="plantilla.notificacionNoRecaudoAportes">
        <description>NTF_NO_REC_APO, SUS_NTF_NO_PAG</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, GETDATE(),103) AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' AS nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' '+ CASE WHEN prl.perSegundoNombre IS NOT NULL THEN prl.perSegundoNombre ELSE '' END +
            ' ' + prl.perPrimerApellido + ' ' +
            CASE WHEN prl.perSegundoApellido IS NOT NULL THEN prl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccionEnvioCorrespondencia' AS direccionEnvioCorrespondencia,
            ubi.ubiDireccionFisica AS valorDireccionRepresentanteLegal,
            'telefonoRepresentanteLegal' AS telefonoRepresentanteLegal,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefonoRepresentanteLegal,
            'ciudadRepresentanteLegal' AS ciudadRepresentanteLegal,
            mun.munNombre AS valorCiudadRepresentanteLegal,
            'fechaCorte' AS fechaCorte,
            dosDca.dosFechaHoraCargue AS valorFechaCorte,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos,
            'fechaVencimientoPago' AS fechaVencimientoPago,
            dosDca.fechaVencimientoDelPago AS valorFechaVencimientoPago,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS valorValorDeudaPresunta,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAportePorPersona' as valorTabla
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC1','LC2','LC3')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue,
            CONVERT(VARCHAR,DATEADD(DAY, -1, car.carFechaCreacion),103) AS fechaVencimientoDelPago
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('A1','A2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Empresa emp ON emp.empPersona = per.perId
            INNER JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            INNER JOIN Persona prl ON prl.perId = emp.empRepresentanteLegal
            WHERE ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
        </query>
    </named-native-query>


    <named-native-query name="plantilla.encabezado.legalizacion.desembolsofovis">
        <description>Constante que representa la consulta de un encabezado de Legalización y desembolso subsidio FOVIS
        </description>
        <query>
            SELECT TOP 1 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS
            valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'jefeDeHogar' as jefeHogar, CASE WHEN persona.perRazonSocial IS NOT NULL THEN persona.perRazonSocial ELSE (
            persona.perPrimerNombre + CASE WHEN persona.perSegundoNombre IS NOT NULL THEN ' ' + persona.perSegundoNombre
            ELSE '' END
            + ' ' + persona.perPrimerApellido + CASE WHEN persona.perSegundoApellido IS NOT NULL THEN ' ' +
            persona.perSegundoApellido ELSE '' END)
            END AS valorJefeHogar,
            'cicloDeAsignacion' AS cicloDeAsignacion,
            (SELECT ciaNombre FROM CicloAsignacion WHERE ciaId = postulacionFovis.pofCicloAsignacion) AS
            valorCicloDeAsignacion,
            'modalidad' AS modalidad, postulacionFovis.pofModalidad,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solAsig.safFechaAceptacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudLegalizacion.sldEstadoSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'backControlInternoFovis' AS backControlInternoFovis,
            (SELECT TOP(1) solSvf.solUsuarioRadicacion FROM SolicitudVerificacionFovis svf JOIN Solicitud solSvf ON
            (svf.svfSolicitudGlobal = solsvf.solId AND svf.svfPostulacionFovis = postulacionFovis.pofId)) AS
            valorBackControlInternoFovis,
            'usuarioEscalo' AS usuarioEscalo,
            (SELECT TOP(1) esoDestinatario FROM EscalamientoSolicitud WHERE esoSolicitud = solicitud.solId) AS
            valorUsuarioEscalo
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN JefeHogar jefeHogar ON jefeHogar.jehAfiliado = afiliado.afiId
            LEFT JOIN PostulacionFOVIS postulacionFovis ON postulacionFovis.pofJefeHogar = jefeHogar.jehId
            LEFT JOIN SolicitudAsignacion solAsig ON postulacionFovis.pofSolicitudAsignacion = solAsig.safId
            LEFT JOIN solicitudlegalizacionDesembolso solicitudLegalizacion ON solicitudLegalizacion.sldPostulacionFovis
            = postulacionFovis.pofId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudLegalizacion.sldSolicitudGlobal
            WHERE solicitud.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.radicar.legalizacion.desembolsofovis">
        <description>Constante que representa la consulta de un encabezado de Legalización y desembolso subsidio FOVIS
        </description>
        <query>
            SELECT TOP 1 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS
            valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'jefeDeHogar' as jefeHogar, CASE WHEN persona.perRazonSocial IS NOT NULL THEN persona.perRazonSocial ELSE (
            persona.perPrimerNombre + CASE WHEN persona.perSegundoNombre IS NOT NULL THEN ' ' + persona.perSegundoNombre
            ELSE '' END
            + ' ' + persona.perPrimerApellido + CASE WHEN persona.perSegundoApellido IS NOT NULL THEN ' ' +
            persona.perSegundoApellido ELSE '' END)
            END AS valorJefeHogar,
            'cicloDeAsignacion' AS cicloDeAsignacion,
            (SELECT ciaNombre FROM CicloAsignacion WHERE ciaId = postulacionFovis.pofCicloAsignacion) AS
            valorCicloDeAsignacion,
            'modalidad' AS modalidad, postulacionFovis.pofModalidad AS valorModalidad,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solAsig.safFechaAceptacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudLegalizacion.sldEstadoSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'usuarioEscalo' AS usuarioEscalo,
            (SELECT TOP(1) esoDestinatario FROM EscalamientoSolicitud WHERE esoSolicitud = solicitud.solId) AS
            valorUsuarioEscalo
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN JefeHogar jefeHogar ON jefeHogar.jehAfiliado = afiliado.afiId
            INNER JOIN PostulacionFOVIS postulacionFovis ON postulacionFovis.pofJefeHogar = jefeHogar.jehId
            LEFT JOIN solicitudlegalizacionDesembolso solicitudlegalizacion ON solicitudLegalizacion.sldPostulacionFovis
            = postulacionFovis.pofId
            LEFT JOIN SolicitudAsignacion solAsig ON postulacionFovis.pofSolicitudAsignacion = solAsig.safId
            INNER JOIN SolicitudPostulacion solicitudPostulacion ON SolicitudPostulacion.spoPostulacionFOVIS =
            postulacionFovis.pofId
            LEFT JOIN ProyectoSolucionVivienda proyectoSolucionVivienda ON proyectoSolucionVivienda.psvId =
            postulacionFovis.pofProyectoSolucionVivienda
            LEFT JOIN Oferente oferente ON oferente.ofeId = proyectoSolucionVivienda.psvOferente
            LEFT JOIN Persona perOfe ON perOfe.perId = oferente.ofePersona
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudPostulacion.spoSolicitudGlobal
            WHERE solicitud.solId =:idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="plantilla.encabezado.reintentar.legalizacion.fovis">
        <description>Constante que representa la consulta de un encabezado de Legalización y desembolso subsidio para el
            proceso (324_074)
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroIdentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'jefeDeHogar' as jefeDeHogar, (CASE WHEN jefeHogar.jehId is null THEN 0 ELSE 1 END) AS valorJefeDeHogar,
            'personaObjetoNovedad' as personaObjetoNovedad, persona.perRazonSocial AS valorPersonaObjetoNovedad,
            'parentesco' as parentesco, inh.inhTipoIntegrante AS valorParentesco,
            'tipoIdPersonaObjetoNovedad' as tipoIdPersonaObjetoNovedad, persona.perTipoIdentificacion AS
            valorTipoIdPersonaObjetoNovedad,
            'numeroIdPersonaObjetoNovedad' as numeroIdPersonaObjetoNovedad, persona.perNumeroIdentificacion AS
            valorNumeroIdPersonaObjetoNovedad
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN JefeHogar jefeHogar ON jefeHogar.jehAfiliado = afiliado.afiId
            LEFT JOIN PostulacionFOVIS postulacionFovis ON postulacionFovis.pofJefeHogar = jefeHogar.jehId
            LEFT JOIN IntegranteHogar inh ON inh.inhPersona = persona.perId
            LEFT JOIN solicitudlegalizacionDesembolso solicitudLegalizacion ON solicitudLegalizacion.sldPostulacionFovis
            = postulacionFovis.pofId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudLegalizacion.sldSolicitudGlobal
            WHERE solicitud.solId =:idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="plantilla.encabezado.verificar.legalizacion.desembolsofovis">
        <description>Constante que representa la consulta de un encabezado de Legalización y desembolso subsidio FOVIS
        </description>
        <query>
            SELECT TOP 1 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS
            valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'jefeDeHogar' as jefeHogar, CASE WHEN persona.perRazonSocial IS NOT NULL THEN persona.perRazonSocial ELSE (
            persona.perPrimerNombre + CASE WHEN persona.perSegundoNombre IS NOT NULL THEN ' ' + persona.perSegundoNombre
            ELSE '' END
            + ' ' + persona.perPrimerApellido + CASE WHEN persona.perSegundoApellido IS NOT NULL THEN ' ' +
            persona.perSegundoApellido ELSE '' END)
            END AS valorJefeHogar,
            'cicloDeAsignacion' AS cicloDeAsignacion,
            (SELECT ciaNombre FROM CicloAsignacion WHERE ciaId = postulacionFovis.pofCicloAsignacion) AS
            valorCicloDeAsignacion,
            'modalidad' AS modalidad, postulacionFovis.pofModalidad,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solAsig.safFechaAceptacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudLegalizacion.sldEstadoSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'backControlInternoFovis' AS backControlInternoFovis,
            (SELECT TOP(1) solSvf.solUsuarioRadicacion FROM SolicitudVerificacionFovis svf JOIN Solicitud solSvf ON
            (svf.svfSolicitudGlobal = solsvf.solId AND svf.svfPostulacionFovis = postulacionFovis.pofId)) AS
            valorBackControlInternoFovis,
            'usuarioVerificador' AS usuarioVerificador, solicitud.solDestinatario AS valorUsuarioVerificador
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN JefeHogar jefeHogar ON jefeHogar.jehAfiliado = afiliado.afiId
            LEFT JOIN PostulacionFOVIS postulacionFovis ON postulacionFovis.pofJefeHogar = jefeHogar.jehId
            LEFT JOIN SolicitudAsignacion solAsig ON postulacionFovis.pofSolicitudAsignacion = solAsig.safId
            LEFT JOIN solicitudlegalizacionDesembolso solicitudLegalizacion ON solicitudLegalizacion.sldPostulacionFovis
            = postulacionFovis.pofId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudLegalizacion.sldSolicitudGlobal
            WHERE solicitud.solId =:idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="plantilla.notificacionNoRecaudoAportesPersonas">
        <description>NTF_NO_REC_APO_PER, SUS_NTF_NO_PAG_PER</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, GETDATE(),103) AS valorFechaDelSistema,
            'nombreYApellidosAfiliadoPrincipal' AS nombreYApellidosAfiliadoPrincipal,
            per.perPrimerNombre +' '+ CASE WHEN per.perSegundoNombre IS NOT NULL THEN per.perSegundoNombre ELSE '' END +
            ' ' + per.perPrimerApellido + ' ' +
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN per.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosAfiliadoPrincipal,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'fechaCorte' AS fechaCorte,
            dosDca.dosFechaHoraCargue AS valorFechaCorte,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos,
            'fechaVencimientoPago' AS fechaVencimientoPago,
            dosDca.fechaVencimientoDelPago AS valorFechaVencimientoPago,
            'numeroIdentificacionAfiliado' AS numeroIdentificacionAfiliado,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionAfiliado,
            'tipoIdentificacionAfiliado' AS tipoIdentificacionAfiliado,
            per.perTipoIdentificacion as valorTipoIdentificacionAfiliado,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS valorValorDeudaPresunta,
			'tipoIdentificacion' AS tipoIdentificacion,
			COALESCE(perCar.perTipoIdentificacion,dosDca.perTipoIdentificacion)  as valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion,
			COALESCE(perCar.perNumeroIdentificacion,dosDca.perNumeroIdentificacion )as valorNumeroIdentificacion,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAportePorPersona' as valorTabla
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta,
			per.perTipoIdentificacion, per.perNumeroIdentificacion
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro NOT IN ('LC1','LC2','LC3')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId, perTipoIdentificacion, perNumeroIdentificacion
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue,
            CONVERT(VARCHAR,DATEADD(DAY, -1, car.carFechaCreacion),103) AS fechaVencimientoDelPago,
			per.perTipoIdentificacion, per.perNumeroIdentificacion
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('LC4A','LC5A')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
        </query>
    </named-native-query>
    <named-native-query name="plantilla.consolidado">
        <description>CONSOLIDADO</description>
        <query>
            SELECT '${consolidado}' AS llave, 'com.asopagos.comunicados.ejb.ReporteComunicadoConsolidadoCartera' AS
            valor, 'REPORTE_VARIABLE' tipoVariable
            FROM PlantillaComunicado pc WHERE pc.pcoId = :idPlantillaComunicado
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionInternaNoEnvioComunicadoCobro">
        <description>NTF_INT_NO_CBR</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreDelUsuario' as nombreDelUsuario, sol.solDestinatario AS valorNombreDelUsuario,
            'reporte' as reporte, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado131' AS valorReporte
            FROM Solicitud sol WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="comunicados.notificacion.interna">
        <description>Consulta tabla para el comunicado 131 NTF_INT_NO_CBR</description>
        <query>
            SELECT per.perTipoIdentificacion as tipoIdentificacion,
            per.perNumeroIdentificacion as numeroIdentificacion,
            per.perRazonSocial as razonSocialNombre,
            CASE WHEN dsgc.dsgObservacionSegundaRemision IS NOT NULL
            THEN dsgc.dsgObservacionSegundaRemision
            ELSE dsgc.dsgObservacionPrimeraRemision END as observaciones,
            SUBSTRING(CONVERT(VARCHAR,CAST(car.carDeudaPresunta AS
            MONEY),1),1,CHARINDEX('.',CONVERT(VARCHAR,CAST(car.carDeudaPresunta AS MONEY),1))-1) AS valorDeudaPresunta,
            (Select Top 1 dcaConsecutivoLiquidacion from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            where carPersona=per.perId
            and dcaCartera = car.carId
            and dcaAccionCobro IN ('C1','C2') order by dosId desc) AS consecutivoLiquidacion,
            CAST(car.carPeriodoDeuda AS VARCHAR(7)) AS periodoDeuda
            FROM SolicitudGestionCobroFisico sgcf,
            DetalleSolicitudGestionCobro dsgc,
            Cartera car,
            Persona per
            WHERE per.perId = car.carPersona
            AND car.carId = dsgc.dsgCartera
            AND (CASE WHEN dsgc.dsgSolicitudSegundaRemision IS NOT NULL
            THEN dsgc.dsgSolicitudSegundaRemision
            ELSE dsgc.dsgSolicitudPrimeraRemision END) = sgcf.sgfId
            AND (CASE WHEN dsgc.dsgEnviarSegundaRemision IS NOT NULL
            THEN dsgc.dsgEnviarSegundaRemision
            ELSE dsgc.dsgEnviarPrimeraRemision END) = 0
            AND sgcf.sgfSolicitud =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionCancelacionPublicacionEdicto">
        <description>NTF_CCL_PUB_EDC</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreUsuarioNotificacion' as nombreUsuarioNotificacion, sol.solDestinatario AS
            valorNombreUsuarioNotificacion,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ConsultaTablaComunicado140' AS valorTabla
            FROM Solicitud sol WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="comunicados.publicacion.edicto">
        <description>Consulta tabla para el comunicado 140 NTF_CCL_PUB_EDC
            Pendiente: Número del documento de liquidación de aportes; Este es un campo que se creara en documento
            cartera
        </description>
        <query>
            SELECT per.perTipoIdentificacion as tipoIdentificacion,
            per.perNumeroIdentificacion as numeroIdentificacion,
            per.perRazonSocial as razonSocialNombre,
            'numeroDocumento' as numeroDocumento,
            (Select Top 1 dosFechaHoraCargue from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            where carPersona=per.perId
            and dcaCartera = car.carId
            and (dcaAccionCobro='E2')order by dosId desc) as fechaLiquidacion,
            dsgc.dsgObservacionPrimeraRemision as observaciones,
            SUBSTRING(CONVERT(VARCHAR,CAST(car.carDeudaPresunta AS
            MONEY),1),1,CHARINDEX('.',CONVERT(VARCHAR,CAST(car.carDeudaPresunta AS MONEY),1))-1) AS valorDeudaPresunta,
            (Select Top 1 dcaConsecutivoLiquidacion from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            where carPersona=per.perId
            and dcaCartera = car.carId
            and dcaAccionCobro IN ('C1','C2') order by dosId desc) AS consecutivoLiquidacion,
            CAST(car.carPeriodoDeuda AS VARCHAR(7)) AS periodoDeuda
            FROM SolicitudGestionCobroFisico sgcf,
            DetalleSolicitudGestionCobro dsgc,
            Cartera car,
            Persona per
            WHERE per.perId = car.carPersona
            AND car.carId = dsgc.dsgCartera
            AND dsgc.dsgSolicitudPrimeraRemision = sgcf.sgfId
            AND dsgc.dsgEnviarPrimeraRemision = 0
            AND sgcf.sgfSolicitud =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.cartera.gestionCobro">
        <query>
            SELECT 'lineaDeCobro' AS lineaDeCobro,sgf.sgfTipoAccionCobro AS valorTipoAccionCobro,
            'tipoDeSolicitud' AS tipoDeSolicitud,'GESTION_CARTERA_FISICA_GENERAL' AS valorTipoDeSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion,sol.solFechaRadicacion AS valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud,sgf.sgfEstado AS valorEstadoDeLaSolicitud,
            'estadoDeCartera' AS estadoDeCartera, car.carEstadoCartera as valorEstadoDeCartera
            FROM dbo.Solicitud sol JOIN dbo.SolicitudGestionCobroFisico sgf ON sol.solId = sgf.sgfSolicitud
            LEFT JOIN DetalleSolicitudGestionCobro dsg ON dsg.dsgSolicitudSegundaRemision = sgf.sgfId
            LEFT JOIN Cartera car ON car.carId = dsg.dsgCartera
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.cartera.gestionActualizacionDatos">
        <query>
            SELECT 'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, per.perDigitoVerificacion as valorDv,
            'tipoSolicitante' as tipoSolicitante, car.carTipoSolicitante as valorTipoSolicitante,
            'numeroDeSolicitud' as numeroDeSolicitud, sol.solNumeroRadicacion as valorNumeroSolicitud,
            'usuarioVerificador' as usuarioVerificador, sol.solDestinatario as valorUsuarioVerificador,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud, sgf.sgfEstado as valorEstadoDeLaSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, sol.solfechaCreacion As valorFechaYHoraDeAsignacion,
            'estadoDeCartera' as estadoDeCartera, car.carEstadoCartera as valorEstadoDeCartera
            FROM SolicitudGestionCobroFisico sgf JOIN Solicitud sol ON sol.solid=sgf.sgfsolicitud
            JOIN DetalleSolicitudGestionCobro dsg ON dsg.dsgSolicitudSegundaRemision = sgf.sgfId
            JOIN Cartera car ON car.carId = dsg.dsgCartera
            JOIN PERSONA per ON car.carPersona = per.perId
            WHERE sol.solid= :idSolicitud
            UNION
            SELECT 'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'dv' as dv, per.perDigitoVerificacion as valorDv,
            'tipoSolicitante' as tipoSolicitante, car.carTipoSolicitante as valorTipoSolicitante,
            'numeroDeSolicitud' as numeroDeSolicitud, sol.solNumeroRadicacion as valorNumeroSolicitud,
            'usuarioVerificador' as usuarioVerificador, sol.solDestinatario as valorUsuarioVerificador,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud, sge.sgeEstado as valorEstadoDeLaSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, sol.solfechaCreacion As valorFechaYHoraDeAsignacion,
            'estadoDeCartera' as estadoDeCartera, car.carEstadoCartera as valorEstadoDeCartera
            FROM Solicitud sol JOIN SolicitudGestionCobroElectronico sge ON sol.solId = sge.sgeSolicitud
            JOIN Cartera car ON car.carId = sge.sgeCartera
            JOIN Persona per ON car.carPersona = per.perid
            WHERE sol.solid= :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.fovis.registrarTareas">
        <query>
            SELECT TOP 1 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS
            valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'jefeDeHogar' as jefeHogar, CASE WHEN persona.perRazonSocial IS NOT NULL THEN persona.perRazonSocial ELSE (
            persona.perPrimerNombre + CASE WHEN persona.perSegundoNombre IS NOT NULL THEN ' ' + persona.perSegundoNombre
            ELSE '' END
            + ' ' + persona.perPrimerApellido + CASE WHEN persona.perSegundoApellido IS NOT NULL THEN ' ' +
            persona.perSegundoApellido ELSE '' END)
            END AS valorJefeHogar,
            'cicloDeAsignacion' AS cicloDeAsignacion,
            (SELECT ciaNombre FROM CicloAsignacion WHERE ciaId = postulacionFovis.pofCicloAsignacion) AS
            valorCicloDeAsignacion,
            'modalidad' AS modalidad, postulacionFovis.pofModalidad,
            'numeroDeSolicitud' AS numeroDeSolicitud, null AS valorNumeroDeSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solAsig.safFechaAceptacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, null AS valorEstadoDeLaSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, null AS valorFechaYHoraDeSolicitud,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'backControlInternoFovis' AS backControlInternoFovis, solAsig.safUsuario AS valorBackControlInternoFovis
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN JefeHogar jefeHogar ON jefeHogar.jehAfiliado = afiliado.afiId
            LEFT JOIN PostulacionFOVIS postulacionFovis ON postulacionFovis.pofJefeHogar = jefeHogar.jehId
            LEFT JOIN SolicitudAsignacion solAsig ON postulacionFovis.pofSolicitudAsignacion = solAsig.safId
            LEFT JOIN SolicitudPostulacion solPostulacion ON solPostulacion.spoPostulacionFovis = postulacionFovis.pofId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solPostulacion.spoSolicitudGlobal
            WHERE solicitud.solId= :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.afiliacionEmpresaPresencial">
        <description>
            Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de afiliación empresa presencial.

            COM_AVI_AEP_TIM_PS
            COM_AVI_AEP_TIM_ASE
            COM_AVI_AEP_TIM_GSB
        </description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, dbo.getLocalDate(),103) AS valorFechaDelSistema,
            'idDeSolicitud' as idSolicitud,
            solicitud.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion,
            solicitud.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion,
            solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion,
            persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion,
            persona.perNumeroidentificacion AS valorNumeroIdentificacion,
            'direccionEmpleador' AS direccionEmpleador,
            ubi.ubiDireccionFisica AS valorDireccionEmpleador,
            'direccionEmpresa' as direccionEmpresa,
            ubi.ubiDireccionFisica AS valorDireccionEmpresa,
            'municipioEmpresa' AS municipioEmpresa,
            mun.munNombre AS valorMunicipioEmpresa,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad
            FROM Persona persona
            INNER JOIN Empresa empresa ON empresa.empPersona = persona.perId
            INNER JOIN Empleador empleador ON empleador.empEmpresa = empresa.empId
            INNER JOIN SolicitudAfiliaciEmpleador solicEmpleador ON solicEmpleador.saeEmpleador = empleador.empId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicEmpleador.saeSolicitudGlobal
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empresa.empId AND ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            WHERE solicEmpleador.saeId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantillaConsolidadoCartera.avisoIncumplimiento">
        <description>AVI_INC</description>
        <query>
            SELECT '${tabla}' as llave, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.avisoIncumplimiento">
        <description>AVI_INC</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, getdate(),103) AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' ' + CASE WHEN prl.perSegundoNombre IS NOT NULL THEN prl.perSegundoNombre ELSE '' END
            + ' ' + prl.perPrimerApellido + ' ' +
            CASE WHEN prl.perSegundoApellido IS NOT NULL THEN prl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'direccionEmpleador' AS direccionEmpleador,
            ubi.ubiDireccionFisica AS valorDireccionEmpleador,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'periodoMora' AS periodoMora,
            perCar.carPeriodoDeuda valorPeriodoMora,
            'fechaCorte' AS fechaCorte,
            dosDca.dosFechaHoraCargue AS valorFechaCorte,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAportePorPersona' as valorTabla
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta,
            CAST(MIN(car.carPeriodoDeuda) AS VARCHAR(7)) AS carPeriodoDeuda
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC1','LC2','LC3')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN
            ('B1','B2','LC2A','LC3A')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Empresa emp ON emp.empPersona = per.perId
            INNER JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            INNER JOIN Persona prl ON prl.perId = emp.empRepresentanteLegal
            WHERE ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
        </query>
    </named-native-query>
    <named-native-query name="plantilla.notificacionMoraDesafiliacion">
        <description>NOTIFI_MORA_DESAF</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, getdate(),103) AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' ' + CASE WHEN prl.perSegundoNombre IS NOT NULL THEN prl.perSegundoNombre ELSE '' END
            + ' ' + prl.perPrimerApellido + ' ' +
            CASE WHEN prl.perSegundoApellido IS NOT NULL THEN prl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'periodoMora' AS periodoMora,
            perCar.carPeriodoDeuda valorPeriodoMora,
            'fechaCorte' AS fechaCorte,
            dosDca.dosFechaHoraCargue AS valorFechaCorte,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos
            FROM Persona per
            INNER JOIN(SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta,
            CAST(MIN(car.carPeriodoDeuda) AS VARCHAR(7)) AS carPeriodoDeuda
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC1','LC2','LC3')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN
            ('B1','B2','LC2A','LC3A')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Empresa emp ON emp.empPersona = per.perId
            INNER JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            INNER JOIN Persona prl ON prl.perId = emp.empRepresentanteLegal
            WHERE ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
        </query>
    </named-native-query>
    <named-native-query name="plantillaConsolidadoCartera.citacionNotificacionPersonal">
        <description>CIT_NTF_PER</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.citacionNotificacionPersonal">
        <description>CIT_NTF_PER</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, dbo.getLocalDate(),103) AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' ' + CASE WHEN prl.perSegundoNombre IS NOT NULL THEN prl.perSegundoNombre ELSE '' END
            + ' ' + prl.perPrimerApellido + ' ' +
            CASE WHEN prl.perSegundoApellido IS NOT NULL THEN prl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'fechaLiquidacion' AS fechaLiquidacion,
            dosDca.dosFechaHoraCargue AS valorFechaLiquidacion,
            'consecutivoLiquidacion' AS consecutivoLiquidacion,
            dosDca.dcaConsecutivoLiquidacion AS valorConsecutivoLiquidacion,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC1','LC2','LC3')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue,
            dca.dcaConsecutivoLiquidacion
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('C1','C2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Empresa emp ON emp.empPersona = per.perId
            INNER JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            INNER JOIN Persona prl ON prl.perId = emp.empRepresentanteLegal
            WHERE ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
        </query>
    </named-native-query>
    <named-native-query name="plantillaConsolidadoCartera.primerAvisoCobroPersuasivo">
        <description>PRI_AVI_COB_PRS</description>
        <query>
            SELECT '${tabla}' as llave, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado125TablaCobroPersuasivo'
            as valor, 'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.primerAvisoCobroPersuasivo">
        <description>PRI_AVI_COB_PRS</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema,
            (Select Top 1 dosFechaHoraCargue from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            join Cartera on dcaCartera = carId
            where carPersona=per.perId
            and (dcaAccionCobro='D1' or
            dcaAccionCobro='F2')order by dosId desc) AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' ' + CASE WHEN prl.perSegundoNombre IS NOT NULL
            THEN prl.perSegundoNombre ELSE '' END + ' ' +
            prl.perPrimerApellido + ' ' + CASE WHEN prl.perSegundoApellido IS NOT NULL
            THEN prl.perSegundoApellido ELSE '' END AS valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'ciudad' as ciudad, mun.munNombre AS valorCiudad,
            'totalLiquidacion' as totalLiquidacion, sum(CASE WHEN car.carDeudaPresunta IS NOT NULL
            THEN car.carDeudaPresunta ELSE 0 END ) as valorTotalLiquidacion,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado125TablaCobroPersuasivo' as
            valorTabla,
            'consecutivoLiquidacion' as consecutivoLiquidacion,
            dca.dcaConsecutivoLiquidacion as valorConsecutivoLiquidacion,
            'fechaFirmezaTitulo' AS fechaFirmezaTitulo,
            (SELECT top 1 bcar.bcaFecha FROM BitacoraCartera bcar WHERE bcar.bcaPersona = per.perId AND bcar.bcaFecha IS NOT NULL) AS valorFechaFirmezaTitulo,
            'fechaExpedicionActaLiquidacionAportes' AS fechaExpedicionActaLiquidacionAportes,
            (Select Top 1 CONVERT(DATE,dosFechaHoraCargue,23) from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            where carPersona=per.perId
            and dcaCartera = car.carId
            and dcaAccionCobro IN ('C1','C2') order by dosId desc) AS valorFechaExpedicionActaLiquidacionAportes,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            CASE WHEN prl.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(prl.perNumeroIdentificacion,'-',prl.perDigitoVerificacion) ELSE prl.perNumeroIdentificacion END AS
            valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'valorDeudaPresunta' AS valorDeudadPresunta,
            SUBSTRING(CONVERT(VARCHAR,CAST(SUM(car.carDeudaPresunta) AS
            MONEY),1),1,CHARINDEX('.',CONVERT(VARCHAR,CAST(SUM(car.carDeudaPresunta) AS MONEY),1))-1) AS
            valorValorDeudaPresunta,
            'valorDeudaPresuntaEnLetras' AS valorDeudaPresuntaEnLetras,
            dbo.ufn_CantidadConLetra(SUM(car.carDeudaPresunta)) AS valorValorDeudaPresuntaEnLetras
            FROM Empresa empr,
            DocumentoCartera dca,
            UbicacionEmpresa ubiE,
            Ubicacion ubi,
            Municipio mun,
            Persona per,
            Persona prl,
            Cartera car
            WHERE car.carPersona = per.perId
            AND car.carId = dca.dcaCartera
            AND car.carEstadoOperacion = 'VIGENTE'
            AND car.carTipoLineaCobro = 'LC1'
            AND empr.empPersona = per.perId
            AND empr.empRepresentanteLegal = prl.perId
            AND ubiE.ubeEmpresa = empr.empId
            AND ubiE.ubeUbicacion = ubi.ubiId
            AND ubiE.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            AND mun.munId = ubi.ubiMunicipio
            AND per.perTipoIdentificacion =:tipoIdentificacion
            AND per.perNumeroIdentificacion =:numeroIdentificacion
            GROUP by per.perId, prl.perPrimerNombre ,prl.perSegundoNombre,
            prl.perSegundoNombre,prl.perPrimerApellido , prl.perSegundoApellido,
            prl.perSegundoApellido, per.perRazonSocial, ubi.ubiDireccionFisica,
            ubi.ubiTelefonoFijo,ubi.ubiTelefonoCelular, mun.munNombre,dca.dcaConsecutivoLiquidacion,car.carPersona,
            car.carId, per.perDigitoVerificacion, per.perNumeroIdentificacion,per.perTipoIdentificacion,
            prl.perDigitoVerificacion, prl.perNumeroIdentificacion, prl.perTipoIdentificacion
        </query>
    </named-native-query>
    <named-native-query name="plantillaConsolidadoCartera.segundoAvisoCobroPersuasivo">
        <description>SEG_AVI_COB_PRS</description>
        <query>
            SELECT '${tabla}' as llave, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado125TablaCobroPersuasivo'
            as valor, 'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.segundoAvisoCobroPersuasivo">
        <description>SEG_AVI_COB_PRS</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema,
            (Select Top 1 dosFechaHoraCargue from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            join Cartera on dcaCartera = carId
            where carPersona=per.perId
            and (dcaAccionCobro='E1' or
            dcaAccionCobro='G2')order by dosId desc) AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' ' + CASE WHEN prl.perSegundoNombre IS NOT NULL
            THEN prl.perSegundoNombre ELSE '' END + ' ' +
            prl.perPrimerApellido + ' ' + CASE WHEN prl.perSegundoApellido IS NOT NULL
            THEN prl.perSegundoApellido ELSE '' END AS valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'ciudad' as ciudad, mun.munNombre AS valorCiudad,
            'totalLiquidacion' as totalLiquidacion, sum(CASE WHEN car.carDeudaPresunta IS NOT NULL
            THEN car.carDeudaPresunta ELSE 0 END ) as valorTotalLiquidacion,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado125TablaCobroPersuasivo' as
            valorTabla,
            'consecutivoLiquidacion' as consecutivoLiquidacion, dca.dcaConsecutivoLiquidacion as
            valorConsecutivoLiquidacion,
            'fechaFirmezaTitulo' AS fechaFirmezaTitulo,
            (SELECT top 1 bcar.bcaFecha FROM BitacoraCartera bcar WHERE bcar.bcaPersona = per.perId AND bcar.bcaFecha IS NOT NULL) AS valorFechaFirmezaTitulo,
            'fechaExpedicionActaLiquidacionAportes' AS fechaExpedicionActaLiquidacionAportes,
            (Select Top 1 CONVERT(DATE,dosFechaHoraCargue,23) from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            where carPersona=per.perId
            and dcaCartera = car.carId
            and dcaAccionCobro IN ('C1','C2') order by dosId desc) AS valorFechaExpedicionActaLiquidacionAportes,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            CASE WHEN prl.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(prl.perNumeroIdentificacion,'-',prl.perDigitoVerificacion) ELSE prl.perNumeroIdentificacion END AS
            valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'valorDeudaPresunta' AS valorDeudadPresunta,
            SUBSTRING(CONVERT(VARCHAR,CAST(SUM(car.carDeudaPresunta) AS
            MONEY),1),1,CHARINDEX('.',CONVERT(VARCHAR,CAST(SUM(car.carDeudaPresunta) AS MONEY),1))-1) AS
            valorValorDeudaPresunta,
            'valorDeudaPresuntaEnLetras' AS valorDeudaPresuntaEnLetras,
            dbo.ufn_CantidadConLetra(SUM(car.carDeudaPresunta)) AS valorValorDeudaPresuntaEnLetras
            FROM Empresa empr,
            DocumentoCartera dca,
            UbicacionEmpresa ubiE,
            Ubicacion ubi,
            Municipio mun,
            Persona per,
            Persona prl,
            Cartera car
            WHERE car.carPersona = per.perId
            AND car.carId = dca.dcaCartera
            AND car.carEstadoOperacion = 'VIGENTE'
            AND car.carTipoLineaCobro = 'LC1'
            AND empr.empPersona = per.perId
            AND empr.empRepresentanteLegal = prl.perId
            AND ubiE.ubeEmpresa = empr.empId
            AND ubiE.ubeUbicacion = ubi.ubiId
            AND ubiE.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            AND mun.munId = ubi.ubiMunicipio
            AND per.perTipoIdentificacion =:tipoIdentificacion
            AND per.perNumeroIdentificacion =:numeroIdentificacion
            GROUP by per.perId, prl.perPrimerNombre ,prl.perSegundoNombre,
            prl.perSegundoNombre,prl.perPrimerApellido , prl.perSegundoApellido,
            prl.perSegundoApellido, per.perRazonSocial, ubi.ubiDireccionFisica,
            ubi.ubiTelefonoFijo,ubi.ubiTelefonoCelular, mun.munNombre,dca.dcaConsecutivoLiquidacion,car.carPersona,
            car.carId, per.perDigitoVerificacion, per.perNumeroIdentificacion,per.perTipoIdentificacion,
            prl.perDigitoVerificacion, prl.perNumeroIdentificacion, prl.perTipoIdentificacion
        </query>
    </named-native-query>
    <named-native-query name="plantillaConsolidadoCartera.NotificacionAviso">
        <description>NTF_AVI</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.NotificacionAviso">
        <description>NTF_AVI</description>
        <query>
            SELECT
            'fechaNotificacionAviso' AS fechaNotificacionAviso,
            dosDcaD2.fechaHoraCargueD2 AS valorFechaNotificacionAviso,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' ' + CASE WHEN prl.perSegundoNombre IS NOT NULL THEN prl.perSegundoNombre ELSE '' END
            + ' ' + prl.perPrimerApellido + ' ' +
            CASE WHEN prl.perSegundoApellido IS NOT NULL THEN prl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'consecutivoLiquidacion' AS consecutivoLiquidacion,
            dosDcaC2.consecutivoLiquidacionC2 AS valorConsecutivoLiquidacion,
            'fechaLiquidacion' AS fechaLiquidacion,
            dosDcaC2.fechaHoraCargueC2 as valorFechaLiquidacion,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos,
            'periodoMora' AS periodoMora,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodoMora
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC1','LC2','LC3')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS fechaHoraCargueD2
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro = 'D2'
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDcaD2 ON dosDcaD2.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS fechaHoraCargueC2,
            dca.dcaConsecutivoLiquidacion AS consecutivoLiquidacionC2
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('C1','C2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId
            ) AS dosDcaC2 ON dosDcaC2.perId = per.perId
            INNER JOIN Empresa emp ON emp.empPersona = per.perId
            INNER JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            INNER JOIN Persona prl ON prl.perId = emp.empRepresentanteLegal
            WHERE ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
        </query>
    </named-native-query>
    <named-native-query name="plantillaConsolidadoCartera.cartaEmpresaExpulsada">
        <description>CAR_EMP_EXP</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.cartaEmpresaExpulsada">
        <description>CAR_EMP_EXP</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, GETDATE(),103) AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' ' + CASE WHEN prl.perSegundoNombre IS NOT NULL THEN prl.perSegundoNombre ELSE '' END
            + ' ' + prl.perPrimerApellido + ' ' +
            CASE WHEN prl.perSegundoApellido IS NOT NULL THEN prl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'consecutivoLiquidacion' AS consecutivoLiquidacion,
            dosDca.dcaConsecutivoLiquidacion AS valorConsecutivoLiquidacion,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC1','LC2','LC3')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            dca.dcaConsecutivoLiquidacion
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('C1','C2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Empresa emp ON emp.empPersona = per.perId
            INNER JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            INNER JOIN Persona prl ON prl.perId = emp.empRepresentanteLegal
            WHERE ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
        </query>
    </named-native-query>
    <named-native-query name="plantillaConsolidadoCartera.cartaPersonaExpulsada">
        <description>CAR_PER_EXP</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.cartaPersonaExpulsada">
        <description>CAR_PER_EXP</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, getdate(),103) AS valorFechaDelSistema,
            'nombreYApellidosAfiliadoPrincipal' as nombreYApellidosAfiliadoPrincipal,
            per.perPrimerNombre +' ' + CASE WHEN per.perSegundoNombre IS NOT NULL THEN per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + ' ' +
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN per.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosAfiliadoPrincipal,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'numeroIdentificacionAfiliado' AS numeroIdentificacionAfiliado,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionAfiliado,
            'tipoIdentificacionAfiliado' AS tipoIdentificacionAfiliado,
            per.perTipoIdentificacion as valorTipoIdentificacionAfiliado,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'tipoIdentificacion' AS tipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos,
            'tipoIdentificacion' AS tipoIdentificacion,
			perCar.perTipoIdentificacion as valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion,
			perCar.perNumeroIdentificacion as valorNumeroIdentificacion
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta,
            per.perNumeroIdentificacion ,per.perTipoIdentificacion
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC4','LC5')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.solicitud.desafiliacion">
        <description>HU_PROCESO_225_195_196</description>
        <query>
            SELECT
            'numeroDeSolicitud' as numeroDeSolicitud,
            s.solNumeroRadicacion as valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' as fechaYHoraDeSolicitud,
            s.solFechaRadicacion as valorFechaYHoraDeSolicitud,
            'tipoDeSolicitud' as tipoDeSolicitud,
            'DESAFILIACION_APORTANTES' as valorTipoDeSolicitud,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud,
            sd.sodEstadoSolicitud as valorEstadoDeLaSolicitud
            FROM SolicitudDesafiliacion sd, Solicitud s
            Where sd.sodSolicitudGlobal = s.solId
            AND s.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.solicitud.agrupadora">
        <description>HU_PROCESO_221_161</description>
        <query>
            SELECT
            'numeroDeSolicitud' as numeroDeSolicitud,
            s.solNumeroRadicacion as valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' as fechaYHoraDeSolicitud,
            s.solFechaRadicacion as valorFechaYHoraDeSolicitud,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud,
            spa.spaEstadoSolicitudPreventivaAgrupadora as valorEstadoDeLaSolicitud
            FROM SolicitudPreventivaAgrupadora spa, Solicitud s
            Where s.solId=spa.spaSolicitudGlobal
            AND s.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantillaConsolidadoCartera.liquidacionAporteMora">
        <description>LIQ_APO_MOR
            Pendientes: consecutivoLiquidacion, fechaLiquidacion
        </description>
        <query>
            SELECT '${tabla}' as llave, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT '${totalLiquidacion}' as llave, 'com.asopagos.comunicados.ejb.ReporteTotalLiquidacion' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.liquidacionAporteMora">
        <description>LIQ_APO_MOR
            Pendientes: consecutivoLiquidacion, fechaLiquidacion
        </description>
        <query>
            SELECT top 1
            'fechaDelSistema' AS fechaDelSistema,
            getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'tipoDeIdentificacion' as tipoDeIdentificacion, per.perTipoIdentificacion AS valorTipoDeIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'nombreComunicado' as nombreComunicado, 'Notificación de No Recaudo de Aportes' AS valorNombreComunicado,
            'fechaComunicado' as fechaComunicado, dbo.getLocalDate() AS valorFechaComunicado,
            'fechaNotificacionPersonal' as fechaNotificacionPersonal,
			CASE WHEN hacC.hacId IS NOT NULL THEN hacC.hacFechaAsignacionAccion ELSE CASE WHEN car.carId IS NOT NULL
            THEN car.carFechaAsignacionAccion ELSE '' END END AS valorFechaNotificacionPersonal,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valorTabla,
            'totalLiquidacion' as totalLiquidacion, 'com.asopagos.comunicados.ejb.ReporteTotalLiquidacion' as
            valorTotalLiquidacion,
            'consecutivoLiquidacion' as consecutivoLiquidacion, dca.dcaConsecutivoLiquidacion as
            valorConsecutivoLiquidacion,
            'fechaLiquidacion' as fechaLiquidacion, dos.dosFechaHoraCargue as valorFechaLiquidacion,
            'celularAportante' AS celularAportante,
            CASE WHEN ubiEmpr.ubiId IS NOT NULL THEN ubiEmpr.ubiTelefonoCelular ELSE CASE WHEN ubiPer.ubiId IS NOT NULL
            THEN ubiPer.ubiTelefonoCelular ELSE '' END END AS valorCelularAportante,
            'direccionAportante' AS direccionAportante,
            CASE WHEN ubiEmpr.ubiId IS NOT NULL THEN ubiEmpr.ubiDireccionFisica ELSE CASE WHEN ubiPer.ubiId IS NOT NULL
            THEN ubiPer.ubiDireccionFisica ELSE '' END END AS valorDireccionAportante,
            'fechaLimitePago' AS fechaLimitePago,
            DATEADD(DAY,-1,CONVERT(DATE,car.carFechaCreacion,23)),
            'nombreYApellidosRepresentanteLegal' AS nombreYApellidosRepresentanteLegal,
            CASE WHEN perRpl.perId IS NOT NULL THEN CONCAT(perRpl.perPrimerNombre,ISNULL(' '+ perRpl.perSegundoNombre +
            ' ',' '),perRpl.perPrimerApellido,ISNULL(' '+perRpl.perSegundoApellido,'')) ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'telefonoAportante' AS telefonoAportante,
            CASE WHEN ubiEmpr.ubiId IS NOT NULL THEN ubiEmpr.ubiTelefonoFijo ELSE CASE WHEN ubiPer.ubiId IS NOT NULL
            THEN ubiPer.ubiTelefonoFijo ELSE '' END END AS valorTelefonoAportante,
            'municipio' AS municipio,
            mun.munNombre AS valorMunicipio,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            perRpl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            perRpl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'valorDeudaPresunta' AS valorDeudadPresunta,
            SUBSTRING(CONVERT(VARCHAR,CAST(car.carDeudaPresunta AS
            MONEY),1),1,CHARINDEX('.',CONVERT(VARCHAR,CAST(car.carDeudaPresunta AS MONEY),1))-1) AS
            valorValorDeudaPresunta
            FROM Cartera car
            LEFT JOIN HistoricoAsignacionCartera hacA ON car.carId = hacA.hacCartera
            LEFT JOIN HistoricoAsignacionCartera hacC ON car.carId = hacC.hacCartera
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dcaDocumentoSoporte
            INNER JOIN Persona per ON per.perId = car.carPersona
            LEFT JOIN Empresa empr ON empr.empPersona = per.perId
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empr.empId AND ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubiEmpr ON ubiEmpr.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio mun ON mun.munId = ubiEmpr.ubiMunicipio
            LEFT JOIN Persona perRpl ON perRpl.perId = empr.empRepresentanteLegal
            LEFT JOIN Ubicacion ubiPer ON ubiPer.ubiId = per.perUbicacionPrincipal
            WHERE car.carId =:idCartera
			AND (dos.DOSNOMBREDOCUMENTO IN ('CIT_NTF_PER','NTF_NO_REC_APO','LIQ_APO_MAN')or dos.DOSNOMBREDOCUMENTO IS NULL)
            ORDER BY valorconsecutivoliquidacion DESC
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.novedades.afecta.fovis">
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroIdentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'jefeDeHogar' as jefeDeHogar,
            (CASE WHEN persona.perRazonSocial IS NOT NULL
            THEN persona.perRazonSocial ELSE
            CONCAT(persona.perPrimerNombre,
            CASE WHEN persona.perSegundoNombre IS NOT NULL THEN CONCAT(' ', persona.perSegundoNombre) ELSE '' END, ' ',
            persona.perPrimerApellido,
            CASE WHEN persona.perSegundoApellido IS NOT NULL THEN CONCAT(' ', persona.perSegundoApellido) ELSE '' END)
            END) AS valorJefeDeHogar,
            'personaObjetoNovedad' as personaObjetoNovedad,
            (CASE WHEN per.perRazonSocial IS NOT NULL THEN per.perRazonSocial ELSE
            CONCAT (per.perPrimerNombre,
            CASE WHEN per.perSegundoNombre IS NOT NULL THEN CONCAT(' ', per.perSegundoNombre) ELSE '' END, ' ',
            per.perPrimerApellido,
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN CONCAT(' ', per.perSegundoApellido) ELSE '' END)
            END) AS valorPersonaObjetoNovedad,
            'parentesco' as parentesco, inh.inhTipoIntegrante AS valorParentesco,
            'tipoIdPersonaObjetoNovedad' as tipoIdPersonaObjetoNovedad, per.perTipoIdentificacion AS
            valorTipoIdPersonaObjetoNovedad,
            'numeroIdPersonaObjetoNovedad' as numeroIdPersonaObjetoNovedad, per.perNumeroIdentificacion AS
            valorNumeroIdPersonaObjetoNovedad
            FROM SolicitudAnalisisNovedadFovis san
            INNER JOIN PostulacionFovis pof ON pof.pofId = san.sanPostulacionFovis
            INNER JOIN JefeHogar jefe ON pof.pofJefeHogar = jefe.jehId
            INNER JOIN Afiliado afiliado ON jefe.jehAfiliado = afiliado.afiId
            INNER JOIN Persona persona ON afiliado.afiPersona = persona.perId
            INNER JOIN Solicitud sol ON san.sanSolicitudGlobal = sol.solId
            INNER JOIN Persona per ON san.sanPersona = per.perId
            LEFT JOIN Afiliado afi ON afi.afiPersona = per.perId
            LEFT JOIN JefeHogar jeh ON jeh.jehAfiliado = afi.afiId
            LEFT JOIN IntegranteHogar inh ON inh.inhPersona = per.perId
            WHERE sol.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.novedadesFovis.resumenDatosSolicitud">
        <description>
            HU_PROCESO_325_079, HU_PROCESO_325_082, HU_PROCESO_325_083, HU_PROCESO_325_085, HU_PROCESO_325_088,
            HU_PROCESO_325_090, HU_PROCESO_325_094, HU_PROCESO_325_096, HU_PROCESO_325_100, HU_PROCESO_325_101
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroIdentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, pan.novTipoTransaccion as valorTipoDeTransaccion,
            'numeroDeSolicitud' as numeroDeSolicitud, sol.solNumeroRadicacion as valorNumeroDeSolicitud,
            'fechaYHoraDeSolicitud' as fechaYHoraDeSolicitud, sol.solFechaRadicacion as valorFechaYHoraDeSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, sol.solUsuarioRadicacion AS valorUsarioQueRadico,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, sol.solfechaCreacion As valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud, snf.snfEstadoSolicitud as valorEstadoDeLaSolicitud,
            'jefeDeHogar' as jefeDeHogar,
            (CASE WHEN persona.perRazonSocial IS NOT NULL
            THEN persona.perRazonSocial ELSE
            CONCAT(persona.perPrimerNombre,
            CASE WHEN persona.perSegundoNombre IS NOT NULL THEN CONCAT(' ', persona.perSegundoNombre) ELSE '' END, ' ',
            persona.perPrimerApellido,
            CASE WHEN persona.perSegundoApellido IS NOT NULL THEN CONCAT(' ', persona.perSegundoApellido) ELSE '' END)
            END) AS valorJefeDeHogar,
            'personaObjetoNovedad' as personaObjetoNovedad,
            (CASE WHEN per.perRazonSocial IS NOT NULL THEN per.perRazonSocial ELSE
            CONCAT (per.perPrimerNombre,
            CASE WHEN per.perSegundoNombre IS NOT NULL THEN CONCAT(' ', per.perSegundoNombre) ELSE '' END, ' ',
            per.perPrimerApellido,
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN CONCAT(' ', per.perSegundoApellido) ELSE '' END)
            END) AS valorPersonaObjetoNovedad,
            'parentesco' as parentesco, inh.inhTipoIntegrante AS valorParentesco,
            'tipoIdPersonaObjetoNovedad' as tipoIdPersonaObjetoNovedad, per.perTipoIdentificacion AS
            valorTipoIdPersonaObjetoNovedad,
            'numeroIdPersonaObjetoNovedad' as numeroIdPersonaObjetoNovedad, per.perNumeroIdentificacion AS
            valorNumeroIdPersonaObjetoNovedad,
            'usuarioVerificador' AS usuarioVerificador, sol.solDestinatario AS valorUsuarioVerificador
            FROM SolicitudNovedadFovis snf
            INNER JOIN Solicitud sol on sol.solId = snf.snfSolicitudGlobal
            INNER JOIN ParametrizacionNovedad pan ON pan.novId = snf.snfParametrizacionNovedad
            INNER JOIN SolicitudNovedadPersonaFovis snpf ON snpf.spfSolicitudNovedadFovis = snf.snfId
            INNER JOIN Persona per ON per.perId = snpf.spfPersona
            LEFT JOIN Afiliado afi ON afi.afiPersona = per.perId
            LEFT JOIN JefeHogar jeh ON jeh.jehAfiliado = afi.afiId
            LEFT JOIN IntegranteHogar inh ON inh.inhPersona = per.perId
            INNER JOIN PostulacionFovis pof ON pof.pofId = snpf.spfPostulacionFovis
            INNER JOIN JefeHogar jefe ON pof.pofJefeHogar = jefe.jehId
            INNER JOIN Afiliado afiliado ON jefe.jehAfiliado = afiliado.afiId
            INNER JOIN Persona persona ON afiliado.afiPersona = persona.perId
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicados.novedades.fovis">
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema, getDate() AS valorFechaDelSistema,
            'direccionResidencia' AS direccionResidencia, ubi.ubiDireccionFisica AS valorDireccion,
            'municipio' AS municipio, mun.munNombre AS nombreMunicipio,
            'departamento' AS departamento, dep.depNombre AS nombreDepartamento,
            'telefono' AS telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'fechaRadicacionSolicitud' AS fechaRadicacionSolicitud, sol.solFechaRadicacion AS
            valorFechaRadicacionSolicitud,
            'numeroSolicitud' AS numeroSolicitud, sol.solNumeroRadicacion AS valorNumeroSolicitud,
            'modalidad' AS modalidad, pof.pofModalidad AS valorModalidad,
            'cicloAsignacion' AS cicloAsignacion, cia.ciaNombre AS valorCicloAsignacion,
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion as valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'nombresYApellidosDelJefeDelHogar' AS nombresYApellidosDelJefeDelHogar, CASE WHEN per.perRazonSocial IS NOT
            NULL
            THEN per.perRazonSocial ELSE (
            per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' +
            per.perSegundoApellido ELSE '' END)
            END AS valorNombresYApellidosDelJefeDelHogar
            FROM SolicitudNovedadFovis snf
            JOIN Solicitud sol ON sol.solId = snf.snfSolicitudGlobal
            JOIN SolicitudNovedadPersonaFovis spf ON spf.spfSolicitudNovedadFovis = snf.snfId
            JOIN PostulacionFOVIS pof ON spf.spfPostulacionFOVIS = pof.pofId
            JOIN JefeHogar jeh ON pof.pofJefeHogar = jeh.jehId
            JOIN Afiliado afi ON jeh.jehAfiliado = afi.afiId
            JOIN Persona per ON afi.afiPersona = per.perId
            JOIN Ubicacion ubi ON per.perUbicacionPrincipal = ubi.ubiId
            JOIN Municipio mun ON ubi.ubiMunicipio = mun.munId
            JOIN Departamento dep ON mun.munDepartamento = dep.depId
            JOIN CicloAsignacion cia ON pof.pofCicloAsignacion = cia.ciaId
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicados.novedades.fovis.escalamiento">
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema, getDate() AS valorFechaDelSistema,
            'direccionResidencia' AS direccionResidencia, ubi.ubiDireccionFisica AS valorDireccion,
            'municipio' AS municipio, mun.munNombre AS nombreMunicipio,
            'departamento' AS departamento, dep.depNombre AS nombreDepartamento,
            'telefono' AS telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'fechaRadicacionSolicitud' AS fechaRadicacionSolicitud, sol.solFechaRadicacion AS
            valorFechaRadicacionSolicitud,
            'numeroSolicitud' AS numeroSolicitud, sol.solNumeroRadicacion AS valorNumeroSolicitud,
            'modalidad' AS modalidad, pof.pofModalidad AS valorModalidad,
            'cicloAsignacion' AS cicloAsignacion, cia.ciaNombre AS valorCicloAsignacion,
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion as valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'estadoDeLaSolicitud' as estadoDeLaSolicitud, snf.snfEstadoSolicitud as valorEstadoDeLaSolicitud,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'nombresYApellidosDelJefeDelHogar' AS nombresYApellidosDelJefeDelHogar, CASE WHEN per.perRazonSocial IS NOT
            NULL
            THEN per.perRazonSocial ELSE (
            per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' +
            per.perSegundoApellido ELSE '' END)
            END AS valorNombresYApellidosDelJefeDelHogar
            FROM SolicitudNovedadFovis snf
            JOIN Solicitud sol ON sol.solId = snf.snfSolicitudGlobal
            JOIN SolicitudNovedadPersonaFovis spf ON spf.spfSolicitudNovedadFovis = snf.snfId
            JOIN PostulacionFOVIS pof ON spf.spfPostulacionFOVIS = pof.pofId
            JOIN JefeHogar jeh ON pof.pofJefeHogar = jeh.jehId
            JOIN Afiliado afi ON jeh.jehAfiliado = afi.afiId
            JOIN Persona per ON afi.afiPersona = per.perId
            JOIN Ubicacion ubi ON per.perUbicacionPrincipal = ubi.ubiId
            JOIN Municipio mun ON ubi.ubiMunicipio = mun.munId
            JOIN Departamento dep ON mun.munDepartamento = dep.depId
            JOIN CicloAsignacion cia ON pof.pofCicloAsignacion = cia.ciaId
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.pagosSubsidioMonetario.camposAdmin.retiro.202">
        <description>
            COM_PAG_SUB_RET_VENT

            Consulta que obtiene los datos del admin subsidio monetario,
            usuario que realizo la transacción de retiro y el valor del
            retiro para generar el comunicado de la HU-31-202 PagosSubsidioMonetario.
        </description>
        <query>
            select 'nombreCompletoAdmin' as nombreAdminSubsidio,
            CONCAT(perprimernombre,' ',persegundonombre,' ',perprimerapellido,' ',persegundoapellido) as
            nombreCompletoAdmin,
            'tipoIdAdmin' as tipoIdAdminSubsidio, pertipoidentificacion as tipoIdAdmin,
            'numeroIdAdmin' as numeroIdAdminSubsidio, pernumeroidentificacion as numeroIdAdmin ,
            'usuarioRegistroTran' as usuarioTransaccion, casUsuarioTransaccion as usuarioRegistroTran,
            'valorRetiro' as valorRetiroSubsidio, CONVERT(varchar(40), CAST(ABS(ROUND(casValorRealTransaccion ,2)) as
            money)) as valorRetiro,
            'reporteEmpleadores' as tabla,
            'com.asopagos.comunicados.ejb.ConsultaReporteComunicado31RetiroSubsidioMonetario' as valorTabla,
            'identificadorRespuesta' as idRespuesta, (CONVERT(varchar(40),:identificadorRespuesta)) as
            identificadorRespuesta,
            'fechaDelSistema' as fechaDelSistema, CAST(GETDATE() AS smalldatetime) as valorFechaDelSistema
            FROM CuentaAdministradorSubsidio
            INNER JOIN AdministradorSubsidio on casadministradorsubsidio = asuid
            INNER JOIN Persona on perid = asupersona
            WHERE casidtransaccionterceropagador = :idTransaccionTerceroPagador
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.pagosSubsidioMonetario.empleadores.retiro.202">
        <description>Consulta que obtiene los empleadores asociados al retiro que se efectuo y se quiere mostrar en el
            comunicado de la HU-31-202 PagosSubsidioMonetario
        </description>
        <query>
            SELECT DISTINCT(per.pernumeroidentificacion) as numeroIdEmpleador,
            per.pertipoidentificacion as tipoIdEmpleador,
            per.perrazonsocial as razonSocialEmpleador
            FROM CuentaAdministradorSubsidio cas
            INNER JOIN detallesubsidioasignado dsa on cas.casid = dsa.dsacuentaadministradorsubsidio
            INNER JOIN Empleador empl on empl.empid = dsa.dsaempleador
            INNER JOIN Empresa emp on emp.empid = empl.empEmpresa
            INNER JOIN Persona per on per.perid = emp.emppersona
            WHERE cas.casidcuentaadmonsubsidiorelacionado = (
            SELECT casid
            FROM CuentaAdministradorSubsidio
            WHERE casidtransaccionterceropagador = :idTransaccionTerceroPagador
            )
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.pagosSubsidioMonetario.personaAutorizada.retiro.202">
        <description>Consulta la persona autorizada para realizar el retiro que se efectuó por ventanilla en la
            HU-31-202 proceso de Pagos subsidio monetario
        </description>
        <query>
            SELECT CONCAT(perprimernombre,' ',persegundonombre,' ',perprimerapellido,' ',persegundoapellido)
            FROM RetiroPersonaAutorizadaCobroSubsidio
            INNER JOIN CuentaAdministradorSubsidio on rpacuentaadministradorsubsidio = casid
            INNER JOIN Persona on perid = rpaPersonaAutorizada
            WHERE casidtransaccionterceropagador = :idTransaccionTerceroPagador
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.pagosSubsidioMonetario.archivoConsumo.inconsistencias.encabezado">
        <description>
            COM_PAG_SUB_INC_ARC_CON

            Comunicado que representa las inconsistencias encontradas en un archivo de consumo de tarjeta ANIBOL en el
            proceso de pagos de
            subsidio monetario.
        </description>
        <query>
            select 'nombreArchivo'as nombreArchivo, acn.acnNombreArchivo as valorNombreArchivo,
            'fechaHoraCargue' as fechaHoraCargue, convert(char,acn.acnFechaHoraCargue,120) as valorFechaHoraCargue,
            'reporteInconsistencias' as tabla,
            'com.asopagos.comunicados.ejb.ConsultaReporteComunicado31InconsistenciasArchivoConsumo' as valorTabla
            FROM ArchivoConsumosAnibol acn
            WHERE acn.acnId = :idArchivoConsumosAnibol
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.pagosSubsidioMonetario.archivoConsumo.inconsistencias.detalle">
        <description>
            Consulta que representa las inconsistencias dectectadas en el procesamiento del archivo de consumo.
        </description>
        <query>
            SELECT caa.caaInconsistenciaContenidoDetectada AS inconsistenciaDetectada,
            caa.caaValorCampoArchivo AS valorCampoArchivo, acn.acnTipoInconsistenciaArchivo AS
            valorTipoInconsistenciaArchivo
            FROM ArchivoConsumosAnibol acn
            LEFT JOIN RegistroArchivoConsumosAnibol rac ON acn.acnId = rac.racArchivoConsumosAnibol
            LEFT JOIN CampoArchivoConsumosAnibol caa ON caa.caaRegistroArchivoConsumosAnibol = rac.racId
            WHERE acn.acnId = :idArchivoConsumosAnibol
        </query>
    </named-native-query>

    <named-native-query name="plantilla.comunicadosLegalizacionDesembolsoFovis">
        <description>COMUNICADOS_LEGALIZACION_DESEMBOLSO_FOVIS</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema, getDate() AS valorFechaDelSistema,
            'direccionResidencia' AS direccionResidencia, ubi.ubiDireccionFisica AS valorDireccion,
            'municipio' AS municipio, mun.munNombre AS nombreMunicipio,
            'departamento' AS departamento, dep.depNombre AS nombreDepartamento,
            'telefono' AS telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'fechaRadicacionSolicitud' AS fechaRadicacionSolicitud, s.solFechaRadicacion AS
            valorFechaRadicacionSolicitud,
            'numeroSolicitud' AS numeroSolicitud, s.solNumeroRadicacion AS valorNumeroSolicitud,
            'modalidad' AS modalidad, pf.pofModalidad AS valorModalidad,
            'cicloAsignacion' AS cicloAsignacion, ca.ciaNombre AS valorCicloAsignacion,
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion as valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'nombresYApellidosDelJefeDelHogar' AS nombresYApellidosDelJefeDelHogar, CASE WHEN per.perRazonSocial IS NOT
            NULL
            THEN per.perRazonSocial ELSE (
            per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' +
            per.perSegundoApellido ELSE '' END)
            END AS valorNombresYApellidosDelJefeDelHogar
            FROM
            SOLICITUD s
            JOIN SOLICITUDLEGALIZACIONDESEMBOLSO sld ON s.solId = sld.sldSolicitudGlobal
            JOIN POSTULACIONFOVIS pf ON pf.pofId = sld.sldPostulacionFOVIS
            JOIN JEFEHOGAR jh ON jh.jehId = pf.pofJefeHogar
            JOIN AFILIADO afi ON afi.afiId = jh.jehAfiliado
            JOIN PERSONA per ON per.perId = afi.afiPersona
            JOIN UBICACION ubi ON per.perUbicacionPrincipal = ubi.ubiId
            JOIN MUNICIPIO mun ON mun.munId = ubi.ubiMunicipio
            JOIN DEPARTAMENTO dep ON dep.depId = mun.munDepartamento
            JOIN CICLOASIGNACION ca ON pf.pofCicloAsignacion = ca.ciaId
            WHERE s.solId =:idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="plantilla.encabezado.radicacion.legalizacion.desembolsofovis">
        <description>Constante que representa la consulta de un encabezado de Legalización y desembolso subsidio FOVIS
            HU58
        </description>
        <query>
            SELECT TOP 1 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS
            valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'jefeDeHogar' as jefeHogar, CASE WHEN persona.perRazonSocial IS NOT NULL THEN persona.perRazonSocial ELSE (
            persona.perPrimerNombre + CASE WHEN persona.perSegundoNombre IS NOT NULL THEN ' ' + persona.perSegundoNombre
            ELSE '' END
            + ' ' + persona.perPrimerApellido + CASE WHEN persona.perSegundoApellido IS NOT NULL THEN ' ' +
            persona.perSegundoApellido ELSE '' END)
            END AS valorJefeHogar,
            'cicloDeAsignacion' AS cicloDeAsignacion,
            (SELECT ciaNombre FROM CicloAsignacion WHERE ciaId = postulacionFovis.pofCicloAsignacion) AS
            valorCicloDeAsignacion,
            'modalidad' AS modalidad, postulacionFovis.pofModalidad,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solAsig.safFechaAceptacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudLegalizacion.sldEstadoSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'backControlInternoFovis' AS backControlInternoFovis, solAsig.safUsuario AS valorBackControlInternoFovis,
            'usuarioVerificador' AS usuarioVerificador, solicitud.solDestinatario AS valorUsuarioVerificador
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN JefeHogar jefeHogar ON jefeHogar.jehAfiliado = afiliado.afiId
            LEFT JOIN PostulacionFOVIS postulacionFovis ON postulacionFovis.pofJefeHogar = jefeHogar.jehId
            LEFT JOIN SolicitudAsignacion solAsig ON postulacionFovis.pofSolicitudAsignacion = solAsig.safId
            LEFT JOIN solicitudlegalizacionDesembolso solicitudLegalizacion ON solicitudLegalizacion.sldPostulacionFovis
            = postulacionFovis.pofId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudLegalizacion.sldSolicitudGlobal
            WHERE solicitud.solId =:idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="plantilla.encabezado.legalizacion.autorizar.desembolsofovis">
        <description>Constante que representa la consulta de un encabezado de de autorizar la legalización y desembolso
            subsidio FOVIS
        </description>
        <query>
            SELECT TOP 1 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS
            valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'jefeDeHogar' as jefeHogar, CASE WHEN persona.perRazonSocial IS NOT NULL THEN persona.perRazonSocial ELSE (
            persona.perPrimerNombre + CASE WHEN persona.perSegundoNombre IS NOT NULL THEN ' ' + persona.perSegundoNombre
            ELSE '' END
            + ' ' + persona.perPrimerApellido + CASE WHEN persona.perSegundoApellido IS NOT NULL THEN ' ' +
            persona.perSegundoApellido ELSE '' END)
            END AS valorJefeHogar,
            'cicloDeAsignacion' AS cicloDeAsignacion,
            (SELECT ciaNombre FROM CicloAsignacion WHERE ciaId = postulacionFovis.pofCicloAsignacion) AS
            valorCicloDeAsignacion,
            'modalidad' AS modalidad, postulacionFovis.pofModalidad,
            'numeroDeSolicitud' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'fechaYHoraDeAsignacion' AS fechaYHoraDeAsignacion, solAsig.safFechaAceptacion As
            valorFechaYHoraDeAsignacion,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudLegalizacion.sldEstadoSolicitud,
            'usuarioQueRadico' AS usuarioQueRadico, solicitud.solUsuarioRadicacion AS valorUsuarioQueRadico,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'metodoEnvioDocumentos' As metodoEnvioDocumentos, solicitud.solMetodoEnvio AS valorMetodoEnvioDocumentos,
            'canalDeRecepcion' AS canalDeRecepcion, solicitud.solCanalRecepcion AS valorCanalDeRecepcion,
            'backControlInternoFovis' AS backControlInternoFovis, solAsig.safUsuario AS valorBackControlInternoFovis
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN JefeHogar jefeHogar ON jefeHogar.jehAfiliado = afiliado.afiId
            LEFT JOIN PostulacionFOVIS postulacionFovis ON postulacionFovis.pofJefeHogar = jefeHogar.jehId
            LEFT JOIN SolicitudAsignacion solAsig ON postulacionFovis.pofSolicitudAsignacion = solAsig.safId
            LEFT JOIN solicitudlegalizacionDesembolso solicitudLegalizacion ON solicitudLegalizacion.sldPostulacionFovis
            = postulacionFovis.pofId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicitudLegalizacion.sldSolicitudGlobal
            WHERE solicitud.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.cierreDeAportesRechazoSupervisor">
        <description>RCHZ_SUP_APO</description>
        <query>
            SELECT 'fechaDelSistema' AS fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreUsuarioNotificacion' AS nombreUsuarioNotificacion, s.solUsuarioRadicacion AS
            valorNombreUsuarioNotificacion,
            'nombreUsuarioRemitente' AS nombreUsuarioRemitente, scr.sciUsuarioSupervisor AS valorNombreUsuarioRemitente,
            'numeroCierre' AS numeroCierre, s.solNumeroRadicacion AS valorNumeroCierre
            FROM Solicitud s,
            SolicitudCierreRecaudo scr
            WHERE scr.sciSolicitudGlobal =s.solId
            AND s.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.cierreDeAportesRechazoContable">
        <description>RCHZ_ANL_CON</description>
        <query>
            SELECT 'fechaDelSistema' AS fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreUsuarioNotificacion' AS nombreUsuarioNotificacion, s.solUsuarioRadicacion AS
            valorNombreUsuarioNotificacion,
            'nombreUsuarioRemitente' AS nombreUsuarioRemitente, scr.sciUsuarioAnalistaContable AS
            valorNombreUsuarioRemitente,
            'numeroCierre' AS numeroCierre, s.solNumeroRadicacion AS valorNumeroCierre
            FROM Solicitud s,
            SolicitudCierreRecaudo scr
            WHERE scr.sciSolicitudGlobal =s.solId
            AND s.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.cierreDeAportesAprobacionContable">
        <description>APR_ANL_CON</description>
        <query>
            SELECT 'fechaDelSistema' AS fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreUsuarioRemitente' AS nombreUsuarioRemitente, scr.sciUsuarioAnalistaContable AS
            valorNombreUsuarioRemitente,
            'numeroCierre' AS numeroCierre, s.solNumeroRadicacion AS valorNumeroCierre
            FROM Solicitud s,
            SolicitudCierreRecaudo scr
            WHERE scr.sciSolicitudGlobal =s.solId
            AND s.solId =:idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="Plantilla.consulta.pagosSubsidioMonetario.masivo.dispersion.pagos.empleador">
        <description>Representa la consulta del contenido del comunicado 63,
            -- periodosLiquidados, montoLiquidado, numeroDeTrabajadores llegan como parámetro
        </description>
        <query>
            SELECT TOP 1
            'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' as nombreDelTrabajador, perRazonSocial AS valorNombreDelTrabajador,
            'tipoIdentificacionEmpleador' as tipoIdentificacionTrabajador, perTipoIdentificacion AS
            valorTipoIdentificacionTrabajador,
            'numeroIdentificacionEmpleador' as numeroIdentificacionTrabajador, perNumeroIdentificacion AS
            valorNumeroIdentificacionTrabajador,
            'direccion' as direccion, ubiDireccionFisica AS valorDireccion,
            'municipio' as municipio, munNombre as valorMunicipio,
            'departamento' as departamento, depNombre as valorDepartamento,
            'telefono' as telefono, CASE WHEN ubiTelefonoFijo IS NOT NULL THEN ubiTelefonoFijo ELSE ubiTelefonoCelular
            END AS valorTelefono,
             'cargoResponsableCcf' as cargoResponsableCcf,
            (select prmValor from Parametro where prmNombre = 'CARGO_RESPONSABLE_CCF') as valorCargoResponsableCcf,
             'firmaResponsableCcf' as firmaResponsableCcf,
            (select prmValor from Parametro where prmNombre = 'FIRMA_RESPONSABLE_CARTERA_CCF') as valorFirmaResponsableCcf,
            'responsableCcf' as responsableCcf,
            (select prmValor from Parametro where prmNombre = 'RESPONSABLE_CCF') as valorResponsableCcf
            FROM CuentaAdministradorSubsidio
            INNER JOIN DetalleSubsidioAsignado on casId = dsaCuentaAdministradorSubsidio
            INNER JOIN Empleador e on dsaEmpleador = e.empId
            INNER JOIN Empresa e2 on e.empEmpresa = e2.empId
            INNER JOIN Persona on e2.empPersona = perId
            INNER JOIN UbicacionEmpresa on ubeEmpresa = e2.empId
            INNER JOIN Ubicacion on ubiId = ubeUbicacion
            INNER JOIN Municipio on munId = ubiMunicipio
            INNER JOIN Departamento on depId = munDepartamento
            INNER JOIN SolicitudLiquidacionSubsidio on slsId = dsaSolicitudLiquidacionSubsidio
            INNER JOIN Solicitud on solId = slsSolicitudGlobal
            WHERE dsaEstado = 'DERECHO_ASIGNADO'
            AND ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            AND solNumeroRadicacion = :numeroRadicacion
            AND perId = :idPersona
        </query>
    </named-native-query>

    <named-native-query name="Plantilla.consulta.pagosSubsidioMonetario.masivo.dispersion.pagos.trabajador">
        <description>Representa la consulta del contenido del comunicado 64,
            -- periodosLiquidados, montoLiquidado, numeroDeBeneficiarios llegan como parámetro
        </description>
        <query>
            SELECT TOP 1
            'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreDelTrabajador' as nombreDelTrabajador, perRazonSocial AS valorNombreDelTrabajador,
            'tipoIdentificacionTrabajador' as tipoIdentificacionTrabajador, perTipoIdentificacion AS
            valorTipoIdentificacionTrabajador,
            'numeroIdentificacionTrabajador' as numeroIdentificacionTrabajador, perNumeroIdentificacion AS
            valorNumeroIdentificacionTrabajador,
            'direccion' as direccion, ubiDireccionFisica AS valorDireccion,
            'municipio' as municipio, munNombre as valorMunicipio,
            'departamento' as departamento, depNombre as valorDepartamento,
            'telefono' as telefono, CASE WHEN ubiTelefonoFijo IS NOT NULL THEN ubiTelefonoFijo ELSE ubiTelefonoCelular
            END AS valorTelefono,
            'reporteDeBeneficiarios' as reporteDeBeneficiarios,
            'com.asopagos.comunicados.ejb.ConsultaReporteComunicado64' as valorReporteDeBeneficiarios
            FROM CuentaAdministradorSubsidio
            INNER JOIN DetalleSubsidioAsignado on casId = dsaCuentaAdministradorSubsidio
            INNER JOIN Afiliado on dsaAfiliadoPrincipal = afiId
            INNER JOIN Persona on afiPersona = perId
            INNER JOIN Ubicacion on ubiId = perUbicacionPrincipal
            INNER JOIN Municipio on munId = ubiMunicipio
            INNER JOIN Departamento on depId = munDepartamento
            INNER JOIN SolicitudLiquidacionSubsidio on slsId = dsaSolicitudLiquidacionSubsidio
            INNER JOIN Solicitud on solId = slsSolicitudGlobal
            WHERE dsaEstado = 'DERECHO_ASIGNADO'
            AND solNumeroRadicacion = :numeroRadicacion
            AND perId = :idPersona
        </query>
    </named-native-query>
    <!--GLPI Preescripcion GLPI 45388-->
    <named-native-query name="Plantilla.consulta.pagosSubsidioMonetario.notificacion.prescripcion.subsidio.monetario.administrador.subsidio">
        <description>COM_SUB_PRE_PAG_TRA -proceso: PAGOS_SUBSIDIO_MONETARIO</description>
        <query>
        SELECT DISTINCT
            'ciudadSolicitud' AS ciudadSolicitud, (SELECT prmValor FROM parametro WHERE prmNombre='CIUDAD_CCF') AS valorCiudadSolicitud,
            'departamento' AS departamento, depNombre AS valorDepartamento,
            'direccion' AS direccion, ubiDireccionFisica AS valorDireccion,
            'fechaDelSistema' AS fechaDelSistema, GETDATE() AS valorFechaDelSistema,
            'montoPrescrito' AS montoPrescrito, CONVERT(VARCHAR, SUM(dsaValorTotal)) AS valorMontoPrescrito,
            'municipio' AS municipio, munNombre AS valorMunicipio,
            'nombreDelAdministradorDelSubsidio' AS nombreDelAdministradorDelSubsidio, perRazonSocial AS valorNombreDelAdministradorDelSubsidio,
            'numeroDeBeneficiarios' AS numeroDeBeneficiarios, COUNT(DISTINCT dsaBeneficiarioDetalle) AS valorNumeroDeBeneficiarios,
            'NumeroIdentificacionAdmin' AS NumeroIdentificacionAdmin, perNumeroIdentificacion AS valorNumeroIdentificacionAdmin,
            'telefono' AS telefono, COALESCE(ubiTelefonoFijo, ubiTelefonoCelular) AS valorTelefono,
            'tipoIdentificacionAdmin' AS tipoIdentificacionAdmin, perTipoIdentificacion AS valorTipoIdentificacionAdmin,
            'ciudadCcf' as ciudadCcf, (SELECT prmValor FROM parametro WHERE prmNombre='CIUDAD_CCF') AS valorCiudadCcf
            FROM CuentaAdministradorSubsidio
            INNER JOIN DetalleSubsidioAsignado ON dsaCuentaAdministradorSubsidio = casId
            INNER JOIN AdministradorSubsidio ON asuId = dsaAdministradorSubsidio
            INNER JOIN Persona ON perId = asuPersona
            LEFT JOIN Ubicacion ON ubiId = perUbicacionPrincipal
            LEFT JOIN Municipio ON munId = ubiMunicipio
            LEFT JOIN Departamento ON depId = munDepartamento
            WHERE casId = :idSolicitud
            GROUP BY depNombre, ubiDireccionFisica, munNombre, perRazonSocial, 
            perNumeroIdentificacion, dsaPeriodoLiquidado, perTipoIdentificacion, 
            ubiTelefonoFijo, ubiTelefonoCelular
    </query>
    </named-native-query>
    <!--Es el mismo comunicado para los tres avisos aolo cambia un parametro de dias aviso-->
    <named-native-query name="Plantilla.consulta.pagosSubsidioMonetario.notificacion.prescripcion.primer.aviso">
        <description>COM_SUB_AVISO_UNO_PRE_PAG_TRA</description>
        <query>
        SELECT DISTINCT
            'ciudadSolicitud' AS ciudadSolicitud, (SELECT prmValor FROM parametro WHERE prmNombre='CIUDAD_CCF') AS valorCiudadSolicitud,
            'departamento' AS departamento, depNombre AS valorDepartamento,
            'direccion' AS direccion, ubiDireccionFisica AS valorDireccion,
            'fechaDelSistema' AS fechaDelSistema, GETDATE() AS valorFechaDelSistema,
            'montoPrescrito' AS montoPrescrito, CONVERT(VARCHAR, SUM(dsaValorTotal)) AS valorMontoPrescrito,
            'municipio' AS municipio, munNombre AS valorMunicipio,
            'nombreDelAdministradorDelSubsidio' AS nombreDelAdministradorDelSubsidio, perRazonSocial AS valorNombreDelAdministradorDelSubsidio,
            'numeroDeBeneficiarios' AS numeroDeBeneficiarios, COUNT(DISTINCT dsaBeneficiarioDetalle) AS valorNumeroDeBeneficiarios,
            'NumeroIdentificacionAdmin' AS NumeroIdentificacionAdmin, perNumeroIdentificacion AS valorNumeroIdentificacionAdmin,
            'telefono' AS telefono, COALESCE(ubiTelefonoFijo, ubiTelefonoCelular) AS valorTelefono,
            'tipoIdentificacionAdmin' AS tipoIdentificacionAdmin, perTipoIdentificacion AS valorTipoIdentificacionAdmin,
            'ciudadCcf' as ciudadCcf, (SELECT prmValor FROM parametro WHERE prmNombre='CIUDAD_CCF') AS valorCiudadCcf
            FROM CuentaAdministradorSubsidio
            INNER JOIN DetalleSubsidioAsignado ON dsaCuentaAdministradorSubsidio = casId
            INNER JOIN AdministradorSubsidio ON asuId = dsaAdministradorSubsidio
            INNER JOIN Persona ON perId = asuPersona
            LEFT JOIN Ubicacion ON ubiId = perUbicacionPrincipal
            LEFT JOIN Municipio ON munId = ubiMunicipio
            LEFT JOIN Departamento ON depId = munDepartamento
            WHERE casId = :idSolicitud
            GROUP BY depNombre, ubiDireccionFisica, munNombre, perRazonSocial, 
            perNumeroIdentificacion, dsaPeriodoLiquidado, perTipoIdentificacion, 
            ubiTelefonoFijo, ubiTelefonoCelular
    </query>
    </named-native-query>
    <named-native-query name="Plantilla.consulta.pagosSubsidioMonetario.notificacion.prescripcion.segundo.aviso">
        <description>COM_SUB_AVISO_DOS_PRE_PAG_TRA </description>
        <query>
        SELECT DISTINCT
            'ciudadSolicitud' AS ciudadSolicitud, (SELECT prmValor FROM parametro WHERE prmNombre='CIUDAD_CCF') AS valorCiudadSolicitud,
            'departamento' AS departamento, depNombre AS valorDepartamento,
            'direccion' AS direccion, ubiDireccionFisica AS valorDireccion,
            'fechaDelSistema' AS fechaDelSistema, GETDATE() AS valorFechaDelSistema,
            'montoPrescrito' AS montoPrescrito, CONVERT(VARCHAR, SUM(dsaValorTotal)) AS valorMontoPrescrito,
            'municipio' AS municipio, munNombre AS valorMunicipio,
            'nombreDelAdministradorDelSubsidio' AS nombreDelAdministradorDelSubsidio, perRazonSocial AS valorNombreDelAdministradorDelSubsidio,
            'numeroDeBeneficiarios' AS numeroDeBeneficiarios, COUNT(DISTINCT dsaBeneficiarioDetalle) AS valorNumeroDeBeneficiarios,
            'NumeroIdentificacionAdmin' AS NumeroIdentificacionAdmin, perNumeroIdentificacion AS valorNumeroIdentificacionAdmin,
            'telefono' AS telefono, COALESCE(ubiTelefonoFijo, ubiTelefonoCelular) AS valorTelefono,
            'tipoIdentificacionAdmin' AS tipoIdentificacionAdmin, perTipoIdentificacion AS valorTipoIdentificacionAdmin,
            'ciudadCcf' as ciudadCcf, (SELECT prmValor FROM parametro WHERE prmNombre='CIUDAD_CCF') AS valorCiudadCcf
            FROM CuentaAdministradorSubsidio
            INNER JOIN DetalleSubsidioAsignado ON dsaCuentaAdministradorSubsidio = casId
            INNER JOIN AdministradorSubsidio ON asuId = dsaAdministradorSubsidio
            INNER JOIN Persona ON perId = asuPersona
            LEFT JOIN Ubicacion ON ubiId = perUbicacionPrincipal
            LEFT JOIN Municipio ON munId = ubiMunicipio
            LEFT JOIN Departamento ON depId = munDepartamento
            WHERE casId = :idSolicitud
            GROUP BY depNombre, ubiDireccionFisica, munNombre, perRazonSocial, 
            perNumeroIdentificacion, dsaPeriodoLiquidado, perTipoIdentificacion, 
            ubiTelefonoFijo, ubiTelefonoCelular
    </query>
    </named-native-query>
    <named-native-query name="Plantilla.consulta.pagosSubsidioMonetario.notificacion.prescripcion.tercer.aviso">
        <description>COM_SUB_AVISO_TRES_PRE_PAG_TRA</description>
        <query>
        SELECT DISTINCT
            'ciudadSolicitud' AS ciudadSolicitud, (SELECT prmValor FROM parametro WHERE prmNombre='CIUDAD_CCF') AS valorCiudadSolicitud,
            'departamento' AS departamento, depNombre AS valorDepartamento,
            'direccion' AS direccion, ubiDireccionFisica AS valorDireccion,
            'fechaDelSistema' AS fechaDelSistema, GETDATE() AS valorFechaDelSistema,
            'montoPrescrito' AS montoPrescrito, CONVERT(VARCHAR, SUM(dsaValorTotal)) AS valorMontoPrescrito,
            'municipio' AS municipio, munNombre AS valorMunicipio,
            'nombreDelAdministradorDelSubsidio' AS nombreDelAdministradorDelSubsidio, perRazonSocial AS valorNombreDelAdministradorDelSubsidio,
            'numeroDeBeneficiarios' AS numeroDeBeneficiarios, COUNT(DISTINCT dsaBeneficiarioDetalle) AS valorNumeroDeBeneficiarios,
            'NumeroIdentificacionAdmin' AS NumeroIdentificacionAdmin, perNumeroIdentificacion AS valorNumeroIdentificacionAdmin,
            'telefono' AS telefono, COALESCE(ubiTelefonoFijo, ubiTelefonoCelular) AS valorTelefono,
            'tipoIdentificacionAdmin' AS tipoIdentificacionAdmin, perTipoIdentificacion AS valorTipoIdentificacionAdmin,
            'ciudadCcf' as ciudadCcf, (SELECT prmValor FROM parametro WHERE prmNombre='CIUDAD_CCF') AS valorCiudadCcf
            FROM CuentaAdministradorSubsidio
            INNER JOIN DetalleSubsidioAsignado ON dsaCuentaAdministradorSubsidio = casId
            INNER JOIN AdministradorSubsidio ON asuId = dsaAdministradorSubsidio
            INNER JOIN Persona ON perId = asuPersona
            LEFT JOIN Ubicacion ON ubiId = perUbicacionPrincipal
            LEFT JOIN Municipio ON munId = ubiMunicipio
            LEFT JOIN Departamento ON depId = munDepartamento
            WHERE casId = :idSolicitud
            GROUP BY depNombre, ubiDireccionFisica, munNombre, perRazonSocial, 
            perNumeroIdentificacion, dsaPeriodoLiquidado, perTipoIdentificacion, 
            ubiTelefonoFijo, ubiTelefonoCelular
    </query>
    </named-native-query>
    <!--FIN GLPI PRESCRIPCION GLPI 45388-->
    <named-native-query name="Comunicados.consulta.pagosSubsidioMonetario.masivo.dispersion.pagos.trabajador">
        <description>Constante que representa la consulta del detalle del comunicado 64</description>
        <query>
            SELECT
            benef.perTipoIdentificacion AS benTipoIdentificacion,
            benef.perNumeroIdentificacion AS benNumeroIdentificacion,
            benef.perRazonSocial AS benRazonSocial,
            dsaTipoCuotaSubsidio,
            CAST(SUM(dsaValorSubsidioMonetario) AS NUMERIC) AS valorSubsidioMonetario,
            CAST(SUM(dsaValorDescuento) AS NUMERIC) AS valorDescuento,
            CAST(SUM(dsaValorOriginalAbonado) AS NUMERIC) AS valorOriginalAbonado,
            admin.perTipoIdentificacion AS adminTipoIdentificacion,
            admin.perNumeroIdentificacion AS adminNumeroIdentificacion,
            admin.perRazonSocial AS adminRazonSocial
            FROM CuentaAdministradorSubsidio
            INNER JOIN AdministradorSubsidio on casAdministradorSubsidio = asuId
            INNER JOIN Persona admin on asuPersona = admin.perId
            INNER JOIN DetalleSubsidioAsignado on casId = dsaCuentaAdministradorSubsidio
            INNER JOIN BeneficiarioDetalle on bedId = dsaBeneficiarioDetalle
            INNER JOIN PersonaDetalle on pedId = bedPersonaDetalle
            INNER JOIN Persona benef on pedPersona = benef.perId
            INNER JOIN Afiliado on dsaAfiliadoPrincipal = afiId
            INNER JOIN Persona traba on afiPersona = traba.perId
            INNER JOIN SolicitudLiquidacionSubsidio on slsId = dsaSolicitudLiquidacionSubsidio
            INNER JOIN Solicitud on solId = slsSolicitudGlobal
            WHERE dsaEstado = 'DERECHO_ASIGNADO'
            AND solNumeroRadicacion = :numeroRadicacion
            AND traba.perId = :idPersona
            GROUP BY
            benef.perTipoIdentificacion, benef.perNumeroIdentificacion, benef.perRazonSocial,
            admin.perTipoIdentificacion, admin.perNumeroIdentificacion, admin.perRazonSocial,
            dsaTipoCuotaSubsidio
            ORDER BY
            benef.perTipoIdentificacion, benef.perNumeroIdentificacion, benef.perRazonSocial,
            admin.perTipoIdentificacion, admin.perNumeroIdentificacion, admin.perRazonSocial,
            dsaTipoCuotaSubsidio
        </query>
    </named-native-query>


    <named-native-query name="Plantilla.consulta.pagosSubsidioMonetario.masivo.dispersion.pagos.administrador">
        <description>Representa la consulta del contenido del comunicado 65,
            -- periodosLiquidados, montoLiquidado, numeroDeBeneficiarios llegan como parámetro
        </description>
        <query>
            SELECT TOP 1
            'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreDelAdministradorDelSubsidio' as nombreDelAdministradorDelSubsidio, perRazonSocial AS
            valorNombreDelAdministradorDelSubsidio,
            'tipoIdentificacionAdmin' as tipoIdentificacionAdmin, perTipoIdentificacion AS valorTipoIdentificacionAdmin,
            'numeroIdentificacionAdmin' as numeroIdentificacionAdmin, perNumeroIdentificacion AS
            valorNumeroIdentificacionAdmin,
            'direccion' as direccion, ubiDireccionFisica AS valorDireccion,
            'municipio' as municipio, munNombre as valorMunicipio,
            'departamento' as departamento, depNombre as valorDepartamento,
            'telefono' as telefono, CASE WHEN ubiTelefonoFijo IS NOT NULL THEN ubiTelefonoFijo ELSE ubiTelefonoCelular
            END AS valorTelefono,
            'reporteDeBeneficiarios' as reporteDeBeneficiarios,
            'com.asopagos.comunicados.ejb.ConsultaReporteComunicado65' as valorReporteDeBeneficiarios,
         'cargoResponsableCcf' as cargoResponsableCcf,
            (select prmValor from Parametro where prmNombre = 'CARGO_RESPONSABLE_CCF') as valorCargoResponsableCcf,
             'firmaResponsableCcf' as firmaResponsableCcf,
            (select prmValor from Parametro where prmNombre = 'FIRMA_RESPONSABLE_CARTERA_CCF') as valorFirmaResponsableCcf,
            'responsableCcf' as responsableCcf,
            (select prmValor from Parametro where prmNombre = 'RESPONSABLE_CCF') as valorResponsableCcf
            FROM CuentaAdministradorSubsidio
            INNER JOIN DetalleSubsidioAsignado on casId = dsaCuentaAdministradorSubsidio
            INNER JOIN SolicitudLiquidacionSubsidio on slsId = dsaSolicitudLiquidacionSubsidio
            INNER JOIN Solicitud on solId = slsSolicitudGlobal
            INNER JOIN AdministradorSubsidio on casAdministradorSubsidio = asuId
            INNER JOIN Persona on asuPersona = perId
            LEFT JOIN Ubicacion on ubiId = perUbicacionPrincipal
            LEFT JOIN Municipio on munId = ubiMunicipio
            LEFT JOIN Departamento on depId = munDepartamento
            WHERE dsaEstado = 'DERECHO_ASIGNADO'
            AND solNumeroRadicacion = :numeroRadicacion
            AND perId = :idPersona
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.pagosSubsidioMonetario.masivo.dispersion.pagos.administrador">
        <description>Constante que representa la consulta del detalle del comunicado 65</description>
        <query>
            SELECT
            benef.perTipoIdentificacion AS benTipoIdentificacion,
            benef.perNumeroIdentificacion AS benNumeroIdentificacion,
            benef.perRazonSocial AS benRazonSocial,
            dsaTipoCuotaSubsidio,
            CAST(SUM(dsaValorSubsidioMonetario) AS NUMERIC) AS valorSubsidioMonetario,
            CAST(SUM(dsaValorDescuento) AS NUMERIC) AS valorDescuento,
            CAST(SUM(dsaValorOriginalAbonado) AS NUMERIC) AS valorOriginalAbonado
            FROM CuentaAdministradorSubsidio
            INNER JOIN AdministradorSubsidio on casAdministradorSubsidio = asuId
            INNER JOIN Persona admin on asuPersona = admin.perId
            INNER JOIN DetalleSubsidioAsignado on casId = dsaCuentaAdministradorSubsidio
            INNER JOIN BeneficiarioDetalle on bedId = dsaBeneficiarioDetalle
            INNER JOIN PersonaDetalle on pedId = bedPersonaDetalle
            INNER JOIN Persona benef on pedPersona = benef.perId
            INNER JOIN SolicitudLiquidacionSubsidio on slsId = dsaSolicitudLiquidacionSubsidio
            INNER JOIN Solicitud on solId = slsSolicitudGlobal
            WHERE dsaEstado = 'DERECHO_ASIGNADO'
            AND solNumeroRadicacion = :numeroRadicacion
            AND admin.perId = :idPersona
            GROUP BY
            benef.perTipoIdentificacion, benef.perNumeroIdentificacion, benef.perRazonSocial,
            dsaTipoCuotaSubsidio
            ORDER BY
            benef.perTipoIdentificacion, benef.perNumeroIdentificacion, benef.perRazonSocial,
            dsaTipoCuotaSubsidio
        </query>
    </named-native-query>
    <named-native-query name="plantillaConsolidadoCartera.avisoIncumplimientoPersona">
        <description>AVI_INC_PER</description>
        <query>
            SELECT '${tabla}' as llave, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.avisoIncumplimientoPersona">
        <description>AVI_INC_PER</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, getdate(),103) AS valorFechaDelSistema,
            'nombreYApellidosAfiliadoPrincipal' as nombreYApellidosAfiliadoPrincipal,
            per.perPrimerNombre +' ' + CASE WHEN per.perSegundoNombre IS NOT NULL THEN per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + ' ' +
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN per.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosAfiliadoPrincipal,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'periodoMora' AS periodoMora,
            perCar.carPeriodoDeuda valorPeriodoMora,
            'fechaCorte' AS fechaCorte,
            dosDca.dosFechaHoraCargue AS valorFechaCorte,
            'numeroIdentificacionAfiliado' AS numeroIdentificacionAfiliado,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionAfiliado,
            'tipoIdentificacionAfiliado' AS tipoIdentificacionAfiliado,
            per.perTipoIdentificacion as valorTipoIdentificacionAfiliado,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos,
            'tipoIdentificacion' AS tipoIdentificacion,
			COALESCE(perCar.perTipoIdentificacion,dosDca.perTipoIdentificacion)  as valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion,
			COALESCE(perCar.perNumeroIdentificacion,dosDca.perNumeroIdentificacion )as valorNumeroIdentificacion,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valorTabla
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta,
            CAST(MIN(car.carPeriodoDeuda) AS VARCHAR(7)) AS carPeriodoDeuda,
            per.perTipoIdentificacion, per.perNumeroIdentificacion
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC4','LC5')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId , perNumeroIdentificacion,perTipoIdentificacion
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue,
            per.perTipoIdentificacion, per.perNumeroIdentificacion
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('LC4A','LC5A')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.pagosSubsidioMonetario.fallecimeinto.dispersion.pagos">
        <description>Constante que representa la consulta del detalle del comunicado 74, 75, 78</description>
        <query>
            SELECT
            dsaPeriodoLiquidado,
            CAST(SUM(dsaValorOriginalAbonado) AS NUMERIC) AS valorOriginalAbonado
            FROM CuentaAdministradorSubsidio
            INNER JOIN DetalleSubsidioAsignado on casId = dsaCuentaAdministradorSubsidio
            INNER JOIN SolicitudLiquidacionSubsidio on slsId = dsaSolicitudLiquidacionSubsidio
            INNER JOIN Solicitud on solId = slsSolicitudGlobal
            WHERE dsaEstado = 'DERECHO_ASIGNADO'
            AND solNumeroRadicacion = :numeroRadicacion
            GROUP BY
            dsaPeriodoLiquidado
            ORDER BY
            dsaPeriodoLiquidado ASC
        </query>
    </named-native-query>

    <named-native-query name="Plantilla.consulta.pagosSubsidioMonetario.fallecimiento.dispersion.pagos.trabajador">
        <description>Representa la consulta del contenido del comunicado 74 y 77,
            -- periodosLiquidados, montoLiquidado, numeroDeBeneficiarios llegan como parámetro
        </description>
        <query>
            SELECT TOP 1
            'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreDelTrabajador/Conyuge' as nombreDelTrabajador, perRazonSocial AS valorNombreDelTrabajador,
            'tipoIdentificacionTrabajador/Conyuge' as tipoIdentificacionTrabajador, perTipoIdentificacion AS
            valorTipoIdentificacionTrabajador,
            'numeroIdentificacionTrabajador/Conyuge' as numeroIdentificacionTrabajador, perNumeroIdentificacion AS
            valorNumeroIdentificacionTrabajador,
            'direccion' as direccion, ubiDireccionFisica AS valorDireccion,
            'municipio' as municipio, munNombre as valorMunicipio,
            'departamento' as departamento, depNombre as valorDepartamento,
            'telefono' as telefono, CASE WHEN ubiTelefonoFijo IS NOT NULL THEN ubiTelefonoFijo ELSE ubiTelefonoCelular
            END AS valorTelefono,
            'reporteDeBeneficiarios' as reporteDeBeneficiarios,
            'com.asopagos.comunicados.ejb.ConsultaReporteComunicadoSubFallecimiento' as valorReporteDeBeneficiarios,
             'cargoResponsableCcf' as cargoResponsableCcf,
            (select prmValor from Parametro where prmNombre = 'CARGO_RESPONSABLE_CCF') as valorCargoResponsableCcf,
             'firmaResponsableCcf' as firmaResponsableCcf,
            (select prmValor from Parametro where prmNombre = 'FIRMA_RESPONSABLE_CARTERA_CCF') as valorFirmaResponsableCcf,
            'responsableCcf' as responsableCcf,
            (select prmValor from Parametro where prmNombre = 'RESPONSABLE_CCF') as valorResponsableCcf
            FROM CuentaAdministradorSubsidio
            INNER JOIN DetalleSubsidioAsignado on casId = dsaCuentaAdministradorSubsidio
            INNER JOIN Afiliado on dsaAfiliadoPrincipal = afiId
            INNER JOIN Persona on afiPersona = perId
            INNER JOIN Ubicacion on ubiId = perUbicacionPrincipal
            INNER JOIN Municipio on munId = ubiMunicipio
            INNER JOIN Departamento on depId = munDepartamento
            INNER JOIN SolicitudLiquidacionSubsidio on slsId = dsaSolicitudLiquidacionSubsidio
            INNER JOIN Solicitud on solId = slsSolicitudGlobal
            WHERE dsaEstado = 'DERECHO_ASIGNADO'
            AND solNumeroRadicacion = :numeroRadicacion
            AND perId = :idPersona
        </query>
    </named-native-query>
    <named-native-query name="Plantilla.consulta.pagosSubsidioMonetario.fallecimiento.dispersion.pagos.administrador">
        <description>Representa la consulta del contenido del comunicado 75 y 78,
            -- periodosLiquidados, montoLiquidado, numeroDeBeneficiarios llegan como parámetro
        </description>
        <query>
            SELECT TOP 1
            'fechaDelSistema' as fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombreDelAdministradorDelSubsidio' as nombreDelAdministradorDelSubsidio, perRazonSocial AS
            valorNombreDelAdministradorDelSubsidio,
            'tipoIdentificacionAdmin' as tipoIdentificacionAdmin, perTipoIdentificacion AS valorTipoIdentificacionAdmin,
            'numeroIdentificacionAdmin' as numeroIdentificacionAdmin, perNumeroIdentificacion AS
            valorNumeroIdentificacionAdmin,
            'direccion' as direccion, ubiDireccionFisica AS valorDireccion,
            'municipio' as municipio, munNombre as valorMunicipio,
            'departamento' as departamento, depNombre as valorDepartamento,
            'telefono' as telefono, CASE WHEN ubiTelefonoFijo IS NOT NULL THEN ubiTelefonoFijo ELSE ubiTelefonoCelular
            END AS valorTelefono,
            'reporteDeBeneficiarios' as reporteDeBeneficiarios,
            'com.asopagos.comunicados.ejb.ConsultaReporteComunicadoSubFallecimiento' as valorReporteDeBeneficiarios,
            'fechaLiquidacion' as fechaLiquidacion,
            ISNULL(( SELECT TOP 1
                dos.dosFechaHoraCargue AS dosFechaHoraCargue
                FROM Persona per
                INNER JOIN Cartera car ON car.carPersona = per.perId
                LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('C1','C2','E2')
                LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
                where per.perId = p.perId
            ), '')  as valorFechaLiquidacion,
            'cargoResponsableCcf' as cargoResponsableCcf,
            (select prmValor from Parametro where prmNombre = 'CARGO_RESPONSABLE_CCF') as valorCargoResponsableCcf,
             'firmaResponsableCcf' as firmaResponsableCcf,
            (select prmValor from Parametro where prmNombre = 'FIRMA_RESPONSABLE_CARTERA_CCF') as valorFirmaResponsableCcf,
            'responsableCcf' as responsableCcf,
            (select prmValor from Parametro where prmNombre = 'RESPONSABLE_CCF') as valorResponsableCcf
            
            FROM CuentaAdministradorSubsidio
            INNER JOIN DetalleSubsidioAsignado on casId = dsaCuentaAdministradorSubsidio
            INNER JOIN SolicitudLiquidacionSubsidio on slsId = dsaSolicitudLiquidacionSubsidio
            INNER JOIN Solicitud on solId = slsSolicitudGlobal
            INNER JOIN AdministradorSubsidio on casAdministradorSubsidio = asuId
            INNER JOIN Persona p on asuPersona = p.perId
            LEFT JOIN Ubicacion on ubiId = perUbicacionPrincipal
            LEFT JOIN Municipio on munId = ubiMunicipio
            LEFT JOIN Departamento on depId = munDepartamento
            WHERE dsaEstado = 'DERECHO_ASIGNADO'
            AND solNumeroRadicacion = :numeroRadicacion
            AND p.perId = :idPersona
        </query>
    </named-native-query>

    <named-native-query name="plantilla.encabezado.subsidioMonetario.507">
        <description>Constante que representa la consulta de un encabezado por trabajador cuando se hace por id de
            solicitud.
        </description>
        <query>
            SELECT 'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' as razonSocialNombre, persona.perRazonSocial AS valorRazonSocialNombre,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, solicitud.solFechaRadicacion AS
            valorFechaYHoraDeSolicitud,
            'nooperacion' AS numeroDeSolicitud, solicitud.solNumeroRadicacion AS valorNumeroDeSolicitud,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, solicitudLiqSubsidio.slsEstadoLiquidacion AS
            valorEstadoDeLaSolicitud
            FROM Solicitud solicitud
            INNER JOIN SolicitudLiquidacionSubsidio solicitudLiqSubsidio ON solicitudLiqSubsidio.slsSolicitudGlobal =
            solicitud.solId
            INNER JOIN dbo.PersonaLiquidacionEspecifica perLiqEspecifica ON
            perLiqEspecifica.pleSolicitudLiquidacionSubsidio = solicitudLiqSubsidio.slsId
            INNER JOIN Afiliado afiliado ON afiliado.afiId = perLiqEspecifica.pleAfiliadoPrincipal
            INNER JOIN Persona persona ON persona.perId = afiliado.afiPersona
            WHERE solicitud.solId = :idSolicitud
            GROUP BY persona.perTipoidentificacion, persona.perNumeroidentificacion , persona.perRazonSocial,
            solicitud.solFechaRadicacion, solicitud.solNumeroRadicacion, solicitudLiqSubsidio.slsEstadoLiquidacion
        </query>
    </named-native-query>

    <named-native-query name="Comunicados.consulta.AfiliacionActivaCaja">
        <description>Representa la consulta del contenido del comunicado 144</description>
        <query>
            SELECT TOP 1
            'tipoAfiliado' AS tipoAfiliado, cerTipoAfiliado AS valorTipoAfiliado,
            'mesFinAporteCertificado' AS mesFinAporteCertificado, CAST(FORMAT(cerFechaGeneracion, 'dd/MM/yyyy', 'es-CO')
            as VARCHAR(10)) AS valorMesFinAporteCertificado,
            'mesInAporteCertificado' AS mesInAporteCertificado, CAST(FORMAT(cerFechaGeneracion, 'dd/MM/yyyy', 'es-CO')
            as VARCHAR(10)) AS valorMesInAporteCertificado,
            'fechaGeneracion' AS fechaGeneracion, CAST(FORMAT(cerFechaGeneracion, 'dd/MM/yyyy', 'es-CO') as VARCHAR(10))
            AS valorFechaGeneracion,
            'nombreCompleto' AS nombreCompleto, CASE WHEN per.perRazonSocial IS NOT NULL
            THEN per.perRazonSocial ELSE (per.perPrimerNombre +
            CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN ' ' + per.perSegundoApellido ELSE '' END) END AS valorNombreCompleto,
            'tipoSolicitante' as tipoSolicitante, CASE WHEN cerGeneradoComoEmpleador=1 THEN rolAfi.roaTipoAfiliado ELSE
            '' END AS valorTipoSolicitante,
            'tipoCertificado' AS tipoCertificado, cerTipoCertificado AS valorTipoCertificado,
            'seccionAfiliacion' AS seccionAfiliacion, CASE WHEN cerTipoAfiliado IS NOT NULL
            THEN 'trabajadores, pensionados e independientes' ELSE 'empleadores' END AS valorSeccionAfiliacion,
            'tipoTrabajador' AS tipoTrabajador, CASE WHEN cerTipoAfiliado IS NOT NULL
            THEN 'el señor(a)' ELSE 'la empresa' END AS valorTipoTrabajador,
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion +
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN '-' + CAST (per.perDigitoVerificacion AS varchar(2))
            ELSE '' END AS valorNumeroIdentificacion,
            'trabajador' AS trabajador, CASE WHEN cerTipoAfiliado = 'PENSIONADO' THEN ' pensionado'
            WHEN cerTipoAfiliado = 'TRABAJADOR_DEPENDIENTE' THEN ' como trabajador del empleador '
            WHEN cerTipoAfiliado = 'TRABAJADOR_INDEPENDIENTE' THEN ' independiente' ELSE '' END AS valorTrabajador,
            'nombreRazonSocialEmpleador' AS nombreRazonSocialEmpleador, CASE WHEN cerTipoAfiliado =
            'TRABAJADOR_DEPENDIENTE'
            THEN (CASE WHEN perEmp.perRazonSocial IS NOT NULL
            THEN perEmp.perRazonSocial ELSE (perEmp.perPrimerNombre +
            CASE WHEN perEmp.perSegundoNombre IS NOT NULL THEN ' ' + perEmp.perSegundoNombre ELSE '' END
            + ' ' + perEmp.perPrimerApellido + CASE WHEN perEmp.perSegundoApellido IS NOT NULL
            THEN ' ' + perEmp.perSegundoApellido ELSE '' END) END) ELSE '' END AS valorRazonSocialEmpleador,
            'municipio' AS municipio,(case when mun1.munNombre IS NULL then mu.munNombre ELSE mun1.munNombre end) AS
            valorMunicipio,
            'departamento' AS departamento,(case when dep1.depNombre is null then de.depNombre else dep1.depNombre end)
            AS valorDepartamento,
            'telefono' AS telefono, CASE WHEN ubi1.ubiTelefonoFijo IS NOT NULL THEN ubi1.ubiTelefonoFijo ELSE
            ubi1.ubiTelefonoCelular END AS valorTelefono,
            'nombreCcf' AS nombreCcf, cerDirigidoA as valorNombreCcf,
            'parrafoNoValidez' AS parrafoNoValidez, CASE WHEN cerTipoAfiliado IS NULL
            THEN '&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;span style=''color:black;mso-themecolor:text1''&gt;
            Esta certificación no es válida para retirarse de ' + cerDirigidoA +
            ', ni afiliarse a otra Caja de Compensación.&lt;/span&gt;&lt;/p&gt;' ELSE null END AS valorParrafoNoValidez,
			'FechaRecepcionDocumentos' AS FechaRecepcionDocumentos, ichFechaRecepcionDocumento as valorFechaRecepcionDocumentos,
			'CategoriaAfiliado' AS CategoriaAfiliado, catCategoriaPersona AS valorCategoriaAfiliado,
            'FechaInicioLabores' AS FechaInicioLabores, CAST(FORMAT(roa.roaFechaIngreso, 'dd/MM/yyyy', 'es-CO') AS VARCHAR(10)) AS valorFechaInicioLabores,
            'fechaRadicacionSolicitud' AS fechaRadicacionSolicitud,
			 CONVERT(VARCHAR(MAX), FORMAT(CONVERT(DATE, Solicitud.solFechaRadicacion, 103), 'dd "de" MMMM "de" yyyy', 'es-CO'))  as valorfechaRadicacionSolicitud
            FROM Certificado
            INNER JOIN Persona per on cerPersona = per.perId
            INNER JOIN Ubicacion ubi1 on ubi1.ubiId = perUbicacionPrincipal
            LEFT JOIN Municipio mun1 on mun1.munId = ubi1.ubiMunicipio
            LEFT JOIN Departamento dep1 on depId = mun1.munDepartamento
            LEFT JOIN Empresa emp on emp.empPersona = per.perId
            AND cerTipoAfiliado IS NULL
            LEFT JOIN Empleador empl on empl.empEmpresa = emp.empId
            AND empl.empEstadoEmpleador = 'ACTIVO'
            LEFT JOIN Afiliado on perId = afiPersona
            AND cerTipoAfiliado IS NOT NULL
            LEFT JOIN RolAfiliado roa on roaAfiliado = afiId
            AND roaEstadoafiliado = 'ACTIVO'
			JOIN SolicitudAfiliacionPersona ON sapRolAfiliado = ROA.roaId
			JOIN Solicitud ON sapSolicitudGlobal = solId
			JOIN ItemChequeo ON ichSolicitud = solId
			JOIN Categoria ON catIdAfiliado = afiId
            AND (cerTipoAfiliado IS NULL OR roa.roaTipoAfiliado = cerTipoAfiliado)
            LEFT JOIN Empleador emplafi on emplafi.empId = cerEmpleador
            LEFT JOIN Empresa empafi on empafi.empId = emplafi.empEmpresa
            LEFT JOIN Persona perEmp on perEmp.perId = empafi.empPersona
            LEFT JOIN RolAfiliado rolAfi on rolAfi.roaEmpleador = emplafi.empId
            LEFT join UbicacionEmpresa ue on ue.ubeEmpresa=emp.empId
            LEFT join Ubicacion ubi on ubi.ubiId=ue.ubeUbicacion
            LEFT JOIN Municipio mu on mu.munId = ubi.ubiMunicipio
            LEFT JOIN Departamento de on de.depId = mu.munDepartamento
            WHERE cerId = :idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="Comunicados.consulta.HistoricoAfiliacionesEnCaja">
        <description>Representa la consulta del contenido del comunicado 145</description>
        <query>
            SELECT TOP 1
            'tipoAfiliado' AS tipoAfiliado, cerTipoAfiliado AS valorTipoAfiliado,
            'fechaGeneracion' AS fechaGeneracion, CAST(FORMAT(cerFechaGeneracion, 'dd/MM/yyyy', 'es-CO') as VARCHAR(10))
            AS valorFechaGeneracion,
            'nombreCompleto' AS nombreCompleto, CASE WHEN per.perRazonSocial IS NOT NULL
            THEN per.perRazonSocial ELSE (per.perPrimerNombre +
            CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN ' ' + per.perSegundoApellido ELSE '' END) END AS valorNombreCompleto,
            'refCertificado' AS refCertificado, CASE WHEN cerEmpleador IS NOT NULL
            THEN 'de empleador con la caja' ELSE '' END AS valorRefCertificado,
            'tipoCertificado' AS tipoCertificado, cerTipoCertificado AS valorTipoCertificado,
            'seccionAfiliacion' AS seccionAfiliacion, CASE WHEN cerTipoAfiliado IS NOT NULL
            THEN 'trabajadores, pensionados e independientes' ELSE 'empleadores' END AS valorSeccionAfiliacion,
            'tipoTrabajador' AS tipoTrabajador, CASE WHEN cerTipoAfiliado IS NOT NULL
            THEN 'el señor(a)' ELSE 'la empresa' END AS valorTipoTrabajador,
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion +
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN '-' + CAST (per.perDigitoVerificacion AS varchar(2))
            ELSE '' END AS valorNumeroIdentificacion,
            'tipoSolicitante' AS tipoSolicitante, CASE WHEN cerTipoAfiliado = 'PENSIONADO' THEN ' pensionado'
            WHEN cerTipoAfiliado = 'TRABAJADOR_DEPENDIENTE' THEN ' como trabajador del empleador '
            WHEN cerTipoAfiliado = 'TRABAJADOR_INDEPENDIENTE' THEN ' independiente' ELSE 'empleador' END AS
            valorTrabajador,
            'direccionPrincipal' as direccionPrincipal, CASE WHEN cerGeneradoComoEmpleador = 1 THEN
            ubiE.ubiDireccionFisica ELSE ubiP.ubiDireccionFisica END AS valorDireccionPrincipal,
            'municipio' AS municipio, CASE WHEN cerGeneradoComoEmpleador = 1 THEN munE.munNombre ELSE munP.munNombre END
            AS valorMunicipio,
            'departamento' AS departamento, CASE WHEN cerGeneradoComoEmpleador = 1 THEN depE.depNombre ELSE
            depP.depNombre END AS valorDepartamento,
            'telefono' AS telefono,CASE WHEN cerGeneradoComoEmpleador = 1 THEN (CASE WHEN ubiE.ubiTelefonoFijo IS NOT
            NULL THEN ubiE.ubiTelefonoFijo ELSE ubiE.ubiTelefonoCelular END) ELSE (CASE WHEN ubiP.ubiTelefonoFijo IS NOT
            NULL THEN ubiP.ubiTelefonoFijo ELSE ubiP.ubiTelefonoCelular END) END AS valorTelefono,
            'nombreCcf' AS nombreCcf, cerDirigidoA as valorNombreCcf,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ConsultaTablaComunicado145' as valorTabla,
            'nombreRazonSocialEmpleador' AS nombreRazonSocialEmpleador, CASE WHEN perEmp.perRazonSocial IS NOT NULL
            THEN perEmp.perRazonSocial ELSE (perEmp.perPrimerNombre +
            CASE WHEN perEmp.perSegundoNombre IS NOT NULL THEN ' ' + perEmp.perSegundoNombre ELSE '' END
            + ' ' + perEmp.perPrimerApellido + CASE WHEN perEmp.perSegundoApellido IS NOT NULL
            THEN ' ' + perEmp.perSegundoApellido ELSE '' END) END AS valorRazonSocialEmpleador
            FROM Certificado
            INNER JOIN Persona per on cerPersona = per.perId
            LEFT JOIN Ubicacion ubiP on ubiId = perUbicacionPrincipal
            LEFT JOIN Municipio munP on munP.munId = ubiP.ubiMunicipio
            LEFT JOIN Departamento depP on depP.depId = munP.munDepartamento
            LEFT JOIN Empresa emp on emp.empPersona = per.perId
            AND cerGeneradoComoEmpleador = 1
            LEFT JOIN Empleador empl on empl.empEmpresa = emp.empId
            LEFT JOIN Afiliado on perId = afiPersona
            AND cerGeneradoComoEmpleador = 0
            LEFT JOIN RolAfiliado roa on roaAfiliado = afiId
            LEFT JOIN UbicacionEmpresa ube on emp.empId = ube.ubeEmpresa
            LEFT JOIN Ubicacion ubiE on ubiE.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio munE on munE.munId = ubiE.ubiMunicipio
            LEFT JOIN Departamento depE on depE.depId = munE.munDepartamento
            LEFT JOIN Persona perEmp on perEmp.perID = emp.empPersona
            WHERE cerId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.AportesVigentesAnio">
        <description>Representa la consulta del contenido del comunicado 145</description>
        <query>
            SELECT TOP 1
            'tipoAfiliado' AS tipoAfiliado, cerTipoAfiliado AS valorTipoAfiliado,
            'fechaGeneracion' AS fechaGeneracion, CAST(FORMAT(cerFechaGeneracion, 'dd/MM/yyyy', 'es-CO') as VARCHAR(10))
            AS valorFechaGeneracion,
            'nombreCompleto' AS nombreCompleto, CASE WHEN per.perRazonSocial IS NOT NULL
            THEN per.perRazonSocial ELSE (per.perPrimerNombre +
            CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN ' ' + per.perSegundoApellido ELSE '' END) END AS valorNombreCompleto,
            'tipoCertificado' AS tipoCertificado, cerTipoCertificado AS valorTipoCertificado,
            'seccionAfiliacion' AS seccionAfiliacion, CASE WHEN cerTipoAfiliado IS NOT NULL
            THEN 'trabajadores, pensionados e independientes' ELSE 'empleadores' END AS valorSeccionAfiliacion,
            'tipoTrabajador' AS tipoTrabajador, CASE WHEN cerTipoAfiliado IS NOT NULL
            THEN 'el señor(a)' ELSE 'la empresa' END AS valorTipoTrabajador,
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion +
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN '-' + CAST (per.perDigitoVerificacion AS varchar(2))
            ELSE '' END AS valorNumeroIdentificacion,
            'tipoSolicitante' AS tipoSolicitante, CASE WHEN cerTipoAfiliado = 'PENSIONADO' THEN ' pensionado'
            WHEN cerTipoAfiliado = 'TRABAJADOR_DEPENDIENTE' THEN ' como trabajador del empleador '
            WHEN cerTipoAfiliado = 'TRABAJADOR_INDEPENDIENTE' THEN ' independiente' ELSE 'empleador' END AS
            valorTipoSolicitante,
            'direccionPrincipal' as direccionPrincipal, CASE WHEN cerGeneradoComoEmpleador = 1 THEN
            ubiE.ubiDireccionFisica ELSE ubiP.ubiDireccionFisica END AS valorDireccionPrincipal,
            'municipio' AS municipio, CASE WHEN cerGeneradoComoEmpleador = 1 THEN munE.munNombre ELSE munP.munNombre END
            AS valorMunicipio,
            'departamento' AS departamento, CASE WHEN cerGeneradoComoEmpleador = 1 THEN depE.depNombre ELSE
            depP.depNombre END AS valorDepartamento,
            'telefono' AS telefono,CASE WHEN cerGeneradoComoEmpleador = 1 THEN (CASE WHEN ubiE.ubiTelefonoFijo IS NOT
            NULL THEN ubiE.ubiTelefonoFijo ELSE ubiE.ubiTelefonoCelular END) ELSE (CASE WHEN ubiP.ubiTelefonoFijo IS NOT
            NULL THEN ubiP.ubiTelefonoFijo ELSE ubiP.ubiTelefonoCelular END) END AS valorTelefono,
            'nombreCcf' AS nombreCcf, cerDirigidoA as valorNombreCcf,
            'anio' AS anio, cerAnio as valorAnio,
            'sumAportes' AS sumAportes, 'com.asopagos.comunicados.ejb.ObtenerSumatoriaAportes' as valorTotalAporte,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ConsultaTablaComunicado145' as valorTabla,
            'nombreRazonSocialEmpleador' AS nombreRazonSocialEmpleador, CASE WHEN perEmp.perRazonSocial IS NOT NULL
            THEN perEmp.perRazonSocial ELSE (perEmp.perPrimerNombre +
            CASE WHEN perEmp.perSegundoNombre IS NOT NULL THEN ' ' + perEmp.perSegundoNombre ELSE '' END
            + ' ' + perEmp.perPrimerApellido + CASE WHEN perEmp.perSegundoApellido IS NOT NULL
            THEN ' ' + perEmp.perSegundoApellido ELSE '' END) END AS valorRazonSocialEmpleador
            FROM Certificado
            LEFT JOIN Persona per on cerPersona = per.perId
            LEFT JOIN Ubicacion ubiP on ubiP.ubiId = perUbicacionPrincipal
            LEFT JOIN Municipio munP on munP.munId = ubiP.ubiMunicipio
            LEFT JOIN Departamento depP on depP.depId = munP.munDepartamento
            LEFT JOIN Empresa emp on emp.empPersona = per.perId
            AND cerGeneradoComoEmpleador = 1
            LEFT JOIN Empleador empl on empl.empEmpresa = emp.empId
            LEFT JOIN Afiliado on perId = afiPersona
            AND cerGeneradoComoEmpleador = 0
            LEFT JOIN RolAfiliado roa on roaAfiliado = afiId
            LEFT JOIN UbicacionEmpresa ube on emp.empId = ube.ubeEmpresa
            LEFT JOIN Ubicacion ubiE on ubiE.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio munE on munE.munId = ubiE.ubiMunicipio
            LEFT JOIN Departamento depE on depE.depId = munE.munDepartamento
            LEFT JOIN Persona perEmp on perEmp.perID = emp.empPersona
            WHERE cerId =:idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="Certificados.consulta.AfiliacionActivoACaja">
        <description>Representa la consulta del contenido del comunicado 144</description>
        <query>
            SELECT empEstadoEmpleador AS estadoAfiliacion
            FROM VW_EstadoAfiliacionEmpleadorCaja
            WHERE empEstadoEmpleador IN ('ACTIVO','INACTIVO','NO_FORMALIZADO_RETIRADO_CON_APORTES')
            AND perId = :idPersona
            AND :tipoAfiliado IS NULL
            UNION
            SELECT roaEstadoAfiliado AS estadoAfiliacion
            FROM VW_EstadoAfiliacionPersonaEmpresa
            WHERE roaEstadoAfiliado IN ('ACTIVO','INACTIVO','NO_FORMALIZADO_RETIRADO_CON_APORTES')
            AND perId = :idPersona
            AND perIdEmpleador = :idEmpleador
            AND :tipoAfiliado = 'TRABAJADOR_DEPENDIENTE'
            UNION
            SELECT roaEstadoAfiliado AS estadoAfiliacion
            FROM VW_EstadoAfiliacionPersonaIndependiente
            WHERE roaEstadoAfiliado IN ('ACTIVO','INACTIVO','NO_FORMALIZADO_RETIRADO_CON_APORTES')
            AND perId = :idPersona
            AND :tipoAfiliado = 'TRABAJADOR_INDEPENDIENTE'
            UNION
            SELECT roaEstadoAfiliado AS estadoAfiliacion
            FROM VW_EstadoAfiliacionPersonaPensionado
            WHERE roaEstadoAfiliado IN ('ACTIVO','INACTIVO','NO_FORMALIZADO_RETIRADO_CON_APORTES')
            AND perId = :idPersona
            AND :tipoAfiliado = 'PENSIONADO'
            UNION
            SELECT roaEstadoAfiliado AS estadoAfiliacion
            FROM VW_EstadoAfiliacionPersonaCaja
            WHERE roaEstadoAfiliado IN ('ACTIVO','INACTIVO','NO_FORMALIZADO_RETIRADO_CON_APORTES')
            AND perId = :idPersona
            AND :tipoAfiliado = 'PERSONA_DEPENDIENTE'
        </query>
    </named-native-query>

    <named-native-query name="Certificados.consulta.AfiliacionCerradaACaja">
        <description>Representa la consulta del contenido del comunicado 144</description>
        <query>
            SELECT eaec.empEstadoEmpleador AS estadoAfiliacion
            FROM VW_EstadoAfiliacionEmpleadorCaja eaec
            INNER JOIN Empresa empresa ON empresa.empPersona = eaec.perId
            INNER JOIN Empleador empleador ON empleador.empEmpresa = empresa.empId
            INNER JOIN SolicitudAfiliaciEmpleador solicEmpleador ON solicEmpleador.saeEmpleador = empleador.empId
            INNER JOIN solicitud s ON solicEmpleador.saeSolicitudGlobal = s.solId
            WHERE eaec.empEstadoEmpleador IN ('ACTIVO','INACTIVO','NO_FORMALIZADO_RETIRADO_CON_APORTES')
            AND solicEmpleador.saeEstadoSolicitud IN ('CERRADA')
            AND s.solResultadoProceso IN ('APROBADA')
            AND perId = :idPersona
            AND :tipoAfiliado IS NULL
            UNION
            SELECT veape.roaEstadoAfiliado AS estadoAfiliacion
            FROM VW_EstadoAfiliacionPersonaEmpresa veape
            inner join Persona per on veape.perId = per.perId
            inner join solicitudNovedadPersona snp on per.perId = snp.snpPersona
            inner join RolAfiliado roa on snp.snpRolAfiliado = roa.roaId
            inner join SolicitudAfiliacionPersona sap on sap.sapRolAfiliado = roa.roaId
            inner join solicitud s ON sap.sapSolicitudGlobal = s.solId
            WHERE veape.roaEstadoAfiliado IN ('ACTIVO','INACTIVO','NO_FORMALIZADO_RETIRADO_CON_APORTES')
            AND sap.sapEstadoSolicitud IN ('CERRADA')
            AND s.solResultadoProceso IN ('APROBADA')
            AND veape.perId = :idPersona
            AND veape.perIdEmpleador = :idEmpleador
            AND :tipoAfiliado = 'TRABAJADOR_DEPENDIENTE'
            UNION
            SELECT vepi.roaEstadoAfiliado AS estadoAfiliacion
            FROM VW_EstadoAfiliacionPersonaIndependiente vepi
            INNER JOIN Persona per ON vepi.perId = per.perId
            INNER JOIN Afiliado afi ON per.perId = afi.afiPersona
            INNER JOIN RolAfiliado roa ON afi.afiId = roa.roaAfiliado
            INNER JOIN SolicitudAfiliacionPersona sap ON roa.roaId = sap.sapRolAfiliado
            INNER JOIN solicitud s ON sap.sapSolicitudGlobal = s.solId
            WHERE vepi.roaEstadoAfiliado IN ('ACTIVO','INACTIVO','NO_FORMALIZADO_RETIRADO_CON_APORTES')
            AND sap.sapEstadoSolicitud IN ('CERRADA')
            AND s.solResultadoProceso IN ('APROBADA')
            AND vepi.perId = :idPersona
            AND :tipoAfiliado = 'TRABAJADOR_INDEPENDIENTE'
            UNION
            SELECT vepp.roaEstadoAfiliado AS estadoAfiliacion
            FROM VW_EstadoAfiliacionPersonaPensionado vepp
            INNER JOIN Persona per ON vepp.perId = per.perId
            INNER JOIN Afiliado afi ON per.perId = afi.afiPersona
            INNER JOIN RolAfiliado roa ON afi.afiId = roa.roaAfiliado
            INNER JOIN SolicitudAfiliacionPersona sap ON roa.roaId = sap.sapRolAfiliado
            INNER JOIN solicitud s ON sap.sapSolicitudGlobal = s.solId
            WHERE vepp.roaEstadoAfiliado IN ('ACTIVO','INACTIVO','NO_FORMALIZADO_RETIRADO_CON_APORTES')
            AND sap.sapEstadoSolicitud IN ('CERRADA')
            AND s.solResultadoProceso IN ('APROBADA')
            AND vepp.perId = :idPersona
            AND :tipoAfiliado = 'PENSIONADO'
            UNION
            SELECT veapc.roaEstadoAfiliado AS estadoAfiliacion
            FROM VW_EstadoAfiliacionPersonaCaja veapc
            INNER JOIN Persona per ON veapc.perId = per.perId
            INNER JOIN Afiliado afi ON per.perId = afi.afiPersona
            INNER JOIN RolAfiliado roa ON afi.afiId = roa.roaAfiliado
            INNER JOIN SolicitudAfiliacionPersona sap ON roa.roaId = sap.sapRolAfiliado
            INNER JOIN solicitud s ON sap.sapSolicitudGlobal = s.solId
            WHERE veapc.roaEstadoAfiliado IN ('ACTIVO','INACTIVO','NO_FORMALIZADO_RETIRADO_CON_APORTES')
            AND sap.sapEstadoSolicitud IN ('CERRADA')
            AND s.solResultadoProceso IN ('APROBADA')
            AND veapc.perId = :idPersona
            AND :tipoAfiliado = 'PERSONA_DEPENDIENTE'
        </query>
    </named-native-query>

    <named-native-query name="Comunicados.Obtener.datosIdentificacionEmpleadorV360Persona">
        <description>Constante que representa la consulta de ls datos de identificación del empleador, info necesaria en
            el proceso de consulta de histórico de afiliación
        </description>
        <query>
            SELECT
            per.perTipoIdentificacion,
            per.perNumeroIdentificacion
            FROM Empleador empl
            JOIN Empresa emp ON empl.empEmpresa = emp.empId
            JOIN Persona per ON emp.empPersona = per.perId
            WHERE empl.empId = :idEmpleador
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consulta.empleador_persona">
        <description>Constante que representa la consulta de ls datos de identificación del empleador, info necesaria en
            el proceso de consulta de histórico de afiliación
        </description>
        <query>
            SELECT cerId, cerTipoCertificado, cerFechaGeneracion, comDestinatario, comIdentificaArchivoComunicado,
            pcoEtiqueta, comId, cerDirigidoA FROM Certificado
            LEFT JOIN comunicado on cerId = comCertificado
            LEFT JOIN plantillaComunicado on comPlantillaComunicado = pcoId
            WHERE cerPersona = :idPersona
            AND certipoCertificado IN (:tipoCertificado)
            AND cergeneradoComoEmpleador = :empleador
            ORDER BY cerFechaGeneracion DESC
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consulta.estadoCartera">
        <description>Constante que representa la consulta de ls datos de identificación del empleador, info necesaria en
            el proceso de consulta de histórico de afiliación
        </description>
        <query>
            SELECT CASE WHEN MAX(carEstadoCartera) IS NULL
            THEN 'AL_DIA' ELSE MAX(carEstadoCartera) END
            FROM cartera JOIN persona ON carPersona=perId
            WHERE perId=:idPersona
            AND carTipoSolicitante=:tipoSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.NovedadDec13318">
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema, getDate() AS valorFechaDelSistema,
            'nombresYApellidosDelJefeDelHogar' AS nombresYApellidosDelJefeDelHogar,
            per.perPrimerNombre +' '
            + CASE WHEN per.perSegundoNombre IS NOT NULL
            THEN per.perSegundoNombre
            ELSE '' END + ' '
            + per.perPrimerApellido + ' '
            + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN per.perSegundoApellido
            ELSE '' END AS valorNombresYApellidosDelJefeDelHogar,
            'direccionResidencia' AS direccionResidencia, ubiJh.ubiDireccionFisica AS valorDireccionResidencia,
            'municipio' AS municipio, munJh.munNombre AS valorMunicipio,
            'departamento' AS departamento, depJh.depNombre AS valorDepartamento,
            'telefono' AS telefono, ubiJh.ubiTelefonoFijo AS valorTelefono,
            'numeroSolicitud' AS numeroSolicitud, solAs.solNumeroRadicacion AS valorNumeroSolicitud,
            'fechaRadicacionSolicitud' AS fechaRadicacionSolicitud, sol.solFechaRadicacion AS
            valorFechaRadicacionSolicitud,
            'municipioAsociadoProyecto' AS municipioAsociadoProyecto, munPv.munNombre AS valorMunicipioAsociadoProyecto,
            'departamentoAsociadoProyecto' AS departamentoAsociadoProyecto, depPv.depNombre AS
            valorDepartamentoAsociadoProyecto,
            'proyectoSolucionVivienda' AS proyectoSolucionVivienda, psv.psvNombreProyecto AS
            valorProyectoSolucionVivienda,
            'modalidad' AS modalidad, pof.pofModalidad AS valorModalidad,
            'cicloAsignacion' AS cicloAsignacion, cia.ciaNombre AS valorCicloAsignacion,
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'fechaAsignacion' AS fechaAsignacion, aaf.aafFechaActaAsignacionFovis AS valorFechaAsignacion,
            'numeroDeRadicacion' AS numeroDeRadicacion, sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'estadoHogar' AS estadoHogar, pof.pofEstadoHogar AS valorEstadoHogar,
            'tipoAfiliacion' AS tipoAfiliacion, roa.roaTipoAfiliado AS valorTipoAfiliado,
            'clasificacion' AS clasificacion, solAs.solClasificacion as valorClasificacion,
            'tarifaAportesActual' AS tarifaAportesActual, roa.roaPorcentajePagoAportes AS valorTarifaAportesActual,
            'estadoAfiliacion' AS estadoAfiliacion, eac.roaEstadoAfiliado AS valorEstadoAfiliacion,
            'totalIngresosAsignacion' AS totalIngresosAsignacion, dnf.dnfTotalIngresosHogarAsignacion AS
            valorTotalIngresosAsignacion,
            'equivalenciaSMLMVingresosAsignacion' AS equivalenciaSMLMVingresosAsignacion,
            dnf.dnfTotalIngresosHogarAsignacion/prm.prmValor AS valorEquivalenciaSMLMVingresosAsignacion,
            'rangoIngresosSMLMVAsignacion' AS rangoIngresosSMLMVAsignacion, dnf.dnfRangoTopeSMLMVAsignacion AS
            valorRangoIngresosSMLMVAsignacion,
            'totalIngresosHogarActuales' AS totalIngresosHogarActuales, dnf.dnfTotalIngresosHogar AS
            valorTotalIngresosHogarActuales,
            'equivalenciaSMLMVIngresosActuales' AS equivalenciaSMLMVIngresosActuales,
            dnf.dnfTotalIngresosHogar/prm.prmValor AS valorEquivalenciaSMLMVIngresosActuales,
            'rangoIngresosSMLMVActuales' AS rangoIngresosSMLMVActuales, dnf.dnfRangoTopeSMLMV AS
            valorRangoIngresosSMLMVActuales,
            'valorSFVAsignacion' AS SFVAsignacion, pof.pofValorAsignadoSFV AS valorSFVAsignacion,
            'valorSimuladoAjusteSMLMV' AS simuladoAjusteSMLMV, dnf.dnfValorSFVSimuladoAjuste AS
            valorSimuladoAjusteSMLMV,
            'diferenciaAjusteSMLMV' AS diferenciaAjusteSMLMV, dnf.dnfValorDiferenciaAjuste AS
            valorDiferenciaAjusteSMLMV,
            'valorSimuladoAdicion' AS simuladoAdicion, dnf.dnfValorSFVSimuladoAdicion AS valorSimuladoAdicion,
            'diferenciaAdicion' AS diferenciaAdicion, dnf.dnfValorDiferenciaAdicion AS valorDiferenciaAdicion,
            'totalDiferencia' AS totalDiferencia, dnf.dnfValorTotalDiferencia AS valorTotalDiferencia,
            'valorCalculadoSFVAjusteAdicion' AS calculadoSFVAjusteAdicion, dnf.dnfValorSFVAjusteAdicion AS
            valorCalculadoSFVAjusteAdicion,
            'valorAprobadoSFVAjusteAdicion' AS aprobadoSFVAjusteAdicion, pof.pofValorSFVAjustado AS
            valorAprobadoSFVAjusteAdicion,
            'equivalenciaSMLMVdeSFVAsignacion' AS equivalenciaSMLMVdeSFVAsignacion, pof.pofValorAsignadoSFV/prm.prmValor
            AS valorEquivalenciaSMLMVdeSFVAsignacion,
            'equivalenciaSMLMVSimuladoAjuste' AS equivalenciaSMLMVSimuladoAjuste, dnf.dnfValorEquiSFVSimuladoAjuste AS
            valorEquivalenciaSMLMVSimuladoAjuste,
            'equivalenciaSMLMVDiferenciaAjuste' AS equivalenciaSMLMVDiferenciaAjuste, dnf.dnfValorEquiDiferenciaAjuste
            AS valorEquivalenciaSMLMVDiferenciaAjuste,
            'equivalenciaSMLMVSimuladoAdicion' AS equivalenciaSMLMVSimuladoAdicion, dnf.dnfValorEquiSFVSimuladoAdicion
            AS valorEquivalenciaSMLMVSimuladoAdicion,
            'equivalenciaSMLMVDiferenciaAdicion' AS equivalenciaSMLMVDiferenciaAdicion,
            dnf.dnfValorEquiDiferenciaAdicion AS valorEquivalenciaSMLMVDiferenciaAdicion,
            'equivalenciaSMLMVTotalDiferencia' AS equivalenciaSMLMVTotalDiferencia, dnf.dnfValorEquiTotalDiferencia AS
            valorEquivalenciaSMLMVTotalDiferencia,
            'equivalenciaSMLMVCalculadoSFV' AS equivalenciaSMLMVCalculadoSFV, dnf.dnfValorEquiSFVAjusteAdicion AS
            valorEquivalenciaSMLMVCalculadoSFV,
            'equivalenciaSMLMVAprobadoSFV' AS equivalenciaSMLMVAprobadoSFV, pof.pofValorSFVAjustado/prm.prmValor AS
            valorEquivalenciaSMLMVAprobadoSFV,
            'valorSMLMVAsignacion' AS sMLMVAsignacion, pof.pofSalarioAsignacion AS valorSMLMVAsignacion,
            'resultado' AS resultado, sol.solResultadoProceso AS valorResultado
            FROM detalleNovedadFovis dnf
            JOIN SolicitudNovedadFovis snf ON snf.snfId = dnf.dnfSolicitudNovedad
            JOIN Solicitud sol ON sol.solId = snf.snfSolicitudGlobal
            JOIN SolicitudNovedadPersonaFovis spf ON snf.snfId = spf.spfSolicitudNovedadFovis
            JOIN PostulacionFovis pof ON pof.pofId = spf.spfPostulacionFovis
            JOIN ProyectoSolucionVivienda psv ON psv.psvId = pof.pofProyectoSolucionVivienda
            LEFT JOIN Ubicacion ubiPv ON ubiPv.ubiId = psv.psvubicacionProyecto
            LEFT JOIN Municipio munPv ON munPv.munId = ubiPv.ubiMunicipio
            LEFT JOIN Departamento depPv ON depPv.depId = munPv.munDepartamento
            JOIN CicloAsignacion cia ON cia.ciaId = pof.pofCicloAsignacion
            JOIN JefeHogar jeh ON jeh.jehId = pof.pofjefeHogar
            JOIN Afiliado afi ON afi.afiId = jeh.jehAfiliado
            JOIN RolAfiliado roa ON afi.afiId = roa.roaAfiliado
            JOIN Persona per ON per.perid = afi.afiPersona
            JOIN VW_EstadoAfiliacionPersonaCaja eac ON per.perId = eac.perId
            JOIN SolicitudAfiliacionPersona sap ON (sap.sapRolAfiliado = roa.roaId)
            JOIN Solicitud solAfi ON sap.sapSolicitudGlobal = solAfi.solId
            LEFT JOIN Ubicacion ubiJh ON ubiJh.ubiId = per.perUbicacionPrincipal
            LEFT JOIN Municipio munJh ON munJh.munId = ubiJh.ubiMunicipio
            LEFT JOIN Departamento depJh ON depJh.depId = munJh.munDepartamento
            JOIN SolicitudAsignacion saf ON saf.safId = pof.pofSolicitudAsignacion
            JOIN ActaAsignacionFovis aaf ON saf.safId = aaf.aafSolicitudAsignacion
            JOIN Solicitud solAs ON solAs.solId = saf.safSolicitudGlobal
            JOIN Parametro prm ON 'SMMLV' = prm.prmNombre
            WHERE sol.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.AfiliacionEmpleadorWeb">
        <description>Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de Afiliacion Empleador Web.

            COM_AVI_AEW_TIM_PS
            COM_AVI_AEW_TIM_GSB
        </description>
        <query>
            SELECT
            'idDeSolicitud' AS idSolicitud,
            solicitud.solId AS valorIdSolicitud,
            'numeroDeRadicacion' AS numeroDeRadicacion,
            solicitud.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' AS tipoDeTransaccion,
            solicitud.solTipoTransaccion AS valorTipoDeTransaccion,
            'tipoIdentificacion' AS tipoIdentificacion,
            persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion,
            persona.perNumeroidentificacion AS valorNumeroIdentificacion,
            'direccionEmpleador' AS direccionEmpleador,
            ubi.ubiDireccionFisica AS valorDireccionEmpleador,
            'municipioEmpleador' AS municipioEmpleador,
            mun.munNombre AS valorMunicipioEmpleador,
            'nombreRazonSocial' AS nombreRazonSocial,
            persona.perRazonSocial AS valorNombreRazonSocial
            FROM Persona persona
            INNER JOIN Empresa empresa ON empresa.empPersona = persona.perId
            INNER JOIN Empleador empleador ON empleador.empEmpresa = empresa.empId
            INNER JOIN SolicitudAfiliaciEmpleador solicEmpleador ON solicEmpleador.saeEmpleador = empleador.empId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicEmpleador.saeSolicitudGlobal
            LEFT JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = empresa.empId AND ubeTipoUbicacion =
            'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            LEFT JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            WHERE solicEmpleador.saeId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.afiliacionPersonaPresencial">
        <description>Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de afiliacion Persona Presencial.

            COM_AVI_APP_TIM_PS
            COM_AVI_APP_TIM_ASE
            COM_AVI_APP_TIM_GSB
        </description>
        <query>
            SELECT
            'idDeSolicitud' as idSolicitud, solicitud.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, solicitud.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS valorNumeroIdentificacion
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN RolAfiliado rolAfiliado ON rolAfiliado.roaAfiliado = afiliado.afiId
            INNER JOIN SolicitudAfiliacionPersona solicPersona ON solicPersona.sapRolAfiliado = rolAfiliado.roaId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicPersona.sapSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.afiliacionDependienteWeb">
        <description>Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de afiliacion Dependiente Web.

            COM_AVI_ADW_TIM_PS
            COM_AVI_ADW_TIM_GSB
        </description>
        <query>
            SELECT
            'idDeSolicitud' as idSolicitud, solicitud.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, solicitud.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS valorNumeroIdentificacion
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN RolAfiliado rolAfiliado ON rolAfiliado.roaAfiliado = afiliado.afiId
            INNER JOIN SolicitudAfiliacionPersona solicPersona ON solicPersona.sapRolAfiliado = rolAfiliado.roaId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicPersona.sapSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.afiliacionIndepPensWeb">
        <description>Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de afiliacion Independiente Pensionado Web.

            COM_AVI_AIPW_TIM_PS
            COM_AVI_AIPW_TIM_GSB
        </description>
        <query>
            SELECT
            'idDeSolicitud' as idSolicitud, solicitud.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, solicitud.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS valorNumeroIdentificacion
            FROM Persona persona
            INNER JOIN Afiliado afiliado ON afiliado.afiPersona = persona.perId
            INNER JOIN RolAfiliado rolAfiliado ON rolAfiliado.roaAfiliado = afiliado.afiId
            INNER JOIN SolicitudAfiliacionPersona solicPersona ON solicPersona.sapRolAfiliado = rolAfiliado.roaId
            INNER JOIN Solicitud solicitud ON solicitud.solId = solicPersona.sapSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.novedadEmpresaPresencial">
        <description>Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de novedad Empresa Presencial.

            COM_AVI_NEP_TIM_PS
            COM_AVI_NEP_TIM_ASE
            COM_AVI_NEP_TIM_GSB
        </description>
        <query>
            SELECT
            'idDeSolicitud' as idSolicitud, solicitud.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, solicitud.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS valorNumeroIdentificacion
            FROM Persona persona
            INNER JOIN Empresa empresa ON empresa.empPersona = persona.perId
            INNER JOIN Empleador empleador ON empleador.empEmpresa = empresa.empId
            INNER JOIN SolicitudNovedadEmpleador sne ON sne.sneIdEmpleador = empleador.empId
            INNER JOIN SolicitudNovedad sno ON sne.sneIdSolicitudNovedad = sno.snoSolicitudGlobal
            INNER JOIN Solicitud solicitud ON solicitud.solId = sno.snoSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.novedadEmpresaWeb">
        <description>Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de novedad Empresa Web.

            COM_AVI_NEW_TIM_PS
            COM_AVI_NEW_TIM_GSB
        </description>
        <query>
            SELECT
            'idDeSolicitud' as idSolicitud, solicitud.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, solicitud.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS valorNumeroIdentificacion
            FROM Persona persona
            INNER JOIN Empresa empresa ON empresa.empPersona = persona.perId
            INNER JOIN Empleador empleador ON empleador.empEmpresa = empresa.empId
            INNER JOIN SolicitudNovedadEmpleador sne ON sne.sneIdEmpleador = empleador.empId
            INNER JOIN SolicitudNovedad sno ON sne.sneIdSolicitudNovedad = sno.snoSolicitudGlobal
            INNER JOIN Solicitud solicitud ON solicitud.solId = sno.snoSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.novedadPersonaPresencial">
        <description>Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de novedad Persona Presencial.

            COM_AVI_NPP_TIM_PS
            COM_AVI_NPP_TIM_ASE
            COM_AVI_NPP_TIM_GSB
        </description>
        <query>
            SELECT
            'idDeSolicitud' as idSolicitud, solicitud.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, solicitud.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS valorNumeroIdentificacion
            FROM Persona persona
            INNER JOIN SolicitudNovedadPersona snp ON snp.snpPersona = persona.perId
            INNER JOIN SolicitudNovedad sno ON sno.snoId = snp.snpSolicitudNovedad
            INNER JOIN Solicitud solicitud ON solicitud.solId = sno.snoSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.novedadDependienteWeb">
        <description>Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de novedad Dependiente Web.

            COM_AVI_NDW_TIM_PS
            COM_AVI_NDW_TIM_GSB
        </description>
        <query>
            SELECT
            'idDeSolicitud' as idSolicitud, solicitud.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, solicitud.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS valorNumeroIdentificacion
            FROM Persona persona
            INNER JOIN SolicitudNovedadPersona snp ON snp.snpPersona = persona.perId
            INNER JOIN SolicitudNovedad sno ON sno.snoId = snp.snpSolicitudNovedad
            INNER JOIN Solicitud solicitud ON solicitud.solId = sno.snoSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.novedadPersonaWeb">
        <description>Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de novedad Persona Web.

            COM_AVI_NPW_TIM_PS
            COM_AVI_NPW_TIM_GSB
        </description>
        <query>
            SELECT
            'idDeSolicitud' as idSolicitud, solicitud.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, solicitud.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, solicitud.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, persona.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, persona.perNumeroidentificacion AS valorNumeroIdentificacion
            FROM Persona persona
            INNER JOIN SolicitudNovedadPersona snp ON snp.snpPersona = persona.perId
            INNER JOIN SolicitudNovedad sno ON sno.snoId = snp.snpSolicitudNovedad
            INNER JOIN Solicitud solicitud ON solicitud.solId = sno.snoSolicitudGlobal
            WHERE solicitud.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.aporteManual">
        <description>
            Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de aporteManual.
        </description>
        <query>
            select
            'idDeSolicitud' as idSolicitud, sol.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, soa.soaTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, soa.soaNumeroIdentificacion AS valorNumeroIdentificacion
            from solicitudAporte soa join solicitud sol
            on soa.soaSolicitudGlobal = sol.solId
            where sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.aporteManual.pi">
        <description>
            Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de aporteManual cuando está pendiente de información.
        </description>
        <query>
            select
            'idDeSolicitud' as idSolicitud, sol.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'usuarioRadicacion' as usuarioRadicacion, sol.solUsuarioRadicacion AS valorUsuarioRadicacion,
            'fechaRadicacion' as fechaRadicacion, sol.solFechaRadicacion AS valorFechaRadicacion
            from solicitud sol
            where sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.devolucionAporte">
        <description>
            Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de devolucionAporte.
        </description>
        <query>
            select
            'idDeSolicitud' as idSolicitud, sol.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, per.perNumeroidentificacion AS valorNumeroIdentificacion
            from solicitudDevolucionAporte sda
            join solicitud sol on sda.sdaSolicitudGlobal = sol.solId
            join Persona per on sda.sdaPersona = per.perId
            where sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.devolucionAporte.pi">
        <description>
            Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de devolucionAporte cuando está pendiente de información.
        </description>
        <query>
            select
            'idDeSolicitud' as idSolicitud, sol.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'usuarioRadicacion' as usuarioRadicacion, sol.solUsuarioRadicacion AS valorUsuarioRadicacion,
            'fechaRadicacion' as fechaRadicacion, sol.solFechaRadicacion AS valorFechaRadicacion
            from solicitud sol
            where sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.correccionAporte">
        <description>
            Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de correccionAporte.
        </description>
        <query>
            select
            'idDeSolicitud' as idSolicitud, sol.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, per.perNumeroidentificacion AS valorNumeroIdentificacion
            from solicitudCorreccionAporte sca
            join solicitud sol on sca.scaSolicitudGlobal = sol.solId
            join Persona per on sca.scaPersona = per.perId
            where sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.cierreRecaudo">
        <description>
            Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de cierreRecaudo.
        </description>
        <query>
            select
            'idDeSolicitud' as idSolicitud, sol.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'usuarioRadicacion' as usuarioRadicacion, sol.solUsuarioRadicacion AS valorUsuarioRadicacion
            from solicitud sol where
            sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.postulacionFovisPresencial">
        <description>
            Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de postulacionFovisPresencial.
        </description>
        <query>
            select
            'idDeSolicitud' as idSolicitud, sol.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, per.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, per.perNumeroidentificacion AS valorNumeroIdentificacion
            from solicitudpostulacion spo
            JOIN solicitud sol ON spo.spoSolicitudglobal =sol.solid
            JOIN postulacionFovis pof on spo.spopostulacionfovis=pof.pofid
            JOIN jefehogar jeh ON pof.pofjefehogar = jeh.jehId
            JOIN afiliado afi ON jeh.jehafiliado = afi.afiId
            JOIN persona per ON afi.afipersona = per.perid
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.gestionCruce.postulacionFovis">
        <description>
            Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para el timers gestión de cruces
        </description>
        <query>
            SELECT 'idDeSolicitud' as idSolicitud, sol.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, per.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, per.perNumeroidentificacion AS valorNumeroIdentificacion
            FROM SolicitudGestionCruce sgc
            JOIN Solicitud sol ON (sgc.sgcSolicitudGlobal = sol.solId)
            JOIN SolicitudPostulacion spo ON (sgc.sgcSolicitudPostulacion = spo.spoId)
            JOIN PostulacionFOVIS pof ON (spo.spoPostulacionFOVIS = pof.pofId)
            JOIN JefeHogar jeh ON (pof.pofJefeHogar = jeh.jehId)
            JOIN Afiliado afi ON (jeh.jehAfiliado = afi.afiId)
            JOIN Persona per ON (afi.afiPersona = per.perId )
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.postulacionFovisWeb">
        <description>
            Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de postulacionFovisWeb.
        </description>
        <query>
            select
            'idDeSolicitud' as idSolicitud, sol.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, per.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, per.perNumeroidentificacion AS valorNumeroIdentificacion,
            'cargoResponsableCcf' as cargoResponsableCcf,
            (select prmValor from Parametro where prmNombre = 'CARGO_RESPONSABLE_CCF') as valorCargoResponsableCcf,
            'cargoResponsableCarteraCcf' as cargoResponsableCarteraCcf,
            (select prmValor from Parametro where prmNombre = 'CARGO_RESPONSABLE_CARTERA_CCF') as valorCargoResponsableCarteraCcf
            from solicitudpostulacion spo
            JOIN solicitud sol ON spo.spoSolicitudglobal =sol.solid
            JOIN postulacionFovis pof on spo.spopostulacionfovis=pof.pofid
            JOIN jefehogar jeh ON pof.pofjefehogar = jeh.jehId
            JOIN afiliado afi ON jeh.jehafiliado = afi.afiId
            JOIN persona per ON afi.afipersona = per.perid
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.liquidacionMasivaSubsidioMonetario">
        <description>
            Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de liquidacionMasivaSubsidioMonetario.
        </description>
        <query>
            select
            'idDeSolicitud' as idSolicitud, sol.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, per.perNumeroidentificacion AS valorNumeroIdentificacion
            from solicitudLiquidacionSubsidio sls
            join solicitud sol on sls.slsSolicitudGlobal = sol.solId
            join PersonaLiquidacionEspecifica ple on ple.pleSolicitudLiquidacionSubsidio = sls.slsId
            join Afiliado afi on ple.pleAfiliadoPrincipal = afi.afiId
            join Persona per on afi.afiPersona = per.perId
            where sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.comunicado.aviso.tim.liquidacionPagoEspecificoSubsidioMonetario">
        <description>
            Constante que representa la consulta de las variables implicadas en los mensajes de aviso
            para los timers del proceso de liquidacionPagoEspecificoSubsidioMonetario.
        </description>
        <query>
            select
            'idDeSolicitud' as idSolicitud, sol.solId AS valorIdSolicitud,
            'numeroDeRadicacion' as numeroDeRadicacion, sol.solNumeroRadicacion AS valorNumeroDeRadicacion,
            'tipoDeTransaccion' as tipoDeTransaccion, sol.solTipoTransaccion as valorTipoDeTransaccion,
            'tipoIdentificacion' as tipoIdentificacion, per.perTipoIdentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, per.perNumeroidentificacion AS valorNumeroIdentificacion
            from solicitudLiquidacionSubsidio sls
            join solicitud sol on sls.slsSolicitudGlobal = sol.solId
            join PersonaLiquidacionEspecifica ple on ple.pleSolicitudLiquidacionSubsidio = sls.slsId
            join Afiliado afi on ple.pleAfiliadoPrincipal = afi.afiId
            join Persona per on afi.afiPersona = per.perId
            where sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Consultar.etiqueta.comunicados.enviados.empleador">
        <description>Constante que representa la consulta de los distintos comunicados enviados en un proceso del
            empleador
        </description>
        <query>
            SELECT DISTINCT pco.pcoEtiqueta e,pco.pcoNombre n FROM Comunicado com
            JOIN PlantillaComunicado pco on com.comPlantillaComunicado = pco.pcoId
            JOIN Empleador emp ON com.comEmpleador = emp.empId
            JOIN Empresa empr ON emp.empEmpresa = empr.empId
            JOIN Persona per ON empr.empPersona = per.perId
            WHERE per.perTipoIdentificacion =:tipoIdentificacion
            AND per.perNumeroIdentificacion =:numeroIdentificacion
            UNION
            SELECT DISTINCT pco.pcoEtiqueta e,pcoNombre n FROM Comunicado com
            JOIN PlantillaComunicado pco on com.comPlantillaComunicado = pco.pcoId
            JOIN Empresa empr ON com.comEmpresa = empr.empId
            JOIN Persona per ON empr.empPersona = per.perId
            WHERE per.perTipoIdentificacion =:tipoIdentificacion
            AND per.perNumeroIdentificacion =:numeroIdentificacion
            UNION
            SELECT DISTINCT pco.pcoEtiqueta e,pcoNombre n FROM Comunicado com
            JOIN PlantillaComunicado pco on com.comPlantillaComunicado = pco.pcoId
            JOIN Persona per on per.perId = com.comPersonaDestinatario
            WHERE pco.pcoEtiqueta =:etiqueta
            AND per.perTipoIdentificacion =:tipoIdentificacion
            AND per.perNumeroIdentificacion =:numeroIdentificacion
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.cobro.persuasivo">
        <query>
            SELECT car.carPeriodoDeuda, REPLACE(CONVERT(VARCHAR,CONVERT(money, car.carDeudaPresunta)),'.00','')
            FROM Cartera car, Persona per
            WHERE car.carPersona = per.perId
            AND per.perTipoIdentificacion =:tipoIdentificacion
            AND per.perNumeroIdentificacion =:numeroIdentificacion
            AND car.carEstadoOperacion =:estado
            AND car.carDeudaPresunta&gt;0
        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.liquidacion.dispersion">
        <query>
            SELECT TOP 1 * FROM
            (SELECT
            'tipoIdentificacion' AS tipoIdentificacion, ISNULL(per.perTipoidentificacion,' ') AS
            valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, ISNULL(per.perNumeroidentificacion,' ') AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' AS razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'dv' AS dv, per.perDigitoVerificacion AS valorDv,
            'tipoDeLiquidacion' AS tipoDeLiquidacion, slstipoLiquidacion AS valorTipoDeLiquidacion,
            'tipoDeAjuste' AS tipoDeAjuste, CASE WHEN slstipoLiquidacion = 'AJUSTES_DE_CUOTA' THEN
            slsTipoLiquidacionEspecifica ELSE NULL END AS valorTipoDeAjuste,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, slsEstadoLiquidacion AS valorEstadoDeLaSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, slsFechaInicio AS valorFechaYHoraDeSolicitud,
            'nooperacion' AS noOperacion, solNumeroradicacion AS valorNoOperacion
            FROM
            SolicitudLiquidacionSubsidio sls
            JOIN Solicitud sol ON sol.solId = sls.slsSolicitudGlobal
            LEFT JOIN (SELECT ple.pleSolicitudLiquidacionSubsidio as regId, count(ple.pleEmpleador) as regRegistros
            FROM PersonaLiquidacionEspecifica ple
            group by ple.pleSolicitudLiquidacionSubsidio
            having COUNT(ple.pleEmpleador) = 1
            ) as reg ON sls.slsId = reg.regId
            LEFT JOIN PersonaLiquidacionEspecifica ple ON ple.pleSolicitudLiquidacionSubsidio = reg.regId
            LEFT JOIN Empleador emp ON emp.empId = ple.pleEmpleador
            LEFT JOIN Empresa empr ON empr.empId = emp.empEmpresa
            LEFT JOIN Persona per ON per.perId = empr.empPersona
            WHERE sol.solId = :idSolicitud
            UNION
            SELECT
            'tipoIdentificacion' AS tipoIdentificacion, ISNULL(per.perTipoidentificacion,' ') AS
            valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, ISNULL(per.perNumeroidentificacion,' ') AS
            valorNumeroIdentificacion,
            'razonSocial/Nombre' AS razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'dv' AS dv, per.perDigitoVerificacion AS valorDv,
            'tipoDeLiquidacion' AS tipoDeLiquidacion, slstipoLiquidacion AS valorTipoDeLiquidacion,
            'tipoDeAjuste' AS tipoDeAjuste, CASE WHEN slstipoLiquidacion = 'AJUSTES_DE_CUOTA' THEN
            slsTipoLiquidacionEspecifica ELSE NULL END AS valorTipoDeAjuste,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, slsEstadoLiquidacion AS valorEstadoDeLaSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, slsFechaInicio AS valorFechaYHoraDeSolicitud,
            'nooperacion' AS noOperacion, solNumeroradicacion AS valorNoOperacion
            FROM
            SolicitudLiquidacionSubsidio sls
            JOIN Solicitud sol ON sol.solId = sls.slsSolicitudGlobal
            LEFT JOIN (select ple.pleAfiliadoPrincipal regAfiliado, ple.pleSolicitudLiquidacionSubsidio as regId
            from PersonaLiquidacionEspecifica ple
            group by ple.pleAfiliadoPrincipal, ple.pleSolicitudLiquidacionSubsidio
            ) as reg ON sls.slsId = reg.regId
            LEFT JOIN PersonaLiquidacionEspecifica ple ON ple.pleSolicitudLiquidacionSubsidio = reg.regId
            LEFT JOIN Afiliado afi ON afi.afiId = ple.pleAfiliadoPrincipal
            LEFT JOIN Persona per ON per.perId = afi.afiPersona
            WHERE sol.solId = :idSolicitud) result
            ORDER BY valorNumeroIdentificacion DESC

        </query>
    </named-native-query>
    <named-native-query name="plantilla.encabezado.liquidacion.dispersion.afiliado">
        <query>
            SELECT
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoidentificacion AS valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroidentificacion AS valorNumeroIdentificacion,
            'razonSocial/Nombre' AS razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'dv' AS dv, per.perDigitoVerificacion AS valorDv,
            'tipoDeLiquidacion' AS tipoDeLiquidacion, slstipoLiquidacion AS valorTipoDeLiquidacion,
            'tipoDeAjuste' AS tipoDeAjuste, CASE WHEN slstipoLiquidacion = 'AJUSTES_DE_CUOTA' THEN
            slsTipoLiquidacionEspecifica ELSE NULL END AS valorTipoDeAjuste,
            'estadoDeLaSolicitud' AS estadoDeLaSolicitud, slsEstadoLiquidacion AS valorEstadoDeLaSolicitud,
            'fechaYHoraDeSolicitud' AS fechaYHoraDeSolicitud, slsFechaInicio AS valorFechaYHoraDeSolicitud,
            'nooperacion' AS noOperacion, solNumeroradicacion AS valorNoOperacion
            FROM
            SolicitudLiquidacionSubsidio sls
            JOIN Solicitud sol ON sol.solId = sls.slsSolicitudGlobal
            LEFT JOIN (select ple.pleAfiliadoPrincipal regAfiliado, ple.pleSolicitudLiquidacionSubsidio as regId
            from PersonaLiquidacionEspecifica ple
            group by ple.pleAfiliadoPrincipal, ple.pleSolicitudLiquidacionSubsidio) as reg ON sls.slsId = reg.regId
            LEFT JOIN PersonaLiquidacionEspecifica ple ON ple.pleSolicitudLiquidacionSubsidio = reg.regId
            LEFT JOIN Afiliado afi ON afi.afiId = ple.pleAfiliadoPrincipal
            LEFT JOIN Persona per ON per.perId = afi.afiPersona
            WHERE sol.solId =:idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Consultar.comunicados.enviados.empleador" result-set-mapping="Consultar.comunicados.enviados.empleador.Mapping">
        <description>Constante que representa la consulta de los distintos comunicados enviados en un proceso del
            empleador
        </description>
        <query>
            SELECT com.* FROM Comunicado com
            JOIN Empleador emp ON com.comEmpleador = emp.empId
            JOIN Empresa empr ON emp.empEmpresa = empr.empId
            JOIN Persona per ON empr.empPersona = per.perId
            WHERE per.perTipoIdentificacion =:tipoIdentificacion
            AND per.perNumeroIdentificacion =:numeroIdentificacion
            UNION
            SELECT com.* FROM Comunicado com
            JOIN Empresa empr ON com.comEmpresa = empr.empId
            JOIN Persona per ON empr.empPersona = per.perId
            WHERE per.perTipoIdentificacion =:tipoIdentificacion
            AND per.perNumeroIdentificacion =:numeroIdentificacion
            UNION
            SELECT com.* FROM Comunicado com
            JOIN PlantillaComunicado pco on com.comPlantillaComunicado = pco.pcoId
            JOIN Persona per on per.perId = com.comPersonaDestinatario
            WHERE pco.pcoEtiqueta =:etiqueta
            AND per.perTipoIdentificacion =:tipoIdentificacion
            AND per.perNumeroIdentificacion =:numeroIdentificacion
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.Buscar.Comunicado.Radicado">
        <description>Constante que representa la consulta de un comunicado cuando se hace por número de radicado
        </description>
        <query>
            SELECT com.comIdentificaArchivoComunicado,com.comFechaComunicado,com.comDestinatario,com.comEstadoEnvio,
            pcoEtiqueta etiqueta,com.comMensajeEnvio
            FROM Comunicado com
            JOIN PlantillaComunicado pco ON pco.pcoId = com.comPlantillaComunicado
            JOIN Solicitud sol ON sol.solId = com.comSolicitud
            WHERE sol.solNumeroRadicacion = :numeroRadicado
            AND pco.pcoEtiqueta NOT LIKE '%_TIM_%'
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.cartera.periodos">
        <query>
            SELECT
            CAST(CONVERT(DATE,car.carPeriodoDeuda,23) AS VARCHAR(7)) AS Periodo,
            SUBSTRING(CONVERT(VARCHAR,CAST(car.carDeudaPresunta AS
            MONEY),1),1,CHARINDEX('.',CONVERT(VARCHAR,CAST(car.carDeudaPresunta AS MONEY),1))-1) AS Deuda
            FROM Cartera car
            WHERE car.carPersona IN (SELECT per.perId FROM Persona per
            WHERE per.perTipoIdentificacion =:tipoIdentificacion
            AND per.perNumeroIdentificacion =:numeroIdentificacion)
            AND car.carEstadoCartera =:estadoCartera
            AND car.carEstadoOperacion =:estadoOperacion
            AND car.carDeudaPresunta&gt;0
        </query>
    </named-native-query>
     <named-native-query name="Comunicados.consulta.grupo.familiar">
        <query>
           	select pe.perRazonSocial, pe.perTipoIdentificacion, pe.perNumeroIdentificacion, b.benFechaAfiliacion, b.benFechaRetiro from certificado c
			inner join persona p on perId = cerPersona
			inner join Afiliado a on p.perId = afiPersona
			inner join GrupoFamiliar g on grfAfiliado = afiId
			inner join Beneficiario b on benGrupoFamiliar = grfId
			inner join persona pe on pe.perId = b.benPersona
			Where c.cerId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Certificados.totalAportes.empleador">
        <query>
            SELECT SUM(apgValtotalApoObligatorio) FROM AporteGeneral apg
            JOIN Empresa emp ON emp.empId = apg.apgEmpresa
            JOIN Persona per ON per.perId = emp.empPersona
            WHERE per.perNumeroIdentificacion =:numeroIdentificacion
            AND per.perTipoIdentificacion =:tipoIdentificacion
            AND (:anio) IN (SELECT value FROM STRING_SPLIT(apgPeriodoAporte, '-'))
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.inconsistencias.empleados">
        <query>
            select
            car.carTipoAccionCobro as accionDeCobro,
            car.carPeriodoDeuda periodoDeuda,
            pe.perTipoIdentificacion tipoIdentificacion,
            pe.perNumeroIdentificacion numeroIdentificacion,
            (SELECT top 1 apd.apdRegistroDetallado FROM AporteDetallado apd inner join AporteGeneral apg on apg.apgId=apdAporteGeneral
            where apd.apdPersona=pe.perid  AND APG.apgEmpresa=em.empId order by apg.apgPeriodoAporte desc) as tipoInconsistencia ,
            CAST(c.cadDeudaPresunta AS decimal) deudaPresunta
            from Persona pe
            INNER join Afiliado afi on afiPersona = pe.perId
            INNER join RolAfiliado roa on roa.roaAfiliado = afi.afiId
            INNER join Empleador e on e.empId = roa.roaEmpleador
            INNER join Empresa em on em.empId = e.empEmpresa
            INNER join Persona p on p.perId = em.empPersona
            INNER JOIN CarteraDependiente c on c.cadPersona = pe.perId
            INNER JOIN Cartera car on c.cadCartera = car.carId
            WHERE p.perTipoIdentificacion = :tipoIdentificacion
            AND p.perNumeroIdentificacion = :numeroIdentificacion
            and car.carTipoAccionCobro in ('LC3A', 'LC3B', 'LC2', 'LC3','LC20', 'LC30', 'LC2A', 'LC2B')
            order by periodoDeuda desc
        </query>
    </named-native-query>
    <named-native-query name="Certificados.totalAportes.persona">
        <query>
            SELECT SUM(apgValtotalApoObligatorio) FROM AporteGeneral apg
            JOIN Persona per ON per.perId = apg.apgPersona
            WHERE per.perNumeroIdentificacion =:numeroIdentificacion
            AND per.perTipoIdentificacion =:tipoIdentificacion
            AND (:anio) IN (SELECT value FROM STRING_SPLIT(apgPeriodoAporte, '-'))
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.numeroComunicadosSolicitudAfiEmp">
        <query>
            SELECT COUNT(comId) FROM Comunicado com
            JOIN Solicitud sol ON sol.solId = com.comSolicitud
            JOIN PlantillaComunicado pco ON pco.pcoId = com.comPlantillaComunicado
            WHERE sol.solId = :idSolicitud
            AND pco.pcoEtiqueta IN ('CRT_BVD_EMP','CRT_ACP_EMP')
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.numeroComunicadosSolicitudNovPer">
        <query>
            SELECT COUNT(comId) FROM Comunicado com
            JOIN Solicitud sol ON sol.solId = com.comSolicitud
            JOIN PlantillaComunicado pco ON pco.pcoId = com.comPlantillaComunicado
            WHERE sol.solId = :idSolicitud
            AND pco.pcoEtiqueta IN ('NTF_RAD_NVD_PER','NTF_NVD_PERS')
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.numeroComunicadosSolicitudNovEmp">
        <query>
            SELECT COUNT(comId) FROM Comunicado com
            JOIN Solicitud sol ON sol.solId = com.comSolicitud
            JOIN PlantillaComunicado pco ON pco.pcoId = com.comPlantillaComunicado
            WHERE sol.solId = :idSolicitud
            AND pco.pcoEtiqueta IN ('NTF_RAD_NVD_EMP','NTF_NVD_EMP')
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.estadoSolicitudNovedad">
        <query>
            SELECT sno.snoEstadoSolicitud FROM SolicitudNovedad sno
            JOIN Solicitud sol ON sol.solId = sno.snoSolicitudGlobal
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.estadoSolicitudAfiliacion">
        <query>
            SELECT sap.sapEstadoSolicitud FROM SolicitudAfiliacionPersona sap
            JOIN Solicitud sol ON sol.solId = sap.sapSolicitudGlobal
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.estadoSolicitudAfiliacionEmpleador">
        <query>
            SELECT sae.saeEstadoSolicitud FROM SolicitudAfiliaciEmpleador sae
            JOIN Solicitud sol ON sol.solId = sae.saeSolicitudGlobal
            WHERE sol.solNumeroRadicacion = :numeroRadicado
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.estadoSolicitudNovedadEmpleador">
        <query>
            SELECT sno.snoEstadoSolicitud FROM SolicitudNovedad sno
            JOIN Solicitud sol ON sol.solId = sno.snoSolicitudGlobal
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.estadoSolicitudDevolucion">
        <query>
            SELECT sda.sdaEstadoSolicitud, sda.sdaResultadoAnalista, sda.sdaResultadoSupervisor FROM
            SolicitudDevolucionAporte sda
            JOIN Solicitud sol ON sol.solId = sda.sdaSolicitudGlobal
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.estadoSolicitudCorrecion">
        <query>
            SELECT sca.scaEstadoSolicitud, sca.scaResultadoSupervisor FROM SolicitudCorreccionAporte sca
            JOIN Solicitud sol ON sol.solId = sca.scaSolicitudGlobal
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.estadoSolicitudAporteManual">
        <query>
            SELECT soa.soaEstadoSolicitud, soa.soaTipoSolicitante FROM Solicitud sol
            JOIN SolicitudAporte soa ON sol.solId = soa.soaSolicitudGlobal
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.jsonDetalleSolicitudAporteManual">
        <query>
            SELECT dts.dtsJsonPayload, apg.apgApoConDetalle FROM Solicitud sol
            JOIN SolicitudAporte soa ON sol.solId = soa.soaSolicitudGlobal
            JOIN AporteGeneral apg ON soa.soaRegistroGeneral = apg.apgRegistroGeneral
            JOIN DatoTemporalSolicitud dts ON sol.solId = dts.dtsSolicitud
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Comunicados.consulta.estadoSolicitudDesafiliacion">
        <query>
            SELECT soa.soaEstadoSolicitud, soa.soaTipoSolicitante FROM Solicitud sol
            JOIN SolicitudAporte soa ON sol.solId = soa.soaSolicitudGlobal
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consulta.AfiliacionActivaPersona">
        <query>
           SELECT top 1 
            'tipoAfiliado' AS tipoAfiliado, cerTipoAfiliado AS valorTipoAfiliado,
            'mesFinAporteCertificado' AS mesFinAporteCertificado, CAST(FORMAT(cerFechaGeneracion, 'dd/MM/yyyy', 'es-CO')
            as VARCHAR(10)) AS valorMesFinAporteCertificado,
            'mesInAporteCertificado' AS mesInAporteCertificado, CAST(FORMAT(cerFechaGeneracion, 'dd/MM/yyyy', 'es-CO')
            as VARCHAR(10)) AS valorMesInAporteCertificado,
            'fechaGeneracion' AS fechaGeneracion, CONVERT(VARCHAR(MAX), FORMAT(CONVERT(DATE, cerFechaGeneracion, 103), 'dd "de" MMMM "de" yyyy', 'es-CO'))
            AS valorFechaGeneracion,
            'nombreCompleto' AS nombreCompleto, CASE WHEN per.perRazonSocial IS NOT NULL
            THEN per.perRazonSocial ELSE (per.perPrimerNombre +
            CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN ' ' + per.perSegundoApellido ELSE '' END) END AS valorNombreCompleto,
            'tipoSolicitante' as tipoSolicitante, CASE WHEN cerGeneradoComoEmpleador=1 THEN rolAfi.roaTipoAfiliado ELSE
            '' END AS valorTipoSolicitante,
            'tipoCertificado' AS tipoCertificado, cerTipoCertificado AS valorTipoCertificado,
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion +
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN '-' + CAST (per.perDigitoVerificacion AS varchar(2))
            ELSE '' END AS valorNumeroIdentificacion,
            'razonSocialEmpleador' AS nombreRazonSocialEmpleador, CASE WHEN cerTipoAfiliado = 'TRABAJADOR_DEPENDIENTE'
            THEN (CASE WHEN perEmp.perRazonSocial IS NOT NULL
            THEN perEmp.perRazonSocial ELSE (perEmp.perPrimerNombre +
            CASE WHEN perEmp.perSegundoNombre IS NOT NULL THEN ' ' + perEmp.perSegundoNombre ELSE '' END
            + ' ' + perEmp.perPrimerApellido + CASE WHEN perEmp.perSegundoApellido IS NOT NULL
            THEN ' ' + perEmp.perSegundoApellido ELSE '' END) END) ELSE '' END AS valorRazonSocialEmpleador,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
			perEmp.perNumeroIdentificacion AS valorNumeroIdentificacionEmpleador,
            'direccionPrincipal' as direccionPrincipal, ubiDireccionFisica AS valorDireccionPrincipal,
            'municipio' AS municipio, munNombre AS valorMunicipio,
            'departamento' AS departamento, depNombre AS valorDepartamento,
            'telefono' AS telefono, CASE WHEN ubiTelefonoFijo IS NOT NULL THEN ubiTelefonoFijo ELSE ubiTelefonoCelular
            END AS valorTelefono,
            'FechaRecepcionDocumentos' AS FechaRecepcionDocumentos, CAST(FORMAT(ichFechaRecepcionDocumento, 'dd MMMM yyyy', 'es-CO') AS VARCHAR(20)) as valorFechaRecepcionDocumentos,
			'CategoriaAfiliado' AS CategoriaAfiliado, (SELECT top 1 ctaCategoria FROM categoriaAfiliado where ctaafiliado = afiid order by ctaFechaCambioCategoria desc)  AS valorCategoriaAfiliado,
            'FechaInicioLabores' AS FechaInicioLabores, CAST(FORMAT(roa.roaFechaIngreso, 'dd/MM/yyyy', 'es-CO') AS VARCHAR(10)) AS valorFechaInicioLabores,
            'nombreCcf' AS nombreCcf, cerDirigidoA as valorNombreCcf,
			'GrupoFamiliar' as GrupoFamiliar, 'com.asopagos.comunicados.ejb.ObtenerGrupoFamiliar' as valorGrupoFamiliar,
            'fechaRadicacionSolicitud' AS fechaRadicacionSolicitud,
			CONVERT(VARCHAR(MAX), FORMAT(CONVERT(DATE, Solicitud.solFechaRadicacion, 103), 'dd "de" MMMM "de" yyyy', 'es-CO'))  as valorfechaRadicacionSolicitud
            FROM Certificado
            INNER JOIN Persona per on cerPersona = per.perId
            LEFT JOIN Ubicacion ubiP on ubiId = perUbicacionPrincipal
            LEFT JOIN Municipio on munId = ubiMunicipio
            LEFT JOIN Departamento on depId = munDepartamento
            LEFT JOIN Afiliado on perId = afiPersona
            AND cerTipoAfiliado IS NOT NULL
            LEFT JOIN RolAfiliado roa on roaAfiliado = afiId
            AND roaEstadoafiliado = 'ACTIVO'
            JOIN SolicitudAfiliacionPersona ON sapRolAfiliado = ROA.roaId
			JOIN Solicitud ON sapSolicitudGlobal = solId
			LEFT JOIN ItemChequeo ON (ichSolicitud = solId and perid = ichPersona)
            AND (cerTipoAfiliado IS NULL OR roa.roaTipoAfiliado = cerTipoAfiliado)
            LEFT JOIN Empleador emplafi on emplafi.empId = cerEmpleador
            LEFT JOIN Empresa empafi on empafi.empId = emplafi.empEmpresa
            LEFT JOIN Persona perEmp on perEmp.perId = empafi.empPersona
            LEFT JOIN RolAfiliado rolAfi on rolAfi.roaEmpleador = emplafi.empId 
            WHERE cerId = :idSolicitud
            <!-- and ichFechaRecepcionDocumento is not null -->
			order by solid desc, ichFechaRecepcionDocumento desc
        </query>
    </named-native-query>
    <named-native-query name="Certificados.consulta.AfiliacionActivaEmpleador">
        <query>
            SELECT TOP 1
            'tipoAfiliado' AS tipoAfiliado, cerTipoAfiliado AS valorTipoAfiliado,
            'mesFinAporteCertificado' AS mesFinAporteCertificado, CAST(FORMAT(cerFechaGeneracion, 'dd/MM/yyyy', 'es-CO')
            as VARCHAR(10)) AS valorMesFinAporteCertificado,
            'mesInAporteCertificado' AS mesInAporteCertificado, CAST(FORMAT(cerFechaGeneracion, 'dd/MM/yyyy', 'es-CO')
            as VARCHAR(10)) AS valorMesInAporteCertificado,
            'fechaGeneracion' AS fechaGeneracion, CAST(FORMAT(cerFechaGeneracion, 'dd/MM/yyyy', 'es-CO') as VARCHAR(10))
            AS valorFechaGeneracion,
            'nombreCompleto' AS nombreCompleto, CASE WHEN per.perRazonSocial IS NOT NULL
            THEN per.perRazonSocial ELSE (per.perPrimerNombre +
            CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL
            THEN ' ' + per.perSegundoApellido ELSE '' END) END AS valorNombreCompleto,
            'tipoSolicitante' as tipoSolicitante, CASE WHEN cerGeneradoComoEmpleador=1 THEN rolAfi.roaTipoAfiliado ELSE
            '' END AS valorTipoSolicitante,
            'tipoCertificado' AS tipoCertificado, cerTipoCertificado AS valorTipoCertificado,
            'seccionAfiliacion' AS seccionAfiliacion, CASE WHEN cerTipoAfiliado IS NOT NULL
            THEN 'trabajadores, pensionados e independientes' ELSE 'empleadores' END AS valorSeccionAfiliacion,
            'tipoTrabajador' AS tipoTrabajador, CASE WHEN cerTipoAfiliado IS NOT NULL
            THEN 'el señor(a)' ELSE 'la empresa' END AS valorTipoTrabajador,
            'tipoIdentificacion' AS tipoIdentificacion, per.perTipoIdentificacion valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion, per.perNumeroIdentificacion +
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN '-' + CAST (per.perDigitoVerificacion AS varchar(2))
            ELSE '' END AS valorNumeroIdentificacion,
            'trabajador' AS trabajador, CASE WHEN cerTipoAfiliado = 'PENSIONADO' THEN ' pensionado'
            WHEN cerTipoAfiliado = 'TRABAJADOR_DEPENDIENTE' THEN ' como trabajador del empleador '
            WHEN cerTipoAfiliado = 'TRABAJADOR_INDEPENDIENTE' THEN ' independiente' ELSE '' END AS valorTrabajador,
            'nombreRazonSocialEmpleador' AS nombreRazonSocialEmpleador, CASE WHEN perEmp.perRazonSocial IS NOT NULL
            THEN perEmp.perRazonSocial ELSE (perEmp.perPrimerNombre +
            CASE WHEN perEmp.perSegundoNombre IS NOT NULL THEN ' ' + perEmp.perSegundoNombre ELSE '' END
            + ' ' + perEmp.perPrimerApellido + CASE WHEN perEmp.perSegundoApellido IS NOT NULL
            THEN ' ' + perEmp.perSegundoApellido ELSE '' END) END AS valorRazonSocialEmpleador,
            'direccionPrincipal' as direccionPrincipal, ubiDireccionFisica AS valorDireccionPrincipal,
            'municipio' AS municipio, munNombre AS valorMunicipio,
            'departamento' AS departamento, depNombre AS valorDepartamento,
            'telefono' AS telefono, CASE WHEN ubiTelefonoFijo IS NOT NULL THEN ubiTelefonoFijo ELSE ubiTelefonoCelular
            END AS valorTelefono,
            'nombreCcf' AS nombreCcf, cerDirigidoA as valorNombreCcf,
            'FechaRecepcionDocumentos' as fechaRecepcionDocumentos, CAST(FORMAT(ich.ichFechaRecepcionDocumento, 'dd/MM/yyyy', 'es-CO') as VARCHAR(10)) AS valorFechaRecepcionDocumentos 
            FROM Certificado
            INNER JOIN Persona per on cerPersona = per.perId
            LEFT JOIN Empresa emp on emp.empPersona = per.perId
            AND cerTipoAfiliado IS NULL
            LEFT JOIN Empleador empl on empl.empEmpresa = emp.empId
            AND empl.empEstadoEmpleador = 'ACTIVO'
            LEFT JOIN Afiliado on perId = afiPersona
            AND cerTipoAfiliado IS NOT NULL
            LEFT JOIN RolAfiliado roa on roaAfiliado = afiId
            AND roaEstadoafiliado = 'ACTIVO'
            AND (cerTipoAfiliado IS NULL OR roa.roaTipoAfiliado = cerTipoAfiliado)
            JOIN ItemChequeo ich on ich.ichPersona = per.perId
            LEFT JOIN Empleador emplafi on emplafi.empId = cerEmpleador
            LEFT JOIN Empresa empafi on empafi.empId = emplafi.empEmpresa
            LEFT JOIN Persona perEmp on perEmp.perId = empafi.empPersona
            LEFT JOIN RolAfiliado rolAfi on rolAfi.roaEmpleador = emplafi.empId
            LEFT JOIN UbicacionEmpresa on emplafi.empId = ubeEmpresa and ubeTipoUbicacion = 'UBICACION_PRINCIPAL'
            LEFT JOIN Ubicacion on ubiId = ubeUbicacion
            LEFT JOIN Municipio on munId = ubiMunicipio
            LEFT JOIN Departamento on depId = munDepartamento
            WHERE cerId = :idSolicitud
        </query>
    </named-native-query>
    <named-native-query name="plantilla.NotificacionCreacionUsuarioEmpleadorExitosa">
        <description>NTF_CRCN_USR_EXT</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, getdate(),103) AS valorFechaDelSistema,
            'direccionUbiPrincipal' AS direccionUbiPrincipal,
            ISNULL(ubiPrin.ubiDireccionFisica,'') AS valorDireccionUbiPrincipal,
            'codigoPostalUbiPrincipal' AS codigoPostalUbiPrincipal,
            ISNULL(ubiPrin.ubiCodigoPostal,'') AS valorCodigoPostalUbiPrincipal,
            'emailUbiPrincipal' AS emailUbiPrincipal,
            ISNULL(ubiPrin.ubiEmail,'') AS valorEmailUbiPrincipal,
            'indicativoUbiPrincipal' AS indicativoUbiPrincipal,
            ISNULL(ubiPrin.ubiIndicativoTelFijo,'') AS valorIndicativoUbiPrincipal,
            'telefonoCelularUbiPrincipal' AS telefonoCelularUbiPrincipal,
            ISNULL(ubiPrin.ubiTelefonoCelular,'') AS valorTelefonoCelularUbiPrincipal,
            'telefonoFijoUbiPrincipal' AS telefonoFijoUbiPrincipal,
            ISNULL(ubiPrin.ubiTelefonoFijo,'') AS valorTelefonoFijoUbiPrincipal,
            'municipioUbiPrincipal' AS municipioUbiPrincipal,
            CASE WHEN ubiPrin.ubiMunicipio IS NOT NULL THEN munPrin.munNombre ELSE '' END AS valorMunicipioUbiPrincipal,
            'descripcionIndicacionUbiPrincipal' AS descripcionIndicacionUbiPrincipal,
            ISNULL(ubiPrin.ubiDescripcionIndicacion,'') AS valorDescripcionIndicacionUbiPrincipal,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'nombreYApellidosRepresentanteLegal'                                                               as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre + ' ' + CASE WHEN prl.perSegundoNombre IS NOT NULL THEN prl.perSegundoNombre ELSE '' END
            + ' ' + prl.perPrimerApellido + ' ' +
            CASE WHEN prl.perSegundoApellido IS NOT NULL THEN prl.perSegundoApellido ELSE '' END               AS
            valorNombreYApellidosRepresentanteLegal,
            'direccionEmpleador' AS direccionEmpleador,
            ubiCor.ubiDireccionFisica AS valorDireccionEmpleador,
            'ciudad' AS ciudad,
            munPrin.munNombre AS valorCiudad,
            'municipio' AS municipio,
            munCor.munNombre AS valorMunicipio
            FROM Solicitud sol
            INNER JOIN SolicitudAfiliaciEmpleador sae ON sol.solId = sae.saeSolicitudGlobal
            INNER JOIN Empleador emp ON emp.empId = sae.saeEmpleador
            INNER JOIN Empresa empr ON empr.empId = emp.empEmpresa
            INNER JOIN Persona prl ON prl.perId = empr.empRepresentanteLegal
            INNER JOIN Persona per ON empr.empPersona = per.perId
            LEFT JOIN UbicacionEmpresa ubeCor ON empr.empId = ubeCor.ubeEmpresa AND ubeCor.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            LEFT JOIN Ubicacion ubiCor ON ubiCor.ubiId = ubeCor.ubeUbicacion
            LEFT JOIN Municipio munCor ON munCor.munId = ubiCor.ubiMunicipio
            LEFT JOIN UbicacionEmpresa ubePrin ON empr.empId = ubePrin.ubeEmpresa AND ubePrin.ubeTipoUbicacion = 'UBICACION_PRINCIPAL'
            LEFT JOIN Ubicacion ubiPrin ON ubiPrin.ubiId = ubePrin.ubeUbicacion
            LEFT JOIN Municipio munPrin ON munPrin.munId = ubiPrin.ubiMunicipio
            WHERE sol.solId = :idSolicitud
        </query>
    </named-native-query>

    <named-native-query name="Comunicados.consulta.comunicacionResueltaConsolidadoCartera">
        <query>
            SELECT
            pcr.pcrAsunto, pcr.pcrCuerpo, pcr.pcrEncabezado,
            pcr.pcrEtiqueta, pcr.pcrMensaje, pcr.pcrNombre, pcr.pcrPie, pcr.pcrId,
            pcr.pcrIdCartera, pcr.pcrNumeroIdentificacion, pcr.pcrTipoIdentificacion
            FROM PlantillaComunicadoResuelta pcr,
            ( SELECT numeroIdEmpleador, orden
            FROM OPENJSON (:ordenamiento)
            WITH (
            numeroIdEmpleador varchar (20) '$.numeroIdEmpleador',
            orden int '$.orden'
            )
            ) filtros
            where
            pcr.pcrNumeroIdentificacion = filtros.numeroIdEmpleador and
            pcr.pcrSolicitud = :idSolicitud
            order by filtros.orden
        </query>
    </named-native-query>

    <named-native-query name="Comunicados.consulta.accionCobroSolicitud">
        <query>
            SELECT DISTINCT TOP 1 sgcf.sgfTipoAccionCobro
            FROM Cartera car, Persona per, SolicitudGestionCobroFisico sgcf, DetalleSolicitudGestionCobro dsgc
            WHERE sgcf.sgfSolicitud = :idSolicitud
            AND sgcf.sgfId = dsgc.dsgSolicitudPrimeraRemision
            AND car.carId = dsgc.dsgCartera
            AND car.carPersona = per.perId
            AND dsgc.dsgEnviarPrimeraRemision = 1
        </query>
    </named-native-query>
    <named-native-query name="plantilla.gestionDesafiliacionManual">
        <description>GESTION_MANUAL_DESAF</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, getdate(),103) AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' ' + CASE WHEN prl.perSegundoNombre IS NOT NULL THEN prl.perSegundoNombre ELSE '' END
            + ' ' + prl.perPrimerApellido + ' ' +
            CASE WHEN prl.perSegundoApellido IS NOT NULL THEN prl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'periodoMora' AS periodoMora,
            perCar.carPeriodoDeuda valorPeriodoMora,
            'fechaCorte' AS fechaCorte,
            dosDca.dosFechaHoraCargue AS valorFechaCorte,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'consecutivoLiquidacion' as consecutivoLiquidacion, dca.dcaConsecutivoLiquidacion as
            valorConsecutivoLiquidacion,
            'totalLiquidacion' as totalLiquidacion, 'com.asopagos.comunicados.ejb.ReporteTotalLiquidacion' as
            valorTotalLiquidacion,
            'numeroIdentificacionAfiliado' AS numeroIdentificacionAfiliado,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionAfiliado,
            'tipoIdentificacionAfiliado' AS tipoIdentificacionAfiliado,
            per.perTipoIdentificacion as valorTipoIdentificacionAfiliado,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos
            FROM Persona per
            INNER JOIN(SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta,
            CAST(MIN(car.carPeriodoDeuda) AS VARCHAR(7)) AS carPeriodoDeuda
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC1','LC2','LC3')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN
            ('B1','B2','LC2A','LC3A')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Empresa emp ON emp.empPersona = per.perId
            INNER JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            INNER JOIN Persona prl ON prl.perId = emp.empRepresentanteLegal
            WHERE ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
        </query>
    </named-native-query>

    <named-native-query name="plantilla.notificacionExpulcionPorMora">
        <description>NOTIFI_MORA_DESAF</description>
        <query>
            SELECT 'fechaDelSistema'                                                                                  AS fechaDelSistema,
            CONVERT(VARCHAR, getdate(), 103)                                                                   AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal'                                                               as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre + ' ' + CASE WHEN prl.perSegundoNombre IS NOT NULL THEN prl.perSegundoNombre ELSE '' END
            + ' ' + prl.perPrimerApellido + ' ' +
            CASE WHEN prl.perSegundoApellido IS NOT NULL THEN prl.perSegundoApellido ELSE '' END               AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre'                                                                               AS razonSocialNombre,
            per.perRazonSocial                                                                                 AS valorRazonSocialNombre,
            'direccion'                                                                                        AS direccion,
            ubi.ubiDireccionFisica                                                                             AS valorDireccion,
            'telefono'                                                                                         AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad'                                                                                           AS ciudad,
            mun.munNombre                                                                                      AS valorCiudad,
            'periodoMora'                                                                                      AS periodoMora,
            perCar.carPeriodoDeuda                                                                                valorPeriodoMora,
            'fechaCorte'                                                                                       AS fechaCorte,
            dosDca.dosFechaHoraCargue                                                                          AS valorFechaCorte,
            'numeroIdentificacionEmpleador'                                                                    AS numeroIdentificacionEmpleador,
            CASE
            WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion, '-', per.perDigitoVerificacion)
            ELSE per.perNumeroIdentificacion END                                                           AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador'                                                                      AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion                                                                          AS valorTipoIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal'                                                           AS numeroIdentificacionRepresentanteLegal,
            'totalLiquidacion'                                                                                 AS totalLiquidacion,
            sum(CASE
            WHEN car.carDeudaPresunta IS NOT NULL
            THEN car.carDeudaPresunta
            ELSE 0 END)                                                                                as valorTotalLiquidacion,
            prl.perNumeroIdentificacion                                                                        AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal'                                                             AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion                                                                          AS valorTipoIdentificacionRepresentanteLegal,
            'valorDeudaPresunta'                                                                               AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta, 1, CHARINDEX('.', perCar.totalDeudaPresunta) - 1)             AS
            valorValorDeudaPresunta,
            'periodos'                                                                                         AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera'                                              AS valorPeriodos,
            (Select Top 1 dcaConsecutivoLiquidacion
            from DocumentoSoporte
            join DocumentoCartera on dosId = dcaDocumentoSoporte
            INNER JOIN Cartera car ON car.carPersona = per.perId
            where carPersona = per.perId
            and dcaCartera = car.carId
            and dcaAccionCobro IN ('C1', 'C2')
            order by dosId desc)                                                                              AS consecutivoLiquidacion,
            'numeroIdentificacionAportante'                                                                    AS numeroIdentificacionAportante,
            CASE
            WHEN apg.apgEmpresa IS NOT NULL THEN CASE
            WHEN pem.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(pem.perNumeroIdentificacion, '-', pem.perDigitoVerificacion)
            ELSE pem.perNumeroIdentificacion END
            ELSE
            pip.perNumeroIdentificacion END                                                            AS valorNumeroIdentificacionAportante

            FROM Persona per
            INNER JOIN(SELECT per.perId                                                     AS perId,
            CONVERT(varchar, CAST(SUM(car.carDeudaPresunta) AS MONEY), 1) AS totalDeudaPresunta,
            CAST(MIN(car.carPeriodoDeuda) AS VARCHAR(7))                  AS carPeriodoDeuda
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE'
            AND car.carTipoLineaCobro IN ('LC1', 'LC2', 'LC3')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN(SELECT TOP 1 per.perId,
            ISNULL(CONVERT(VARCHAR, dos.dosFechaHoraCargue, 103), '') AS dosFechaHoraCargue
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN
            ('B1', 'B2', 'LC2A',
            'LC3A')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Empresa emp ON emp.empPersona = per.perId
            INNER JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            INNER JOIN Persona prl ON prl.perId = emp.empRepresentanteLegal
            INNER JOIN Cartera car on prl.perId = car.carPersona
            INNER JOIN AporteGeneral apg on emp.empId = apg.apgEmpresa
            LEFT JOIN Persona pem ON emp.empPersona = pem.perId
            LEFT JOIN Persona pip ON apg.apgPersona = pip.perId
            WHERE ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            group by per.perTipoIdentificacion, prl.perNumeroIdentificacion, mun.munNombre, ubi.ubiDireccionFisica,
            per.perRazonSocial, prl.perPrimerApellido, prl.perPrimerNombre, prl.perSegundoNombre, prl.perSegundoApellido,
            ubi.ubiTelefonoFijo, ubi.ubiTelefonoCelular
            , perCar.carPeriodoDeuda, dosDca.dosFechaHoraCargue, per.perDigitoVerificacion, per.perNumeroIdentificacion,
            prl.perTipoIdentificacion, perCar.totalDeudaPresunta, per.perId, apg.apgEmpresa, pem.perDigitoVerificacion,
            pem.perNumeroIdentificacion, pip.perNumeroIdentificacion
        </query>
    </named-native-query>

    <named-native-query name="plantilla.EnvioComunicadosLC2YLC3">
        <query>
            SELECT
            'fechaDelSistema' as fechaDelSistema,
            CONVERT(VARCHAR, getdate(),103) AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' ' + CASE WHEN prl.perSegundoNombre IS NOT NULL THEN prl.perSegundoNombre ELSE '' END
            + ' ' + prl.perPrimerApellido + ' ' +
            CASE WHEN prl.perSegundoApellido IS NOT NULL THEN prl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' as 'razonSocial/Nombre',
            per.perRazonSocial AS 'valorRazonSocial/Nombre',
            'telefonoEmpleador' as telefonoEmpleador,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefonoEmpleador,
            'ciudad' as ciudad,
            mun.munNombre AS valorCiudad,
            'telefonoAfiliado' as telefonoAfiliado,
            (SELECT CASE WHEN afubi.ubiTelefonoFijo IS NOT NULL THEN afubi.ubiTelefonoFijo ELSE afubi.ubiTelefonoCelular END FROM Ubicacion afubi WHERE afubi.ubiId = per.perUbicacionPrincipal) AS valorTelefonoAfiliado,
            'periodoMora' as periodoMora,
            perCar.carPeriodoDeuda AS valorPeriodoMora,
            'fechaCorte' as fechaCorte,
            dosDca.dosFechaHoraCargue AS valorFechaCorte,
            'numeroIdentificacionEmpleador' as numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador' as tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'tipoIdentificacionRepresentanteLegal' as tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'numeroIdentificacionRepresentanteLegal' as numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'numeroIdentificacionCotizante' as numeroIdentificacionCotizante,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionCotizante,
            'tipoIdentificacionCotizante' as tipoIdentificacionCotizante,
            per.perTipoIdentificacion as valorTipoIdentificacionCotizante,
            'direccion' as direccion,
            ubeEmp.ubiDireccionFisica as valorDireccion,
            'deudaPresunta' as deudaPresunta,
            perCar.totalDeudaPresunta AS valorDeudaPresunta,
            'cargoResponsableCcf' as cargoResponsableCcf,
            (select prmValor from Parametro where prmNombre = 'CARGO_RESPONSABLE_CCF') as valorCargoResponsableCcf,
            'cargoResponsableCarteraCcf' as cargoResponsableCarteraCcf,
            (select prmValor from Parametro where prmNombre = 'CARGO_RESPONSABLE_CARTERA_CCF') as valorCargoResponsableCarteraCcf,
            'firmaResponsableProcesoCartera' as firmaResponsableProcesoCartera,
            (select prmValor from Parametro where prmNombre = 'FIRMA_RESPONSABLE_CCF') as valorFirmaResponsableProcesoCartera,
            'firmaResponsableCcf' as firmaResponsableCcf,
            (select prmValor from Parametro where prmNombre = 'FIRMA_RESPONSABLE_CARTERA_CCF') as valorFirmaResponsableCcf,
            'responsableCcf' as responsableCcf,
            (select prmValor from Parametro where prmNombre = 'RESPONSABLE_CCF') as valorResponsableCcf,
            'responsableCarteraCcf' as responsableCarteraCcf,
            (select prmValor from Parametro where prmNombre = 'RESPONSABLE_CARTERA_CCF') as valorResponsableCarteraCcf,
            'periodos' as periodos,
            'com.asopagos.comunicados.ejb.ObtenerInconsistenciasEmpleados' AS valorPeriodos,
            'logoDeLaCCF' as logoDeLaCCF,
            (select prmValor from Parametro where prmNombre = 'LOGO_DE_LA_CCF') as valorLogoDeLaCCF,
            'ciudadCCF' as ciudadCCF,
            (select prmValor from Parametro where prmNombre = 'CIUDAD_CCF') as valorCiudadCCF
            FROM Persona per
            FULL JOIN(SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta,
            CAST(MIN(car.carPeriodoDeuda) AS VARCHAR(7)) AS carPeriodoDeuda
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC2','LC3', 'LC1')
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            FULL JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            Left JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN
            ('A1','A2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            ORDER BY dos.dosId DESC) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Empresa emp ON emp.empPersona = per.perId
            INNER JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            INNER JOIN Ubicacion ubeEmp on ube.ubeUbicacion = ubeEmp.ubiId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            INNER JOIN Persona prl ON prl.perId = emp.empRepresentanteLegal
            WHERE ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
        </query>
    </named-native-query>
    <named-native-query name="plantillaConsolidadoCartera.EnvioComunicadosLC2YLC3">
        <description>NOTI_IN_RE_APORTE</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerInconsistenciasEmpleados' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>

    <named-native-query name="Comunicados.consulta.cartera.persona">
        <query>
            SELECT car.carPeriodoDeuda, cd.cadDeudaPresunta, 
            pc.perTipoIdentificacion, pc.perNumeroIdentificacion, 
            pc.perRazonSocial,
            (select top 1 (CASE WHEN (convert(date,convert(varchar(17),g.apgPeriodoAporte+'-01'))&gt;= r.roaFechaAfiliacion)then a.apdSalarioBasico else r.roaValorSalarioMesadaIngresos end) as valorsa 
                        FROM AporteGeneral g 
                            JOIN AporteDetallado a ON a.apdAporteGeneral = g.apgid 
                            join afiliado af on af.afiPersona = pc.perid 
                            join rolafiliado r on r.roaAfiliado = af.afiId ) as valorS
            FROM Cartera car
            JOIN CarteraDependiente CD ON CD.cadCartera = CAR.carId
            join Persona pc on pc.perId = cd.cadPersona
            JOIN Persona PER ON CAR.carPersona = PER.perId
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion and per.perTipoIdentificacion = :tipoIdentificacion
            AND car.carEstadoOperacion = 'VIGENTE'
            AND car.carDeudaPresunta&gt;0
        </query>
    </named-native-query>
    <!-- Cambios GLPI 86025 -->
        <named-native-query name="plantilla.carta.expulsion.independiente">
        <description>CAR_EXP_INP</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, GETDATE(),103) AS valorFechaDelSistema,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'consecutivoLiquidacion' AS consecutivoLiquidacion,
            dosDca.dcaConsecutivoLiquidacion AS valorConsecutivoLiquidacion,
            'numeroIdentificacionIndependiente' AS numeroIdentificacionIndependiente,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionIndependiente,
            'tipoIdentificacionIndependiente' AS tipoIdentificacionIndependiente,
            per.perTipoIdentificacion AS valorTipoIdentificacionIndependiente,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC1','LC2','LC3')
            AND per.perNumeroIdentificacion= :numeroIdentificacion
            AND per.perTipoIdentificacion =:tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            dca.dcaConsecutivoLiquidacion
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('C1','C2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Afiliado af ON af.afiPersona = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
			INNER JOIN RolAfiliado ro on ro.roaAfiliado=af.afiId
            WHERE --ubi.ubiSectorUbicacion = 'ENVIO_CORRESPONDENCIA'
			ro.roaTipoAfiliado='TRABAJADOR_INDEPENDIENTE'
        </query>
    </named-native-query>

    <named-native-query name="plantilla.carta.expulsion.pensionado">
        <description>CAR_EXP_PEN</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, GETDATE(),103) AS valorFechaDelSistema,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'consecutivoLiquidacion' AS consecutivoLiquidacion,
            dosDca.dcaConsecutivoLiquidacion AS valorConsecutivoLiquidacion,
            'numeroIdentificacionIndependiente' AS numeroIdentificacionIndependiente,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionIndependiente,
            'tipoIdentificacionIndependiente' AS tipoIdentificacionIndependiente,
            per.perTipoIdentificacion AS valorTipoIdentificacionIndependiente,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC1','LC2','LC3')
            AND per.perNumeroIdentificacion= :numeroIdentificacion
            AND per.perTipoIdentificacion =:tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            dca.dcaConsecutivoLiquidacion
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('C1','C2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Afiliado af ON af.afiPersona = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
			INNER JOIN RolAfiliado ro on ro.roaAfiliado=af.afiId
            WHERE --ubi.ubiSectorUbicacion = 'ENVIO_CORRESPONDENCIA'
			ro.roaTipoAfiliado='TRABAJADOR_INDEPENDIENTE'
        </query>
    </named-native-query>
     <named-native-query name="plantillaConsolidadoCartera.segundoAvisoCobroPersuasivo.independiente">
        <description>SEG_AVI_COB_PRS_INDEP</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema,
            (Select Top 1 dosFechaHoraCargue from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            join Cartera on dcaCartera = carId
            where carPersona=per.perId
            and (dcaAccionCobro='E1' or
            dcaAccionCobro='G2')order by dosId desc) AS valorFechaDelSistema,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'ciudad' as ciudad, mun.munNombre AS valorCiudad,
            'totalLiquidacion' as totalLiquidacion, sum(CASE WHEN car.carDeudaPresunta IS NOT NULL
            THEN car.carDeudaPresunta ELSE 0 END ) as valorTotalLiquidacion,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado125TablaCobroPersuasivo' as
            valorTabla,
            'consecutivoLiquidacion' as consecutivoLiquidacion, dca.dcaConsecutivoLiquidacion as
            valorConsecutivoLiquidacion,
            'fechaFirmezaTitulo' AS fechaFirmezaTitulo,
            (SELECT top 1 bcar.bcaFecha FROM BitacoraCartera bcar WHERE bcar.bcaPersona = per.perId AND bcar.bcaFecha IS NOT NULL) AS valorFechaFirmezaTitulo,
            'fechaExpedicionActaLiquidacionAportes' AS fechaExpedicionActaLiquidacionAportes,
            (Select Top 1 CONVERT(DATE,dosFechaHoraCargue,23) from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            where carPersona=per.perId
            and dcaCartera = car.carId
            and dcaAccionCobro IN ('C1','C2') order by dosId desc) AS valorFechaExpedicionActaLiquidacionAportes,
            'numeroIdentificacionIndependiente' AS numeroIdentificacionIndependiente,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionIndependiente,
            'valorDeudaPresunta' AS valorDeudadPresunta,
            SUBSTRING(CONVERT(VARCHAR,CAST(SUM(car.carDeudaPresunta) AS
            MONEY),1),1,CHARINDEX('.',CONVERT(VARCHAR,CAST(SUM(car.carDeudaPresunta) AS MONEY),1))-1) AS
            valorValorDeudaPresunta,
            'valorDeudaPresuntaEnLetras' AS valorDeudaPresuntaEnLetras,
            dbo.ufn_CantidadConLetra(SUM(car.carDeudaPresunta)) AS valorValorDeudaPresuntaEnLetras
            FROM
            DocumentoCartera dca,
            Ubicacion ubi,
            Municipio mun,
            Persona per,
            Persona prl,
            Cartera car
            WHERE car.carPersona = per.perId
            AND car.carId = dca.dcaCartera
            AND car.carEstadoOperacion = 'VIGENTE'
            AND car.carTipoLineaCobro = 'LC1'
            AND prl.perUbicacionPrincipal= ubi.ubiId
            AND mun.munId = ubi.ubiMunicipio
            AND per.perTipoIdentificacion = :numeroIdentificacion
            AND per.perNumeroIdentificacion = :tipoIdentificacion
            GROUP by per.perId, prl.perPrimerNombre ,prl.perSegundoNombre,
            prl.perSegundoNombre,prl.perPrimerApellido , prl.perSegundoApellido,
            prl.perSegundoApellido, per.perRazonSocial, ubi.ubiDireccionFisica,
            ubi.ubiTelefonoFijo,ubi.ubiTelefonoCelular, mun.munNombre,dca.dcaConsecutivoLiquidacion,car.carPersona,
            car.carId, per.perDigitoVerificacion, per.perNumeroIdentificacion,per.perTipoIdentificacion,
            prl.perDigitoVerificacion, prl.perNumeroIdentificacion, prl.perTipoIdentificacion
        </query>
    </named-native-query>

    <named-native-query name="plantillaConsolidadoCartera.segundoAvisoCobroPersuasivo.pensionado">
        <description>SEG_AVI_COB_PRS_PENSIONADO</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema,
            (Select Top 1 dosFechaHoraCargue from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            join Cartera on dcaCartera = carId
            where carPersona=per.perId
            and (dcaAccionCobro='E1' or
            dcaAccionCobro='G2')order by dosId desc) AS valorFechaDelSistema,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'ciudad' as ciudad, mun.munNombre AS valorCiudad,
            'totalLiquidacion' as totalLiquidacion, sum(CASE WHEN car.carDeudaPresunta IS NOT NULL
            THEN car.carDeudaPresunta ELSE 0 END ) as valorTotalLiquidacion,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado125TablaCobroPersuasivo' as
            valorTabla,
            'consecutivoLiquidacion' as consecutivoLiquidacion, dca.dcaConsecutivoLiquidacion as
            valorConsecutivoLiquidacion,
            'fechaFirmezaTitulo' AS fechaFirmezaTitulo,
            (SELECT top 1 bcar.bcaFecha FROM BitacoraCartera bcar WHERE bcar.bcaPersona = per.perId AND bcar.bcaFecha IS NOT NULL) AS valorFechaFirmezaTitulo,
            'fechaExpedicionActaLiquidacionAportes' AS fechaExpedicionActaLiquidacionAportes,
            (Select Top 1 CONVERT(DATE,dosFechaHoraCargue,23) from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            where carPersona=per.perId
            and dcaCartera = car.carId
            and dcaAccionCobro IN ('C1','C2') order by dosId desc) AS valorFechaExpedicionActaLiquidacionAportes,
            'numeroIdentificacionPensionado' AS numeroIdentificacionPensionado,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionPensionado,
            'valorDeudaPresunta' AS valorDeudadPresunta,
            SUBSTRING(CONVERT(VARCHAR,CAST(SUM(car.carDeudaPresunta) AS
            MONEY),1),1,CHARINDEX('.',CONVERT(VARCHAR,CAST(SUM(car.carDeudaPresunta) AS MONEY),1))-1) AS
            valorValorDeudaPresunta,
            'valorDeudaPresuntaEnLetras' AS valorDeudaPresuntaEnLetras,
            dbo.ufn_CantidadConLetra(SUM(car.carDeudaPresunta)) AS valorValorDeudaPresuntaEnLetras
            FROM
            DocumentoCartera dca,
            Ubicacion ubi,
            Municipio mun,
            Persona per,
            Persona prl,
            Cartera car
            WHERE car.carPersona = per.perId
            AND car.carId = dca.dcaCartera
            AND car.carEstadoOperacion = 'VIGENTE'
            AND car.carTipoLineaCobro = 'LC1'
            AND prl.perUbicacionPrincipal= ubi.ubiId
            AND mun.munId = ubi.ubiMunicipio
            AND per.perTipoIdentificacion = :numeroIdentificacion
            AND per.perNumeroIdentificacion = :tipoIdentificacion
            GROUP by per.perId, prl.perPrimerNombre ,prl.perSegundoNombre,
            prl.perSegundoNombre,prl.perPrimerApellido , prl.perSegundoApellido,
            prl.perSegundoApellido, per.perRazonSocial, ubi.ubiDireccionFisica,
            ubi.ubiTelefonoFijo,ubi.ubiTelefonoCelular, mun.munNombre,dca.dcaConsecutivoLiquidacion,car.carPersona,
            car.carId, per.perDigitoVerificacion, per.perNumeroIdentificacion,per.perTipoIdentificacion,
            prl.perDigitoVerificacion, prl.perNumeroIdentificacion, prl.perTipoIdentificacion
        </query>
    </named-native-query>

     <named-native-query name="plantillaConsolidadoCartera.primerAvisoCobroPersuasivo.independiente">
        <description>PRI_AVI_COB_PRS_INDEPENDIENTE</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema,
            (Select Top 1 dosFechaHoraCargue from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            join Cartera on dcaCartera = carId
            where carPersona=per.perId
            and (dcaAccionCobro='D1' or
            dcaAccionCobro='F2')order by dosId desc) AS valorFechaDelSistema,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'ciudad' as ciudad, mun.munNombre AS valorCiudad,
            'totalLiquidacion' as totalLiquidacion, sum(CASE WHEN car.carDeudaPresunta IS NOT NULL
            THEN car.carDeudaPresunta ELSE 0 END ) as valorTotalLiquidacion,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado125TablaCobroPersuasivo' as
            valorTabla,
            'consecutivoLiquidacion' as consecutivoLiquidacion,
            dca.dcaConsecutivoLiquidacion as valorConsecutivoLiquidacion,
            'fechaFirmezaTitulo' AS fechaFirmezaTitulo,
            (SELECT top 1 bcar.bcaFecha FROM BitacoraCartera bcar WHERE bcar.bcaPersona = per.perId AND bcar.bcaFecha IS NOT NULL) AS valorFechaFirmezaTitulo,
            'fechaExpedicionActaLiquidacionAportes' AS fechaExpedicionActaLiquidacionAportes,
            (Select Top 1 CONVERT(DATE,dosFechaHoraCargue,23) from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            where carPersona=per.perId
            and dcaCartera = car.carId
            and dcaAccionCobro IN ('C1','C2') order by dosId desc) AS valorFechaExpedicionActaLiquidacionAportes,
            'numeroIdentificacionIndependiente' AS numeroIdentificacionIndependiente,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionIndependiente,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            CASE WHEN prl.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(prl.perNumeroIdentificacion,'-',prl.perDigitoVerificacion) ELSE prl.perNumeroIdentificacion END AS
            valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionIndependiente' AS tipoIdentificacionIndependiente,
            per.perTipoIdentificacion AS valorTipoIdentificacionIndependiente,
            'valorDeudaPresunta' AS valorDeudadPresunta,
            SUBSTRING(CONVERT(VARCHAR,CAST(SUM(car.carDeudaPresunta) AS
            MONEY),1),1,CHARINDEX('.',CONVERT(VARCHAR,CAST(SUM(car.carDeudaPresunta) AS MONEY),1))-1) AS
            valorValorDeudaPresunta,
            'valorDeudaPresuntaEnLetras' AS valorDeudaPresuntaEnLetras,
            dbo.ufn_CantidadConLetra(SUM(car.carDeudaPresunta)) AS valorValorDeudaPresuntaEnLetras
            FROM
            DocumentoCartera dca,
            Ubicacion ubi,
            Municipio mun,
            Persona per,
            Persona prl,
            Cartera car,
			Afiliado af,
			RolAfiliado ro
            WHERE car.carPersona = per.perId
            AND car.carId = dca.dcaCartera
            AND car.carEstadoOperacion = 'VIGENTE'
            AND car.carTipoLineaCobro = 'LC1'
            AND mun.munId = ubi.ubiMunicipio
            AND per.perTipoIdentificacion =:tipoIdentificacion
            AND per.perNumeroIdentificacion =:numeroIdentificacion
			AND af.afiPersona=per.perId
			AND ro.roaAfiliado=af.afiId
			AND ro.roaTipoAfiliado='TRABAJADOR_INDEPENDIENTE'
            GROUP by per.perId, prl.perPrimerNombre ,prl.perSegundoNombre,
            prl.perSegundoNombre,prl.perPrimerApellido , prl.perSegundoApellido,
            prl.perSegundoApellido, per.perRazonSocial, ubi.ubiDireccionFisica,
            ubi.ubiTelefonoFijo,ubi.ubiTelefonoCelular, mun.munNombre,dca.dcaConsecutivoLiquidacion,car.carPersona,
            car.carId, per.perDigitoVerificacion, per.perNumeroIdentificacion,per.perTipoIdentificacion,
            prl.perDigitoVerificacion, prl.perNumeroIdentificacion, prl.perTipoIdentificacion
        </query>
    </named-native-query>

    <named-native-query name="plantillaConsolidadoCartera.primerAvisoCobroPersuasivo.pensioando">
        <description>PRI_AVI_COB_PRS_PENSIONADO</description>
        <query>
            SELECT 'fechaDelSistema' as fechaDelSistema,
            (Select Top 1 dosFechaHoraCargue from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            join Cartera on dcaCartera = carId
            where carPersona=per.perId
            and (dcaAccionCobro='D1' or
            dcaAccionCobro='F2')order by dosId desc) AS valorFechaDelSistema,
            'direccion' as direccion, ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' as telefono, CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL
            THEN ubi.ubiTelefonoFijo
            ELSE ubi.ubiTelefonoCelular END AS valorTelefono,
            'ciudad' as ciudad, mun.munNombre AS valorCiudad,
            'totalLiquidacion' as totalLiquidacion, sum(CASE WHEN car.carDeudaPresunta IS NOT NULL
            THEN car.carDeudaPresunta ELSE 0 END ) as valorTotalLiquidacion,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ConsultaReporteComunicado125TablaCobroPersuasivo' as
            valorTabla,
            'consecutivoLiquidacion' as consecutivoLiquidacion,
            dca.dcaConsecutivoLiquidacion as valorConsecutivoLiquidacion,
            'fechaFirmezaTitulo' AS fechaFirmezaTitulo,
            (SELECT top 1 bcar.bcaFecha FROM BitacoraCartera bcar WHERE bcar.bcaPersona = per.perId AND bcar.bcaFecha IS NOT NULL) AS valorFechaFirmezaTitulo,
            'fechaExpedicionActaLiquidacionAportes' AS fechaExpedicionActaLiquidacionAportes,
            (Select Top 1 CONVERT(DATE,dosFechaHoraCargue,23) from DocumentoSoporte
            join DocumentoCartera on dosId=dcaDocumentoSoporte
            where carPersona=per.perId
            and dcaCartera = car.carId
            and dcaAccionCobro IN ('C1','C2') order by dosId desc) AS valorFechaExpedicionActaLiquidacionAportes,
            'numeroIdentificacionPensionado' AS numeroIdentificacionPensionado,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionPensionado,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            CASE WHEN prl.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(prl.perNumeroIdentificacion,'-',prl.perDigitoVerificacion) ELSE prl.perNumeroIdentificacion END AS
            valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionPensionado' AS tipoIdentificacionPensionado,
            per.perTipoIdentificacion AS valorTipoIdentificacionPensionado,
            'valorDeudaPresunta' AS valorDeudadPresunta,
            SUBSTRING(CONVERT(VARCHAR,CAST(SUM(car.carDeudaPresunta) AS
            MONEY),1),1,CHARINDEX('.',CONVERT(VARCHAR,CAST(SUM(car.carDeudaPresunta) AS MONEY),1))-1) AS
            valorValorDeudaPresunta,
            'valorDeudaPresuntaEnLetras' AS valorDeudaPresuntaEnLetras,
            dbo.ufn_CantidadConLetra(SUM(car.carDeudaPresunta)) AS valorValorDeudaPresuntaEnLetras
            FROM
            DocumentoCartera dca,
            Ubicacion ubi,
            Municipio mun,
            Persona per,
            Persona prl,
            Cartera car,
			Afiliado af,
			RolAfiliado ro
            WHERE car.carPersona = per.perId
            AND car.carId = dca.dcaCartera
            AND car.carEstadoOperacion = 'VIGENTE'
            AND car.carTipoLineaCobro = 'LC1'
            AND mun.munId = ubi.ubiMunicipio
            AND per.perTipoIdentificacion =:tipoIdentificacion
            AND per.perNumeroIdentificacion =:numeroIdentificacion
			AND af.afiPersona=per.perId
			AND ro.roaAfiliado=af.afiId
			AND ro.roaTipoAfiliado='PENSIONADO'
            GROUP by per.perId, prl.perPrimerNombre ,prl.perSegundoNombre,
            prl.perSegundoNombre,prl.perPrimerApellido , prl.perSegundoApellido,
            prl.perSegundoApellido, per.perRazonSocial, ubi.ubiDireccionFisica,
            ubi.ubiTelefonoFijo,ubi.ubiTelefonoCelular, mun.munNombre,dca.dcaConsecutivoLiquidacion,car.carPersona,
            car.carId, per.perDigitoVerificacion, per.perNumeroIdentificacion,per.perTipoIdentificacion,
            prl.perDigitoVerificacion, prl.perNumeroIdentificacion, prl.perTipoIdentificacion
        </query>
    </named-native-query>

    <named-native-query name="plantillaConsolidadoCartera.liquidacionAporteMoraIndependiente">
        <description>LIQ_APO_MOR_IND
            Pendientes: consecutivoLiquidacion, fechaLiquidacion
        </description>
        <query>
            SELECT '${tabla}' as llave, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT '${totalLiquidacion}' as llave, 'com.asopagos.comunicados.ejb.ReporteTotalLiquidacion' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>

    <named-native-query name="plantilla.liquidacionAporteMoraIndependiente">
        <description>LIQ_APO_MOR_IND
            Pendientes: consecutivoLiquidacion, fechaLiquidacion
        </description>
        <query>
            SELECT top 1
            'fechaDelSistema' AS fechaDelSistema,
            getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'tipoDeIdentificacion' as tipoDeIdentificacion, per.perTipoIdentificacion AS valorTipoDeIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'nombreComunicado' as nombreComunicado, 'Notificación de No Recaudo de Aportes' AS valorNombreComunicado,
            'fechaComunicado' as fechaComunicado, dbo.getLocalDate() AS valorFechaComunicado,
            'fechaNotificacionPersonal' as fechaNotificacionPersonal,
			CASE WHEN hacC.hacId IS NOT NULL THEN hacC.hacFechaAsignacionAccion ELSE CASE WHEN car.carId IS NOT NULL
            THEN car.carFechaAsignacionAccion ELSE '' END END AS valorFechaNotificacionPersonal,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valorTabla,
            'totalLiquidacion' as totalLiquidacion, 'com.asopagos.comunicados.ejb.ReporteTotalLiquidacion' as
            valorTotalLiquidacion,
            'consecutivoLiquidacion' as consecutivoLiquidacion, dca.dcaConsecutivoLiquidacion as
            valorConsecutivoLiquidacion,
            'fechaLiquidacion' as fechaLiquidacion, dos.dosFechaHoraCargue as valorFechaLiquidacion,
            'celularAportante' AS celularAportante,
            'direccionAportante' AS direccionAportante,
            'fechaLimitePago' AS fechaLimitePago,
            DATEADD(DAY,-1,CONVERT(DATE,car.carFechaCreacion,23)),
            'telefonoAportante' AS telefonoAportante,
            'municipio' AS municipio,
            'valorDeudaPresunta' AS valorDeudadPresunta,
            SUBSTRING(CONVERT(VARCHAR,CAST(car.carDeudaPresunta AS
            MONEY),1),1,CHARINDEX('.',CONVERT(VARCHAR,CAST(car.carDeudaPresunta AS MONEY),1))-1) AS
            valorValorDeudaPresunta
            FROM Cartera car
            LEFT JOIN HistoricoAsignacionCartera hacA ON car.carId = hacA.hacCartera
            LEFT JOIN HistoricoAsignacionCartera hacC ON car.carId = hacC.hacCartera
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dcaDocumentoSoporte
            INNER JOIN Persona per ON per.perId = car.carPersona
            LEFT JOIN Ubicacion ubiPer ON ubiPer.ubiId = per.perUbicacionPrincipal
            WHERE car.carId =:idCartera
			AND (dos.DOSNOMBREDOCUMENTO IN ('CIT_NTF_PER','NTF_NO_REC_APO','LIQ_APO_MAN')or dos.DOSNOMBREDOCUMENTO IS NULL)
            ORDER BY valorconsecutivoliquidacion DESC
        </query>
    </named-native-query>


    <named-native-query name="plantillaConsolidadoCartera.liquidacionAporteMoraPensionado">
        <description>LIQ_APO_MOR_PEN
            Pendientes: consecutivoLiquidacion, fechaLiquidacion
        </description>
        <query>
            SELECT '${tabla}' as llave, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT '${totalLiquidacion}' as llave, 'com.asopagos.comunicados.ejb.ReporteTotalLiquidacion' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>


    <named-native-query name="plantilla.liquidacionAporteMoraPensionado">
        <description>LIQ_APO_MOR_PEN
            Pendientes: consecutivoLiquidacion, fechaLiquidacion
        </description>
        <query>
            SELECT top 1
            'fechaDelSistema' AS fechaDelSistema,
            getDate() AS valorFechaDelSistema,
            'razonSocial/Nombre' as razonSocialNombre, per.perRazonSocial AS valorRazonSocialNombre,
            'tipoDeIdentificacion' as tipoDeIdentificacion, per.perTipoIdentificacion AS valorTipoDeIdentificacion,
            'numeroIdentificacion' as numeroIdentificacion, per.perNumeroIdentificacion AS valorNumeroIdentificacion,
            'nombreComunicado' as nombreComunicado, 'Notificación de No Recaudo de Aportes' AS valorNombreComunicado,
            'fechaComunicado' as fechaComunicado, dbo.getLocalDate() AS valorFechaComunicado,
            'fechaNotificacionPersonal' as fechaNotificacionPersonal,
			CASE WHEN hacC.hacId IS NOT NULL THEN hacC.hacFechaAsignacionAccion ELSE CASE WHEN car.carId IS NOT NULL
            THEN car.carFechaAsignacionAccion ELSE '' END END AS valorFechaNotificacionPersonal,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valorTabla,
            'totalLiquidacion' as totalLiquidacion, 'com.asopagos.comunicados.ejb.ReporteTotalLiquidacion' as
            valorTotalLiquidacion,
            'consecutivoLiquidacion' as consecutivoLiquidacion, dca.dcaConsecutivoLiquidacion as
            valorConsecutivoLiquidacion,
            'fechaLiquidacion' as fechaLiquidacion, dos.dosFechaHoraCargue as valorFechaLiquidacion,
            'celularAportante' AS celularAportante,
            'direccionAportante' AS direccionAportante,
            'fechaLimitePago' AS fechaLimitePago,
            DATEADD(DAY,-1,CONVERT(DATE,car.carFechaCreacion,23)),
            'telefonoAportante' AS telefonoAportante,
            'municipio' AS municipio,
            'valorDeudaPresunta' AS valorDeudadPresunta,
            SUBSTRING(CONVERT(VARCHAR,CAST(car.carDeudaPresunta AS
            MONEY),1),1,CHARINDEX('.',CONVERT(VARCHAR,CAST(car.carDeudaPresunta AS MONEY),1))-1) AS
            valorValorDeudaPresunta
            FROM Cartera car
            LEFT JOIN HistoricoAsignacionCartera hacA ON car.carId = hacA.hacCartera
            LEFT JOIN HistoricoAsignacionCartera hacC ON car.carId = hacC.hacCartera
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dcaDocumentoSoporte
            INNER JOIN Persona per ON per.perId = car.carPersona
            LEFT JOIN Ubicacion ubiPer ON ubiPer.ubiId = per.perUbicacionPrincipal
            WHERE car.carId =:idCartera
			AND (dos.DOSNOMBREDOCUMENTO IN ('CIT_NTF_PER','NTF_NO_REC_APO','LIQ_APO_MAN')or dos.DOSNOMBREDOCUMENTO IS NULL)
            ORDER BY valorconsecutivoliquidacion DESC
        </query>
    </named-native-query>

    <named-native-query name="plantillaConsolidadoCartera.citacionNotificacionPersonalIndeoendiente">
        <description>CIT_NTF_PER_IND</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.citacionNotificacionPersonalIndependiente">
        <description>CIT_NTF_PER_IND</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, dbo.getLocalDate(),103) AS valorFechaDelSistema,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'fechaLiquidacion' AS fechaLiquidacion,
            dosDca.dosFechaHoraCargue AS valorFechaLiquidacion,
            'consecutivoLiquidacion' AS consecutivoLiquidacion,
            dosDca.dcaConsecutivoLiquidacion AS valorConsecutivoLiquidacion,
            'numeroIdentificacionPersona' AS numeroIdentificacionPersona,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionPersona,
            'tipoIdentificacionPersona' AS tipoIdentificacionPersona,
            per.perTipoIdentificacion AS valorTipoIdentificacionPersona,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC4')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue,
            dca.dcaConsecutivoLiquidacion
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('C1','C2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
        </query>
    </named-native-query>

    <named-native-query name="plantillaConsolidadoCartera.citacionNotificacionpersonalPensionado">
        <description>CIT_NTF_PER_PEN</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.citacionNotificacionpersonalPensionado">
        <description>CIT_NTF_PER_PEN</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, dbo.getLocalDate(),103) AS valorFechaDelSistema,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'fechaLiquidacion' AS fechaLiquidacion,
            dosDca.dosFechaHoraCargue AS valorFechaLiquidacion,
            'consecutivoLiquidacion' AS consecutivoLiquidacion,
            dosDca.dcaConsecutivoLiquidacion AS valorConsecutivoLiquidacion,
            'numeroIdentificacionPersona' AS numeroIdentificacionPersona,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionPersona,
            'tipoIdentificacionPersona' AS tipoIdentificacionPersona,
            per.perTipoIdentificacion AS valorTipoIdentificacionPersona,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC5')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue,
            dca.dcaConsecutivoLiquidacion
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('C1','C2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
        </query>
    </named-native-query>
    <named-native-query name="plantillaConsolidadoCartera.NotificacionAvisoIndependiente">
        <description>NTF_AVI_IND</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.NotificacionAvisoIndependiente">
        <description>NTF_AVI_IND</description>
        <query>
            SELECT
            'fechaNotificacionAviso' AS fechaNotificacionAviso,
            dosDcaD2.fechaHoraCargueD2 AS valorFechaNotificacionAviso,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'consecutivoLiquidacion' AS consecutivoLiquidacion,
            dosDcaC2.consecutivoLiquidacionC2 AS valorConsecutivoLiquidacion,
            'fechaLiquidacion' AS fechaLiquidacion,
            dosDcaC2.fechaHoraCargueC2 as valorFechaLiquidacion,
            'numeroIdentificacion' AS numeroIdentificacion,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacion,
            'tipoIdentificacion' AS tipoIdentificacion,
            per.perTipoIdentificacion AS valorTipoIdentificacion,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos,
            'periodoMora' AS periodoMora,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodoMora
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC4')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS fechaHoraCargueD2
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro = 'D2'
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDcaD2 ON dosDcaD2.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS fechaHoraCargueC2,
            dca.dcaConsecutivoLiquidacion AS consecutivoLiquidacionC2
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('C1','C2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId
            ) AS dosDcaC2 ON dosDcaC2.perId = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
        </query>
    </named-native-query>

    <named-native-query name="plantillaConsolidadoCartera.NotificacionAvisoPensionado">
        <description>NTF_AVI_PEN</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.NotificacionAvisoPensionado">
        <description>NTF_AVI_PEN</description>
        <query>
            SELECT
            'fechaNotificacionAviso' AS fechaNotificacionAviso,
            dosDcaD2.fechaHoraCargueD2 AS valorFechaNotificacionAviso,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'consecutivoLiquidacion' AS consecutivoLiquidacion,
            dosDcaC2.consecutivoLiquidacionC2 AS valorConsecutivoLiquidacion,
            'fechaLiquidacion' AS fechaLiquidacion,
            dosDcaC2.fechaHoraCargueC2 as valorFechaLiquidacion,
            'numeroIdentificacion' AS numeroIdentificacion,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacion,
            'tipoIdentificacion' AS tipoIdentificacion,
            per.perTipoIdentificacion AS valorTipoIdentificacion,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos,
            'periodoMora' AS periodoMora,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodoMora
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC4')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS fechaHoraCargueD2
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro = 'D2'
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDcaD2 ON dosDcaD2.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS fechaHoraCargueC2,
            dca.dcaConsecutivoLiquidacion AS consecutivoLiquidacionC2
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('C1','C2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId
            ) AS dosDcaC2 ON dosDcaC2.perId = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
        </query>
    </named-native-query>

    <named-native-query name="plantillaConsolidadoCartera.cartaEmpresaExpulsadaIndependiente">
        <description>CAR_EMP_EXP_IND</description>
        <query>
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>

    <named-native-query name="plantillaConsolidadoCartera.avisoIncumplimientoPersonaIndependiente">
        <description>AVI_INC_IND</description>
        <query>
            SELECT '${tabla}' as llave, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.avisoIncumplimientoPersonaIndependiente">
        <description>AVI_INC_IND</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, getdate(),103) AS valorFechaDelSistema,
            'nombreYApellidosAfiliadoPrincipal' as nombreYApellidosAfiliadoPrincipal,
            per.perPrimerNombre +' ' + CASE WHEN per.perSegundoNombre IS NOT NULL THEN per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + ' ' +
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN per.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosAfiliadoPrincipal,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'periodoMora' AS periodoMora,
            perCar.carPeriodoDeuda valorPeriodoMora,
            'fechaCorte' AS fechaCorte,
            dosDca.dosFechaHoraCargue AS valorFechaCorte,
            'numeroIdentificacionAfiliado' AS numeroIdentificacionAfiliado,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionAfiliado,
            'tipoIdentificacionAfiliado' AS tipoIdentificacionAfiliado,
            per.perTipoIdentificacion as valorTipoIdentificacionAfiliado,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos,
            'tipoIdentificacion' AS tipoIdentificacion,
			COALESCE(perCar.perTipoIdentificacion,dosDca.perTipoIdentificacion)  as valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion,
			COALESCE(perCar.perNumeroIdentificacion,dosDca.perNumeroIdentificacion )as valorNumeroIdentificacion,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valorTabla
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta,
            CAST(MIN(car.carPeriodoDeuda) AS VARCHAR(7)) AS carPeriodoDeuda,
            per.perTipoIdentificacion, per.perNumeroIdentificacion
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC4')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId , perNumeroIdentificacion,perTipoIdentificacion
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue,
            per.perTipoIdentificacion, per.perNumeroIdentificacion
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('B1','B2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
        </query>
    </named-native-query>

    <named-native-query name="plantillaConsolidadoCartera.avisoIncumplimientoPersonaPensionado">
        <description>AVI_INC_PEN</description>
        <query>
            SELECT '${tabla}' as llave, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT '${periodos}' as llave, 'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' as valor,
            'REPORTE_VARIABLE' tipoVariable
            UNION
            SELECT variable.clave llave, valorConstante.valor valor, variable.tipoVariable
            FROM
            (
            select c.cnsValor valor, cnsNombre nombre from Constante c
            union
            select p.prmValor valor, p.prmNombre from Parametro p
            ) valorConstante,
            (
            SELECT vCom.vcoClave clave, vCom.vcoNombreConstante nombreConstante, vCom.vcoTipoVariableComunicado
            tipoVariable
            FROM VariableComunicado vCom
            WHERE vCom.vcoPlantillaComunicado = :idPlantillaComunicado
            AND vCom.vcoTipoVariableComunicado = 'CONSTANTE'
            AND vCom.vcoClave like '%logo%'
            ) variable
            WHERE
            valorConstante.nombre = variable.nombreConstante
        </query>
    </named-native-query>
    <named-native-query name="plantilla.avisoIncumplimientoPersonaPensionado">
        <description>AVI_INC_PEN</description>
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, getdate(),103) AS valorFechaDelSistema,
            'nombreYApellidosAfiliadoPrincipal' as nombreYApellidosAfiliadoPrincipal,
            per.perPrimerNombre +' ' + CASE WHEN per.perSegundoNombre IS NOT NULL THEN per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + ' ' +
            CASE WHEN per.perSegundoApellido IS NOT NULL THEN per.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosAfiliadoPrincipal,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'periodoMora' AS periodoMora,
            perCar.carPeriodoDeuda valorPeriodoMora,
            'fechaCorte' AS fechaCorte,
            dosDca.dosFechaHoraCargue AS valorFechaCorte,
            'numeroIdentificacionAfiliado' AS numeroIdentificacionAfiliado,
            per.perNumeroIdentificacion AS valorNumeroIdentificacionAfiliado,
            'tipoIdentificacionAfiliado' AS tipoIdentificacionAfiliado,
            per.perTipoIdentificacion as valorTipoIdentificacionAfiliado,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos,
            'tipoIdentificacion' AS tipoIdentificacion,
			COALESCE(perCar.perTipoIdentificacion,dosDca.perTipoIdentificacion)  as valorTipoIdentificacion,
            'numeroIdentificacion' AS numeroIdentificacion,
			COALESCE(perCar.perNumeroIdentificacion,dosDca.perNumeroIdentificacion )as valorNumeroIdentificacion,
            'tabla' as tabla, 'com.asopagos.comunicados.ejb.ReporteTablaLiquidacionAporte' as valorTabla
            FROM Persona per
            INNER JOIN( SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta,
            CAST(MIN(car.carPeriodoDeuda) AS VARCHAR(7)) AS carPeriodoDeuda,
            per.perTipoIdentificacion, per.perNumeroIdentificacion
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC5')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId , perNumeroIdentificacion,perTipoIdentificacion
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue,
            per.perTipoIdentificacion, per.perNumeroIdentificacion
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN ('B1','B2')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = per.perUbicacionPrincipal
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
        </query>
    </named-native-query>

    <!-- Fin Cambios 86025 -->

    <named-stored-procedure-query name="Comunicados.USP_UTIL_PregenerarComunicadosConsolidadoCartera" procedure-name="dbo.USP_UTIL_PregenerarComunicadosConsolidadoCartera">
        <parameter class="java.lang.Long" mode="IN" name="idSolicitud" />
        <parameter class="java.lang.String" mode="IN" name="etiqueta" />
    </named-stored-procedure-query>

     <named-stored-procedure-query name="Comunicados.SP_historicoAfiliacionPersona" procedure-name="dbo.SP_HistoricoAfiliacionPersona">
        <parameter class="java.lang.String" mode="IN" name="idPersona" />
        <parameter class="java.lang.String" mode="IN" name="idEmpleador" />
        <parameter class="java.lang.Integer" mode="IN" name="tipoAfiliado" />
    </named-stored-procedure-query>

    <sql-result-set-mapping name="Consultar.comunicados.enviados.empleador.Mapping">
        <entity-result entity-class="com.asopagos.entidades.ccf.comunicados.Comunicado"></entity-result>
    </sql-result-set-mapping>

</entity-mappings>