<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd"
	version="2.1">

	<!-- ESPACIO PARA NAMED QUERIES JPA -->
	<named-query name="Consultar.SolicitudAporte.Id">
		<query>
			SELECT sa FROM SolicitudAporte sa WHERE sa.solicitudGlobal.idSolicitud
			=:idSolicitud
		</query>
	</named-query>
	<named-query name="consultar.operador.informacion.por.codigo">
		<query>
			SELECT oin.id FROM OperadorInformacion oin
			WHERE oin.codigo = :codigoOI
		</query>
	</named-query>
	<named-query name="consultar.operador.informacion.por.codigo.masivo">
		<query>
			SELECT oin FROM OperadorInformacion oin
			WHERE CAST(oin.codigo AS java.lang.Integer) IN (:codigoOI)
		</query>
	</named-query>
	<named-query name="AporteDetallado.Consultar.aporte.aporte.detallado">
		<query>
			SELECT apod FROM AporteDetallado apod WHERE apod.id = :idAporteDetallado
		</query>
	</named-query>
	<named-query
		name="Aportes.InformacionFaltanteAportante.buscarPorIdSolicitud">
		<query>
			SELECT infa FROM InformacionFaltanteAportante infa WHERE infa.idSolicitud
			=:idSolicitud
		</query>
	</named-query>
	<named-query name="Aportes.consulta.departamentos">
		<query>
			SELECT d FROM Departamento d
			ORDER BY d.codigo
		</query>
	</named-query>
	<named-query name="Aportes.consulta.municipios">
		<query>
			SELECT m FROM Municipio m
			ORDER BY m.codigo
		</query>
	</named-query>
	<named-query name="Consultar.Solicitante.Independientes.Pensionados">
		<description>Consultar un solicitante tipo independiente o pensionado
			por id, tipoSolicitante, tipoIdentificacion y numeroIdentificacion</description>
		<query>
			SELECT new com.asopagos.aportes.dto.SolicitanteDTO(per, apd)
			FROM Persona per, AporteDetallado apd, AporteGeneral apg
			WHERE per.idPersona = apd.idPersona
			AND apd.idAporteGeneral = apg.id
			AND apg.tipoSolicitante = :tipoSolicitante
			AND per.tipoIdentificacion = :tipoIdentificacion
			AND per.numeroIdentificacion = :numeroIdentificacion
		</query>
	</named-query>
	<named-query name="Consultar.Solicitante.Empleador">
		<description>Consultar un solicitante tipo empleador por id,
			tipoSolicitante, tipoIdentificacion y numeroIdentificacion</description>
		<query>
			SELECT new com.asopagos.aportes.dto.SolicitanteDTO(per, apg)
			FROM Persona per, AporteGeneral apg, Empresa emp
			WHERE emp.idEmpresa = apg.idEmpresa
			AND emp.persona.idPersona = per.idPersona
			AND apg.tipoSolicitante= :tipoSolicitante
			AND per.tipoIdentificacion = :tipoIdentificacion
			AND per.numeroIdentificacion = :numeroIdentificacion
		</query>
	</named-query>
	<named-query name="Aportes.aporte.general.consultar.persona.solicitante">
		<query>
			SELECT new com.asopagos.aportes.dto.SolicitanteDTO
			(apg.idPersona,apg.idEmpresa, per.tipoIdentificacion,per.numeroIdentificacion,
			apg.tipoSolicitante,per.primerNombre, per.segundoNombre,
			per.primerApellido, per.segundoApellido, per.razonSocial)
			FROM AporteGeneral apg, Persona per
			WHERE apg.idPersona = per.idPersona
			AND per.tipoIdentificacion =:tipoIdentificacion
			AND per.numeroIdentificacion =:numeroIdentificacion
			GROUP BY apg.idPersona,apg.idEmpresa, per.tipoIdentificacion,per.numeroIdentificacion,
			apg.tipoSolicitante,per.primerNombre, per.segundoNombre,
			per.primerApellido, per.segundoApellido, per.razonSocial
		</query>
	</named-query>
	<named-query
		name="Aportes.aporte.general.consultar.persona.empresa.solicitante">
		<query>
			SELECT new com.asopagos.aportes.dto.SolicitanteDTO
			(apg.idPersona,apg.idEmpresa, per.tipoIdentificacion,per.numeroIdentificacion,
			apg.tipoSolicitante,per.primerNombre, per.segundoNombre,
			per.primerApellido, per.segundoApellido,
			per.razonSocial)
			FROM AporteGeneral apg, Empresa empr, Persona per
			WHERE apg.idEmpresa
			= empr.idEmpresa
			AND empr.persona.idPersona = per.idPersona
			AND
			per.tipoIdentificacion =:tipoIdentificacion
			AND
			per.numeroIdentificacion =:numeroIdentificacion
			Group by apg.idPersona,apg.idEmpresa, per.tipoIdentificacion,per.numeroIdentificacion,
			apg.tipoSolicitante,per.primerNombre, per.segundoNombre,
			per.primerApellido, per.segundoApellido,
			per.razonSocial
		</query>
	</named-query>
	<named-query name="Aportes.buscar.file.nombreCampos">
		<query>   
		SELECT new com.asopagos.dto.DefinicionCamposCargaDTO(fieldl.label,fieldl.fieldLoadCatalog.name) 
		FROM FieldDefinitionLoad fieldl 
		LEFT JOIN fieldl.fieldLoadCatalog flc
		WHERE fieldl.lineDefinition.fileDefinition.id = :idFileDefinition
	   </query>
	</named-query>
	<named-query name="Consultar.SolicitudAporte.TipoIdenti.NumIdenti">
		<description>Consultar un solicitante por tipoIdentificacion y
			numeroIdentificacion. La consulta servirá para validar si existe una
			solicitud de aporte para un aportante que aún no esté cerrada. </description>
		<query>
			SELECT satn FROM SolicitudAporte satn WHERE
			satn.tipoIdentificacion = :tipoIdentificacion
			AND satn.numeroIdentificacion = :numeroIdentificacion
			AND satn.estadoSolicitud != :estadoSolicitud
		</query>
	</named-query>
	<named-query name="Consultar.Cotizantes.Por.idAporte">
		<description>Consulta para obtener un cotizante cuando se busca con al
			menos un parámetro de búsqueda durante un proceso de devolución de
			aportes.</description>
		<query>
			SELECT new com.asopagos.dto.aportes.CotizanteDTO(cot, apor, apd, 
			(SELECT count(mov.idMovimientoAporte) FROM MovimientoAporte mov WHERE mov.idAporteDetallado=apd.id
				AND mov.tipoAjuste IN (:movimientos)))
			FROM Persona cot, Persona apor, AporteDetallado apd, AporteGeneral apg
			WHERE apg.idPersona = apor.idPersona
			AND apd.idPersona = cot.idPersona
			AND apd.idAporteGeneral = apg.id
			AND apd.idPersona in (:idPersonas)
			AND apd.idAporteGeneral = :idAporte
		</query>
	</named-query>
	<named-query name="Consultar.Cotizantes.Por.idAporte.empresa">
		<description>Consulta para obtener un cotizante cuando se busca con al menos un parámetro de búsqueda durante un proceso de devolución de aportes.</description>
		<query>
			SELECT new com.asopagos.dto.aportes.CotizanteDTO(cot, emp, apd,
			(SELECT count(mov.idMovimientoAporte) FROM MovimientoAporte mov WHERE mov.idAporteDetallado=apd.id
				AND mov.tipoAjuste IN (:movimientos)))
            FROM Persona cot, Empresa emp, AporteDetallado apd, AporteGeneral apg
            WHERE apg.idEmpresa = emp.idEmpresa
            AND apd.idPersona = cot.idPersona
            AND apd.idAporteGeneral = apg.id
           	AND apd.idPersona in (:idPersonas)
           	AND apd.idAporteGeneral = :idAporte
		</query>
	</named-query>
	<named-query name="Aportes.consultar.aporteDetallado.registroDetallado">
		<description>Consulta de AporteDetallado por ID de RegistroDetallado</description>
		<query>
			SELECT apd
			FROM AporteDetallado apd
			WHERE apd.idRegistroDetallado = :idRegistroDetallado
		</query>
	</named-query>
	<named-query name="Aportes.consultar.aporteDetallado.registroDetallado.masivo">
		<description>Consulta de AporteDetallado por lista de ID de RegistroDetallado</description>
		<query>
			SELECT apd
			FROM AporteDetallado apd
			WHERE apd.idRegistroDetallado IN (:idRegistroDetallado)
		</query>
	</named-query>
	<named-query name="Aportes.consultar.aporteDetallado.idAporteGeneral.masivo">
		<description>Consulta de AporteDetallado por lista de ID de RegistroDetallado</description>
		<query>
            SELECT apd
            FROM AporteDetallado apd
            WHERE apd.idAporteGeneral IN (:idsAporteGeneral)
        </query>
	</named-query>
	<!-- ESPACIO PARA NAMED QUERIES JPA No Usuadas -->
	<named-query name="Aportes.Novedad.consultarHistorico">
		<query>
			SELECT new
			com.asopagos.aportes.dto.HistoricoNovedadesDTO(nd,s,roa) FROM
			SolicitudNovedad sn,
			Solicitud s,
			SolicitudNovedadPersona snp,
			NovedadDetalle nd,
			Persona p,
			RolAfiliado roa join roa.empleador empl join empl.empresa empr join empr.persona per 
			WHERE
			snp.idSolicitudNovedad = sn.idSolicitudNovedad
			and sn.solicitudGlobal
			= s.idSolicitud
			and sn.idSolicitudNovedad= nd.idSolicitudNovedad
			and
			roa.idRolAfiliado=snp.idRolAfiliado
			and p.idPersona= snp.idPersona
			and
			p.tipoIdentificacion=:tipoIdentificacion
			and
			p.numeroIdentificacion=:numeroIdentificacion
			and nd.fechaInicio
			BETWEEN :fechaInicio AND :fechaFin
		</query>
	</named-query>
	<named-query name="Aportes.Novedad.consultarHistoricoRetiro">
		<query>
			SELECT new
			com.asopagos.aportes.dto.HistoricoNovedadesDTO(s,roa) FROM
			SolicitudNovedad sn,
			Solicitud s,
			SolicitudNovedadPersona snp,
			Persona p,
			RolAfiliado roa join roa.empleador empl join empl.empresa empr join empr.persona per
			WHERE
			snp.idSolicitudNovedad = sn.idSolicitudNovedad
			and sn.solicitudGlobal= s.idSolicitud
			and
			roa.idRolAfiliado=snp.idRolAfiliado
			and p.idPersona= snp.idPersona
			and
			p.tipoIdentificacion=:tipoIdentificacion
			and
			p.numeroIdentificacion=:numeroIdentificacion
			and s.tipoTransaccion in (:novedadesRetiro)
			and roa.fechaRetiro
			BETWEEN :fechaInicio AND :fechaFin
			
		</query>
	</named-query>
	<named-query name="Aportes.Consultar.SolicitudAporte.IdAporteGeneral">
		<description>Consulta el registro de SolicitudAporte por identificador
			del aporte general</description>
		<query>
			SELECT sa
			FROM SolicitudAporte sa
			JOIN FETCH sa.solicitudGlobal
			WHERE sa.idRegistroGeneral = :idRegistroGeneral
		</query>
	</named-query>
	<named-query name="Aporte.Consultar.SolicitudAporte.ListadoId.RegistroGeneral">
		<description>Consulta de solicitud de aporte por listado de ids de registro general</description>
		<query>
            SELECT new com.asopagos.dto.modelo.SolicitudAporteModeloDTO(sa)
            FROM SolicitudAporte sa
            WHERE sa.idRegistroGeneral IN (:idsRegistroGeneral)
        </query>
	</named-query>
	<named-query
		name="Aportes.Consultar.SolicitudDevolucionAporte.IdSolicitudGlobal">
		<description>Consulta el registro de SolicitudDevolucionAporte por identificador de la solicitud global</description>
		<query>
			SELECT sa 
			FROM SolicitudDevolucionAporte sa 
			JOIN FETCH sa.solicitudGlobal
			WHERE sa.solicitudGlobal.idSolicitud = :idSolicitudGlobal
		</query>
	</named-query>
	<named-query
		name="Aportes.Consultar.SolicitudCorreccionAporte.IdSolicitudGlobal">
		<description>Consulta el registro de SolicitudCorreccionAporte por identificador de la solicitud global</description>
		<query>
			SELECT sa 
			FROM SolicitudCorreccionAporte sa 
			JOIN FETCH sa.solicitudGlobal
			WHERE sa.solicitudGlobal.idSolicitud = :idSolicitudGlobal
		</query>
	</named-query>
	<named-query name="Aportes.Consultar.Solicitud">
		<description>Consulta el registro de Solicitud por identificador</description>
		<query>
			SELECT so
			FROM Solicitud so
			WHERE so.idSolicitud = :idSolicitud
		</query>
	</named-query>
	<named-query name="Aportes.consultar.movimiento.aporte.id">
		<query>
			SELECT mov FROM MovimientoAporte mov
			WHERE mov.idMovimientoAporte=:idMovimientoAporte
			AND mov.tipoAjuste is not null
		</query>
	</named-query>
	<named-query name="Aportes.consultar.cuenta.aporte">
		<query>
			SELECT new
			com.asopagos.aportes.dto.CuentaAporteDTO(mov.tipoMovimiento,
			apg.estadoRegistroAporteAportante, mov.tipoAjuste,
			mov.valorAporte, mov.valorInteres,mov.idMovimientoAporte, mov.estadoAporte,
			apd.idAporteGeneral, apd.id, apd.estadoRegistroAporteCotizante, apd.tipoCotizante, mov.fechaCreacion, apg.fechaRecaudo, per)
			FROM MovimientoAporte mov, AporteDetallado apd, AporteGeneral apg, Persona per
			WHERE mov.idAporteDetallado = apd.id
			AND per.idPersona = apd.idPersona
			AND mov.tipoMovimiento in(:tiposMovimiento)
			AND apd.idAporteGeneral IN (:idsAporteGeneral)
			AND apd.idAporteGeneral = apg.id
			ORDER BY mov.idAporteDetallado,mov.fechaCreacion ASC
		</query>
	</named-query>
		<named-query name="Aportes.consultar.cuenta.aporte.builder">
		<query>
			SELECT new
			com.asopagos.aportes.dto.CuentaAporteDTO(mov.tipoMovimiento,
			apg.estadoRegistroAporteAportante, mov.tipoAjuste,
			mov.valorAporte , mov.valorInteres,mov.idMovimientoAporte, mov.estadoAporte,
			apd.idAporteGeneral, apd.id, apd.estadoRegistroAporteCotizante, apd.tipoCotizante, mov.fechaCreacion, CASE WHEN (mov.tipoAjuste = 'CORRECCION_A_LA_ALTA' OR mov.tipoAjuste = 'CORRECCION_A_LA_BAJA' OR mov.tipoAjuste = 'DEVOLUCION') AND EXISTS (SELECT 1 FROM AporteDetalladoRegistroControlN adn WHERE adn.moaId = mov.idMovimientoAporte) THEN (SELECT adn.regFechaPagoAporte FROM AporteDetalladoRegistroControlN adn WHERE adn.moaId = mov.idMovimientoAporte) ELSE apg.fechaRecaudo END, per)
			FROM MovimientoAporte mov, AporteDetallado apd, AporteGeneral apg, Persona per
			WHERE mov.idAporteDetallado = apd.id
			AND per.idPersona = apd.idPersona
			<!-- AND apd.id = adn.apdId -->
			AND apd.idAporteGeneral IN (:idsAporteGeneral)
			AND apd.idAporteGeneral = apg.id
			<!--ORDER BY mov.idAporteDetallado,mov.fechaCreacion ASC-->
		</query>
		<hint name="tipoMovimientoRecaudo" value="mov.tipoMovimiento"></hint>
		<hint name="estadoRegistroAporte" value="apg.estadoRegistroAporteAportante"></hint>
	    <hint name="tipoAjusteMonetario" value="mov.tipoAjuste"></hint>
		<hint name="ajuste" value="mov.valorAporte"></hint>
		<hint name="interesesAjuste" value="mov.valorInteres"></hint>
		<hint name="totalAjuste" value="mov.valorAporte"></hint>
		<hint name="estadoAporte" value="mov.estadoAporte"></hint>
		<hint name="idAporteDetallado" value="mov.idAporteDetallado"></hint>
		<hint name="tipoCotizante" value="apd.tipoCotizante"></hint>
		<hint name="fechaRegistro" value="mov.fechaCreacion"></hint>
		<hint name="fechaPago" value="apg.fechaRecaudo"></hint>	
		<hint name="tipoIdentificacionCotizante" value="per.tipoIdentificacion"></hint>	
		<hint name="numeroIdentificacionCotizante" value="per.numeroIdentificacion"></hint>	
		<hint name="aporteDeRegistro" value="mov.valorAporte"></hint>
		<hint name="interesesAporte" value="mov.valorInteres"></hint>
		<hint name="totalAporte" value="mov.valorAporte"></hint>
		<hint name="aporteFinalRegistro" value="mov.valorAporte"></hint>
		<hint name="interesesFinalAjuste" value="mov.valorInteres"></hint>
		<hint name="totalAporteFinal" value="mov.valorAporte"></hint>
		
		

		
	</named-query>
	
	<!-- <named-query name="Consultar.planilla"> <query> SELECT new
	com.asopagos.dto.aportes.AportePilaDTO(apGen, 
		apDet) FROM AporteGeneral apGen, AporteDetallado apDet WHERE apDet.idAporteGeneral 
		= apGen.id AND apGen.idRegistroGeneral = :idPlanilla </query> </named-query> -->
	<named-query
		name="Aportes.Consultar.persona.tipo.numero.identificacion.empleador">
		<description>Consulta encargada de obtener los aportes por tipo y
			numero de identificacion de la persona y verificar si cuentan con
			empleador</description>
		<query>SELECT apde FROM AporteDetallado apde,AporteGeneral apge,
			Persona per,Empresa emp,Empleador empl
			WHERE apge.id = apde.idAporteGeneral AND apde.idPersona = per.idPersona
			AND emp.idEmpresa = apge.idEmpresa
			AND empl.empresa.idEmpresa=emp.idEmpresa
			AND per.tipoIdentificacion= :tipoIdentificacion
			AND per.numeroIdentificacion= :numeroIdentificacion
		</query>
	</named-query>
	<named-query
		name="Aportes.Consultar.Aporte.Detallado.persona.estado.rolAfiliado">
		<description>Consulta que obtiene un empleador por tipo de
			identificacion y numero</description>
		<query>
			SELECT apode FROM AporteDetallado apode,
			AporteGeneral apoge,Persona per,
			Afiliado afi,RolAfiliado roa,Empresa emp,Empleador empl
			WHERE apoge.id = apode.idAporteGeneral AND per.idPersona=apode.idPersona
			AND
			per.idPersona=afi.persona.idPersona AND roa.afiliado.idAfiliado=afi.idAfiliado AND
			emp.idEmpresa=empl.empresa.idEmpresa AND
			emp.persona.idPersona=per.idPersona AND
			roa.estadoAfiliado =:estadoAfiliado AND empl.idEmpleador=:idEmpleador
		</query>
	</named-query>
	<named-query name="Aportes.Consultar.persona.tipo.numero.identificacion">
		<description>Consulta encargada de obtener los aportes por tipo y numero de identificacion</description>
		<query>SELECT apde FROM AporteDetallado apde,Persona per
			WHERE apde.idPersona = per.idPersona
			AND per.tipoIdentificacion= :tipoIdentificacion
			AND per.numeroIdentificacion= :numeroIdentificacion
		</query>
	</named-query>
	<named-query name="Aportes.Consultar.AporteGeneral">
		<description>Consulta encargada de obtener un aporte general, por id</description>
		<query>SELECT ag 
			   FROM AporteGeneral ag
			   WHERE ag.id = :idAporteGeneral
		</query>
	</named-query>
	<named-query name="Aportes.consultar.movimiento.detallado">
		<query>
			SELECT new com.asopagos.aportes.dto.MovimientoIngresosDetalladoDTO(
				apd.id, 
				apd.fechaCreacion, 
				apd.tipoCotizante,
            	per.tipoIdentificacion, 
            	per.numeroIdentificacion, 
            	per.primerNombre, 
            	per.segundoNombre, 
            	per.primerApellido, 
            	per.segundoApellido, 
            	apd.aporteObligatorio, 
            	apd.valorMora, 
            	apd.estadoAporteCotizante, 
            	apg.estadoRegistroAporteAportante, 
            	apg.fechaReconocimiento, 
            	apg.formaReconocimientoAporte,
            	apg.fechaRecaudo)
            FROM AporteDetallado apd, Persona per, AporteGeneral apg
            WHERE apd.idAporteGeneral = apg.id            
            AND apd.idPersona = per.idPersona
            AND apg.id = :idAporteGeneral
            ORDER BY apd.fechaCreacion DESC
		</query>
	</named-query>
	<!-- <named-query name="Aportes.Actualizar.Aporte.Detallado">
		<description>Update que se encarga de actualizar los aportes detallados</description>
		<query>
			UPDATE AporteDetallado apde SET 
			apde.fechaMovimiento = :fechaMovimiento,
			apde.estadoRegistroAporte = :estadoRegistroAporte, 
			apde.formaReconocimientoAporte = :formaReconocimientoAporte
			WHERE apde.id in :idsAporte							  
		</query>
	</named-query> -->
	
	
	


	<named-query name="Aportes.Consultar.Aportes.Relacionados">
		<description>Consulta que obtiene la lista de aportes relacionados de la tabla AporteGeneral, por persona</description>
		<query>
			SELECT new com.asopagos.aportes.dto.MovimientoIngresosDTO(per, apg)
            FROM Persona per, AporteGeneral apg
            WHERE per.idPersona = apg.idPersona
           	AND apg.tipoSolicitante IN (:tipoEntidad)
           	AND apg.fechaRecaudo BETWEEN :fechaInicio AND :fechaFin
            AND apg.estadoRegistroAporteAportante = :estadoRegistro
            AND apg.estadoAporteAportante = :estadoAporte
            AND apg.idEmpresa IS NULL
			AND (apg.valorTotalAporteObligatorio &gt; 0 or apg.valorInteresesMora &gt; 0)
		</query>
	</named-query>
	<named-query name="Aportes.Consultar.Aportes.Relacionados.Empresa">
		<description>Consulta que obtiene la lista de aportes relacionados de la tabla AporteGeneral, por empresa</description>
		<query>
			SELECT new com.asopagos.aportes.dto.MovimientoIngresosDTO(emp, apg)
            FROM Empresa emp, AporteGeneral apg
            WHERE emp.idEmpresa = apg.idEmpresa
           	AND apg.tipoSolicitante IN (:tipoEntidad)
           	AND apg.fechaRecaudo BETWEEN :fechaInicio AND :fechaFin
            AND apg.estadoRegistroAporteAportante = :estadoRegistro
            AND apg.estadoAporteAportante = :estadoAporte
            AND apg.idPersona IS NULL
			AND (apg.valorTotalAporteObligatorio &gt; 0 or apg.valorInteresesMora &gt; 0)
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.Persona.Empresa">
		<description>Consulta que obtiene los datos de una persona asociada a una empresa</description>
		<query>
			SELECT per
            FROM Persona per, Empresa emp
            WHERE per.idPersona = emp.persona.idPersona
           	AND emp.idEmpresa = :idEmpresa
		</query>
	</named-query>

	<named-query name="Aportes.AporteGeneral.idRegistroGeneral">
		<query>
			SELECT apg FROM AporteGeneral apg WHERE apg.idRegistroGeneral=:idRegistroGeneral
		</query>
	</named-query>

	<named-query name="Aportes.AporteGeneral.idRegistroGeneral.multiple">
		<description>Consulta para obtener los aportes generales de un id de registro general</description>
		<query>
            SELECT new com.asopagos.dto.modelo.AporteGeneralModeloDTO(apg) FROM AporteGeneral apg WHERE apg.idRegistroGeneral=:idRegistroGeneral
        </query>
	</named-query>

	<named-query name="Aportes.AporteGeneral.idRegistroGeneral.masivo">
		<query>
			SELECT DISTINCT new com.asopagos.dto.modelo.AporteGeneralModeloDTO(apg,
			(SELECT count(mov.idMovimientoAporte) FROM MovimientoAporte mov WHERE mov.idAporteGeneral=apg.id
			AND mov.tipoAjuste IN (:movimientos)))
			FROM AporteGeneral apg, AporteDetallado apd
			WHERE apd.idAporteGeneral = apg.id
			AND (:tienePersonas = 0 OR apd.idPersona IN (:idPersonas))
			AND apg.id IN (:idAporteGeneral)
		</query>
	</named-query>

	<named-query name="Aportes.AporteGeneral.idAporteGeneral.masivo">
		<query>
            SELECT new com.asopagos.dto.modelo.AporteGeneralModeloDTO(apg) 
            FROM AporteGeneral apg 
            WHERE apg.id IN (:idsAporteGeneral)
        </query>
	</named-query>

	<named-query name="Aportes.AporteGeneral.modalidadRecaudo.masivo">
		<query>
            SELECT new com.asopagos.dto.modelo.AporteGeneralModeloDTO(apg, 
			(SELECT count(mov.idMovimientoAporte) FROM MovimientoAporte mov WHERE mov.idAporteGeneral=apg.id
				AND mov.tipoAjuste IN (:movimientos))) 
			FROM AporteGeneral apg, AporteDetallado apd 
			WHERE apd.idAporteGeneral = apg.id
			AND (:tienePersonas = 0 OR apd.idPersona IN (:idPersonas))
            AND apg.modalidadRecaudoAporte = :modalidadRecaudo
        </query>
	</named-query>

	<named-query name="Consultar.Cotizantes.por.persona">
		<description>Consulta para obtener un cotizante cuando se busca con al
			menos un parámetro de búsqueda durante un proceso de devolución de
			aportes.</description>
		<query>
			SELECT new com.asopagos.dto.aportes.CotizanteDTO(apd.idPersona,per.primerNombre,per.segundoNombre,per.primerApellido,per.segundoApellido,per.tipoIdentificacion,per.numeroIdentificacion,apd.tipoCotizante)
			FROM AporteDetallado apd,Persona per where apd.idPersona = per.idPersona and apd.idPersona in (:idPersonas) 
			group by apd.idPersona,per.primerNombre,per.segundoNombre,per.primerApellido,per.segundoApellido,apd.tipoCotizante,per.tipoIdentificacion,per.numeroIdentificacion
		</query>
	</named-query>
	<named-query name="Consultar.aporte.general.id.persona">
		<query>
			SELECT new com.asopagos.dto.modelo.AporteGeneralModeloDTO(apg, 
			(SELECT count(mov.idMovimientoAporte) FROM MovimientoAporte mov WHERE mov.idAporteGeneral=apg.id
				AND mov.tipoAjuste IN (:movimientos)))
			FROM AporteGeneral apg, AporteDetallado apd 
			WHERE apd.idPersona=:idPersona
			AND apg.periodoAporte=:periodoAporte
			AND apd.idAporteGeneral = apg.id
		</query>
	</named-query>
	<named-query name="Consultar.persona.aporte.general">
		<query>
			SELECT per FROM Persona per, AporteGeneral apg
			WHERE apg.idPersona=per.idPersona
			AND per.idPersona=:idPersona
		</query>
	</named-query>
	<named-query name="Consultar.empresa.persona.aporte.general">
		<query>
			SELECT per FROM Persona per, AporteGeneral apg, Empresa emp
			WHERE apg.idEmpresa=emp.idEmpresa
			AND emp.persona.idPersona= per.idPersona
			AND emp.idEmpresa=:idEmpresa
		</query>
	</named-query>

	<named-query name="Consultar.movimiento.aporte.general">
		<query>
			SELECT new com.asopagos.dto.modelo.AporteGeneralModeloDTO(apg, 
			(SELECT count(mov.idMovimientoAporte) FROM MovimientoAporte mov WHERE mov.idAporteGeneral=apg.id
				AND mov.tipoAjuste IN (:movimientos)))
			FROM AporteGeneral apg
			WHERE apg.id IN (:idsAporte)
		</query>
	</named-query>
	<named-query name="Consultar.estado.aporte.general">
		<description>Constante que representa la consulta del estado de los registros en aporte general</description>
		<query>
			SELECT (CASE WHEN (COUNT(apGen.id) != 0) THEN true ELSE false END)
			FROM AporteGeneral apGen
			WHERE apGen.idRegistroGeneral = :idAporteGeneral
		</query>
	</named-query>
	<named-query name="Consultar.estado.aporte.detallado">
		<description>Constante que representa la consulta del estado de los registros en aporte detallado</description>
		<query>
			SELECT (CASE WHEN (COUNT(apDet.id) != 0) THEN true ELSE false END)
			FROM AporteDetallado apDet
			WHERE apDet.idRegistroDetallado = :idAporteDetallado
		</query>
	</named-query>
	<named-query name="Consultar.SolicitudCorreccionAporte.TipoIdenti.NumIdenti">
		<description>Consultar un solicitante por tipoIdentificacion y
			numeroIdentificacion. La consulta servirá para validar si existe una
			solicitud de corrección de aporte para un aportante que aún no esté cerrada. </description>
		<query>
			SELECT sca FROM SolicitudCorreccionAporte sca, Persona per 
			WHERE sca.idPersona =  per.idPersona
			AND per.tipoIdentificacion = :tipoIdentificacion
			AND per.numeroIdentificacion = :numeroIdentificacion
			AND sca.estadoSolicitud != :estadoSolicitud
		</query>
	</named-query>
	<named-query name="Consultar.SolicitudDevolucionAporte.TipoIdenti.NumIdenti">
		<description>Consultar un solicitante por tipoIdentificacion y
			numeroIdentificacion. La consulta servirá para validar si existe una
			solicitud de devolución de aporte para un aportante que aún no esté cerrada. </description>
		<query>
			SELECT sda FROM SolicitudDevolucionAporte sda, Persona per 
			WHERE sda.persona = per.idPersona
			AND per.tipoIdentificacion = :tipoIdentificacion
			AND per.numeroIdentificacion = :numeroIdentificacion
			AND sda.estadoSolicitud != :estadoSolicitud
		</query>
	</named-query>
	<named-query name="Aportes.Municipio.buscarMunicipioCodigo">
		<query>
			SELECT mun.idMunicipio FROM Municipio mun 
			WHERE mun.codigo =:codigoMunicipio
		</query>
	</named-query>
	<named-query name="Aportes.Municipio.buscarMunicipioCodigo.masivo">
		<query>
			SELECT mun FROM Municipio mun 
			WHERE mun.codigo IN (:codigoMunicipio)
		</query>
	</named-query>
	<named-query name="Aportes.Cotizante.Id.Persona">
		<query>
 			SELECT per FROM Persona per WHERE per.idPersona=:idPersona
 		</query>
	</named-query>
	<named-query name="Aportes.Consultar.empleador.sin.dia.vencimiento.aportes">
		<description>Consulta de empleadores que no cuentan con un día de vencimiento de aportes</description>
		<query>
			SELECT new com.asopagos.dto.AportanteDiaVencimientoDTO(
				'EMPLEADOR', 
				emp.empresa.persona.numeroIdentificacion, 
				emp.idEmpleador,
				(
					SELECT bem.idBeneficio 
					FROM BeneficioEmpleador bem 
					WHERE bem.idEmpleador = emp.idEmpleador
					AND bem.beneficioActivo = TRUE
				)
			)
			FROM Empleador emp  
			WHERE emp.diaHabilVencimientoAporte IS NULL
			AND emp.estadoEmpleador = :estado
		</query>
	</named-query>
	<named-query name="Aportes.Consultar.personas.sin.dia.vencimiento.aportes">
		<description>Consulta de independiente o pensionados que no cuentan con un día de venciemiento de aportes</description>
		<query>
			SELECT new com.asopagos.dto.AportanteDiaVencimientoDTO(
				CASE
					WHEN roa.tipoAfiliado = com.asopagos.enumeraciones.personas.TipoAfiliadoEnum.TRABAJADOR_INDEPENDIENTE 
					THEN 'INDEPENDIENTE' 
					ELSE 'PENSIONADO'
				END, 
				roa.afiliado.persona.numeroIdentificacion, 
				roa.idRolAfiliado
			)
			FROM RolAfiliado roa
			WHERE roa.diaHabilVencimientoAporte IS NULL
			AND roa.tipoAfiliado IN (:tiposAfiliados)
			AND roa.estadoAfiliado = com.asopagos.enumeraciones.personas.EstadoAfiliadoEnum.ACTIVO
		</query>
	</named-query>
	<named-query name="Aportes.Consultar.empleadores.por.listado.id">
		<description>Consulta de empleadores de acuerdo a listado de IDs de registro</description>
		<query>
			SELECT emp
			FROM Empleador emp 
			WHERE emp.idEmpleador IN (:listaEmpleadores)
		</query>
	</named-query>
	<named-query name="Aportes.Consultar.independientesPensionados.por.listado.id">
		<description>Consulta de independientes y pensionados de acuerdo a listado de IDs de registro</description>
		<query>
			SELECT roa
			FROM RolAfiliado roa
			WHERE roa.idRolAfiliado in (:listaIndPen)
		</query>
	</named-query>
	<named-query name="Aportes.Actualizar.empleadores.dia.vencimiento">
		<description>Sentencia para actualizar el día de vencimiento de aportes en empleadores</description>
		<query>
			UPDATE Empleador
			SET diaHabilVencimientoAporte = :diaVencimiento
			WHERE idEmpleador IN (:idsEmpleadores)
		</query>
	</named-query>
	<named-query name="Aportes.Actualizar.indPen.dia.vencimiento">
		<description>Sentencia para actualizar el día de vencimiento de aportes en independientes y pensionados</description>
		<query>
			UPDATE RolAfiliado
			SET diaHabilVencimientoAporte = :diaVencimiento
			WHERE idRolAfiliado IN (:idsIndPen)
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.AporteGeneral.Empleador">
		<description>Consulta que obtiene la lista de aportes generales por empleador</description>
		<query>
			SELECT apg
			FROM AporteGeneral apg, Empleador emd 
			WHERE apg.idEmpresa = emd.empresa.idEmpresa
			AND emd.idEmpleador = :idEmpleador 
			AND apg.estadoAporteAportante = :estadoAporteAportante
			AND apg.estadoRegistroAporteAportante = :estadoRegistroAporte
			AND apg.marcaPeriodo IS NOT NULL
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.AporteDetallado.IdsGeneral">
		<description>Consulta que obtiene la lista de aportes detallados, de acuerdo a los ids de aporte general</description>
		<query>
			SELECT apd
			FROM AporteDetallado apd 
			WHERE apd.idAporteGeneral IN (:listaIdAporteGeneral) 
			AND apd.estadoAporteCotizante = :estadoAporteAportante
			AND apd.estadoRegistroAporteCotizante = :estadoRegistroAporte
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.AporteGeneral.Persona">
		<description>Consulta que obtiene la lista de aportes generales asociados a un pensionado o independiente</description>
		<query>
			SELECT apg
			FROM AporteGeneral apg 
			WHERE apg.idPersona = :idPersona
			AND apg.tipoSolicitante = :tipoSolicitante
			AND apg.estadoAporteAportante = :estadoAporte
			AND apg.estadoRegistroAporteAportante = :estadoRegistroAporte
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.AporteDetallado.IdsGeneral.Persona">
		<description>Consulta que obtiene una lista de aportes detallados, para un pensionado o independiente</description>
		<query>
			SELECT apd
			FROM AporteDetallado apd 
			WHERE apd.idAporteGeneral IN (:listaIdAporteGeneral) 
			AND apd.estadoAporteCotizante = :estadoAporte
			AND apd.estadoRegistroAporteCotizante = :estadoRegistroAporte
			AND apd.idPersona = :idPersona
			AND apd.tipoCotizante = :tipoAfiliado
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.AporteDetallado.IdGeneral">
		<description>Consulta que obtiene una lista de aportes detallados asociados a un aportes general</description>
		<query>
			SELECT apd
			FROM AporteDetallado apd 
			WHERE apd.idAporteGeneral = :idAporteGeneral 
		</query>
	</named-query>
	<named-query name="Aportes.consultar.cuenta.aporte.cotizante">
		<query>
			SELECT new
			com.asopagos.aportes.dto.CuentaAporteDTO(mov.tipoMovimiento,
			apg.estadoRegistroAporteAportante, mov.tipoAjuste,
			mov.valorAporte, mov.valorInteres,mov.idMovimientoAporte, mov.estadoAporte,
			apd.idAporteGeneral, apd.id, apd.estadoRegistroAporteCotizante, apd.tipoCotizante, mov.fechaCreacion, apg.fechaRecaudo, per)
			FROM MovimientoAporte mov, AporteDetallado apd, AporteGeneral apg, Persona per
			WHERE mov.idAporteDetallado = apd.id
			AND per.idPersona=apd.idPersona
			AND (:tieneIdsAportes = 0 OR apd.idAporteGeneral IN (:idsAporteGeneral))
			AND apd.idAporteGeneral = apg.id
			AND apd.idPersona =:idPersona
			ORDER BY mov.idAporteDetallado,mov.fechaCreacion ASC
		</query>
	</named-query>
	<named-query name="Aportes.consultar.cuenta.aporte.cotizante.builder">
		<query>
			SELECT new
			com.asopagos.aportes.dto.CuentaAporteDTO(mov.tipoMovimiento,
			apg.estadoRegistroAporteAportante, mov.tipoAjuste,
			mov.valorAporte, mov.valorInteres,mov.idMovimientoAporte, mov.estadoAporte,
			apd.idAporteGeneral, apd.id, apd.estadoRegistroAporteCotizante, apd.tipoCotizante, mov.fechaCreacion, apg.fechaRecaudo, per)
			FROM MovimientoAporte mov, AporteDetallado apd, AporteGeneral apg, Persona per
			WHERE mov.idAporteDetallado = apd.id
			AND per.idPersona=apd.idPersona
			AND (:tieneIdsAportes = 0 OR apd.idAporteGeneral IN (:idsAporteGeneral))
			AND apd.idAporteGeneral = apg.id
			AND apd.idPersona =:idPersona
			AND (mov.tipoMovimiento in (:tipoMovimiento))
			<!--ORDER BY mov.idAporteDetallado,mov.fechaCreacion ASC-->
		</query>
		<hint name="tipoMovimientoRecaudo" value="mov.tipoMovimiento"></hint>
		<hint name="estadoRegistroAporte" value="apg.estadoRegistroAporteAportante"></hint>
	    <hint name="tipoAjusteMonetario" value="mov.tipoAjuste"></hint>
		<hint name="ajuste" value="mov.valorAporte"></hint>
		<hint name="interesesAjuste" value="mov.valorInteres"></hint>
		<hint name="totalAjuste" value="mov.valorAporte"></hint>
		<hint name="estadoAporte" value="mov.estadoAporte"></hint>
		<hint name="idAporteDetallado" value="mov.idAporteDetallado"></hint>
		<hint name="fechaRegistro" value="mov.fechaCreacion"></hint>
		<hint name="fechaPago" value="apg.fechaRecaudo"></hint>	
		<hint name="tipoIdentificacionCotizante" value="per.tipoIdentificacion"></hint>	
		<hint name="numeroIdentificacionCotizante" value="per.numeroIdentificacion"></hint>	
		<hint name="aporteDeRegistro" value="mov.valorAporte"></hint>
		<hint name="interesesAporte" value="mov.valorInteres"></hint>
		<hint name="totalAporte" value="mov.valorAporte"></hint>
		<hint name="aporteFinalRegistro" value="mov.valorAporte"></hint>
		<hint name="interesesFinalAjuste" value="mov.valorInteres"></hint>
		<hint name="totalAporteFinal" value="mov.valorAporte"></hint>

	</named-query>
	

	<named-query name="Aportes.Consultar.Persona.buscar.tipoNumId">
		<description>Busca una persona por id</description>
		<query>
			SELECT new com.asopagos.dto.modelo.PersonaModeloDTO(per) FROM Persona per
			WHERE CONCAT(per.tipoIdentificacion, per.numeroIdentificacion) in (:numeroIdentificacion)
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.Persona.buscar.listaId">
		<description>Busca una persona por id</description>
		<query>
            SELECT new com.asopagos.dto.modelo.PersonaModeloDTO(per) FROM Persona per
            WHERE per.idPersona in (:idPersonas)
        </query>
	</named-query>

	<named-query name="Aportes.Consultar.Empresa.buscar.idPersona.masivo">
		<description>Busca empresas por listado de id de persona</description>
		<query>
			SELECT new com.asopagos.dto.modelo.EmpresaModeloDTO(emp) FROM Empresa emp
			WHERE emp.persona.idPersona IN (:idPersonas)
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.Empleador.buscar.idEmpresa.masivo">
		<description>Busca empleadores por listado de id de empresa</description>
		<query>
			SELECT new com.asopagos.dto.modelo.EmpleadorModeloDTO(emp) 
			FROM Empleador emp
			WHERE emp.empresa.idEmpresa IN (:idEmpresas)
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.Empresa.buscar.id.masivo">
		<description>Busca empresas por listado de id</description>
		<query>
			SELECT e 
			FROM Empresa e 
            JOIN FETCH e.persona p
            LEFT JOIN FETCH p.ubicacionPrincipal u
            LEFT JOIN FETCH e.codigoCIIU c
            LEFT JOIN FETCH e.arl a
            WHERE e.idEmpresa IN (:idEmpresas)
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.Afiliado.buscar.idPersona.masivo">
		<description>Busca afiliados por listado de id de persona</description>
		<query>
			SELECT new com.asopagos.dto.modelo.AfiliadoModeloDTO(afi) FROM Afiliado afi
			WHERE afi.persona.idPersona IN (:idPersonas)
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.SucursalEmpresa.buscar.llave.masivo">
		<description>Busca sucursales de empresa por llave compuesta</description>
		<query>
			SELECT new com.asopagos.dto.modelo.SucursalEmpresaModeloDTO(sue) 
			FROM Empresa emp, SucursalEmpresa sue
			WHERE emp.idEmpresa = sue.idEmpresa
			AND CONCAT(emp.persona.tipoIdentificacion, emp.persona.numeroIdentificacion, sue.codigo, sue.nombre) in (:llavesSucursales)
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.RegistroPersonaInconsistente.buscar.id.masivo">
		<query>
			SELECT per.idPersona
			FROM RegistroPersonaInconsistente perInc, Persona per
			WHERE perInc.idPersona = per.idPersona
			AND per.idPersona IN (:idPersonas)
		</query>
	</named-query>

	<!-- ESPACIO PARA NAMED QUERIES NATIVOS -->
	<named-native-query name="Aportes.Consultar.Novedades.Cotizante.Aporte">
		<description>Consulta las novedades asociadas a un cotizante (aplicadas y no aplicadas), relacionadas a un aporte</description>
		<query>
			SELECT sol.solTipoTransaccion, nop.nopFechaInicio, nop.nopFechaFin, sol.solResultadoProceso
			FROM AporteDetallado apd
			JOIN SolicitudNovedadPila spi ON spi.spiRegistroDetallado = apd.apdRegistroDetallado
			JOIN NovedadDetalle nop ON nop.nopSolicitudNovedad = spi.spiSolicitudNovedad
			JOIN SolicitudNovedad sno ON sno.snoId = spi.spiSolicitudNovedad
			JOIN Solicitud sol ON sol.solId = sno.snoSolicitudGlobal
			WHERE apd.apdId = :idAporteDetallado 
			AND sol.solResultadoProceso IN ('APROBADA', 'RECHAZADA')
		</query>
	</named-native-query>

	<named-native-query
		name="Aportes.Consultar.TipoTransaccion.NovedadesRechazadas.Cotizante">
		<description>Consulta los tipos de transacción de novedades rechazadas para un aporte detallado (cotizante)</description>
		<query>
			SELECT sol.solTipoTransaccion
			FROM AporteDetallado apd
			JOIN SolicitudNovedadPila spi ON spi.spiRegistroDetallado = apd.apdRegistroDetallado
			JOIN SolicitudNovedad sno ON sno.snoId = spi.spiSolicitudNovedad
			JOIN Solicitud sol ON sol.solId = sno.snoSolicitudGlobal
			WHERE apd.apdId = :idAporteDetallado 
			AND sol.solResultadoProceso = 'RECHAZADA'
			union
			SELECT sol.solTipoTransaccion
			FROM AporteDetallado apd
			inner join pila.RegistroDetalladoPlanillaN as rdnp on apd.apdRegistroDetallado = rdnp.redRegistroDetalladoAnterior
			inner join SolicitudNovedadPila as spi on spi.spiRegistroDetallado = rdnp.redId
			JOIN SolicitudNovedad sno ON sno.snoId = spi.spiSolicitudNovedad
			JOIN Solicitud sol ON sol.solId = sno.snoSolicitudGlobal
			WHERE apd.apdId = :idAporteDetallado 
			AND sol.solResultadoProceso = 'RECHAZADA'
		</query>
	</named-native-query>
	<named-native-query name="Aportes.Consultar.Novedades.Retiro.Cotizante">
		<description>Consulta para obtener la fecha de retiro y el tipo de transaccion</description>
		<query>
			SELECT s.solTipoTransaccion, rd.redFechaRetiro 
			FROM 
			SolicitudNovedad sn 
			JOIN Solicitud s ON sn.snoSolicitudGlobal = s.solId
			JOIN SolicitudNovedadPersona snp ON snp.snpSolicitudNovedad = sn.snoId 
			JOIN SolicitudNovedadPila sp ON sp.spiSolicitudNovedad = sn.snoId 
			JOIN Persona p ON p.perId = snp.snpPersona
			JOIN RolAfiliado roa ON roa.roaId = snp.snpRolAfiliado
			JOIN pila.RegistroDetallado rd ON sp.spiRegistroDetallado = rd.redId
			WHERE p.perId = :idPersona
			and s.solTipoTransaccion in (:novedadesRetiro)
			and sp.spiRegistroDetallado = :idRegistroDetallado
			union 
			SELECT s.solTipoTransaccion, rd.redFechaRetiro 
			FROM 
			SolicitudNovedad sn 
			JOIN Solicitud s ON sn.snoSolicitudGlobal = s.solId
			JOIN SolicitudNovedadPersona snp ON snp.snpSolicitudNovedad = sn.snoId 
			JOIN SolicitudNovedadPila sp ON sp.spiSolicitudNovedad = sn.snoId 
			JOIN Persona p ON p.perId = snp.snpPersona
			JOIN RolAfiliado roa ON roa.roaId = snp.snpRolAfiliado
			join pila.RegistroDetalladoPlanillaN as rdnp on rdnp.redRegistroDetalladoAnterior = sp.spiRegistroDetallado
			JOIN pila.RegistroDetallado rd ON rd.redId = rdnp.redRegistroDetalladoAnterior
			WHERE p.perId = :idPersona
			and s.solTipoTransaccion in (:novedadesRetiro)
			and sp.spiRegistroDetallado = :idRegistroDetallado
			 			
		</query>
	</named-native-query>
	<named-query name="Aportes.Consultar.Cotizantes.RolAfiliado">
		<description>Consulta para obtener un cotizante cuando se busca por id del rol afiliado
		según lo encontrado en auditoria.</description>
		<query>
			SELECT new com.asopagos.dto.aportes.CotizanteDTO(per,roa)
			FROM RolAfiliado roa JOIN roa.afiliado afi
			JOIN afi.persona per
			WHERE 
			roa.idRolAfiliado in (:idRoles)
		</query>
	</named-query>
	<named-query name="Aportes.consultar.persona.tipo.numero.identificacion">
		<query>
			SELECT per FROM Persona per 
			WHERE per.tipoIdentificacion =:tipoIdentificacion 
			AND per.numeroIdentificacion =:numeroIdentificacion 
		</query>
	</named-query>
	<named-query name="Aportes.consultar.cuenta.aporte.sin.detalle">
		<query>
			SELECT new com.asopagos.aportes.dto.CuentaAporteDTO( mov.tipoMovimiento, 
			apg.estadoRegistroAporteAportante, mov.tipoAjuste, mov.valorAporte, mov.valorInteres,
			mov.idMovimientoAporte, mov.estadoAporte, apg.id, mov.fechaCreacion, apg.fechaRecaudo)
			FROM MovimientoAporte mov, AporteGeneral apg
			WHERE mov.idAporteGeneral = apg.id
			AND mov.idAporteDetallado is null
			AND apg.id IN (:idsAporteGeneral)
			ORDER BY mov.idAporteGeneral,mov.fechaCreacion ASC
		</query>
	</named-query>
		<named-query name="Aportes.consultar.cuenta.aporte.sin.detalle.builder">
		<query>
			SELECT new com.asopagos.aportes.dto.CuentaAporteDTO( mov.tipoMovimiento, 
			apg.estadoRegistroAporteAportante, mov.tipoAjuste, mov.valorAporte, mov.valorInteres,
			mov.idMovimientoAporte, mov.estadoAporte, apg.id, mov.fechaCreacion, apg.fechaRecaudo)
			FROM MovimientoAporte mov, AporteGeneral apg
			WHERE mov.idAporteGeneral = apg.id
			AND mov.idAporteDetallado is null
			AND apg.id IN (:idsAporteGeneral)
		<!--	ORDER BY mov.idAporteGeneral,mov.fechaCreacion ASC-->
		</query>
		<hint name="tipoMovimientoRecaudo" value="mov.tipoMovimiento"></hint>
		<hint name="estadoRegistroAporte" value="apg.estadoRegistroAporteAportante"></hint>
	    <hint name="tipoAjusteMonetario" value="mov.tipoAjuste"></hint>
		<hint name="ajuste" value="mov.valorAporte"></hint>
		<hint name="interesesAjuste" value="mov.valorInteres"></hint>
		<hint name="totalAjuste" value="mov.valorAporte"></hint>
		<hint name="estadoAporte" value="mov.estadoAporte"></hint>
		<hint name="idAporteDetallado" value="mov.idAporteDetallado"></hint>
		<hint name="fechaRegistro" value="mov.fechaCreacion"></hint>
		<hint name="fechaPago" value="apg.fechaRecaudo"></hint>	
		<hint name="tipoIdentificacionCotizante" value="mov.idAporteDetallado"></hint>	
		<hint name="numeroIdentificacionCotizante" value="mov.idAporteDetallado"></hint>	
		<hint name="aporteDeRegistro" value="mov.valorAporte"></hint>
		<hint name="interesesAporte" value="mov.valorInteres"></hint>
		<hint name="totalAporte" value="mov.valorAporte"></hint>
		<hint name="aporteFinalRegistro" value="mov.valorAporte"></hint>
		<hint name="interesesFinalAjuste" value="mov.valorInteres"></hint>
		<hint name="totalAporteFinal" value="mov.valorAporte"></hint>

	</named-query>
	
	<named-query name="Aportes.aporte.general.consultar.solicitante">
		<query>
			SELECT new com.asopagos.aportes.dto.SolicitanteDTO
			(apg.idPersona,per.tipoIdentificacion,per.numeroIdentificacion,
			apg.tipoSolicitante,per.primerNombre, per.segundoNombre,
			per.primerApellido, per.segundoApellido, per.razonSocial)
			FROM AporteGeneral apg, Persona per
			WHERE apg.idPersona IN (:idsPersona)
			AND apg.idPersona = per.idPersona
			AND apg.empresaTramitadoraAporte is null
			GROUP BY apg.idPersona, per.tipoIdentificacion,per.numeroIdentificacion,
			apg.tipoSolicitante,per.primerNombre, per.segundoNombre,
			per.primerApellido, per.segundoApellido, per.razonSocial
		</query>
	</named-query>
	<named-query name="Aportes.aporte.general.consultar.solicitante.empresa">
		<query>
			SELECT new com.asopagos.aportes.dto.SolicitanteDTO
			(per.tipoIdentificacion,per.numeroIdentificacion,
			apg.tipoSolicitante,per.primerNombre, per.segundoNombre,
			per.primerApellido, per.segundoApellido, per.razonSocial, emp.idEmpresa, per.idPersona)
			FROM AporteGeneral apg, Empresa emp, Persona per
			WHERE (apg.idEmpresa = emp.idEmpresa or apg.empresaTramitadoraAporte = emp.idEmpresa )
			AND emp.persona.idPersona IN (:idsPersona)
			AND per.idPersona = emp.persona.idPersona
			GROUP BY per.tipoIdentificacion,per.numeroIdentificacion,
			apg.tipoSolicitante,per.primerNombre, per.segundoNombre,
			per.primerApellido, per.segundoApellido, per.razonSocial, emp.idEmpresa, per.idPersona
		</query>
	</named-query>
	<named-query name="Aportes.persona.tipo.numero.identificacion">
		<query>
			Select new com.asopagos.dto.PersonaDTO(per)
			from Persona per
			where per.tipoIdentificacion=:tipoIdentificacion
			and per.numeroIdentificacion=:numeroIdentificacion
		</query>
	</named-query>
	<named-query name="Aportes.empresa.id.persona">
		<query>
			SELECT new com.asopagos.dto.EmpresaDTO(emp)
			From Empresa emp
			where emp.persona.idPersona=:idPersona
		</query>
	</named-query>
	<named-query
		name="Aportes.Consultar.SolicitudCorreccionAporte.idAporteGeneral">
		<description>Consulta el registro de SolicitudCorreccionAporte por identificador del aporte general</description>
		<query>
			SELECT sa 
			FROM SolicitudCorreccionAporte sa JOIN FETCH sa.solicitudGlobal s, Correccion cor
			WHERE cor.idSolicitudCorreccionAporte = sa.idSolicitudCorreccionAporte 
			AND cor.idAporteGeneralNuevo = :idAporteGeneral
		</query>
	</named-query>
	<named-query
		name="Aportes.Consultar.SolicitudCierreRecaudo.numeroRadicacion">
		<description>Consulta el registro de SolicitudCierreRecaudo por número de radicación</description>
		<query>
			SELECT sc 
			FROM SolicitudCierreRecaudo sc  JOIN FETCH sc.solicitudGlobal sol
			WHERE sol.numeroRadicacion = :numeroRadicacion
		</query>
	</named-query>

	<!-- portes.Consultar.SolicitudCierreRecaudo.fechas.resultado Cierre de recaudo -->
	<named-query
		name="Aportes.Consultar.SolicitudCierreRecaudo.fechas.resultado">
		<description>Consulta el registro de SolicitudCierreRecaudo por fechas y estado</description>
		<query>
			SELECT sc 
			FROM SolicitudCierreRecaudo sc  
			JOIN FETCH sc.solicitudGlobal sol
			WHERE (sc.fechaInicio BETWEEN :fechaInicio AND :fechaFin
			      OR sc.fechaFin BETWEEN :fechaInicio AND :fechaFin)
				  AND sol.resultadoProceso NOT IN (:resultadoProceso)
			      AND  (sc.estadoSolicitud=:estado ) 
			      AND sc.tipoCierre = :tipoCierre
			      
		</query>
	</named-query>
	<named-query
		name="Aportes.Consultar.SolicitudCierreRecaudo.historico.fechas">
		<description>Consulta el registro de SolicitudCierreRecaudo por fechas y estado</description>
		<query>
			SELECT sc 
			FROM SolicitudCierreRecaudo sc  JOIN FETCH sc.solicitudGlobal sol
			WHERE sc.fechaInicio &gt;=:fechaInicio
			AND sc.fechaFin &lt;=:fechaFin
		</query>
	</named-query>
	<named-query
		name="Aportes.Consultar.SolicitudCierreRecaudo.historico.fechas.numeroRadicacion">
		<description>Consulta el registro de SolicitudCierreRecaudo por fechas y estado</description>
		<query>
			SELECT sc 
			FROM SolicitudCierreRecaudo sc  JOIN FETCH sc.solicitudGlobal sol
			WHERE sc.fechaInicio &gt;=:fechaInicio
			AND sc.fechaFin &lt;=:fechaFin
			AND sc.estadoSolicitud in (:estados)
			AND sol.numeroRadicacion = :numeroRadicacion
		</query>
	</named-query>
	<named-query
		name="Aportes.Consultar.SolicitudCierreRecaudo.historico.fechas.sin.numeroRadicacion">
		<description>Consulta el registro de SolicitudCierreRecaudo por fechas y estado</description>
		<query>
			SELECT sc 
			FROM SolicitudCierreRecaudo sc  JOIN FETCH sc.solicitudGlobal sol
			WHERE sc.fechaInicio &gt;=:fechaInicio
			AND sc.fechaFin &lt;=:fechaFin
			AND sc.estadoSolicitud in (:estados)
		</query>
	</named-query>
	<named-query name="Aportes.Consultar.SolicitudCierreRecaudo.historico.numeroRadicacion">
		<description>Consulta el registro de SolicitudCierreRecaudo por numero de radicación</description>
		<query>
			SELECT sc 
			FROM SolicitudCierreRecaudo sc  JOIN FETCH sc.solicitudGlobal sol
			WHERE sol.numeroRadicacion = :numeroRadicacion
		</query>
	</named-query>
	<named-query name="Aportes.consultar.tasaInteresMora">
		<query>
			SELECT new com.asopagos.dto.modelo.TasasInteresMoraModeloDTO(tim) FROM TasasInteresMora tim
		</query>
	</named-query>
	<named-query name="Aportes.consultar.tasaInteresMora.porPeriodo">
		<query>
			SELECT new com.asopagos.dto.modelo.TasasInteresMoraModeloDTO(tim)
			FROM TasasInteresMora tim
			WHERE tim.id = :idTasa
		</query>
	</named-query>
	<named-native-query name="Aportes.consultar.aportes.registrados">
		<description>
			Aportes Manuales y Pila
				:fechaInicio
				:fechaFin
				:estadoRegistro='REGISTRADO'
				:tipoMovimiento = 'RECAUDO_PILA_AUTOMATICO','RECAUDO_MANUAL','RECAUDO_MANUAL_APORTES'
				:origenAporte = 'CORRECCION_APORTE'
		</description>
		<query>
			SELECT sum(montoAporte) as valorAporte, sum(montoInteres) as valorInteres, tipoSolicitante, marcaPeriodo from (
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo 
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			JOIN AporteDetallado apd ON apd.apdAporteGeneral=apg.apgId
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in (:tipoMovimiento)
			AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgApoConDetalle=1
			AND apd.apdId = moa.moaAporteDetallado
			AND (apg.apgOrigenAporte not in (:origenAporte) or apg.apgOrigenAporte is null)
			GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo 
			UNION
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres,
			(Case when apg.apgTipoSolicitante ='EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			WHEN apg.apgTipoSolicitante ='INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' END) as tipoSolicitante, 
			apg.apgMarcaPeriodo as marcaPeriodo
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in (:tipoMovimiento)
			AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgApoConDetalle=0
			AND (apg.apgOrigenAporte not in (:origenAporte) or apg.apgOrigenAporte is null)
			GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo ) aportes GROUP by tipoSolicitante, marcaPeriodo
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.aportes.relacionados.215">
		<description>
			Aportes Manuales y Pila
				:fechaInicio
				:fechaFin
				:estadoRegistro='RELACIONADO'
				formaReconocimiento = NULL
				:tipoMovimiento = 'RECAUDO_PILA_AUTOMATICO','RECAUDO_MANUAL','RECAUDO_MANUAL_APORTES'
				:origenAporte = 'CORRECCION_APORTE'
		</description>
		<query>
			SELECT sum(montoAporte) as valorAporte, sum(montoInteres) as valorInteres, tipoSolicitante, marcaPeriodo from (
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo 
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			JOIN AporteDetallado apd ON apd.apdAporteGeneral=apg.apgId
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in (:tipoMovimiento)
			AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte is null
			AND apg.apgApoConDetalle=1
			AND apd.apdId = moa.moaAporteDetallado
			AND (apg.apgOrigenAporte not in (:origenAporte) or apg.apgOrigenAporte is null)
			GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo 
			UNION
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			(Case when apg.apgTipoSolicitante ='EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			WHEN apg.apgTipoSolicitante ='INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' END) as tipoSolicitante, 
			apg.apgMarcaPeriodo as marcaPeriodo
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in (:tipoMovimiento)
			AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte is null
			AND apg.apgApoConDetalle=0
			AND (apg.apgOrigenAporte not in (:origenAporte) or apg.apgOrigenAporte is null)
			GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo ) aportes GROUP by tipoSolicitante, marcaPeriodo
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.devoluciones.registrados">
		<description>
			Devoluciones
				:fechaInicio
				:fechaFin
				:estadoRegistro='REGISTRADO'
				formaReconocimiento IS NOT NULL
				:tipoMovimiento = 'DEVOLUCION_APORTES'
		</description>
		<query>
			SELECT sum(montoAporte) as valorAporte, sum(montoInteres) as valorInteres, tipoSolicitante, marcaPeriodo from (
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo 
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			JOIN AporteDetallado apd ON apd.apdAporteGeneral=apg.apgId
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in (:tipoMovimiento)
			AND moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte IS NOT NULL
			AND apg.apgApoConDetalle=1
			AND apd.apdId = moa.moaAporteDetallado
			GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo 
			UNION
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			(Case when apg.apgTipoSolicitante ='EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			WHEN apg.apgTipoSolicitante ='INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' END) as tipoSolicitante, 
			apg.apgMarcaPeriodo as marcaPeriodo
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in (:tipoMovimiento)
			AND moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte IS NOT NULL
			AND apg.apgApoConDetalle=0
			GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo ) aportes GROUP by tipoSolicitante, marcaPeriodo
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.devoluciones.relacionados">
		<description>
			Devoluciones
				:fechaInicio
				:fechaFin
				:estadoRegistro='RELACIONADO'
				formaReconocimiento = NULL
				:tipoMovimiento = 'DEVOLUCION_APORTES'
		</description>
		<query>
			SELECT sum(montoAporte) as valorAporte, sum(montoInteres) as valorInteres, tipoSolicitante, marcaPeriodo from (
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo 
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			JOIN AporteDetallado apd ON apd.apdAporteGeneral=apg.apgId
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in (:tipoMovimiento)
			AND moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte is null
			AND apg.apgApoConDetalle=1
			AND apd.apdId = moa.moaAporteDetallado
			GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo 
			UNION
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			(Case when apg.apgTipoSolicitante ='EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			WHEN apg.apgTipoSolicitante ='INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' END) as tipoSolicitante, 
			apg.apgMarcaPeriodo as marcaPeriodo
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in (:tipoMovimiento)
			AND moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte is null
			AND apg.apgApoConDetalle=0
			GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo ) aportes GROUP by tipoSolicitante, marcaPeriodo
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.correcciones.registrados">
		<description>
			Correcciones
				:fechaInicio
				:fechaFin
				:estadoRegistro='REGISTRADO'
				formaReconocimiento IS NOT NULL
				:tipoMovimiento = 'CORRECCION_APORTES'
				:origenAporte = 'CORRECCION_APORTE'
		</description>
		<query>
			SELECT sum(montoAporte) as valorAporte, sum(montoInteres) as valorInteres, tipoSolicitante, marcaPeriodo from (
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo 
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			JOIN AporteDetallado apd ON apd.apdAporteGeneral=apg.apgId
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in ('RECAUDO_MANUAL')
			AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte IS NOT NULL
			AND apg.apgApoConDetalle=1
			AND apd.apdId = moa.moaAporteDetallado
			AND apg.apgOrigenAporte in (:origenAporte)
			GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo 
			UNION
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			(Case when apg.apgTipoSolicitante ='EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			WHEN apg.apgTipoSolicitante ='INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' END) as tipoSolicitante, 
			apg.apgMarcaPeriodo as marcaPeriodo
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in ('RECAUDO_MANUAL')
			AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte IS NOT NULL
			AND apg.apgApoConDetalle=0
			AND apg.apgOrigenAporte in (:origenAporte)
			GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo 
			UNION
			SELECT -SUM(moa.moaValorAporte) as montoAporte, -SUM(moa.moaValorInteres) as montoInteres ,
			apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo 
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			JOIN AporteDetallado apd ON apd.apdAporteGeneral=apg.apgId
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in ('CORRECCION_APORTES')
			AND moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte IS NOT NULL
			AND apg.apgApoConDetalle=1
			AND apd.apdId = moa.moaAporteDetallado
			GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo 
			UNION
			SELECT -SUM(moa.moaValorAporte) as montoAporte, -SUM(moa.moaValorInteres) as montoInteres ,
			(Case when apg.apgTipoSolicitante ='EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			WHEN apg.apgTipoSolicitante ='INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' END) as tipoSolicitante, 
			apg.apgMarcaPeriodo as marcaPeriodo
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in ('CORRECCION_APORTES')
			AND moa.moaFechaCreacion  BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte IS NOT NULL
			AND apg.apgApoConDetalle=0
			GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo
			) aportes GROUP by tipoSolicitante, marcaPeriodo
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.correcciones.relacionados">
		<description>
			Correcciones
				:fechaInicio
				:fechaFin
				:estadoRegistro='RELACIONADO'
				formaReconocimiento = NULL
				:tipoMovimiento = 'CORRECCION_APORTES'
				:origenAporte = 'CORRECCION_APORTE'
		</description>
		<query>
			SELECT sum(montoAporte) as valorAporte, sum(montoInteres) as valorInteres, tipoSolicitante, marcaPeriodo from (
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo 
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			JOIN AporteDetallado apd ON apd.apdAporteGeneral=apg.apgId
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in ('RECAUDO_MANUAL')
			AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte is null
			AND apg.apgApoConDetalle=1
			AND apd.apdId = moa.moaAporteDetallado
			AND apg.apgOrigenAporte in (:origenAporte)
			GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo 
			UNION
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			(Case when apg.apgTipoSolicitante ='EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			WHEN apg.apgTipoSolicitante ='INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' END) as tipoSolicitante, 
			apg.apgMarcaPeriodo as marcaPeriodo
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in ('RECAUDO_MANUAL')
			AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte is null
			AND apg.apgApoConDetalle=0
			AND apg.apgOrigenAporte in (:origenAporte)
			GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo 
			UNION
			SELECT -SUM(moa.moaValorAporte) as montoAporte, -SUM(moa.moaValorInteres) as montoInteres ,
			apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo 
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			JOIN AporteDetallado apd ON apd.apdAporteGeneral=apg.apgId
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in ('CORRECCION_APORTES')
			AND moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte IS NULL
			AND apg.apgApoConDetalle=1
			AND apd.apdId = moa.moaAporteDetallado
			GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo 
			UNION
			SELECT -SUM(moa.moaValorAporte) as montoAporte, -SUM(moa.moaValorInteres) as montoInteres ,
			(Case when apg.apgTipoSolicitante ='EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			WHEN apg.apgTipoSolicitante ='INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' END) as tipoSolicitante, 
			apg.apgMarcaPeriodo as marcaPeriodo
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND moa.moaTipoMovimiento in ('CORRECCION_APORTES')
			AND moa.moaFechaCreacion  BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte IS NULL
			AND apg.apgApoConDetalle=0
			GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo) aportes GROUP by tipoSolicitante, marcaPeriodo
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.registrados.legalizados">
		<description>
			Registrados (Legalizados)
				:fechaInicio
				:fechaFin
				:estadoRegistro='REGISTRADO'
				:formaReconocimiento = 'RECONOCIMIENTO_RETROACTIVO_AUTOMATICO', 'RECONOCIMIENTO_RETROACTIVO_MANUAL'
				:tipoMovimiento = 'RECAUDO_MANUAL','RECAUDO_MANUAL_APORTES','RECAUDO_PILA_AUTOMATICO'
		</description>
		<query>
			SELECT sum(montoAporte) as valorAporte, sum(montoInteres) as valorInteres, tipoSolicitante, marcaPeriodo from (
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo 
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			JOIN AporteDetallado apd ON apd.apdAporteGeneral=apg.apgId
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND apg.apgFechaReconocimiento BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte in (:formaReconocimiento) 
			AND apg.apgApoConDetalle=1
			AND apd.apdId = moa.moaAporteDetallado
			AND moa.moaTipoMovimiento in (:tipoMovimiento)
			GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo 
			UNION
			SELECT SUM(moa.moaValorAporte) as montoAporte, SUM(moa.moaValorInteres) as montoInteres ,
			(Case when apg.apgTipoSolicitante ='EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			WHEN apg.apgTipoSolicitante ='INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' END) as tipoSolicitante, 
			apg.apgMarcaPeriodo as marcaPeriodo
			FROM AporteGeneral apg JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			WHERE apg.apgEstadoRegistroAporteAportante=:estadoRegistro
			AND apg.apgFechaReconocimiento BETWEEN :fechaInicio AND :fechaFin
			AND apg.apgFormaReconocimientoAporte in (:formaReconocimiento) 
			AND apg.apgApoConDetalle=0
			AND moa.moaTipoMovimiento in (:tipoMovimiento)
			GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo ) aportes GROUP by tipoSolicitante, marcaPeriodo
		</query>
	</named-native-query>
	<named-query name="Aportes.Consultar.AporteDetallado.IdsGeneral.Vista.360">
		<description>Consulta que obtiene la lista de aportes detallados, de acuerdo a los ids de aporte general para vista 360</description>
		<query>
			SELECT apd
			FROM AporteDetallado apd 
			WHERE apd.idAporteGeneral IN (:listaIdAporteGeneral) 
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.Solicitud.Devolucion.Vista360.Por.IdAporte.IdMovimiento">
		<description>consulta que obtiene la lista de devoluciones dados a los ids de aporte general y aporte detallado para
      la vista 360 de aportes</description>
		<query>
			SELECT sd
			FROM DevolucionAporte d, DevolucionAporteDetalle dd ,SolicitudDevolucionAporte sd JOIN FETCH sd.solicitudGlobal so,
			MovimientoAporte ma
			WHERE
			d.idDevolucionAporte = dd.devolucionAporte
			AND dd.movimientoAporte = ma.idMovimientoAporte
			AND sd.devolucionAporte = d.idDevolucionAporte
			AND ma.idAporteGeneral =:idsAporteGeneral
			AND ma.idMovimientoAporte =:idMovimiento
			AND ma.tipoAjuste=:tipoAjuste
		</query>
	</named-query>

	<named-native-query name="Aportes.Consultar.Solicitud.Devolucion.idsAporte">
		<description>consulta que obtiene la lista de devoluciones dados a los ids de aporte general y aporte detallado para
      la vista 360 de aportes</description>
		<query>
			SELECT ma.moaAporteGeneral, sd.sdaId, so.solId,SUM(ma.moaValorAporte) as montoAporte, 
			SUM(ma.moaValorInteres) as montoInteres, so.solFechaRadicacion
			FROM DevolucionAporte d, DevolucionAporteDetalle dd ,SolicitudDevolucionAporte sd, Solicitud so,
			MovimientoAporte ma
			WHERE d.dapId = dd.dadDevolucionAporte
			AND so.solId = sd.sdaSolicitudGlobal
			AND dd.dadMovimientoAporte = ma.moaId
			AND sd.sdaDevolucionAporte = d.dapId
			AND ma.moaAporteGeneral in (:idsAporteGeneral)
			AND ma.moatipoAjuste=:tipoAjuste group by ma.moaAporteGeneral, sd.sdaId, so.solId, so.solFechaRadicacion
			order by sd.sdaId
		</query>
	</named-native-query>
	<named-query name="Aportes.Consultar.Detalle.Devolucion.Vista360.Por.IdAporte">
		<description>consulta que obtiene detalle de la devolucion dado el id de aporte general la vista 360 de aportes</description>
		<query>
			SELECT new com.asopagos.aportes.dto.DetalleDevolucionVista360DTO(d,mp.tipoMediopago,mp.idMedioPago)
			FROM DevolucionAporte d, SolicitudDevolucionAporte sd, MedioDePago mp
			WHERE d.idDevolucionAporte = sd.devolucionAporte
			AND d.medioPago = mp.idMedioPago
			AND sd.idSolicitudDevolucionAporte =:idSolicitudDevolucion
		</query>
	</named-query>

	<named-query name="Consultar.Identificador.Aporte.General.Por.Id.Cotizante.Vista360.Persona">
		<description>consulta el id del aporte general cuando se accede desde la vista de persona</description>
		<query>
			SELECT ag.id
			FROM AporteGeneral ag, AporteDetallado apd 
			WHERE ag.id = apd.idAporteGeneral AND apd.idPersona =:idPersona 
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.Solicitud.Correcion.Vista360.Por.IdAporte">
		<description>consulta que obtiene la lista de devoluciones dados a los ids de aporte general y aporte detallado para
      la vista 360 de aportes</description>
		<query>
			SELECT sc
			FROM SolicitudCorreccionAporte sc JOIN FETCH sc.solicitudGlobal sol
			WHERE sc.idAporteGeneralNuevo in (:idsAporteGeneral)
			AND sc.estadoSolicitud='CERRADA'
		</query>
	</named-query>

	<named-query name="Aportes.Consultar.Detalle.Correccion.Cotizante.Vista360">
		<description>consulta que obtiene detalle de la correcion del cotizante por el identificador de la solicitud de corrección</description>
		<query>
            SELECT new com.asopagos.aportes.dto.DetalleCorreccionCotizanteVista360DTO(p,ma,ag,ad, 
                CASE 
                    WHEN ag.idPersona IS NOT NULL THEN (SELECT pap.razonSocial FROM Persona pap WHERE pap.idPersona = ag.idPersona)
                    WHEN ag.idEmpresa IS NOT NULL THEN (SELECT emp.persona.razonSocial FROM Empresa emp WHERE emp.idEmpresa = ag.idEmpresa)
                END
            )
			FROM SolicitudCorreccionAporte sca, Correccion cor, AporteGeneral ag, AporteDetallado ad,MovimientoAporte ma, Persona p
			WHERE ma.idAporteDetallado = ad.id
			AND p.idPersona = ad.idPersona
			AND ma.tipoAjuste =:tipoAjuste
			AND ag.id = ad.idAporteGeneral
			AND cor.idAporteDetalladoCorregido = ma.idAporteDetallado
			AND cor.idSolicitudCorreccionAporte = sca.idSolicitudCorreccionAporte
			AND sca.idAporteGeneralNuevo = ag.id
			AND sca.idSolicitudCorreccionAporte =:idSolicitudCorreccion
		</query>
	</named-query>
	<named-query name="Aportes.Consultar.Detalle.Correccion.Aportante.Vista360">
		<description>consulta que obtiene detalle de la correcion del aportante por tipo identificacion y numero identificacion</description>
		<query>
			SELECT new com.asopagos.aportes.dto.DetalleCorreccionAportanteVista360DTO(p.tipoIdentificacion, p.numeroIdentificacion, 
			p.primerNombre, p.segundoNombre, p.primerApellido, p.segundoApellido, p.razonSocial, a.tipoSolicitante, a.origenAporte, 
			a.periodoAporte, a.codigoEntidadFinanciera, a.idRegistroGeneral, sum(m.valorAporte) as monto, sum(m.valorInteres) as interes)
			FROM SolicitudCorreccionAporte sca, Correccion cor, AporteGeneral a, MovimientoAporte m, Persona p
				WHERE m.tipoAjuste =:tipoAjuste
				and m.idAporteGeneral = a.id
				and ((m.idAporteDetallado = cor.idAporteDetalladoCorregido)
					or (m.idAporteDetallado IS NULL AND cor.idAporteDetalladoCorregido IS NULL))
				and cor.idSolicitudCorreccionAporte=sca.idSolicitudCorreccionAporte
				and sca.idPersona = p.idPersona
				AND sca.idAporteGeneralNuevo = a.id
				AND sca.idSolicitudCorreccionAporte=:idSolicitudCorreccion
				group by p.tipoIdentificacion, p.numeroIdentificacion, 
			p.primerNombre, p.segundoNombre, p.primerApellido, p.segundoApellido, a.tipoSolicitante, a.origenAporte, a.periodoAporte, 
			a.codigoEntidadFinanciera, a.idRegistroGeneral, p.razonSocial
		</query>
	</named-query>

	<named-native-query name="Consultar.detalle.correccion.cotizante.native" 
		result-set-mapping="Consultar.detalle.correccion.cotizante.native.mapping">
		<description>consulta que obtiene detalle de la correcion del cotizante por id aporte general tipo identificacion y numero identificacion</description>
		<query>

			WITH EmpresaPersona AS (
			SELECT emp.empId, emp.empPersona
			FROM Empresa emp
			)
			SELECT
			a.apgId as idAporteGeneral,
			ad.apdId as idAporteDetallado,
			pd.perTipoIdentificacion as tipoIdentificacionCotizante,
			pd.perNumeroIdentificacion as numeroIdentificacionCotizante,
			a.apgPagadorPorTerceros as pagadorPorTerceros,
			ad.apdTipoCotizante as tipoAfiliado,
			ma.moaEstadoAporte as estadoAporte,
			ma.moaValorAporte as valorAporte,
			ma.moaValorInteres as valorInteres,
			SUM(ma.moaValorInteres + ma.moaValorAporte) as totalAporte,
			pa.perRazonSocial as nombreCompletoAportante,
			pa.perTipoIdentificacion as tipoIdentificacionAportante,
			pa.perNumeroIdentificacion as numeroIdentificacionAportante,
			CONCAT(
			COALESCE(pd.perPrimerNombre, ''), ' ',
			COALESCE(pd.perSegundoNombre, ''), ' ',
			COALESCE(pd.perPrimerApellido, ''), ' ',
			COALESCE(pd.perSegundoApellido, '')
			) as nombreCompletoCotizante,
			CASE WHEN EXISTS (
			SELECT 1
			FROM MovimientoAporte ma2
			WHERE ma2.moaAporteDetallado = ad.apdId
			AND ma2.moaTipoMovimiento IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')
			) THEN 1 ELSE 0 END as tieneModificaciones,
			COALESCE(ad.apdId, a.apgId) as idFinal
			FROM
			Correccion c
			JOIN AporteGeneral a ON c.corAporteGeneral = a.apgId
			JOIN AporteDetallado ad ON a.apgId = ad.apdAporteGeneral
			LEFT JOIN EmpresaPersona ep ON a.apgEmpresa = ep.empId
			LEFT JOIN Persona pa ON ep.empPersona = pa.perId
			JOIN Persona pd ON ad.apdPersona = pd.perId
			JOIN MovimientoAporte ma ON ma.moaAporteDetallado = ad.apdId
			WHERE
			a.apgOrigenAporte = :origenAporte
			AND (c.corAporteDetallado IS NULL OR c.corAporteDetallado = :idAporteDetallado)
			AND c.corSolicitudCorreccionAporte = :idSolicitudCorreccion
			GROUP BY
			a.apgId,
			ad.apdId,
			pd.perTipoIdentificacion,
			pd.perNumeroIdentificacion,
			pd.perPrimerNombre,
			pd.perSegundoNombre,
			pd.perPrimerApellido,
			pd.perSegundoApellido,
			a.apgPagadorPorTerceros,
			ad.apdTipoCotizante,
			ma.moaEstadoAporte,
			ma.moaValorAporte,
			ma.moaValorInteres,
			pa.perRazonSocial,
			pa.perTipoIdentificacion,
			pa.perNumeroIdentificacion,
			c.corSolicitudCorreccionAporte,
			ma.moaAporteDetallado
       </query>
	</named-native-query>

	<named-query name="Aportes.Consultar.Solicitud.Aporte.Vista360.Por.IdAporte">
		<description>consulta que consulta la solicitud de aporte por el id del aporte</description>
		<query>
			SELECT sa
			FROM SolicitudAporte sa
			WHERE
			sa.idRegistroGeneral =:idRegistroGeneral
			AND sa.estadoSolicitud=:estado
		</query>
	</named-query>
	<named-query name="Aportes.periodo.pago.afiliacion">
		<query>
			SELECT roa FROM RolAfiliado roa 
			LEFT JOIN FETCH roa.afiliado afi 
			LEFT JOIN FETCH afi.persona per
			WHERE per.idPersona=:idPersona
			AND roa.tipoAfiliado =:tipoAfiliado  
		</query>
	</named-query>
	<named-query name="Aportes.consultar.persona.id.aporte.detallado">
		<query>
			SELECT new com.asopagos.aportes.dto.DetalleDevolucionCotizanteDTO(
			     apd.tipoCotizante, 
			     per.tipoIdentificacion,
			     per.numeroIdentificacion, 
			     per.primerNombre, 
			     per.segundoNombre, 
			     per.primerApellido, 
			     per.segundoApellido, 
			     apd.idRegistroDetallado, 
			     apg.modalidadRecaudoAporte, 
			     apd.id)
			FROM AporteGeneral apg, AporteDetallado apd, Persona per  
			WHERE apg.id = apd.idAporteGeneral 
			AND per.idPersona = apd.idPersona
			AND apd.id IN (:idAporteDetallado)
		</query>
	</named-query>
	<named-query name="Aportes.consultar.recaudo.cotizantes.aporte.ok">
		<query>
			SELECT new com.asopagos.aportes.dto.RecaudoCotizanteDTO(apd.id, per.tipoIdentificacion, per.numeroIdentificacion,
            per.primerNombre, per.segundoNombre, per.primerApellido, per.segundoApellido, apd.tipoCotizante, apd.aporteObligatorio,
            apd.valorMora) FROM AporteDetallado apd, Persona per
            WHERE apd.idAporteGeneral =:idAporteGeneral 
            AND per.idPersona = apd.idPersona
            AND apd.estadoRegistroAporteArchivo IN (:estadoRegistro)
		</query>
	</named-query>
	<named-query name="Aportes.consultar.recaudo.cotizantes.pendiente.afiliar">
		<query>
			SELECT new com.asopagos.aportes.dto.RecaudoCotizanteDTO(per.tipoIdentificacion, per.numeroIdentificacion,
            per.primerNombre, per.segundoNombre, per.primerApellido, per.segundoApellido) 
            FROM AporteDetallado apd, Persona per 
            WHERE apd.idPersona = per.idPersona
            AND apd.idAporteGeneral =:idAporteGeneral 
            AND apd.estadoRegistroAporteCotizante = com.asopagos.enumeraciones.aportes.EstadoRegistroAporteEnum.RELACIONADO
		</query>
	</named-query>
	<named-query name="Aportes.consultar.medio.consignacion">
		<query>
			SELECT mc FROM MedioConsignacion mc WHERE mc.idMedioPago=:idMedioPago
		</query>
	</named-query>
	<named-query name="Aportes.consultar.medio.transferencia">
		<query>
			SELECT mt FROM MedioTransferencia mt WHERE mt.idMedioPago=:idMedioPago
		</query>
	</named-query>
	<named-native-query name="Aportes.consultar.detalle.registro.aportes.cotizantes.registrados"
		result-set-mapping="Aportes.consultar.detalle.registro.aportes.cotizantes.registrados.mapping">
		<description>	
			Aportes manuales y por pila 
			:fechaInicio 
			:fechaFin
		</description>
		<query>
			SELECT apd.apdId, 
				apd.apdEstadoRegistroAporteCotizante, 
				per.perTipoIdentificacion tipoIdentificacionCotizante, 
				per.perNumeroIdentificacion numeroIdentificacionCotizante, 
				ISNULL(per.perPrimerNombre, '') primerNombre,
				ISNULL(per.perSegundoNombre, '') segundoNombre, 
				ISNULL(per.perPrimerApellido, '') primerApellido, 
				ISNULL(per.perSegundoApellido, '') segundoApellido, 
				apg.apgPeriodoAporte, 
				apg.apgfecharecaudo fecha, 
				apd.apdTarifa tarifa,
				CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorAporte) is not null then sum(moaValorAporte) else 0 end from movimientoaporte
				where moaAporteDetallado = apd.apdId
				and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) else apd.apdAporteObligatorio end  aporte, 
				CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorInteres) is not null then sum(moaValorInteres) else 0 end from movimientoaporte
				where moaAporteDetallado = apd.apdId
				and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) else apdValorIntMora end interes, 
				CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorAporte) is not null then sum(moaValorAporte) else 0 end from movimientoaporte
				where moaAporteDetallado = apd.apdId
				and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) else apd.apdAporteObligatorio end + CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorInteres) is not null then sum(moaValorInteres) else 0 end from movimientoaporte
				where moaAporteDetallado = apd.apdId
				and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) else apdValorIntMora end as total,
				apd.apdUsuarioAprobadorAporte usuario, 
				apg.apgId,
				apg.apgFechaProcesamiento,
				apg.apgEmpresaTramitadoraAporte as pagadorporsimismos,
				pts.perTipoIdentificacion as tipoIdentificaciontercero,
				pts.perNumeroIdentificacion as numerotercero,
				pts.perRazonSocial as RazonSocialTercero
			FROM AporteGeneral apg
			INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId
			INNER JOIN Persona per ON per.perId = apd.apdPersona
			LEFT JOIN afiliado f ON per.perId = f.afiPersona
			LEFT JOIN empresa em ON em.empId = apg.apgEmpresa
			LEFT JOIN Persona pt ON pt.perId = em.empPersona
			LEFT JOIN empleador e ON e.empEmpresa = em.empId
			LEFT JOIN RolAfiliado rf ON rf.roaAfiliado = f.afiId AND e.empId = rf.roaEmpleador
			LEFT JOIN Empresa emt ON emt.empId = apg.apgEmpresaTramitadoraAporte
			LEFT JOIN Persona ptS ON pt.perId = emt.empPersona
			WHERE ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE'
				AND (
					(:legalizados = 0 AND :otrosIngresos=1 AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin)
					OR 					
					(:legalizados = 0 AND :otrosIngresos=0 AND apg.apgFechaRecaudo BETWEEN :fechaInicio AND :fechaFin)
					OR (
						((:legalizados = 1 AND :otrosIngresos=0 AND apg.apgEstadoRegistroAporteAportante = 'REGISTRADO' and (apgFechaRecaudo NOT BETWEEN :fechaInicio AND :fechaFin)) 
							OR (:legalizados = 1 AND :otrosIngresos=1 AND apg.apgEstadoRegistroAporteAportante = 'OTROS_INGRESOS'))
						AND ((:legalizados &lt; &gt; 0 or :otrosIngresos &lt; &gt; 0) and apg.apgFechaReconocimiento BETWEEN :fechaInicio AND :fechaFin)
						AND apg.apgFormaReconocimientoAporte IN ('RECONOCIMIENTO_RETROACTIVO_AUTOMATICO', 'RECONOCIMIENTO_RETROACTIVO_MANUAL')
					)
				)
			ORDER BY apgId
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.detalle.registro.aportes.registrados"
		result-set-mapping="Aportes.consultar.detalle.registro.aportes.registrados.mapping">
		<description>	
			Aportes manuales y por pila 
			:fechaInicio 
			:fechaFin
		</description>
		<query>
			SELECT distinct apg.apgId, 
				apg.apgTipoSolicitante, 
				apg.apgEstadoRegistroAporteAportante, 
				CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perTipoIdentificacion ELSE pap.perTipoIdentificacion END tipoId, 
				CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perNumeroIdentificacion ELSE pap.perNumeroIdentificacion END numId, 
				CASE WHEN apg.apgEmpresa IS NOT NULL THEN ISNULL(pem.perRazonSocial, '') ELSE ISNULL(pap.perRazonSocial, '') END razonSocial,
				apg.apgPeriodoAporte, 
				apg.apgfecharecaudo,
				apg.apgFechaReconocimiento,
				'' numeroPlanilla,
				CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorAporte) is not null then sum(moaValorAporte) else 0 end from MovimientoAporte
				where moaAporteGeneral = apg.apgId
				and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) ELSE (SELECT COALESCE(SUM(CASE  WHEN moaTipoAjuste IS NOT NULL AND moaTipoAjuste &lt;&gt; 'CORRECCION_A_LA_ALTA' THEN -moaValorAporte
				ELSE moaValorAporte END), 0) FROM MovimientoAporte WHERE moaAporteGeneral = apg.apgId) end as aporte, 
				CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorInteres) is not null then sum(moaValorInteres) else 0 end from MovimientoAporte
				where moaAporteGeneral = apg.apgId
				and moaTipoMovimiento NOt IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) else (SELECT COALESCE(SUM(CASE  WHEN moaTipoAjuste IS NOT NULL AND moaTipoAjuste &lt;&gt; 'CORRECCION_A_LA_ALTA' THEN -moavalorinteres
				ELSE moavalorinteres END), 0) FROM MovimientoAporte WHERE moaAporteGeneral = apg.apgId) end as interes, 
				CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorAporte) is not null then sum(moaValorAporte) else 0 end from MovimientoAporte
				where moaAporteGeneral = apg.apgId
				and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES'))else (SELECT COALESCE(SUM(CASE  WHEN moaTipoAjuste IS NOT NULL AND moaTipoAjuste &lt;&gt; 'CORRECCION_A_LA_ALTA' THEN -moaValorAporte
				ELSE moaValorAporte END), 0) FROM MovimientoAporte WHERE moaAporteGeneral = apg.apgId) end + CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorInteres) is not null then sum(moaValorInteres) else 0 end from MovimientoAporte
				where moaAporteGeneral = apg.apgId
				and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) else (SELECT COALESCE(SUM(CASE  WHEN moaTipoAjuste IS NOT NULL AND moaTipoAjuste &lt;&gt; 'CORRECCION_A_LA_ALTA' THEN -moavalorinteres
				ELSE moavalorinteres END), 0) FROM MovimientoAporte WHERE moaAporteGeneral = apg.apgId) end as total, 
				ISNULL(sol.solUsuarioRadicacion, '') usuarioRadicacion, 
				apg.apgRegistroGeneral, 
				apg.apgModalidadRecaudoAporte, 
				apg.apgFechaProcesamiento, 
				apg.apgMarcaPeriodo as oportunidadDePago,
				CASE WHEN ((select top 1 emp.empEstadoEmpleador from VW_EstadoAfiliacionEmpleadorCaja emp where emp.perId = pem.perId)  IS NOT NULL and (apg.apgTipoSolicitante = 'EMPLEADOR')) THEN (select top 1 emp.empEstadoEmpleador from VW_EstadoAfiliacionEmpleadorCaja emp where emp.perId = pem.perId)
				ELSE CASE WHEN ((select top 1 a.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaPensionado a where a.perId = pap.perId) is not null and (apg.apgTipoSolicitante = 'PENSIONADO')) THEN (select top 1 a.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaPensionado a where a.perId = pap.perId) 
				ELSE CASE WHEN ((select top 1 ind.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaIndependiente ind where ind.perId = pap.perId) IS NOT NULL and (apg.apgTipoSolicitante = 'INDEPENDIENTE')) THEN (select top 1 ind.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaIndependiente ind where ind.perId = pap.perId)
				ELSE CASE WHEN vw.roaEstadoAfiliado IS NOT NULL THEN  vw.roaEstadoAfiliado 
				ELSE apg.apgEstadoAportante 
				END END END  END estadoAportante,
				sue.sueNombre as sucursalEmpresa,
				CASE WHEN pem.perDigitoVerificacion IS NOT NULL THEN pem.perDigitoVerificacion ELSE '' END digitoVerificacion,
				apg.apgEmpresaTramitadoraAporte as pagadorporsimismos,
				pt.perTipoIdentificacion as tipoIdebtificaciontercero,
				pt.perNumeroIdentificacion as numerotercero,
				pt.perRazonSocial as RazonSocialTercero,
				CASE WHEN r.roaTipoAfiliado in ('PENSIONADO','TRABAJADOR_INDEPENDIENTE') then r.roaMotivoDesafiliacion ELSE 
			em.empMotivoDesafiliacion END motivoDesafilacion
			FROM AporteGeneral apg 
			LEFT JOIN Empresa emt ON emt.empId = apg.apgEmpresaTramitadoraAporte
			LEFT JOIN Persona pt ON pt.perId = emt.empPersona
			LEFT JOIN Empresa emp ON emp.empId = apg.apgEmpresa
			LEFT JOIN Persona pem ON pem.perId = emp.empPersona
			LEFT JOIN Persona pap ON pap.perId = apg.apgPersona
			LEFT JOIN SolicitudAporte soa ON soa.soaRegistroGeneral = apg.apgRegistroGeneral 
			LEFT JOIN Solicitud sol ON sol.solId = soa.soaSolicitudGlobal
			LEFT JOIN Empleador em on em.empEmpresa = emp.empId
			LEFT JOIN SucursalEmpresa sue on sue.sueId = apg.apgSucursalEmpresa
			LEFT JOIN Afiliado a on a.afipersona = pap.perId
			LEFT JOIN RolAfiliado r on r.roaAfiliado = a.afiId and r.roaTipoAfiliado = (case when apgTipoSolicitante = 'TRABAJADOR_INDEPENDIENTE' then  'INDEPENDIENTE' when apgTipoSolicitante = 'PENSIONADO' then  'PENSIONADO' else '' end)
			<!-- LEFT JOIN EstadoAfiliacionEmpleadorCaja eec on eec.eecPersona = pem.perId
			LEFT JOIN EstadoAfiliacionPersonaIndependiente eai on eai.eaiPersona = pap.perId
			LEFT JOIN EstadoAfiliacionPersonaPensionado  eap on eap.eapPersona = pap.perId -->
			LEFT JOIN VW_EstadoAfiliacionPersonaCaja  vw on vw.perId = pem.perId
			WHERE ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE'
				AND (
					(:legalizados = 0 AND :otrosIngresos=1 AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin)
					OR 					
					(:legalizados = 0 AND :otrosIngresos=0 AND apg.apgFechaRecaudo BETWEEN :fechaInicio AND :fechaFin)
					OR (
						((:legalizados = 1 AND :otrosIngresos=0 AND apg.apgEstadoRegistroAporteAportante = 'REGISTRADO' and (apgFechaRecaudo NOT BETWEEN :fechaInicio AND :fechaFin)) 
							OR (:legalizados = 1 AND :otrosIngresos=1 AND apg.apgEstadoRegistroAporteAportante = 'OTROS_INGRESOS'))
						AND ((:legalizados &lt; &gt; 0 or :otrosIngresos &lt; &gt; 0) and apg.apgFechaReconocimiento BETWEEN :fechaInicio AND :fechaFin)
						AND apg.apgFormaReconocimientoAporte IN ('RECONOCIMIENTO_RETROACTIVO_AUTOMATICO', 'RECONOCIMIENTO_RETROACTIVO_MANUAL')
					)
				)
			ORDER BY apgId
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.detalle.registroGeneral.tarifa">
			<query>
			select a.apdtarifa from AporteGeneral
			INNER JOIN AporteDetallado a on apgid = a.apdAporteGeneral
			WHERE apgRegistroGeneral = :idRegistroGeneral
			</query>
	</named-native-query>
	<named-native-query name="Aportes.Consultar.NumeroPlanilla.PorPlanillaAsociada.RegistroDetallado">
		<description>Consulta el numero de planilla N por numero de planilla asociada y registro detallado</description>
		<query>
			select adr.planillaN from aporteDetalladoRegistroControlN as adr where adr.moaId =:movimientoAporte AND adr.planillaN IS NOT NULL
		</query>
	</named-native-query>

	<named-native-query name="Aportes.Consultar.NumeroPlanilla.PorMovCor.MovimientoAporte">
		<description>Consulta el numero de planilla N por numero de planilla asociada y registro detallado</description>
		<query>
			select adr.planillaAntes from aporteDetalladoRegistroControlN as adr where adr.moaId =:movimientoAporte AND adr.planillaAntes IS NOT NULL
		</query>
	</named-native-query>

	<named-native-query name="Aportes.consultar.modificaciones.por.aporte.detallado">
		<query>
			select
				apdId,
				case when count(moaId) &gt;= 1 then '1' else '0' end
			from AporteDetallado
			left join MovimientoAporte on moaAporteDetallado = apdId and moaTipoAjuste in ('CORRECCION_A_LA_ALTA', 'CORRECCION_A_LA_BAJA', 'DEVOLUCION')
			where apdId in (:idAporteDetallados)
			group by apdId
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.detalle.registroGeneral.tarifa.aportante">
		<query>
			select a.apdtarifa from AporteGeneral
			INNER JOIN AporteDetallado a on apgid = a.apdAporteGeneral
			INNER JOIN Persona p on p.perId = apgPersona
			WHERE apgRegistroGeneral = :idRegistroGeneral
			and p.perNumeroIdentificacion = :numeroIdentificacion
			and p.perTipoIdentificacion = :tipoIdentificacion
			order by a.apdtarifa desc
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.detalle.registro.aportes.cotizantes.devoluciones"
		result-set-mapping="Aportes.consultar.detalle.registro.aportes.cotizantes.registrados.mapping">
		<description>	
			Devoluciones 
			:fechaInicio 
			:fechaFin
		</description>
		<query>
			SELECT apd.apdId,
				apd.apdEstadoRegistroAporteCotizante,
				per.perTipoIdentificacion tipoIdentificacionCotizante,
				per.perNumeroIdentificacion numeroIdentificacionCotizante,
				ISNULL(per.perPrimerNombre, '') primerNombre,
				ISNULL(per.perSegundoNombre, '') segundoNombre,
				ISNULL(per.perPrimerApellido, '') primerApellido,
				ISNULL(per.perSegundoApellido, '') segundoApellido,
				apg.apgPeriodoAporte,
				moa.moaFechaCreacion fecha,
				apd.apdTarifa tarifa,
				moa.moaValorAporte * -1 aporte,
				moa.moaValorInteres * -1 interes,
				(moa.moaValorAporte + moa.moaValorInteres) * -1 as total,
				ISNULL(sol.solUsuarioRadicacion, '') usuario,
				apg.apgId,
				apg.apgFechaProcesamiento,
				apg.apgEmpresaTramitadoraAporte AS pagadorporsimismos,
				ptS.perTipoIdentificacion AS tipoIdentificaciontercero,
				ptS.perNumeroIdentificacion AS numerotercero,
				ptS.perRazonSocial AS RazonSocialTercero
			FROM AporteGeneral apg
			INNER JOIN MovimientoAporte moa ON moaAporteGeneral = apgId
			INNER JOIN AporteDetallado apd ON apdAporteGeneral = apgId AND moaAporteDetallado = apdId
			LEFT JOIN Persona per ON per.perId = apd.apdPersona
			LEFT JOIN DevolucionAporteDetalle dad ON dad.dadMovimientoAporte = moa.moaId
			LEFT JOIN DevolucionAporte dap ON dap.dapId = dad.dadDevolucionAporte
			LEFT JOIN SolicitudDevolucionAporte sda ON sda.sdaDevolucionAporte = dap.dapId
			LEFT JOIN Solicitud sol ON sda.sdaSolicitudGlobal = sol.solid
			LEFT JOIN Empresa emt ON emt.empId = apg.apgEmpresaTramitadoraAporte
			LEFT JOIN Persona ptS ON ptS.perId = emt.empPersona
			WHERE moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin
				AND moaTipoMovimiento = 'DEVOLUCION_APORTES'
			ORDER BY apgId, apdId
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.detalle.registro.aportes.devoluciones"
		result-set-mapping="Aportes.consultar.detalle.registro.aportes.devoluciones.mapping">
		<description>	
			Devoluciones 
			:fechaInicio 
			:fechaFin
		</description>
		<query>
			SELECT apgId,
			apgTipoSolicitante,
			apgEstadoRegistroAporteAportante,
			tipoId,
			numId,
			razonSocial,
			apgPeriodoAporte,
			moaFechaCreacion fechaDevolucion,
			numeroPlanilla,
			numeroRadicacion,
			sum(moaValorAporte)aporte,
			sum(moaValorInteres)interes,
			sum(moaValorInteres)+ sum(moaValorAporte) total,
			MAX(ISNULL(usuarioRadicacion, '')) usuario,
			apgRegistroGeneral,
			apgModalidadRecaudoAporte,
			dapDestinatarioDevolucion,
			descuentoGestion,
			oportunidadDePago,
			estadoAportante,
			sucursalEmpresa,
			digitoVerificacion,
			apgFechaProcesamiento,
			apgFechaRecaudo,
			apgEmpresaTramitadoraAporte,
			perTipoIdentificacion,
			perNumeroIdentificacion,
			perRazonSocial
			FROM (
			SELECT distinct apg.apgId,
			apg.apgTipoSolicitante,
			apg.apgEstadoRegistroAporteAportante,
			CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perTipoIdentificacion ELSE pap.perTipoIdentificacion END tipoId,
			CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perNumeroIdentificacion ELSE pap.perNumeroIdentificacion END numId,
			CASE WHEN apg.apgEmpresa IS NOT NULL THEN ISNULL(pem.perRazonSocial, '') ELSE ISNULL(pap.perRazonSocial, '') END razonSocial,
			apg.apgPeriodoAporte,
			moa.moaFechaCreacion,
			'' numeroPlanilla,
			sol.solNumeroRadicacion as numeroRadicacion,
			moa.moaValorAporte * -1 moaValorAporte,
			moa.moaValorInteres * -1 moaValorInteres,
			(moa.moaValorAporte + moa.moaValorInteres) * -1 as total,
			ISNULL(sol.solUsuarioRadicacion, '') usuarioRadicacion,
			apg.apgRegistroGeneral,
			apg.apgModalidadRecaudoAporte,
			dap.dapDestinatarioDevolucion,
			ISNULL(dap.dapDescuentoGestionFinanciera, 0) descuentoGestion,
			apgMarcaPeriodo as oportunidadDePago,
			CASE WHEN ((select top 1 emp.empEstadoEmpleador from VW_EstadoAfiliacionEmpleadorCaja emp where emp.perId = pem.perId)  IS NOT NULL and (apg.apgTipoSolicitante = 'EMPLEADOR')) THEN (select top 1 emp.empEstadoEmpleador from VW_EstadoAfiliacionEmpleadorCaja emp where emp.perId = pem.perId)
			ELSE CASE WHEN ((select top 1 a.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaPensionado a where a.perId = pap.perId) is not null and (apg.apgTipoSolicitante = 'PENSIONADO')) THEN (select top 1 a.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaPensionado a where a.perId = pap.perId)
			ELSE CASE WHEN ((select top 1 ind.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaIndependiente ind where ind.perId = pap.perId) IS NOT NULL and (apg.apgTipoSolicitante = 'INDEPENDIENTE')) THEN (select top 1 ind.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaIndependiente ind where ind.perId = pap.perId)
			ELSE CASE WHEN vw.roaEstadoAfiliado IS NOT NULL THEN  vw.roaEstadoAfiliado
			ELSE apg.apgEstadoAportante
			END END END  END estadoAportante,
			sue.sueNombre as sucursalEmpresa,
			CASE WHEN pem.perDigitoVerificacion IS NOT NULL THEN pem.perDigitoVerificacion ELSE '' END digitoVerificacion
			,apg.apgFechaProcesamiento,
			moa.moaid,
			apg.apgFechaRecaudo,
			apg.apgEmpresaTramitadoraAporte,
			pip.perTipoIdentificacion,
			pip.perNumeroIdentificacion,
			pip.perRazonSocial
			FROM AporteGeneral apg
			INNER JOIN MovimientoAporte moa ON moaAporteGeneral = apgId
			LEFT JOIN Empresa emp ON emp.empId = apg.apgEmpresa
			LEFT JOIN Persona pem ON pem.perId = emp.empPersona
			LEFT JOIN Persona pap ON pap.perId = apg.apgPersona
			LEFT JOIN DevolucionAporteDetalle dad ON dad.dadMovimientoAporte = moa.moaId
			LEFT JOIN DevolucionAporte dap ON dap.dapId = dad.dadDevolucionAporte
			LEFT JOIN SolicitudDevolucionAporte sda ON sda.sdaDevolucionAporte = dap.dapId
			LEFT JOIN Solicitud sol ON sda.sdaSolicitudGlobal = sol.solid
			LEFT JOIN Empleador em on em.empEmpresa = emp.empId
			LEFT JOIN SucursalEmpresa sue on sue.sueId = apg.apgSucursalEmpresa
			<!-- LEFT JOIN EstadoAfiliacionEmpleadorCaja eec on eec.eecPersona = pem.perId
            LEFT JOIN EstadoAfiliacionPersonaIndependiente eai on eai.eaiPersona = pap.perId
            LEFT JOIN EstadoAfiliacionPersonaPensionado  eap on eap.eapPersona = pap.perId -->
			LEFT JOIN VW_EstadoAfiliacionPersonaCaja  vw on vw.perId = pem.perId
			LEFT JOIN Empresa emt ON emt.empId = apg.apgEmpresaTramitadoraAporte
			LEFT JOIN Persona pip ON pip.perId = emt.empPersona
			WHERE moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin
			AND moaTipoMovimiento = 'DEVOLUCION_APORTES'
			) AS base
			GROUP BY apgId,
			apgTipoSolicitante,
			apgEstadoRegistroAporteAportante,
			tipoId,
			numId,
			razonSocial,
			apgPeriodoAporte,
			moaFechaCreacion,
			numeroPlanilla,
			numeroRadicacion,
			apgRegistroGeneral,
			apgModalidadRecaudoAporte,
			dapDestinatarioDevolucion,
			descuentoGestion,
			oportunidadDePago,
			estadoAportante,
			sucursalEmpresa,
			digitoVerificacion,
			apgFechaProcesamiento,
			apgFechaRecaudo,
			apgEmpresaTramitadoraAporte,
			perTipoIdentificacion,
			perNumeroIdentificacion,
			perRazonSocial
			ORDER BY apgId
		</query>
	</named-native-query>
	<named-native-query
		name="Aportes.consultar.detalle.registro.aportes.cotizantes.correcciones.origen"
		result-set-mapping="Aportes.consultar.detalle.registro.aportes.cotizantes.correcciones.origen.mapping">
		<description>	
			Correcciones
			:fechaInicio
			:fechaFin
		</description>
		<query>
			SELECT apd.apdId, 
				apd.apdEstadoRegistroAporteCotizante, 
				per.perTipoIdentificacion tipoIdentificacionCotizante, 
				per.perNumeroIdentificacion numeroIdentificacionCotizante, 
				ISNULL(per.perPrimerNombre, '') primerNombre,
				ISNULL(per.perSegundoNombre, '') segundoNombre, 
				ISNULL(per.perPrimerApellido, '') primerApellido, 
				ISNULL(per.perSegundoApellido, '') segundoApellido, 
				apg.apgPeriodoAporte, 
				apg.apgFechaRecaudo fecha, 
				CASE WHEN :original = 0 THEN 'POSITIVA' ELSE 'NEGATIVA' END tipoTransaccion,
				apd.apdTarifa tarifa,
				CASE WHEN :original = 0 THEN moa.moaValorAporte ELSE moa.moaValorAporte * -1 END aporte,
				CASE WHEN :original = 0 THEN moa.moaValorInteres ELSE moa.moaValorInteres * -1 END interes,
				CASE WHEN :original = 0 THEN (moa.moaValorAporte + moa.moaValorInteres) ELSE (moa.moaValorAporte + moa.moaValorInteres) * -1 END total,
				ISNULL(sol.solUsuarioRadicacion, '') usuarioRadicacion, 
				CASE WHEN :original = 0 THEN NULL ELSE apo.apdId END idAporteNuevo,
				apg.apgId,
				apg.apgEmpresaTramitadoraAporte,
				pts.perTipoIdentificacion,
				pts.perNumeroIdentificacion,
				pts.perRazonSocial
			FROM AporteGeneral apg
			INNER JOIN MovimientoAporte moa ON moaAporteGeneral = apgId 
			INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apgId AND moaAporteDetallado = apd.apdId
			LEFT JOIN Persona per ON per.perId = apd.apdPersona
			LEFT JOIN Correccion corN ON corN.corAporteGeneral = apgId 
			LEFT JOIN SolicitudCorreccionAporte sca ON
				(:original = 1 AND sca.scaAporteGeneral = apg.apgId )
				OR (:original = 0 AND sca.scaId = corN.corSolicitudCorreccionAporte)
			LEFT JOIN Solicitud sol ON sol.solId = sca.scaSolicitudGlobal
			LEFT JOIN AporteDetallado apo ON corN.corAporteGeneral = apo.apdAporteGeneral
			LEFT JOIN Empresa emt ON emt.empId = apg.apgEmpresaTramitadoraAporte
			LEFT JOIN Persona ptS ON ptS.perId = emt.empPersona
			WHERE moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin 
				AND (
				(
					:original = 0 
					AND ISNULL(apg.apgOrigenAporte, '') = 'CORRECCION_APORTE'
					AND moaTipoMovimiento IN ('RECAUDO_PILA_AUTOMATICO', 'RECAUDO_MANUAL', 'RECAUDO_MANUAL_APORTES')
				)
				OR (
					:original = 1 
					<!-- AND ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE' -->
					AND moaTipoMovimiento IN ('CORRECCION_APORTES')
				)
			)
			AND sol.solResultadoProceso = 'APROBADA'
			AND sca.scaEstadoSolicitud = 'CERRADA'
		</query>
	</named-native-query>
	<named-native-query
		name="Aportes.consultar.detalle.registro.aportes.cotizantes.correcciones.a.la.alta.origen"
		result-set-mapping="Aportes.consultar.detalle.registro.aportes.cotizantes.correcciones.a.la.alta.origen.mapping">
		<description>	
			Correcciones a la alta
			:fechaInicio
			:fechaFin
		</description>
		<query>
			SELECT apd.apdId, 
				apd.apdEstadoRegistroAporteCotizante, 
				per.perTipoIdentificacion tipoIdentificacionCotizante, 
				per.perNumeroIdentificacion numeroIdentificacionCotizante, 
				ISNULL(per.perPrimerNombre, '') primerNombre,
				ISNULL(per.perSegundoNombre, '') segundoNombre, 
				ISNULL(per.perPrimerApellido, '') primerApellido, 
				ISNULL(per.perSegundoApellido, '') segundoApellido, 
				apg.apgPeriodoAporte, 
				apr.regFechaPagoAporte fecha, 
				CASE WHEN :original = 0 THEN 'POSITIVA' ELSE 'NEGATIVA' END tipoTransaccion, 
				apd.apdTarifa tarifa,
				apr.diferenciaAporteCot AS aporte,
				apr.diferenciaMora AS interes,
				apr.diferenciaAporteCot + apr.diferenciaMora  AS total, 
				ISNULL(null, '') usuarioRadicacion, 
				CASE WHEN :original = 0 THEN NULL ELSE apo.apdId END idAporteNuevo, 
				apg.apgId,
				planillaN,
				apgEmpresaTramitadoraAporte,
				ptS.perTipoIdentificacion,
				ptS.perNumeroIdentificacion,
				ptS.perRazonSocial
			FROM AporteGeneral apg
			INNER JOIN MovimientoAporte moa ON moaAporteGeneral = apgId 
			INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apgId AND moaAporteDetallado = apd.apdId
			INNER JOIN aporteDetalladoRegistroControlN apr on apr.apdAporteGeneral =moaAporteGeneral and moa.moaAporteDetallado = apr.apdId and apr.moaId = moa.moaId
			LEFT JOIN Persona per ON per.perId = apd.apdPersona
			LEFT JOIN Correccion corN ON corN.corAporteGeneral = apgId 
			LEFT JOIN AporteDetallado apo ON corN.corAporteGeneral = apo.apdAporteGeneral
			LEFT JOIN Empresa emt ON emt.empId = apg.apgEmpresaTramitadoraAporte
			LEFT JOIN Persona ptS ON ptS.perId = emt.empPersona
			WHERE apr.regFechaPagoAporte BETWEEN :fechaInicio AND :fechaFin
            AND apr.redAporteObligatorio != apr.apdAporteObligatorio
			<!--AND apr.diferenciaAporteCot &gt; 0 -->
		</query>
	</named-native-query>

	<named-native-query name="Aportes.consultar.detalle.registro.aportes.correccion.origen"
		result-set-mapping="Aportes.consultar.detalle.registro.aportes.correccion.origen.mapping">
		<description>	
			Correcciones
			:fechaInicio 
			:fechaFin
		</description>
		<query>
			SELECT  apgId,
				apgTipoSolicitante,
				apgEstadoRegistroAporteAportante,
				tipoId,
				numId,
				razonSocial,
				apgPeriodoAporte,
				solNumeroRadicacion,
				apgFechaRecaudo,
				moaFechaCreacion,
				numeroPlanilla,
				moaValorAporte aporte,
				moaValorInteres interes,
				total total,
				MAX(ISNULL(usuarioRadicacion, '')) usuario,
				idAporteNuevo, 
				apgRegistroGeneral,
				apgModalidadRecaudoAporte,
				oportunidadDePago,
				estadoAportante,
				sucursalEmpresa,
				digitoVerificacion,
				apgFechaProcesamiento2,
				apgEmpresaTramitadoraAporte,
				perTipoIdentificacion,
				perNumeroIdentificacion,
				perRazonSocial

			FROM (
				SELECT distinct apg.apgId, 
							apg.apgTipoSolicitante, 
							apg.apgEstadoRegistroAporteAportante, 
							CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perTipoIdentificacion ELSE pap.perTipoIdentificacion END tipoId, 
							CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perNumeroIdentificacion ELSE pap.perNumeroIdentificacion END numId, 
							CASE WHEN apg.apgEmpresa IS NOT NULL THEN ISNULL(pem.perRazonSocial, '') ELSE ISNULL(pap.perRazonSocial, '') END razonSocial,
							sol.solNumeroRadicacion,
							apg.apgPeriodoAporte,
							apg.apgFechaRecaudo,
							moa.moaFechaCreacion, 
							'' numeroPlanilla, 
							CASE WHEN :original = 0 THEN moa.moaValorAporte ELSE moa.moaValorAporte * -1 END moaValorAporte, 
							CASE WHEN :original = 0 THEN moa.moaValorInteres ELSE moa.moaValorInteres * -1 END moaValorInteres, 
							CASE WHEN :original = 0 THEN (moa.moaValorAporte + moa.moaValorInteres) ELSE (moa.moaValorAporte + moa.moaValorInteres) * -1 END total, 
							ISNULL(sol.solUsuarioRadicacion, '') usuarioRadicacion, 
							CASE WHEN :original = 0 THEN NULL ELSE corN.corAporteGeneral END idAporteNuevo, 
							apg.apgRegistroGeneral,
							apg.apgModalidadRecaudoAporte,
							apg.apgMarcaPeriodo as oportunidadDePago,
						CASE WHEN ((select top 1 emp.empEstadoEmpleador from VW_EstadoAfiliacionEmpleadorCaja emp where emp.perId = pem.perId)  IS NOT NULL and (apg.apgTipoSolicitante = 'EMPLEADOR')) THEN (select top 1 emp.empEstadoEmpleador from VW_EstadoAfiliacionEmpleadorCaja emp where emp.perId = pem.perId)
						ELSE CASE WHEN ((select top 1 a.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaPensionado a where a.perId = pap.perId) is not null and (apg.apgTipoSolicitante = 'PENSIONADO')) THEN (select top 1 a.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaPensionado a where a.perId = pap.perId) 
						ELSE CASE WHEN ((select top 1 ind.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaIndependiente ind where ind.perId = pap.perId) IS NOT NULL and (apg.apgTipoSolicitante = 'INDEPENDIENTE')) THEN (select top 1 ind.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaIndependiente ind where ind.perId = pap.perId)
						ELSE CASE WHEN vw.roaEstadoAfiliado IS NOT NULL THEN  vw.roaEstadoAfiliado 
						ELSE apg.apgEstadoAportante 
						END END END  END estadoAportante,
						sue.sueNombre as sucursalEmpresa,
						CASE WHEN pem.perDigitoVerificacion IS NOT NULL THEN pem.perDigitoVerificacion ELSE '' END digitoVerificacion,
						apg.apgFechaProcesamiento as apgFechaProcesamiento2,
						moaId,
						apg.apgEmpresaTramitadoraAporte,
						pts.perTipoIdentificacion,
						pts.perNumeroIdentificacion,
						pts.perRazonSocial
		from Solicitud sol
		inner join SolicitudCorreccionAporte sca ON sol.solId = sca.scaSolicitudGlobal
		inner join Correccion corN ON corN.corSolicitudCorreccionAporte = sca.scaId
		inner join AporteGeneral apg on corN.corAporteGeneral = apg.apgId
		inner join MovimientoAporte moa ON moaAporteGeneral = apgId
		LEFT JOIN Empresa emp ON emp.empId = apg.apgEmpresa
		LEFT JOIN Persona pem ON pem.perId = emp.empPersona
		LEFT JOIN Persona pap ON pap.perId = apg.apgPersona
		LEFT JOIN Empleador em on em.empEmpresa = emp.empId
		LEFT JOIN SucursalEmpresa sue on sue.sueId = apg.apgSucursalEmpresa
		LEFT JOIN VW_EstadoAfiliacionPersonaCaja  vw on vw.perId = pem.perId
		LEFT JOIN Empresa emt ON emt.empId = apg.apgEmpresaTramitadoraAporte
		LEFT JOIN Persona ptS ON ptS.perId = emt.empPersona
		WHERE
		:original = 0 and moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin  
		AND ISNULL(apg.apgOrigenAporte, '') = 'CORRECCION_APORTE'
		AND moaTipoMovimiento IN ('RECAUDO_PILA_AUTOMATICO', 'RECAUDO_MANUAL', 'RECAUDO_MANUAL_APORTES')
		AND sol.solResultadoProceso = 'APROBADA'
		AND sca.scaEstadoSolicitud = 'CERRADA'
		union all 

		SELECT distinct apg.apgId, 
							apg.apgTipoSolicitante, 
							apg.apgEstadoRegistroAporteAportante, 
							CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perTipoIdentificacion ELSE pap.perTipoIdentificacion END tipoId, 
							CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perNumeroIdentificacion ELSE pap.perNumeroIdentificacion END numId, 
							CASE WHEN apg.apgEmpresa IS NOT NULL THEN ISNULL(pem.perRazonSocial, '') ELSE ISNULL(pap.perRazonSocial, '') END razonSocial,
							sol.solNumeroRadicacion,
							apg.apgPeriodoAporte,
							apg.apgFechaRecaudo, 
							moa.moaFechaCreacion,
							'' numeroPlanilla, 
							CASE WHEN :original = 0 THEN moa.moaValorAporte ELSE moa.moaValorAporte * -1 END moaValorAporte, 
							CASE WHEN :original = 0 THEN moa.moaValorInteres ELSE moa.moaValorInteres * -1 END moaValorInteres, 
							CASE WHEN :original = 0 THEN (moa.moaValorAporte + moa.moaValorInteres) ELSE (moa.moaValorAporte + moa.moaValorInteres) * -1 END total, 
							ISNULL(sol.solUsuarioRadicacion, '') as usuarioRadicacion, 
							CASE WHEN :original = 0 THEN '' END idAporteNuevo, 
							apg.apgRegistroGeneral,
							apg.apgModalidadRecaudoAporte,
							apg.apgMarcaPeriodo as oportunidadDePago,
						CASE WHEN ((select top 1 emp.empEstadoEmpleador from VW_EstadoAfiliacionEmpleadorCaja emp where emp.perId = pem.perId)  IS NOT NULL and (apg.apgTipoSolicitante = 'EMPLEADOR')) THEN (select top 1 emp.empEstadoEmpleador from VW_EstadoAfiliacionEmpleadorCaja emp where emp.perId = pem.perId)
						ELSE CASE WHEN ((select top 1 a.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaPensionado a where a.perId = pap.perId) is not null and (apg.apgTipoSolicitante = 'PENSIONADO')) THEN (select top 1 a.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaPensionado a where a.perId = pap.perId) 
						ELSE CASE WHEN ((select top 1 ind.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaIndependiente ind where ind.perId = pap.perId) IS NOT NULL and (apg.apgTipoSolicitante = 'INDEPENDIENTE')) THEN (select top 1 ind.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaIndependiente ind where ind.perId = pap.perId)
						ELSE CASE WHEN vw.roaEstadoAfiliado IS NOT NULL THEN  vw.roaEstadoAfiliado 
						ELSE apg.apgEstadoAportante 
						END END END  END estadoAportante,
						sue.sueNombre as sucursalEmpresa,
						CASE WHEN pem.perDigitoVerificacion IS NOT NULL THEN pem.perDigitoVerificacion ELSE '' END digitoVerificacion,
							apg.apgFechaProcesamiento as apgFechaProcesamiento2,
						moaId,
						apg.apgEmpresaTramitadoraAporte,
						pts.perTipoIdentificacion,
						pts.perNumeroIdentificacion,
						pts.perRazonSocial
		from Solicitud sol
		inner join SolicitudCorreccionAporte sca ON sol.solId = sca.scaSolicitudGlobal
		inner join AporteGeneral apg on sca.scaAporteGeneral = apg.apgId
		inner join  (select moaId,moaTipoAjuste,moaTipoMovimiento,moaEstadoAporte,moaValorAporte,moaValorInteres,max(moaFechaCreacion) moaFechaCreacion,moaAporteGeneral
										from MovimientoAporte moa
										where moaTipoMovimiento IN ('CORRECCION_APORTES')
										group by  moaId,moaTipoAjuste,moaTipoMovimiento,moaEstadoAporte,moaValorAporte,moaValorInteres,moaAporteGeneral) moa ON moaAporteGeneral = apgId
		LEFT JOIN Empresa emp ON emp.empId = apg.apgEmpresa
		LEFT JOIN Persona pem ON pem.perId = emp.empPersona
		LEFT JOIN Persona pap ON pap.perId = apg.apgPersona
		LEFT JOIN Empleador em on em.empEmpresa = emp.empId
		LEFT JOIN SucursalEmpresa sue on sue.sueId = apg.apgSucursalEmpresa
		LEFT JOIN VW_EstadoAfiliacionPersonaCaja  vw on vw.perId = pem.perId
		LEFT JOIN Empresa emt ON emt.empId = apg.apgEmpresaTramitadoraAporte
		LEFT JOIN Persona ptS ON ptS.perId = emt.empPersona
		WHERE :original = 1 and moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin  
		<!-- AND ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE' -->
		AND moaTipoMovimiento IN ('CORRECCION_APORTES')
		AND sol.solResultadoProceso = 'APROBADA'
		AND sca.scaEstadoSolicitud = 'CERRADA'
		AND moaTipoAjuste &lt; &gt; 'CORRECCION_A_LA_ALTA') AS base
			GROUP BY apgId,apgTipoSolicitante,apgEstadoRegistroAporteAportante,tipoId,numId,razonSocial,apgPeriodoAporte,solNumeroRadicacion, apgFechaRecaudo,moaFechaCreacion, numeroPlanilla,
			idAporteNuevo, apgRegistroGeneral,apgModalidadRecaudoAporte,oportunidadDePago,estadoAportante,sucursalEmpresa,digitoVerificacion,apgFechaProcesamiento2,
			moaValorAporte,moaValorInteres,total,moaId, apgEmpresaTramitadoraAporte, perTipoIdentificacion,perNumeroIdentificacion,perRazonSocial
			ORDER BY apgId
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.detalle.registro.aportes.correccion.a.la.alta.origen"
		result-set-mapping="Aportes.consultar.detalle.registro.aportes.correccion.a.la.alta.origen.mapping">
		<description>	
			Correcciones a la alta
			:fechaInicio 
			:fechaFin
		</description>
		<query>
						SELECT apgId,
				apgTipoSolicitante,
				apgEstadoRegistroAporteAportante,
				tipoId,
				numId,
				razonSocial,
				apgPeriodoAporte,
				regFechaPagoAporte, 
				moaFechaCreacion, 
				numeroPlanilla,
				recaudoOriginal,
				SUM(ValorAporte) aporte,
				SUM(ValorInteres) interes,
				SUM(total) total,
				MAX(ISNULL(NULL, '')) usuario,
				idAporteNuevo, 
				apgRegistroGeneral,
				apgModalidadRecaudoAporte,
				oportunidadDePago,
				estadoAportante,
				sucursalEmpresa,
				digitoVerificacion,
				fechaProcesamiento,
				apgEmpresaTramitadoraAporte,
				perTipoIdentificacion,
				perNumeroIdentificacion,
				perRazonSocial, 				
				motivoDesafilacion
			FROM (
                	SELECT apg.apgId, 
					apg.apgTipoSolicitante, 
					apg.apgEstadoRegistroAporteAportante, 
					CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perTipoIdentificacion ELSE pap.perTipoIdentificacion END tipoId, 
					CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perNumeroIdentificacion ELSE pap.perNumeroIdentificacion END numId, 
					CASE WHEN apg.apgEmpresa IS NOT NULL THEN ISNULL(pem.perRazonSocial, '') ELSE ISNULL(pap.perRazonSocial, '') END razonSocial,
					apg.apgPeriodoAporte,  
					apr.regFechaPagoAporte,
					moa.moaFechaCreacion, 
					apr.planillaAntes as numeroPlanilla, 
					apr.planillaN as recaudoOriginal,
					apr.diferenciaAporteCot AS ValorAporte,
					apr.diferenciaMora as ValorInteres,  
					apr.diferenciaAporteCot + apr.diferenciaMora  AS total,
					ISNULL(NULL, '') usuarioRadicacion, 
					CASE WHEN :original = 0 THEN NULL ELSE corN.corAporteGeneral END idAporteNuevo, 
					apg.apgRegistroGeneral,
					apg.apgModalidadRecaudoAporte,
					apg.apgMarcaPeriodo as oportunidadDePago,
				CASE WHEN ((select top 1 emp.empEstadoEmpleador from VW_EstadoAfiliacionEmpleadorCaja emp where emp.perId = pem.perId)  IS NOT NULL and (apg.apgTipoSolicitante = 'EMPLEADOR')) THEN (select top 1 emp.empEstadoEmpleador from VW_EstadoAfiliacionEmpleadorCaja emp where emp.perId = pem.perId)
				ELSE CASE WHEN ((select top 1 a.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaPensionado a where a.perId = pap.perId) is not null and (apg.apgTipoSolicitante = 'PENSIONADO')) THEN (select top 1 a.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaPensionado a where a.perId = pap.perId) 
				ELSE CASE WHEN ((select top 1 ind.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaIndependiente ind where ind.perId = pap.perId) IS NOT NULL and (apg.apgTipoSolicitante = 'INDEPENDIENTE')) THEN (select top 1 ind.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaIndependiente ind where ind.perId = pap.perId)
				ELSE apg.apgEstadoAportante 
				END END END  estadoAportante,
				sue.sueNombre as sucursalEmpresa,
				CASE WHEN pem.perDigitoVerificacion IS NOT NULL THEN pem.perDigitoVerificacion ELSE '' END digitoVerificacion,
				apr.fechaProcesamiento,
				apg.apgEmpresaTramitadoraAporte,
				pts.perTipoIdentificacion,
				pts.perNumeroIdentificacion,
				pts.perRazonSocial,	
				CASE WHEN r.roaTipoAfiliado in ('PENSIONADO','TRABAJADOR_INDEPENDIENTE') then r.roaMotivoDesafiliacion ELSE 
				em.empMotivoDesafiliacion END motivoDesafilacion				
				FROM AporteGeneral apg
                INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apgId 
				INNER JOIN MovimientoAporte moa ON moaAporteGeneral = apgId AND moaAporteDetallado = apd.apdId
				INNER JOIN aporteDetalladoRegistroControlN apr on apr.apdAporteGeneral = moaAporteGeneral and moa.moaAporteDetallado = apr.apdId and apr.moaId = moa.moaId
				LEFT JOIN Empresa emp ON emp.empId = apg.apgEmpresa
				LEFT JOIN Persona pem ON pem.perId = emp.empPersona
				LEFT JOIN Persona pap ON pap.perId = apg.apgPersona
				LEFT JOIN Correccion corN ON corN.corAporteGeneral = apgId 
				LEFT JOIN Empleador em on em.empEmpresa = emp.empId
				LEFT JOIN SucursalEmpresa sue on sue.sueId = apg.apgSucursalEmpresa
				LEFT JOIN Empresa emt ON emt.empId = apg.apgEmpresaTramitadoraAporte
				LEFT JOIN Persona pts ON pts.perId = emt.empPersona
				LEFT JOIN Afiliado a on a.afipersona = pap.perId
				LEFT JOIN RolAfiliado r on r.roaAfiliado = a.afiId and r.roaTipoAfiliado = (case when apgTipoSolicitante = 'TRABAJADOR_INDEPENDIENTE' then  'INDEPENDIENTE' when apgTipoSolicitante = 'PENSIONADO' then  'PENSIONADO' else '' end)
				WHERE apr.regFechaPagoAporte BETWEEN :fechaInicio AND :fechaFin
				<!-- AND apr.redAporteObligatorio != apr.apdAporteObligatorio -->
				AND apr.diferenciaAporteCot &lt; &gt; 0

			) AS base
			GROUP BY apgId,
				apgTipoSolicitante,
				apgEstadoRegistroAporteAportante,
				tipoId,
				numId,
				razonSocial,
				apgPeriodoAporte,
				regFechaPagoAporte,
				moaFechaCreacion, 
				numeroPlanilla,
				recaudoOriginal,
				idAporteNuevo, 
				apgRegistroGeneral,
				apgModalidadRecaudoAporte,
				oportunidadDePago,
				estadoAportante,
				sucursalEmpresa,
				digitoVerificacion,
				fechaProcesamiento,
				apgEmpresaTramitadoraAporte,
				perTipoIdentificacion,
				perNumeroIdentificacion,
				perRazonSocial,
				motivoDesafilacion
			ORDER BY apgId
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.rolAfiliado.datosAfiliado"
		result-set-mapping="Aportes.consultar.rolAfiliado.datosAfiliado.mapping">
		<description>Consulta de datos de un afiliado para cálculo de estado de servicios</description>
		<query>
			SELECT roa.roaDiaHabilVencimientoAporte,
				CASE WHEN per.perPrimerNombre IS NULL THEN per.perRazonSocial
				ELSE (
					per.perPrimerNombre + 
					CASE WHEN per.perSegundoNombre IS NULL THEN ' ' ELSE ' '+per.perSegundoNombre END +
					per.perPrimerApellido + 
					CASE WHEN per.perSegundoApellido IS NULL THEN '' ELSE ' '+per.perSegundoApellido END
				) END nombreAportante, 
				per.perId, roa.roaOportunidadPago,
                
			    CASE WHEN roa.roaOportunidadPago = 'MES_ACTUAL' 
			        THEN 
			            dbo.UFN_SumarDiasFecha(:dFechaPeriodo, roaDiaHabilVencimientoAporte, 1)
			        ELSE 
			            dbo.UFN_SumarDiasFecha(DATEADD(MONTH, -1, :dFechaPeriodo), roaDiaHabilVencimientoAporte, 1)
			    END fechaVencimiento,
			                
			    CASE WHEN roa.roaOportunidadPago = 'MES_ACTUAL' 
			        THEN 
			            dbo.UFN_SumarDiasFecha(DATEADD(MONTH, 1, :dFechaPeriodo), roaDiaHabilVencimientoAporte, 1)
			        ELSE 
			            dbo.UFN_SumarDiasFecha(:dFechaPeriodo, roaDiaHabilVencimientoAporte, 1)
			    END siguienteFechaVencimiento,
			    
				roaFechaAfiliacion
			FROM dbo.Persona per 
				LEFT JOIN dbo.Afiliado afi ON afi.afiPersona = Per.perId
				LEFT JOIN dbo.RolAfiliado roa ON afi.afiId = roa.roaAfiliado
			WHERE perTipoIdentificacion = :sTipoID 
				AND perNumeroIdentificacion = :sNumID
				AND (roaId IS NULL OR roaTipoAfiliado = :sTipoCotiz)
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.AporteDetallado.estadoAporteYRegistroGeneral">
		<description>Consulta del estado del aporte más reciente de una persona y su registro general en staging</description>
		<query>
			SELECT TOP 1 apd.apdEstadoRegistroAporteArchivo, 
				apg.apgRegistroGeneral 
			FROM dbo.AporteDetallado apd
			INNER JOIN dbo.AporteGeneral apg ON apd.apdAporteGeneral = apg.apgId
			WHERE apd.apdPersona = :iIdPersona
			AND apd.apdTipoCotizante = :sTipoCotiz
			AND apg.apgPeriodoAporte = :sPeriodo
			<!-- 			AND apg.apgFechaRecaudo &lt;= :dFechaHabil -->
			ORDER BY apd.apdEstadoRegistroAporteArchivo desc
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.vistaEstadoAfiliacion.pensionado">
		<description>Consulta del estado de afiliación de aportante como pensionado</description>
		<query>
			SELECT roaEstadoAfiliado
			FROM dbo.VW_EstadoAfiliacionPersonaPensionado
			WHERE perTipoIdentificacion = :sTipoID
			AND perNumeroIdentificacion = :sNumID
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.vistaEstadoAfiliacion.independiente">
		<description>Consulta del estado de afiliación de aportante como trabajador independiente</description>
		<query>
			SELECT roaEstadoAfiliado
			FROM dbo.VW_EstadoAfiliacionPersonaIndependiente
			WHERE perTipoIdentificacion = :sTipoID
			AND perNumeroIdentificacion = :sNumID
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.clasificación.independiente">
		<description>Consulta la clasificación de la afiliación del trabajador independiente</description>
		<query>
			SELECT solclasificacion from solicitud
			WHERE solid = :idSolicitud
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.porcentaje.independiente">
		<description>Consulta el porcentaje de pago del ultimo aporte</description>
		<query>
			select top 1 apdTarifa from aportedetallado apd
			inner join Persona per on per.perId = apd.apdPersona
			where perNumeroIdentificacion = :numeroIdentificacion
			and perTipoIdentificacion = :tipoIdentificacion
			order by apdId desc
		</query>
	</named-native-query>
	<named-query name="Aportes.actualizar.marca.conciliado.aporte.general">
		<query> 
			UPDATE AporteGeneral apg SET apg.conciliado = 1 
			WHERE apg.id IN (:idsAporteGeneral)
		</query>
	</named-query>
	<named-query name="Aportes.Novedad.consultarHistorico.Recientes">
		<query>
			SELECT new
			com.asopagos.aportes.dto.HistoricoNovedadesDTO(nd,s,roa) FROM
			SolicitudNovedad sn,
			Solicitud s,
			SolicitudNovedadPersona snp,
			NovedadDetalle nd,
			Persona p,
			RolAfiliado roa join roa.empleador empl join empl.empresa empr join empr.persona per 
			WHERE
			snp.idSolicitudNovedad = sn.idSolicitudNovedad
			and sn.solicitudGlobal
			= s.idSolicitud
			and sn.idSolicitudNovedad= nd.idSolicitudNovedad
			and
			roa.idRolAfiliado=snp.idRolAfiliado
			and p.idPersona= snp.idPersona
			and
			p.tipoIdentificacion=:tipoIdentificacion
			and
			p.numeroIdentificacion=:numeroIdentificacion
			and nd.fechaInicio &gt;=:fechaFin
			ORDER BY nd.fechaInicio ASC 
		</query>
	</named-query>
	<named-query name="Aportes.Novedad.consultarHistoricoRetiro.recientes">
		<query>
			SELECT new
			com.asopagos.aportes.dto.HistoricoNovedadesDTO(s,roa) FROM
			SolicitudNovedad sn,
			Solicitud s,
			SolicitudNovedadPersona snp,
			Persona p,
			RolAfiliado roa join roa.empleador empl join empl.empresa empr join empr.persona per
			WHERE
			snp.idSolicitudNovedad = sn.idSolicitudNovedad
			and sn.solicitudGlobal= s.idSolicitud
			and
			roa.idRolAfiliado=snp.idRolAfiliado
			and p.idPersona= snp.idPersona
			and
			p.tipoIdentificacion=:tipoIdentificacion
			and
			p.numeroIdentificacion=:numeroIdentificacion
			and s.tipoTransaccion in (:novedadesRetiro)
			and roa.fechaRetiro &gt;=:fechaFin
			ORDER BY roa.fechaRetiro ASC 
		</query>
	</named-query>
	<named-query name="Aportes.Novedad.consultarHistorico.sin.rol.afiliado">
		<query>
			SELECT new com.asopagos.aportes.dto.HistoricoNovedadesDTO(nd,s) FROM
			SolicitudNovedad sn,
			Solicitud s,
			SolicitudNovedadPersona snp,
			NovedadDetalle nd,
			Persona p
			WHERE snp.idSolicitudNovedad = sn.idSolicitudNovedad
			and sn.solicitudGlobal = s.idSolicitud
			and sn.idSolicitudNovedad= nd.idSolicitudNovedad
			and p.idPersona= snp.idPersona
			and p.tipoIdentificacion=:tipoIdentificacion
			and p.numeroIdentificacion=:numeroIdentificacion
			and nd.fechaInicio BETWEEN :fechaInicio AND :fechaFin
			and snp.idRolAfiliado is null
		</query>
	</named-query>
	<named-query name="Aportes.consultar.datos.aportante.persona">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosAportanteDTO(apg,per) FROM AporteGeneral apg, Persona per
			WHERE apg.idPersona=per.idPersona
			and per.numeroIdentificacion=:numeroIdentificacion
			and per.tipoIdentificacion=:tipoIdentificacion order by apg.fechaProcesamiento desc, apg.periodoAporte desc 
		</query>
	</named-query>
	<named-query name="Aportes.consultar.datos.aportante.persona.cotizante">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosAportanteDTO(apg,per,apd) FROM AporteGeneral apg, Persona per, AporteDetallado apd, Persona perCot
			WHERE apg.idPersona=per.idPersona
			and apg.id = apd.idAporteGeneral
			and apd.idPersona = perCot.idPersona 
			and perCot.numeroIdentificacion=:numeroIdentificacionCot
			and per.tipoIdentificacion=:tipoIdentificacion order by apg.fechaProcesamiento desc, apg.periodoAporte desc 
		</query>
	</named-query>
	<named-query name="Aportes.consultar.datos.aportante.empresa.cotizante">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosAportanteDTO(apg,per,apd) FROM AporteGeneral apg, Empresa emp, Persona per, AporteDetallado apd, Persona perCot
			WHERE apg.idEmpresa=emp.idEmpresa
			and emp.persona.idPersona=per.idPersona
			and apg.id = apd.idAporteGeneral
			and apd.idPersona = perCot.idPersona 
			and perCot.numeroIdentificacion=:numeroIdentificacionCot
			and per.tipoIdentificacion=:tipoIdentificacion order by apg.fechaProcesamiento desc, apg.periodoAporte desc
		</query>
	</named-query>
	<named-query name="Aportes.consultar.datos.aportante.persona.apo.cotizante">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosAportanteDTO(apg,per,apd) FROM AporteGeneral apg, Persona per, AporteDetallado apd, Persona perCot, Empresa em
			WHERE apg.id = apd.idAporteGeneral
			and apd.idPersona = perCot.idPersona 
			and per.numeroIdentificacion=:numeroIdentificacion
			and perCot.numeroIdentificacion=:numeroIdentificacionCot
			and per.tipoIdentificacion=:tipoIdentificacion 
			and apg.idEmpresa = em.idEmpresa
			and em.persona.idPersona = per.idPersona
			order by apg.fechaProcesamiento desc, apg.periodoAporte desc  
		</query>
	</named-query>
	<named-query name="Aportes.consultar.datos.aportante.empresa.apo.cotizante">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosAportanteDTO(apg,per,apd) FROM AporteGeneral apg, Empresa emp, Persona per, AporteDetallado apd, Persona perCot
			WHERE apg.idEmpresa=emp.idEmpresa
			and emp.persona.idPersona=per.idPersona
			and apg.id = apd.idAporteGeneral
			and apd.idPersona = perCot.idPersona 
			and per.numeroIdentificacion=:numeroIdentificacion
			and perCot.numeroIdentificacion=:numeroIdentificacionCot
			and per.tipoIdentificacion=:tipoIdentificacion order by apg.fechaProcesamiento desc, apg.periodoAporte desc
		</query>
	</named-query>
	<!-- <named-query name="Aportes.consultar.detalle.datos.aportante">
		<query>
			select 
				apg.apgTipoSolicitante as tipoAportante,
				apg.apgPeriodoAporte as periodoAporte,
				apg.apgValTotalApoObligatorio as valorAporte,
				apg.apgValorIntMora as valorInteresMora,
				apg.apgFechaRecaudo as fechaRecaudo,
				apg.apgModalidadRecaudoAporte as metodoRecaudo,
				apg.apgEstadoAportante as estadoAportante,
				apg.apgPagadorPorTerceros as pagadorPorTerceros,
				apg.apgRegistroGeneral as idRegistroGeneral,
				(CASE WHEN apg.apgSucursalEmpresa is not null THEN (select top(1) sue.sueCodigo from
	SucursalEmpresa sue where sue.sueId = apg.apgSucursalEmpresa) ELSE null END) as codigoSucursal,
				(CASE WHEN apg.apgEmpresa is not null THEN (select top(1) empl.empDiaHabilVencimientoAporte from
	empleador empl where empl.empEmpresa = apg.apgEmpresa order by empl.empId desc)
				WHEN apg.apgPersona is not null THEN (select top(1) roa.roaDiaHabilVencimientoAporte from
	RolAfiliado roa join afiliado afi on roa.roaAfiliado = afi.afiId where afi.afiPersona =
	apg.apgPersona order by roa.roaId desc) END) as diaHabilVencimientoAporte
			from AporteGeneral apg where apg.apgId in (:idAporteGeneral)
			
		
		
			SELECT new com.asopagos.aportes.dto.DetalleDatosAportanteDTO(apg, sue.codigo) FROM AporteGeneral
	apg, SucursalEmpresa sue
			WHERE apg.idSucursalEmpresa = sue.idSucursalEmpresa 
			AND apg.id in (:idAporteGeneral)
			
			SELECT new com.asopagos.aportes.dto.DetalleDatosAportanteDTO(apg) FROM AporteGeneral apg
			WHERE apg.id in (:idAporteGeneral)
		</query>
	</named-query> -->
	<named-query name="Aportes.consultar.datos.cotizante">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosCotizanteIntegracionDTO(perC)
			FROM Persona perC, Persona perA, AporteGeneral apg, AporteDetallado apd, Empresa e
			WHERE apg.id = apd.idAporteGeneral
			and apd.idPersona=perC.idPersona
			and e.idEmpresa = apg.idEmpresa
			and e.persona.idPersona = perA.idPersona
			and (:numeroIdentificacion IS NULL OR perC.numeroIdentificacion=:numeroIdentificacion)
			and (:numeroIdentificacionApo IS NULL OR perA.numeroIdentificacion=:numeroIdentificacionApo)
			and perC.tipoIdentificacion=:tipoIdentificacion 
			order by apg.periodoAporte desc
		</query>
	</named-query>
	<named-query name="Aportes.consultar.datos.cotizante.empresa">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosCotizanteIntegracionDTO(perC) FROM Persona perC, Persona perA, AporteGeneral apg, AporteDetallado apd, Empresa emp
			WHERE apg.id = apd.idAporteGeneral
			and apg.idEmpresa=emp.idEmpresa
			and emp.persona.idPersona=perA.idPersona
			and apd.idPersona=perC.idPersona
			and (:numeroIdentificacion IS NULL OR perC.numeroIdentificacion=:numeroIdentificacion)
			and (:numeroIdentificacionApo IS NULL OR perA.numeroIdentificacion=:numeroIdentificacionApo)
			and perC.tipoIdentificacion=:tipoIdentificacion 
		</query>
	</named-query>
	<named-query name="Aportes.consultar.detalle.datos.cotizante">
		<query>
			SELECT new com.asopagos.aportes.dto.DetalleDatosCotizanteDTO(apg,apd,perA) FROM AporteGeneral apg, AporteDetallado apd, Persona perA
			WHERE apg.idPersona = perA.idPersona
			AND apg.id = apd.idAporteGeneral 
			AND apd.idPersona =:idPersona order by apg.fechaProcesamiento desc, apg.periodoAporte desc
		</query>
	</named-query>
	<named-query name="Aportes.consultar.detalle.datos.cotizante.empresa">
		<query>
			SELECT new com.asopagos.aportes.dto.DetalleDatosCotizanteDTO(apg,apd,perA) FROM AporteGeneral apg, 
			AporteDetallado apd, Persona perA, Empresa emp
			WHERE apg.idEmpresa = emp.idEmpresa
			AND emp.persona.idPersona = perA.idPersona
			AND apg.id = apd.idAporteGeneral 
			AND apd.idPersona =:idPersona order by apg.fechaProcesamiento desc, apg.periodoAporte desc
		</query>
	</named-query>
	<named-query name="Aportes.consultar.datos.aportante.persona.periodo">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosAportanteDTO(apg,per) FROM AporteGeneral apg, Persona per
			WHERE apg.idPersona=per.idPersona
			and apg.periodoAporte BETWEEN :periodoInicial AND :periodoFinal
			and per.numeroIdentificacion=:numeroIdentificacion
			and per.tipoIdentificacion=:tipoIdentificacion order by apg.fechaProcesamiento desc, apg.periodoAporte desc 
		</query>
	</named-query>
	<named-query name="Aportes.consultar.datos.aportante.empresa.periodo">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosAportanteDTO(apg,per) FROM AporteGeneral apg, Empresa emp, Persona per
			WHERE apg.idEmpresa=emp.idEmpresa
			and emp.persona.idPersona=per.idPersona
			and apg.periodoAporte BETWEEN :periodoInicial AND :periodoFinal
			and per.numeroIdentificacion=:numeroIdentificacion
			and per.tipoIdentificacion=:tipoIdentificacion order by apg.fechaProcesamiento desc, apg.periodoAporte desc
		</query>
	</named-query>
	<named-query name="Aportes.consultar.datos.aportante.persona.periodo.apo.cot">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosAportanteDTO(apg,per) FROM AporteGeneral apg, Persona per, AporteDetallado apd, Persona perCot
			WHERE apg.idPersona=per.idPersona
			and apg.periodoAporte BETWEEN :periodoInicial AND :periodoFinal
			and apg.id = apd.idAporteGeneral
			and apd.idPersona = perCot.idPersona 
			and per.numeroIdentificacion=:numeroIdentificacion
			and perCot.numeroIdentificacion=:numeroIdentificacionCot
			and per.tipoIdentificacion=:tipoIdentificacion order by apg.fechaProcesamiento desc, apg.periodoAporte desc 
		</query>
	</named-query>
	<named-query name="Aportes.consultar.datos.aportante.empresa.periodo.apo.cot">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosAportanteDTO(apg,per) FROM AporteGeneral apg, Empresa emp, Persona per, AporteDetallado apd, Persona perCot
			WHERE apg.idEmpresa=emp.idEmpresa
			and emp.persona.idPersona=per.idPersona
			and apg.periodoAporte BETWEEN :periodoInicial AND :periodoFinal
			and apg.id = apd.idAporteGeneral
			and apd.idPersona = perCot.idPersona 
			and per.numeroIdentificacion=:numeroIdentificacion
			and perCot.numeroIdentificacion=:numeroIdentificacionCot
			and per.tipoIdentificacion=:tipoIdentificacion order by apg.fechaProcesamiento desc, apg.periodoAporte desc
		</query>
	</named-query>
	<named-query name="Aportes.consultar.datos.aportante.persona.periodo.cotizante">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosAportanteDTO(apg,per) FROM AporteGeneral apg, Persona per, AporteDetallado apd, Persona perCot
			WHERE apg.idPersona=per.idPersona
			and apg.periodoAporte BETWEEN :periodoInicial AND :periodoFinal
			and apg.id = apd.idAporteGeneral
			and apd.idPersona = perCot.idPersona 
			and perCot.numeroIdentificacion=:numeroIdentificacionCot
			and per.tipoIdentificacion=:tipoIdentificacion order by apg.fechaProcesamiento desc, apg.periodoAporte desc 
		</query>
	</named-query>
	<named-query name="Aportes.consultar.datos.aportante.empresa.periodo.cotizante">
		<query>
			SELECT new com.asopagos.aportes.dto.DatosAportanteDTO(apg,per) FROM AporteGeneral apg, Empresa emp, Persona per, AporteDetallado apd, Persona perCot
			WHERE apg.idEmpresa=emp.idEmpresa
			and emp.persona.idPersona=per.idPersona
			and apg.periodoAporte BETWEEN :periodoInicial AND :periodoFinal
			and apg.id = apd.idAporteGeneral
			and apd.idPersona = perCot.idPersona 
			and perCot.numeroIdentificacion=:numeroIdentificacionCot
			and per.tipoIdentificacion=:tipoIdentificacion order by apg.fechaProcesamiento desc, apg.periodoAporte desc
		</query>
	</named-query>
	<named-query name="Aportes.consultar.detalle.datos.cotizante.periodos">
		<query>
			SELECT new com.asopagos.aportes.dto.DetalleDatosCotizanteDTO(apg,apd,perA) FROM AporteGeneral apg, AporteDetallado apd, Persona perA
			WHERE apg.idPersona = perA.idPersona
			AND apg.id = apd.idAporteGeneral 
			AND apg.periodoAporte BETWEEN :periodoInicial AND :periodoFinal
			AND apd.idPersona =:idPersona order by apg.fechaProcesamiento desc, apg.periodoAporte desc
		</query>
	</named-query>
	<named-query name="Aportes.consultar.detalle.datos.cotizante.periodos.empresa">
		<query>
			SELECT new com.asopagos.aportes.dto.DetalleDatosCotizanteDTO(apg,apd,perA) FROM AporteGeneral apg, AporteDetallado apd, 
			Persona perA, Empresa emp
			WHERE apg.idEmpresa =emp.idEmpresa 
			AND emp.persona.idPersona = perA.idPersona
			AND apg.id = apd.idAporteGeneral 
			AND apg.periodoAporte BETWEEN :periodoInicial AND :periodoFinal
			AND apd.idPersona =:idPersona order by apg.fechaProcesamiento desc, apg.periodoAporte desc
		</query>
	</named-query>
	<named-query name="Aportes.dia.vencimiento.aporte.afiliado">
		<query>
			select roa.diaHabilVencimientoAporte from RolAfiliado roa 
			where roa.afiliado.persona.idPersona=:idPersona
		</query>
	</named-query>
	<named-query name="Aportes.dia.vencimiento.aporte.empleador">
		<query>
			select empl.diaHabilVencimientoAporte from Empleador empl 
			where empl.empresa.persona.idPersona=:idPersona 		
		</query>
	</named-query>
	<named-native-query name="Aportes.consultar.aportes.con.correcciones.devoluciones">
		<query>
			SELECT  DISTINCT moa.moaAporteGeneral FROM  MovimientoAporte moa  
			inner join AporteGeneral apg on moa.moaAporteGeneral = apg.apgid
			WHERE ((:idPersona IS NULL OR apg.apgPersona=:idPersona)
				OR (:idEmpresa IS NULL OR apg.apgEmpresa=:idEmpresa) 
				OR (:idEmpresa IS NULL OR apg.apgempresaTramitadoraAporte=:idEmpresa))
			AND moa.moatipoMovimiento=:tipoMovimiento
			AND (moa.moatipoAjuste='CORRECCION_A_LA_BAJA'
				OR moa.moatipoAjuste='DEVOLUCION') 
			AND (:tipoSolicitante IS NULL OR apg.apgtipoSolicitante=:tipoSolicitante)
			AND (:periodo IS NULL OR apg.apgperiodoAporte=:periodo)
			AND (:fechaInicio IS NULL OR moa.moafechaCreacion &gt;= :fechaInicio)
			AND (:fechaFin IS NULL OR moa.moafechaCreacion &lt;= :fechaFin)
		</query>
	</named-native-query>

		<named-native-query name="Aportes.consultar.aportes.con.correcciones.devoluciones.empleador">
		<query>
		select moaAporteGeneral
			from dbo.MovimientoAporte as moa
			inner join dbo.AporteGeneral apg on apg.apgId=moa.moaAporteGeneral
			where
			 (:fechaInicio IS NULL OR moa.moafechaCreacion &gt;= :fechaInicio)
			AND (:fechaFin IS NULL OR moa.moafechaCreacion &lt;= :fechaFin)
			and moa.moaTipoMovimiento = :tipoMovimiento
			and apg.apgEmpresa = :idEmpresa AND (:periodo IS NULL OR apg.apgperiodoAporte=:periodo)
			AND (moa.moatipoAjuste='CORRECCION_A_LA_BAJA'
				OR moa.moatipoAjuste='DEVOLUCION') 
			group by moaAporteGeneral

			
		</query>
	</named-native-query>

	<named-query name="Aportes.Consultar.RolAfiliado.buscar.idAfiliado.masivo">
		<description>Busca roles de afiliados por listado de id de afiliado</description>
		<query>
            SELECT new com.asopagos.dto.modelo.RolAfiliadoModeloDTO(roa, afi) 
            FROM RolAfiliado roa, Afiliado afi LEFT JOIN afi.persona per
            WHERE afi.idAfiliado = roa.afiliado
            AND afi.idAfiliado IN (:idAfiliados)
        </query>
	</named-query>
	<named-query name="Aportes.consultar.aportante.nuevo.correccion">
		<query>
			SELECT new com.asopagos.dto.modelo.PersonaModeloDTO(per)
			FROM SolicitudCorreccionAporte sa , Correccion cor, AporteGeneral apg, Persona per
			WHERE sa.idAporteGeneralNuevo = :idAporteGeneralAnt 
			AND sa.estadoSolicitud = com.asopagos.enumeraciones.aportes.EstadoSolicitudAporteEnum.CERRADA
			AND cor.idSolicitudCorreccionAporte = sa.idSolicitudCorreccionAporte
			AND (:idAporteDetalladoAnt IS NULL OR cor.idAporteDetalladoCorregido = :idAporteDetalladoAnt) 
			AND apg.id = cor.idAporteGeneralNuevo
			AND (per.idPersona = (SELECT ag.idPersona FROM AporteGeneral ag WHERE ag.id=apg.id AND ag.idEmpresa IS NULL)
				OR per.idPersona = (SELECT emp.persona.idPersona FROM AporteGeneral ag, Empresa emp WHERE ag.id=apg.id AND ag.idPersona IS NULL
					AND emp.idEmpresa=ag.idEmpresa))
		</query>
	</named-query>

	<named-query name="Aportes.consultar.PilaEstadoTransitoriaGestion">
		<query>
			SELECT pet 
			FROM PilaEstadoTransitorio pet 
			WHERE pet.pilaIndicePlanilla = :idAporteGeneral
			AND (pet.estado = com.asopagos.enumeraciones.aportes.PilaEstadoTransitorioEnum.FALLIDO OR (pet.accion = com.asopagos.enumeraciones.aportes.PilaAccionTransitorioEnum.NOTIFICAR_PLANILLA AND pet.estado = com.asopagos.enumeraciones.aportes.PilaEstadoTransitorioEnum.EXITOSO)) 
		</query>
	</named-query>

	<named-native-query name="Aportes.datos.devolucion">
		<query>
			SELECT SUM(ma.moaValorAporte) as montoAporte, SUM(ma.moaValorInteres) as montoInteres
			FROM DevolucionAporte d, DevolucionAporteDetalle dd ,SolicitudDevolucionAporte sd,
			MovimientoAporte ma
			WHERE d.dapId = dd.dadDevolucionAporte
			AND dd.dadMovimientoAporte = ma.moaId
			AND sd.sdaDevolucionAporte = d.dapId
			AND sd.sdaId = :idSolicitudDevolucion
			AND ma.moaAporteGeneral =:idAporte
			AND ma.moaTipoAjuste='DEVOLUCION'
		</query>
	</named-native-query>
	<named-native-query name="Aportes.datos.correccion">
		<query>
			SELECT sc.scaid, sc.scaSolicitudGlobal, sc.scaAporteGeneral, apg.apgValTotalApoObligatorio as monto,
			apg.apgValorIntMora as interes
			FROM SolicitudCorreccionAporte sc, correccion cor, AporteGeneral apg
			WHERE cor.corSolicitudCorreccionAporte = sc.scaId
			and apg.apgId = cor.corAporteGeneral
			and sc.scaAporteGeneral in (:idAporte)
			AND sc.scaestadoSolicitud='CERRADA' 
			group by sc.scaid, sc.scaSolicitudGlobal, sc.scaAporteGeneral, apg.apgValTotalApoObligatorio, apg.apgValorIntMora
		</query>
	</named-native-query>
	<named-native-query name="Consultar.datos.completos.planilla.cuenta">
		<query>
			SELECT COUNT(*)
			FROM AporteDetallado
			INNER JOIN AporteGeneral ON apdAporteGeneral = apgId
			WHERE apgRegistroGeneral = :idPlanilla
		</query>
	</named-native-query>
	<named-native-query name="Consultar.datos.planilla.pago.obligatorio">
		<query>
			SELECT regValTotalApoObligatorio
			FROM staging.RegistroGeneral
			WHERE regNumPlanilla = :idPlanilla
		</query>
	</named-native-query>
	<named-native-query name="Consultar.datos.planilla.valor.mora">
		<query>
			SELECT regValorIntMora
			FROM staging.RegistroGeneral
			WHERE regNumPlanilla = :idPlanilla
		</query>
	</named-native-query>
	<named-native-query name="Consultar.datos.planilla.total.recaudo">
		<query>
			SELECT regValTotalApoObligatorio + regValorIntMora as total
			FROM staging.RegistroGeneral
			WHERE regNumPlanilla = :idPlanilla
		</query>
	</named-native-query>
	<named-native-query name="Consultar.datos.planilla.tarifa.cotizante">
		<query>
			SELECT rd.redTarifa
			FROM staging.RegistroGeneral rg
			INNER JOIN staging.RegistroDetallado rd
			ON rg.regId = rd.redRegistroGeneral
			WHERE rg.regNumPlanilla = :idPlanilla
		</query>
	</named-native-query>
	<named-native-query name="Consultar.datos.planilla.tarifa.aportante">
		<query>
			SELECT rg.regOUTTarifaEmpleador
			FROM staging.RegistroGeneral rg
			INNER JOIN staging.RegistroDetallado rd
			ON rg.regId = rd.redRegistroGeneral
			WHERE rg.regNumPlanilla = :idPlanilla
		</query>
	</named-native-query>
	<named-native-query name="Aportes.Consultar.SolicitudNovedadPila.buscar.id.masivo">
		<query>
			SELECT spi.spiRegistroDetallado, pan.novTipoTransaccion 
			FROM SolicitudNovedadPila spi
			inner join pila.TemNovedad as ten on ten.tenRegistroDetallado = spi.spiRegistroDetallado and ten.tenRegistroDetalladoNovedad = spi.spiIdRegistroDetalladoNovedad
			INNER JOIN SolicitudNovedad son ON son.snoId = spi.spiSolicitudNovedad
			INNER JOIN ParametrizacionNovedad pan ON son.snoNovedad = pan.novId
			WHERE spi.spiRegistroDetallado IN (:idRegistroDetallado)
		</query>
	</named-native-query>

	<named-native-query name="Aportes.consultar.cuenta.aporte.original.cotizante">
		<query>
			SELECT apd.apdId, apg.apgFechaRecaudo, moa.moaTipoMovimiento, CONVERT(DATE, apg.apgPeriodoAporte + '-01', 121) apgPeriodoAporte,  
				CAST(CASE
					WHEN (
						SELECT COUNT(moa2.moaId)
						FROM MovimientoAporte moa2
						WHERE moa2.moaAporteDetallado = apd.apdId
						AND moa2.moaTipoMovimiento NOT IN ('RECAUDO_MANUAL', 'RECAUDO_PILA_AUTOMATICO')
					) > 0 THEN 1 ELSE 0
				END AS BIT) tieneModificaciones,
				moa.moaValorAporte, moa.moaValorInteres, (moa.moaValorAporte + moa.moaValorInteres) totalAporte, apd.apdRegistroDetallado
			FROM AporteGeneral apg 
			INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId 
			INNER JOIN MovimientoAporte moa ON moa.moaAporteGeneral = apg.apgId AND moa.moaAporteDetallado = apd.apdId
			WHERE apd.apdId = :idAporteDetallado
			AND moa.moaTipoMovimiento IN ('RECAUDO_MANUAL', 'RECAUDO_PILA_AUTOMATICO')
		</query>
	</named-native-query>
	<named-native-query name="Aportes.Consultar.AporteGeneral.datosCierre.resumen.registrados">
		<description>Consulta de datos para el resumen de cierre de aportes</description>
		<query>
            SELECT SUM(ISNULL(montoAporte, 0) * :signo) as valorAporte, SUM(ISNULL(montoInteres, 0) * :signo) as valorInteres, tipoSolicitante, marcaPeriodo, tarifa
			FROM (
				SELECT 
			        SUM(
			        	CASE WHEN :evaluarReconocimiento = 0 
			        		THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorAporte * -1 ELSE moa.moaValorAporte END)
			        		ELSE apd.apdAporteObligatorio
			        	END
			        ) as montoAporte, 
			        SUM(
			        	CASE WHEN :evaluarReconocimiento = 0 
			        		THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorInteres * -1 ELSE moa.moaValorInteres END)
			        		ELSE apd.apdValorIntMora
			        	END
			        ) as montoInteres, 
			        apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo,
					case when apd.apdTipoCotizante = 'TRABAJADOR_INDEPENDIENTE'then apd.apdTarifa end as tarifa
				FROM AporteGeneral apg 
				INNER JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
				INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId
				WHERE 
				((:filtrarReconocimiento = 1 and :evaluarEstado = 1 and apg.apgEstadoRegistroAporteAportante &lt; &gt; 'OTROS_INGRESOS' and (apg.apgFechaRecaudo NOT BETWEEN :fechaInicio AND :fechaFin))) 
				and
				(
						:evaluarEstado = 0 OR apg.apgEstadoRegistroAporteAportante IN (:estadosRegistro)
					)
					AND moa.moaTipoMovimiento in (:tiposMovimiento)
					AND (
						(:filtrarReconocimiento = 0 AND moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin)
						OR (:filtrarReconocimiento = 1 
							AND apg.apgFechaReconocimiento BETWEEN :fechaInicio AND :fechaFin
							AND (:evaluarReconocimiento = 0 OR moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin)
						)
					)
					AND ISNULL(apg.apgFormaReconocimientoAporte, '') in (:formasReconocimiento)
					AND apg.apgApoConDetalle = 1
					AND apd.apdId = moa.moaAporteDetallado
					AND (
						:evaluarReconocimiento = 0 OR apg.apgFechaReconocimiento BETWEEN :fechaInicio AND :fechaFin
					)
					AND (
						(:esCorreccion = 1 AND apg.apgOrigenAporte = 'CORRECCION_APORTE' OR moa.moaTipoAjuste = 'CORRECCION_A_LA_BAJA')
						OR (:esCorreccion = 0 AND ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE')
				)
				GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo , case when apd.apdTipoCotizante = 'TRABAJADOR_INDEPENDIENTE'then apd.apdTarifa end 
				UNION
				SELECT 
			        SUM(
			        	CASE WHEN :evaluarReconocimiento = 0 
			        		THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorAporte * -1 ELSE moa.moaValorAporte END)
			        		ELSE apgValTotalApoObligatorio
			        	END
			        ) as montoAporte, 
			        SUM(
			        	CASE WHEN :evaluarReconocimiento = 0 
			        		THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorInteres * -1 ELSE moa.moaValorInteres END)
			        		ELSE apgValorIntMora
			        	END 
			        ) as montoInteres, 
			        (CASE
			            WHEN apg.apgTipoSolicitante = 'EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			            WHEN apg.apgTipoSolicitante = 'INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' 
						WHEN apg.apgTipoSolicitante = 'PENSIONADO' THEN 'PENSIONADO'

			        END) as tipoSolicitante, apg.apgMarcaPeriodo as marcaPeriodo,
					null as tarifa
				FROM AporteGeneral apg 
				INNER JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
				WHERE 
				((:filtrarReconocimiento = 1 and :evaluarEstado = 1 and apg.apgEstadoRegistroAporteAportante &lt; &gt; 'OTROS_INGRESOS' and (apg.apgFechaRecaudo NOT BETWEEN :fechaInicio AND :fechaFin))) 
				and
				(
						:evaluarEstado = 0 OR apg.apgEstadoRegistroAporteAportante IN (:estadosRegistro)
					)
					AND moa.moaTipoMovimiento IN (:tiposMovimiento)
					AND (
						(:filtrarReconocimiento = 0 AND moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin)
						OR (:filtrarReconocimiento = 1 
							AND apg.apgFechaReconocimiento BETWEEN :fechaInicio AND :fechaFin
							AND (:evaluarReconocimiento = 0 OR moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin)
						)
					)
					AND ISNULL(apg.apgFormaReconocimientoAporte, '') in (:formasReconocimiento)
					AND apg.apgApoConDetalle = 0
					AND (
						:evaluarReconocimiento = 0 OR apg.apgFechaReconocimiento BETWEEN :fechaInicio AND :fechaFin
					)
					AND (
						(:esCorreccion = 1 AND apg.apgOrigenAporte = 'CORRECCION_APORTE' OR moa.moaTipoAjuste = 'CORRECCION_A_LA_BAJA')
						OR (:esCorreccion = 0 AND ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE')
				)
				GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo) aportes 
			GROUP by tipoSolicitante, marcaPeriodo, tarifa
	   </query>
	</named-native-query>

	
		<named-native-query name="Aportes.Consultar.AporteGeneral.datosCierre.resumen.old">
		<description>Consulta de datos para el resumen de cierre de aportes</description>
		<query>
           SELECT SUM(ISNULL(montoAporte, 0) * :signo) as valorAporte, SUM(ISNULL(montoInteres, 0) * :signo) as valorInteres, tipoSolicitante, marcaPeriodo, tarifa
			FROM (
				SELECT 
			        SUM(
			        	CASE WHEN :evaluarReconocimiento = 0 
			        		THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorAporte * -1 ELSE moa.moaValorAporte END)
			        		ELSE apd.apdAporteObligatorio
			        	END
			        ) as montoAporte, 
			        SUM(
			        	CASE WHEN :evaluarReconocimiento = 0 
			        		THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorInteres * -1 ELSE moa.moaValorInteres END)
			        		ELSE apd.apdValorIntMora
			        	END
			        ) as montoInteres, 
			        apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo,
					case when apd.apdTipoCotizante = 'TRABAJADOR_INDEPENDIENTE'then apd.apdTarifa end as tarifa
				FROM AporteGeneral apg 
				INNER JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
				INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId
				WHERE 
				((:filtrarReconocimiento = 1 and :evaluarEstado = 1 and apg.apgEstadoRegistroAporteAportante &lt; &gt; 'OTROS_INGRESOS' and (apg.apgFechaRecaudo NOT BETWEEN :fechaInicio AND :fechaFin)) or 1=1) 
				and
				(
						:evaluarEstado = 0 OR apg.apgEstadoRegistroAporteAportante IN (:estadosRegistro)
					)
					AND moa.moaTipoMovimiento in (:tiposMovimiento)
					AND (
						(:filtrarReconocimiento = 0 AND moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin)
						OR (:filtrarReconocimiento = 1 
							AND apg.apgFechaReconocimiento BETWEEN :fechaInicio AND :fechaFin
							AND (:evaluarReconocimiento = 0 OR moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin)
						)
					)
					AND ISNULL(apg.apgFormaReconocimientoAporte, '') in (:formasReconocimiento)
					AND apg.apgApoConDetalle = 1
					AND apd.apdId = moa.moaAporteDetallado
					AND (
						:evaluarReconocimiento = 0 OR apg.apgFechaReconocimiento BETWEEN :fechaInicio AND :fechaFin
					)
					AND (
						(:esCorreccion = 1 AND apg.apgOrigenAporte = 'CORRECCION_APORTE' OR moa.moaTipoAjuste = 'CORRECCION_A_LA_BAJA')
						OR (:esCorreccion = 0 AND ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE')
				)
				GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo , case when apd.apdTipoCotizante = 'TRABAJADOR_INDEPENDIENTE'then apd.apdTarifa end 
				UNION
				SELECT 
			        SUM(
			        	CASE WHEN :evaluarReconocimiento = 0 
			        		THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorAporte * -1 ELSE moa.moaValorAporte END)
			        		ELSE apgValTotalApoObligatorio
			        	END
			        ) as montoAporte, 
			        SUM(
			        	CASE WHEN :evaluarReconocimiento = 0 
			        		THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorInteres * -1 ELSE moa.moaValorInteres END)
			        		ELSE apgValorIntMora
			        	END 
			        ) as montoInteres, 
			        (CASE
			            WHEN apg.apgTipoSolicitante = 'EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			            WHEN apg.apgTipoSolicitante = 'INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' 
						WHEN apg.apgTipoSolicitante = 'PENSIONADO' THEN 'TRABAJADOR_DEPENDIENTE'

			        END) as tipoSolicitante, apg.apgMarcaPeriodo as marcaPeriodo,
					null as tarifa
				FROM AporteGeneral apg 
				INNER JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
				WHERE 
				((:filtrarReconocimiento = 1 and :evaluarEstado = 1 and apg.apgEstadoRegistroAporteAportante &lt; &gt; 'OTROS_INGRESOS' and (apg.apgFechaRecaudo NOT BETWEEN :fechaInicio AND :fechaFin)) or 1=1) 
				and
				(
						:evaluarEstado = 0 OR apg.apgEstadoRegistroAporteAportante IN (:estadosRegistro)
					)
					AND moa.moaTipoMovimiento IN (:tiposMovimiento)
					AND (
						(:filtrarReconocimiento = 0 AND moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin)
						OR (:filtrarReconocimiento = 1 
							AND apg.apgFechaReconocimiento BETWEEN :fechaInicio AND :fechaFin
							AND (:evaluarReconocimiento = 0 OR moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin)
						)
					)
					AND ISNULL(apg.apgFormaReconocimientoAporte, '') in (:formasReconocimiento)
					AND apg.apgApoConDetalle = 0
					AND (
						:evaluarReconocimiento = 0 OR apg.apgFechaReconocimiento BETWEEN :fechaInicio AND :fechaFin
					)
					AND (
						(:esCorreccion = 1 AND apg.apgOrigenAporte = 'CORRECCION_APORTE' OR moa.moaTipoAjuste = 'CORRECCION_A_LA_BAJA')
						OR (:esCorreccion = 0 AND ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE')
				)
				GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo) aportes 
			GROUP by tipoSolicitante, marcaPeriodo, tarifa
	   </query>
	</named-native-query>

	<named-native-query name="Aportes.Consultar.AporteGeneral.datosCierre.resumen.n">
		<description>Consulta de datos para el resumen de cierre de aportes</description>
		<query>
				;with uno as (
					select apg.apgId, apr.apdAporteGeneral,
					apr.diferenciaAporteCot AS ValorAporte,
					apr.diferenciaMora as ValorInteres,  
					apr.diferenciaAporteCot + apr.diferenciaMora  AS total,
					apg.apgTipoSolicitante, 
					apg.apgMarcaPeriodo,
					apd.apdTarifa
					FROM AporteGeneral apg
					INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apgId 
					INNER JOIN MovimientoAporte moa ON moaAporteGeneral = apgId AND moaAporteDetallado = apd.apdId
					INNER JOIN aporteDetalladoRegistroControlN apr on apr.apdAporteGeneral = moaAporteGeneral and moa.moaAporteDetallado = apr.apdId and apr.moaId = moa.moaId
					WHERE apr.regFechaPagoAporte BETWEEN :fechaInicio AND :fechaFin
					and apg.apgEstadoRegistroAporteAportante = :estadosRegistro
					<!-- AND apr.redAporteObligatorio != apr.apdAporteObligatorio -->
					AND apr.diferenciaAporteCot &gt; 0),
				dos as (
					select sum(ValorAporte) as valor, sum(ValorInteres) as ValorInteres, sum(total) as total, apgId, apdAporteGeneral, 
					CASE
					WHEN apgTipoSolicitante = 'EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
					WHEN apgTipoSolicitante = 'INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' 
					WHEN apgTipoSolicitante = 'PENSIONADO' THEN 'TRABAJADOR_DEPENDIENTE'
					end as apgTipoSolicitante, apgMarcaPeriodo, apdTarifa
					from uno
					group by apgId, apdAporteGeneral,apgTipoSolicitante, apgMarcaPeriodo, apdTarifa)
				select sum(valor) as valorAporte, sum(ValorInteres) as valorInteres, apgTipoSolicitante as tipoSolicitante, apgMarcaPeriodo as marcaPeriodo, apdTarifa as tarifa
					from dos
					group by apgTipoSolicitante, apgMarcaPeriodo, apdTarifa
	   </query>
	</named-native-query>

	<!-- Generar Cierre Recaudo reporte resumen  -->
	<named-native-query name="Aportes.Consultar.AporteGeneral.datosCierre.resumen">
		<description>Consulta de datos para el resumen de cierre de aportes</description>
		<query>
            SELECT SUM(ISNULL(montoAporte, 0) * :signo) as valorAporte, SUM(ISNULL(montoInteres, 0) * :signo) as valorInteres, tipoSolicitante, marcaPeriodo, tarifa
			FROM (
				SELECT 
			        SUM(
			        	CASE WHEN :evaluarReconocimiento = 0 
			        		THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorAporte * -1 ELSE moa.moaValorAporte END)
			        		ELSE apd.apdAporteObligatorio
			        	END
			        ) as montoAporte, 
			        SUM(
			        	CASE WHEN :evaluarReconocimiento = 0 
			        		THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorInteres * -1 ELSE moa.moaValorInteres END)
			        		ELSE apd.apdValorIntMora
			        	END
			        ) as montoInteres, 
			        apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo,
					case when apd.apdTipoCotizante in ('TRABAJADOR_INDEPENDIENTE', 'PENSIONADO')then apd.apdTarifa end as tarifa
				FROM AporteGeneral apg 
				INNER JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
				INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId
				WHERE (
						:evaluarEstado = 0 AND apg.apgEstadoRegistroAporteAportante IN (:estadosRegistro)
					)
					AND moa.moaTipoMovimiento in (:tiposMovimiento)
					AND (
						(:filtrarReconocimiento = 0 AND apg.apgFechaRecaudo BETWEEN :fechaInicio AND :fechaFin)
						OR (:filtrarReconocimiento = 1 
							AND apg.apgFechaRecaudo BETWEEN :fechaInicio AND :fechaFin
							AND (:evaluarReconocimiento = 0 OR moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin)
						)
					)
					AND ISNULL(apg.apgFormaReconocimientoAporte, '') in (:formasReconocimiento)
					AND apg.apgApoConDetalle = 1
					AND apd.apdId = moa.moaAporteDetallado
					AND (
						:evaluarReconocimiento = 0 OR apg.apgFechaRecaudo BETWEEN :fechaInicio AND :fechaFin
					)
					AND (
						(:esCorreccion = 1 AND apg.apgOrigenAporte = 'CORRECCION_APORTE' OR moa.moaTipoAjuste = 'CORRECCION_A_LA_BAJA')
						OR (:esCorreccion = 0 AND ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE')
				)
				GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo , case when apd.apdTipoCotizante in ('TRABAJADOR_INDEPENDIENTE', 'PENSIONADO')then apd.apdTarifa end
				UNION
				SELECT 
			        SUM(
			        	CASE WHEN :evaluarReconocimiento = 0 
			        		THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorAporte * -1 ELSE moa.moaValorAporte END)
			        		ELSE apgValTotalApoObligatorio
			        	END
			        ) as montoAporte, 
			        SUM(
			        	CASE WHEN :evaluarReconocimiento = 0 
			        		THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorInteres * -1 ELSE moa.moaValorInteres END)
			        		ELSE apgValorIntMora
			        	END 
			        ) as montoInteres, 
			        (CASE
			            WHEN apg.apgTipoSolicitante = 'EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			            WHEN apg.apgTipoSolicitante = 'INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE' 
						WHEN apg.apgTipoSolicitante = 'PENSIONADO' THEN 'PENSIONADO' 
			        END) as tipoSolicitante, apg.apgMarcaPeriodo as marcaPeriodo,
					null as tarifa
				FROM AporteGeneral apg 
				INNER JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
				WHERE (
						:evaluarEstado = 0 AND apg.apgEstadoRegistroAporteAportante IN (:estadosRegistro)
					)
					AND moa.moaTipoMovimiento IN (:tiposMovimiento)
					AND (
						(:filtrarReconocimiento = 0 AND apg.apgFechaRecaudo BETWEEN :fechaInicio AND :fechaFin)
						OR (:filtrarReconocimiento = 1 
							AND apg.apgFechaRecaudo BETWEEN :fechaInicio AND :fechaFin
							AND (:evaluarReconocimiento = 0 OR moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin)
						)
					)
					AND ISNULL(apg.apgFormaReconocimientoAporte, '') in (:formasReconocimiento)
					AND apg.apgApoConDetalle = 0
					AND (
						:evaluarReconocimiento = 0 OR apg.apgFechaRecaudo BETWEEN :fechaInicio AND :fechaFin
					)
					AND (
						(:esCorreccion = 1 AND apg.apgOrigenAporte = 'CORRECCION_APORTE' OR moa.moaTipoAjuste = 'CORRECCION_A_LA_BAJA')
						OR (:esCorreccion = 0 AND ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE')
				)
				GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo) aportes 
			GROUP by tipoSolicitante, marcaPeriodo, tarifa
	   </query>
	</named-native-query>

	<named-native-query name="Aporte.Consultar.pagoSubsidio.cotizante">
		<description>Consulta de pago de subsidio para un listado de cotizantes</description>
		<query>
	       SELECT CAST(T.perTipoIdentificacion AS VARCHAR) tipoIdentificacion, 
	           CAST(T.perNumeroIdentificacion AS VARCHAR) numeroIdentificacion, 
	           CAST(T.periodo AS VARCHAR) periodoAporte
	       FROM (
                SELECT per.perTipoIdentificacion, per.perNumeroIdentificacion, datos.periodo 
				FROM dbo.Persona per
				INNER JOIN dbo.Afiliado afi ON afi.afiPersona = per.perId
				INNER JOIN dbo.DetalleSubsidioAsignado dsa ON dsa.dsaAfiliadoPrincipal = afi.afiId
				INNER JOIN (SELECT 
				    tipoIdentificacion = JSON_VALUE(j.[value],'$.tipoIdentificacion'), 
				    numeroIdentificacion = JSON_VALUE(j.[value],'$.numeroIdentificacion'), 
				    periodo = JSON_VALUE(j.[value],'$.periodo') 
				FROM OPENJSON (:parametros) J) datos ON per.perTipoIdentificacion = datos.tipoIdentificacion 
				    AND per.perNumeroIdentificacion = datos.numeroIdentificacion 
                    AND CONVERT(VARCHAR(7), dsa.dsaPeriodoLiquidado, 121) = datos.periodo
				UNION
				SELECT per.perTipoIdentificacion, per.perNumeroIdentificacion, datos.periodo 
				FROM dbo.Persona per
				INNER JOIN dbo.Afiliado afi ON afi.afiPersona = per.perId
				INNER JOIN dbo.DetalleSubsidioAsignadoProgramado dpr ON dpr.dprAfiliadoPrincipal = afi.afiId
				INNER JOIN (SELECT 
				    tipoIdentificacion = JSON_VALUE(j.[value],'$.tipoIdentificacion'), 
				    numeroIdentificacion = JSON_VALUE(j.[value],'$.numeroIdentificacion'), 
				    periodo = JSON_VALUE(j.[value],'$.periodo') 
                FROM OPENJSON (:parametros) J) datos ON per.perTipoIdentificacion = datos.tipoIdentificacion 
				    AND per.perNumeroIdentificacion = datos.numeroIdentificacion 
				    AND CONVERT(VARCHAR(7), dpr.dprPeriodoLiquidado, 121) = datos.periodo
            ) AS T
	   </query>
	</named-native-query>

	<named-native-query name="Aportes.Consultar.Persona.buscar.listaIdEmpresa"
		result-set-mapping="Aportes.Consultar.Persona.buscar.listaIdEmpresa.mapping">
		<query>
            SELECT per.*, emp.*, ubi.*
			FROM Persona per
			INNER JOIN Empresa emp ON emp.empPersona = per.perId
			LEFT JOIN Ubicacion ubi ON per.perUbicacionPrincipal = ubi.ubiId
			WHERE emp.empId IN (:idEmpresas)
	   </query>
	</named-native-query>

	<named-native-query name="Aportes.cotizantes.correcciones">
		<query>
            SELECT sca.scaAporteGeneral, apd.apdId 
			FROM Correccion cor
			INNER JOIN SolicitudCorreccionAporte sca ON cor.corSolicitudCorreccionAporte = sca.scaId
			INNER JOIN AporteDetallado apd ON cor.corAporteGeneral = apd.apdAporteGeneral
			WHERE sca.scaAporteGeneral IN (:idsAporteGeneral)  
        </query>
	</named-native-query>

	<named-native-query name="Aportes.consultar.nuevosNumerosOperacion.correccion">
		<query>
            select c.corAporteDetallado, ag.apgId from Correccion c
			join AporteGeneral ag on c.corAporteGeneral = ag.apgId 
			join AporteDetallado ad on ad.apdAporteGeneral = ag.apgId 
			where corAporteDetallado IN (:idsAporteDetallado)  
        </query>
	</named-native-query>
	<named-native-query name="Aporte.Consultar.idafiliado.cambio.categoria">
		<query>
          select top 1 af.afiId from AporteDetallado a
			inner join Persona p on p.perId=a.apdPersona
			inner join Afiliado af on af.afiPersona=p.perId
			LEFT JOIN categoriaAfiliado c ON c.ctaAfiliado=af.afiId
			where a.apdId= :idAporteDetallado
			and convert(date,c.ctaFechaCambioCategoria)!=convert(date,getdate())
        </query>
	</named-native-query>

	<named-native-query name="Aporte.Consultar.SolicitudAporte.ListadoId"
		result-set-mapping="Aporte.Consultar.SolicitudAporte.ListadoId.mapping">
		<query>
            SELECT soa.*, apg.*, sol.* 
			FROM AporteGeneral apg
			INNER JOIN SolicitudAporte soa ON soa.soaRegistroGeneral = apg.apgRegistroGeneral
			INNER JOIN Solicitud sol ON soa.soaSolicitudGlobal = sol.solId
			WHERE apg.apgId IN (:idRegistroGeneral)
        </query>
	</named-native-query>

	<named-native-query name="Aportes.Consultar.Solicitud.Devolucion.Vista360.Por.IdAporte"
		result-set-mapping="Aportes.Consultar.Solicitud.Devolucion.Vista360.Por.IdAporte.mapping">
		<description>consulta que obtiene la lista de devoluciones dados a los ids de aporte general para la vista 360 de aportes</description>
		<query>
            SELECT sd.*, ma.*, sol.*
			FROM DevolucionAporte d 
			INNER JOIN DevolucionAporteDetalle dd ON d.dapId = dd.dadDevolucionAporte
			INNER JOIN MovimientoAporte ma ON dd.dadMovimientoAporte = ma.moaId
			INNER JOIN SolicitudDevolucionAporte sd ON sd.sdaDevolucionAporte = d.dapId
			INNER JOIN Solicitud sol ON sd.sdaSolicitudGlobal = sol.solId
			WHERE ma.moaAporteGeneral IN (:idsAporteGeneral)
			AND ma.moaTipoAjuste = :tipoAjuste
        </query>
	</named-native-query>

	<named-native-query name="Consultar.Cotizantes.Sin.Parametros">
		<description>Consulta para obtener los cotizantes cuando no se
            ingresan parámetros de búsqueda durante un proceso de devolución de
            aportes.</description>
		<query>
			SELECT ctz.perTipoIdentificacion tipoIdCot, 
			    ctz.perNumeroIdentificacion numIdCot, 
			    CASE WHEN ISNULL(ctz.perPrimerNombre, '') = '' THEN ctz.perRazonSocial
			    ELSE (
			        ctz.perPrimerNombre + 
			        CASE WHEN ctz.perSegundoNombre IS NULL THEN ' ' ELSE ' '+ctz.perSegundoNombre+' ' END +
			        ctz.perPrimerApellido + 
			        CASE WHEN ctz.perSegundoApellido IS NULL THEN '' ELSE ' '+ctz.perSegundoApellido END
			    ) END nombreCotizante, 
			    apd.apdTipoCotizante,
			    CASE WHEN apg.apgEmpresaTramitadoraAporte IS NOT NULL THEN 0 ELSE 1 END pagadorPorSiMismo, 
			    apd.apdId, 
			    CASE WHEN ISNULL(mov.cantidad, 0) > 0 THEN 1 ELSE 0 END tieneMovimientos, 
			    apd.apdAporteObligatorio, 
			    apd.apdValorIntMora, 
			    ctz.perPrimerNombre, 
			    ctz.perSegundoNombre,
			    ctz.perPrimerApellido, 
			    ctz.perSegundoApellido, 
			    apd.apdRegistroDetallado, 
			    apd.apdEstadoAporteCotizante 
			FROM AporteGeneral apg 
			    INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId 
			    INNER JOIN Persona ctz ON apd.apdPersona = ctz.perId 
			    INNER JOIN Persona apor ON apg.apgPersona = apor.perId
			    LEFT JOIN (
			        SELECT moa.moaAporteDetallado, COUNT(*) cantidad
			        FROM MovimientoAporte moa 
                    WHERE moa.moaTipoAjuste IN (:movimientos)
			        GROUP BY moa.moaAporteDetallado
			    ) mov ON mov.moaAporteDetallado = apd.apdId
            WHERE apg.apgId = :idAporte
        </query>
	</named-native-query>

	<named-native-query name="Consultar.Cotizantes.Sin.Parametros.Empresa">
		<description>Consulta para obtener los cotizantes cuando no se ingresan parámetros de búsqueda durante un proceso de devolución de aportes.</description>
		<query>
            SELECT ctz.perTipoIdentificacion tipoIdCot, 
                ctz.perNumeroIdentificacion numIdCot, 
			    CASE WHEN ISNULL(ctz.perPrimerNombre, '') = '' THEN ctz.perRazonSocial
			    ELSE (
			        ctz.perPrimerNombre + 
			        CASE WHEN ctz.perSegundoNombre IS NULL THEN ' ' ELSE ' '+ctz.perSegundoNombre+' ' END +
			        ctz.perPrimerApellido + 
			        CASE WHEN ctz.perSegundoApellido IS NULL THEN '' ELSE ' '+ctz.perSegundoApellido END
			    ) END nombreCotizante, 
			    apd.apdTipoCotizante,
			    pem.perTipoIdentificacion, 
			    pem.perNumeroIdentificacion, 
			    pem.perRazonSocial, 
			    apd.apdId, 
			    CASE WHEN ISNULL(mov.cantidad, 0) > 0 THEN 1 ELSE 0 END tieneMovimientos, 
			    apd.apdAporteObligatorio, 
			    apd.apdValorIntMora, 
			    ctz.perPrimerNombre, 
			    ctz.perSegundoNombre,
			    ctz.perPrimerApellido, 
			    ctz.perSegundoApellido, 
			    apd.apdRegistroDetallado, 
			    apd.apdEstadoAporteCotizante 
			FROM AporteGeneral apg 
			    INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId 
			    INNER JOIN Persona ctz ON apd.apdPersona = ctz.perId 
			    INNER JOIN Empresa emp ON apg.apgEmpresa = emp.empId
			    INNER JOIN Persona pem ON emp.empPersona = pem.perId
			    LEFT JOIN (
			        SELECT moa.moaAporteDetallado, COUNT(*) cantidad
			        FROM MovimientoAporte moa 
			        WHERE moa.moaTipoAjuste IN (:movimientos)
			        GROUP BY moa.moaAporteDetallado
			    ) mov ON mov.moaAporteDetallado = apd.apdId
			WHERE apg.apgId = :idAporte
        </query>
	</named-native-query>

	<named-native-query name="Aportes.Consultar.historicoAportes.tipoAfiliacion"
		result-set-mapping="Aportes.Consultar.historicoAportes.tipoAfiliacion.mapping">
		<description>consulta y obtiene la información histórica de los aportes para un afiliado dependiente</description>
		<query>
            SELECT apg.apgFechaProcesamiento,
			    apg.apgId,
			    apd.apdId,
			    apg.apgModalidadRecaudoAporte,
			    apg.apgPeriodoAporte,
			    CASE 
			        WHEN (
				        SELECT count(mov.moaId)
				        FROM MovimientoAporte mov 
				        WHERE mov.moaAporteDetallado = apd.apdId
				        AND mov.moaTipoAjuste IN (:movimientos)
			        ) > 0 
			        THEN 1 ELSE 0 END tieneMovimientos,
			    apd.apdAporteObligatorio,
			    apd.apdValorIntMora,
			    apd.apdAporteObligatorio + apd.apdValorIntMora valorTotal,
			    apd.apdRegistroDetallado,
			    apg.apgRegistroGeneral,
				apg.apgFechaRecaudo,
				perpt.perTipoIdentificacion,
				perpt.perNumeroIdentificacion,
				perpt.perRazonSocial,
				apg.apgPagadorPorTerceros
			FROM AporteGeneral apg
			INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId 
			INNER JOIN Persona per ON apd.apdPersona = per.perId 
			LEFT JOIN Empresa e ON e.empId = apg.apgEmpresaTramitadoraAporte 
			LEFT JOIN Persona perpt ON e.empPersona = perpt.perId
			WHERE per.pertipoIdentificacion = :tipoIdAfiliado 
			AND per.pernumeroIdentificacion = :numeroIdAfiliado 
			AND apg.apgTipoSolicitante = :tipoSolicitante 
			AND (:idEmpresa IS NULL OR apg.apgEmpresa = :idEmpresa)
        </query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.datos.aportante.empresa"
		result-set-mapping="DatosAportanteDTOMapping">
		<query>
			SELECT 
				TOP(1) 
				per.perTipoIdentificacion AS tipoIdentificacionAportante,
				per.perNumeroIdentificacion AS numeroIdentificacionAportante,
				sue.sueCodigo AS codigoSucursal,
				per.perRazonSocial AS razonSocial,
				apg.apgId AS idAporteGeneral,
				apg.apgFechaProcesamiento AS fechaProcesamiento,
				apg.apgPeriodoAporte AS periodoAporte,
				apg.apgEstadoAporteAportante AS estadoAporteAportante,
				per.perId AS idPersonaAportante,
				(SELECT top(1) apd.apdDiasCotizados FROM AporteDetallado apd where apdAporteGeneral = apg.apgId) AS diasCotizados
			FROM AporteGeneral apg
			JOIN Empresa emp ON apg.apgEmpresa = emp.empId
			JOIN Persona per ON emp.empPersona = per.perId
			LEFT JOIN SucursalEmpresa sue ON apg.apgSucursalEmpresa = sue.sueId
			WHERE per.perNumeroIdentificacion = :numeroIdentificacion
			AND per.perTipoIdentificacion = :tipoIdentificacion
			ORDER BY apg.apgFechaProcesamiento DESC, apg.apgPeriodoAporte DESC
		</query>
	</named-native-query>

	<named-native-query name="Aportes.consultar.detalle.datos.aportante"
		result-set-mapping="DetalleDatosAportanteDTOMapping">
		<query>
			select 
				apg.apgTipoSolicitante as tipoAportante,
				apg.apgPeriodoAporte as periodoAporte,
				apg.apgValTotalApoObligatorio as valorAporte,
				apg.apgValorIntMora as valorInteresMora,
				apg.apgFechaRecaudo as fechaRecaudo,
				apg.apgModalidadRecaudoAporte as metodoRecaudo,
				apg.apgEstadoAportante as estadoAportante,
				apg.apgPagadorPorTerceros as pagadorPorTerceros,
				apg.apgRegistroGeneral as idRegistroGeneral,
				(CASE WHEN apg.apgSucursalEmpresa is not null THEN (select top(1) sue.sueCodigo from SucursalEmpresa sue where sue.sueId = apg.apgSucursalEmpresa) ELSE null END) as codigoSucursal,
				(CASE WHEN apg.apgEmpresa is not null THEN (select top(1) empl.empDiaHabilVencimientoAporte from empleador empl where empl.empEmpresa = apg.apgEmpresa order by empl.empId desc)
				WHEN apg.apgPersona is not null THEN (select top(1) roa.roaDiaHabilVencimientoAporte from RolAfiliado roa join afiliado afi on roa.roaAfiliado = afi.afiId where afi.afiPersona = apg.apgPersona order by roa.roaId desc) END) as diaHabilVencimientoAporte,
				apg.apgEstadoAporteAportante as estadoAporteAportante 
			from AporteGeneral apg where apg.apgId in (:idAporteGeneral)


			<!-- SELECT new com.asopagos.aportes.dto.DetalleDatosAportanteDTO(apg, sue.codigo) FROM
			AporteGeneral apg, SucursalEmpresa sue
			WHERE apg.idSucursalEmpresa = sue.idSucursalEmpresa 
			AND apg.id in (:idAporteGeneral) -->

			<!-- SELECT new com.asopagos.aportes.dto.DetalleDatosAportanteDTO(apg) FROM
			AporteGeneral apg
			WHERE apg.id in (:idAporteGeneral) -->
		</query>
	</named-native-query>

	<named-native-query name="Aportes.Consultar.personasAfiliadasConAporteFuturoEnElPeriodo">
		<query>
			SELECT 
				afi.afiId
			FROM AporteGeneral apg 
			JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId
			JOIN Afiliado afi ON apd.apdPersona = afi.afiPersona
			WHERE apg.apgMarcaPeriodo = 'PERIODO_FUTURO'
			AND apg.apgPeriodoAporte = :periodoAporte
			AND apg.apgFechaProcesamiento &lt;= :fechaAporte
		</query>
	</named-native-query>

	<named-native-query name="Aportes.consultar.registroDetallado.por.aporteDetallado">
		<query>
			select apdRegistroDetalladoUltimo from AporteDetallado where apdId= :idAporteDetallado
		</query>
	</named-native-query>

	<named-native-query name="Aportes.consultar.aporteOgligatorio.interes.por.aporteDetallado">
		<query>
			select apdvalorIntMora, apdAporteObligatorio from aporteDetallado where apdId= :idAporteDetallado
		</query>
	</named-native-query>
 
	<named-native-query name="Aportes.consultar.ids.aportes.futuros">
		<description>Consulta todos los ids de aporte detallado futuros a moficar categorias 28/04/2022 </description>
		<query>
		SELECT 
		apd.apdRegistroDetallado
		FROM AporteGeneral apg 
		JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId
		JOIN Afiliado afi ON apd.apdPersona = afi.afiPersona
		WHERE apg.apgMarcaPeriodo = 'PERIODO_FUTURO' <!--and apg.apgEstadoRegistroAporteAportante = 'RELACIONADO'-->
		and apg.apgPeriodoAporte = (select convert(varchar(7),eomonth(dbo.GetLocalDate(),-1)))
			<!---consulta
			categorias que trae los ids de aporte detallado-->
        </query>
	</named-native-query>

	<named-native-query name="Consultar.datos.completos.planilla"
		result-set-mapping="Consultar.datos.completos.planilla.mapping">
		<description>Consulta la información completa de una planilla</description>
		<query>
 
            SELECT apg.*, apd.*, per.perTipoIdentificacion AS tipoIdCotizante, 
            per.perNumeroIdentificacion AS numeroIdCotizante,
			ubi.ubiEmail AS emailCotizante,
			  (CASE WHEN apg.apgPersona IS NOT NULL THEN 
				(	
					SELECT ubiCot.ubiEmail 
					FROM Persona  perCot
					LEFT JOIN Ubicacion ubiCot ON perCot.perUbicacionPrincipal = ubiCot.ubiId
					WHERE per.perId = perCot.perId		
					
			 	) 
		 	  ELSE CASE WHEN apg.apgEmpresa IS NOT NULL THEN 
				(
				
					SELECT ubiApo.ubiEmail 
					FROM Empresa empApo
					LEFT JOIN Persona perApo ON empApo.empPersona = perApo.perId
					LEFT JOIN Ubicacion ubiApo ON perApo.perUbicacionPrincipal = ubiApo.ubiId
					WHERE apg.apgEmpresa = empApo.empId
					
			 	)
			  ELSE null
			  END
			  END
			  )AS emailAportante
			  
			FROM AporteDetallado apd 
			INNER JOIN AporteGeneral apg ON apd.apdAporteGeneral = apg.apgId 
			INNER JOIN Persona per ON per.perId = apd.apdPersona
			INNER JOIN Ubicacion ubi ON per.perUbicacionPrincipal = ubi.ubiId
			WHERE apd.apdTipoCotizante = :tipoCotizante
			AND apg.apgRegistroGeneral = :idPlanilla
            
        </query>
	</named-native-query>

	
	<named-native-query name="Aportes.consultar.numeroRadicado.idRegistroGeneral">
		<query>
		select solNumeroRadicacion from solicitud
		inner join SolicitudAporte on soaSolicitudGlobal = solid
		inner join AporteGeneral on apgRegistroGeneral = soaRegistroGeneral
		where apgid = :idAporteGeneral
	 </query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.aporteGeneral.idAporteGeneral">
	<query>
		select scaAporteGeneral  from SolicitudCorreccionAporte
		inner join Correccion on corSolicitudCorreccionAporte = scaId
		where corAporteGeneral= :idAporteGeneral
	</query>
	</named-native-query>


	<named-native-query name="Consultar.Movimiento.Historico.Empresa"
		result-set-mapping="Consultar.Movimiento.Historico.Empresa.mapping">
		<description>Consulta para obtener el o los movimientos históricos de ingresos por empresa.</description>
		<query>
			select
				apgId,
				apgFechaProcesamiento,
				apgFechaRecaudo,
				apgTipoSolicitante,
				perTipoIdentificacion,
				perNumeroIdentificacion,
				perRazonSocial,
				perPrimerNombre,
				perSegundoNombre,
				perPrimerApellido,
				perSegundoApellido,
				apgValTotalApoObligatorio,
				apgValorIntMora,
				apgApoConDetalle,
				apgEstadoRegistroAporteAportante,
				apgFechaReconocimiento,
				apgFormaReconocimientoAporte,
				apgEstadoAporteAportante,
				apgEmpresa,
				apgEnProcesoReconocimiento,
				apgModalidadRecaudoAporte,
				apgRegistroGeneral
			FROM AporteGeneral apg
			inner join Empresa emp on emp.empId = apg.apgEmpresa
			inner join Persona per on per.perId = emp.empPersona
			WHERE 
           	apg.apgtipoSolicitante IN (:tipoEntidad)
           	AND apg.apgFechaRecaudo BETWEEN :fechaInicio AND :fechaFin
            AND apg.apgestadoRegistroAporteAportante IN (:estadoRegistro)
            AND apg.apgformaReconocimientoAporte IN (:formaReconocimiento)
            AND apg.apgestadoAporteAportante = :estadoAporte
            AND apg.apgPersona IS NULL
		</query>
	</named-native-query>


	<named-native-query name="Consultar.Movimiento.Historico"
		result-set-mapping="Consultar.Movimiento.Historico.mapping">
		<description>Consulta para obtener el o los movimientos históricos de ingresos por persona</description>
		<query>
			SELECT
				apgId,
				apgFechaProcesamiento,
				apgFechaRecaudo,
				apgTipoSolicitante,
				per.perTipoIdentificacion,
				per.perNumeroIdentificacion,
				per.perRazonSocial,
				per.perPrimerNombre,
				per.perSegundoNombre,
				per.perPrimerApellido,
				per.perSegundoApellido,
				case when apg.apgPersona != ptra.perId then ptra.perTipoIdentificacion else null end tipoIdentificacionPagadorTercero,
				case when apg.apgPersona != ptra.perId then ptra.perNumeroIdentificacion else null end as numeroIdentificacionPagadorTercero,
				case when apg.apgPersona != ptra.perId then ptra.perRazonSocial else null end as razonSocialPagadorTercero,
				apdAporteObligatorio as apgValTotalApoObligatorio,
				apdValorIntMora as apgValorIntMora,
				apgApoConDetalle,
				apgEstadoRegistroAporteAportante,
				apgFechaReconocimiento,
				apgFormaReconocimientoAporte,
				apgEstadoAporteAportante,
				apgEmpresaTramitadoraAporte,
				apgEnProcesoReconocimiento,
				apgModalidadRecaudoAporte,
				apgRegistroGeneral,
				apdTarifa
			FROM AporteGeneral apg
			left join AporteDetallado apd on apd.apdAporteGeneral = apg.apgId
			left join Empresa emp on emp.empId = apg.apgEmpresaTramitadoraAporte
			left join Persona ptra on ptra.perId = emp.empPersona
			inner join Persona per on per.perId = apg.apgPersona
			WHERE 
				apg.apgtipoSolicitante IN (:tipoEntidad)
				AND apg.apgFechaRecaudo BETWEEN :fechaInicio AND :fechaFin
				AND apg.apgestadoRegistroAporteAportante IN (:estadoRegistro)
				AND apg.apgformaReconocimientoAporte IN (:formaReconocimiento)
				AND apg.apgestadoAporteAportante = :estadoAporte
				AND apg.apgEmpresa IS NULL
		</query>
	</named-native-query>


	<named-native-query name="Consultar.movimiento.aporte.general.native"
		result-set-mapping="Consultar.movimiento.aporte.general.native.mapping">
		<query>
			select
				apg.apgId idAporte,
				apg.apgRegistroGeneral registroGeneral,
				apg.apgEmpresa empresa,
				apg.apgPersona persona,
				apg.apgEstadoAportante estadoAportante,
				apg.apgEstadoAporteAportante estadoAporteAportante,
				apg.apgEstadoRegistroAporteAportante estadoRegistroAporteAportnte,
				apg.apgSucursalEmpresa sucursalEmpresa,
				apg.apgPagadorPorTerceros pagadorPorTerceros,
				apg.apgPeriodoAporte periodoAporte,
				apg.apgValTotalApoObligatorio valorTotalApoObligatorio,
				apg.apgValorIntMora valor,
				apg.apgFechaRecaudo fechaRecaudo,
				apg.apgFechaProcesamiento fechaProcesamiento,
				apg.apgFechaReconocimiento fechaReconocimiento,
				apg.apgCodEntidadFinanciera codigoEntidadFinanciera,
				apg.apgOperadorInformacion operadorInformacion,
				apg.apgModalidadPlanilla modalidadPlanilla,
				apg.apgModalidadRecaudoAporte modalidadRecaudoAporte,
				apg.apgApoConDetalle apoConDetalle,
				apg.apgNumeroCuenta numeroCuenta,
				apg.apgTipoSolicitante tipoSolicitante,
				apg.apgOrigenAporte origenAporte,
				apg.apgCajaCompensacion cajaCompensacion,
				apg.apgEmailAportante emailAportante,
				apg.apgEmpresaTramitadoraAporte empresaTramitadoraAporte,
				apg.apgFormaReconocimientoAporte formaReconocimientoAporte,
				apg.apgMarcaPeriodo marcaPeriodo,
				apg.apgMarcaActualizacionCartera marcaActualizacionCartera,
				apg.apgConciliado conciliado,
				apg.apgNumeroPlanillaManual as numeroPlanillaManual,
				apg.apgCuentaBancariaRecaudo as cuentaBancariaRecaudo,
				apg.apgEnProcesoReconocimiento as enProcesoReconocimiento,
				case when mov.cant is not null then mov.cant else 0 end as cantidad,
				case when cta.ID is not null then CONCAT(cta.BANCO,'-',cta.TIPO,'-',cta.NUMERO_CUENTA,'-',cta.TIPO_RECAUDO) 
				else (select top 1 CONCAT(ctan.BANCO,'-',ctan.TIPO,'-',ctan.NUMERO_CUENTA,'-',ctan.TIPO_RECAUDO) from aporteDetalladoRegistroControlN n
						inner join CUENTAS_BANCARIAS ctan on n.regCuentaBancariaRecaudo = ctan.ID
						where n.apdAporteGeneral = apg.apgId order by n.fechaProcesamiento  desc) end as cuenta
			from AporteGeneral apg
			left join (
			select COUNT(moaAporteGeneral) cant, moaAporteGeneral
			from MovimientoAporte
			where moaTipoAjuste in (:movimientos)
			group by moaAporteGeneral
			having moaAporteGeneral in (:idsAporte)
			) mov on mov.moaAporteGeneral = apg.apgId
			left join CUENTAS_BANCARIAS cta on cta.ID = apg.apgCuentaBancariaRecaudo
			where apg.apgId in (:idsAporte)
		</query>
	</named-native-query>

	<named-native-query name="Aportes.consultar.numero.y.codigo.cuenta.aporte.general">
		<query>
			SELECT DISTINCT TOP 1 COALESCE(RIGHT(REPLICATE('0', 17) + REPLACE(apgNumeroCuenta , '-', ''), 17),RIGHT(REPLICATE('0', 17) + REPLACE(NUMERO_CUENTA , '-', ''), 17)) as numeroCuenta ,apgCuentaBancariaRecaudo
				FROM AporteGeneral  
				LEFT JOIN CUENTAS_BANCARIAS on id = apgCuentaBancariaRecaudo where apgRegistroGeneral = :idAporteGeneral
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.numero.y.codigo.cuenta.aporte.general.planillaN">
		<query>
			select top 1 C.NUMERO_CUENTA, b.banCodigoPILA from aporteDetalladoRegistroControlN
			INNER JOIN CUENTAS_BANCARIAS C ON C.ID = regCuentaBancariaRecaudo
			inner join banco b on b.banNombre = c.BANCO
			where planillaN = :numPlanillaN

		</query>
	</named-native-query>

	<named-native-query name="Aportes.consultar.numero.operacion.correccion">
		<description>Consulta para obtener el moid de un aporte detallado</description>
		<query>
			select convert(varchar,moaId) from MovimientoAporte 
				join AporteDetallado on apdId = moaAporteDetallado 
			where moaTipoAjuste is null and apdId = :idAporteDetallado
		</query>
	</named-native-query>

	<named-native-query name="Aportes.Extemporaneos.Consultar.AporteGeneral.datosCierre.resumen">
		<description>Consulta de datos para el resumen de cierre de aportes extratemporaneos</description>
		<query>
			SELECT SUM(ISNULL(montoAporte, 0) * :signo) as valorAporte, SUM(ISNULL(montoInteres, 0) * :signo) as valorInteres, tipoSolicitante, marcaPeriodo, tarifa
			FROM (
			SELECT
			SUM(
			CASE WHEN :evaluarReconocimiento = 0
			THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorAporte * -1 ELSE moa.moaValorAporte END)
			ELSE apd.apdAporteObligatorio
			END
			) as montoAporte,
			SUM(
			CASE WHEN :evaluarReconocimiento = 0
			THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorInteres * -1 ELSE moa.moaValorInteres END)
			ELSE apd.apdValorIntMora
			END
			) as montoInteres,
			apd.apdTipoCotizante as tipoSolicitante, apd.apdMarcaPeriodo as marcaPeriodo,
			case when apd.apdTipoCotizante = 'TRABAJADOR_INDEPENDIENTE'then apd.apdTarifa end as tarifa
			FROM AporteGeneral apg
			INNER JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId
			WHERE (
			:evaluarEstado = 0 AND apg.apgEstadoRegistroAporteAportante IN (:estadosRegistro)
			)
			AND moa.moaTipoMovimiento in (:tiposMovimiento)
			AND (
			(:filtrarReconocimiento = 0 AND apg.apgFechaProcesamiento  BETWEEN :fechaInicio AND :fechaFin AND 	apgFechaRecaudo &lt; DATEFROMPARTS(YEAR(:fechaInicio), MONTH(:fechaInicio), 1))
			OR (:filtrarReconocimiento = 1
			AND apg.apgFechaRecaudo BETWEEN :fechaInicio AND :fechaFin
			AND (:evaluarReconocimiento = 0 OR moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin)
			)
			)
			AND ISNULL(apg.apgFormaReconocimientoAporte, '') in (:formasReconocimiento)
			AND apg.apgApoConDetalle = 1
			AND apd.apdId = moa.moaAporteDetallado
			AND (
			:evaluarReconocimiento = 0 OR apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin AND apgFechaRecaudo &lt; DATEFROMPARTS(YEAR(:fechaInicio), MONTH(:fechaInicio), 1)
			)
			AND (
			(:esCorreccion = 1 AND apg.apgOrigenAporte = 'CORRECCION_APORTE' OR moa.moaTipoAjuste = 'CORRECCION_A_LA_BAJA')
			OR (:esCorreccion = 0 AND ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE')
			)
			GROUP BY apd.apdTipoCotizante, apd.apdMarcaPeriodo , case when apd.apdTipoCotizante = 'TRABAJADOR_INDEPENDIENTE'then apd.apdTarifa end
			UNION
			SELECT
			SUM(
			CASE WHEN :evaluarReconocimiento = 0
			THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorAporte * -1 ELSE moa.moaValorAporte END)
			ELSE apgValTotalApoObligatorio
			END
			) as montoAporte,
			SUM(
			CASE WHEN :evaluarReconocimiento = 0
			THEN (CASE WHEN ISNULL(moa.moaTipoAjuste, '') IN ('CORRECCION_A_LA_BAJA', 'DEVOLUCION') THEN moa.moaValorInteres * -1 ELSE moa.moaValorInteres END)
			ELSE apgValorIntMora
			END
			) as montoInteres,
			(CASE
			WHEN apg.apgTipoSolicitante = 'EMPLEADOR' THEN 'TRABAJADOR_DEPENDIENTE'
			WHEN apg.apgTipoSolicitante = 'INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE'
			WHEN apg.apgTipoSolicitante = 'PENSIONADO' THEN 'PENSIONADO'
			END) as tipoSolicitante, apg.apgMarcaPeriodo as marcaPeriodo,
			null as tarifa
			FROM AporteGeneral apg
			INNER JOIN MovimientoAporte moa ON apg.apgId = moa.moaAporteGeneral
			WHERE (
			:evaluarEstado = 0 AND apg.apgEstadoRegistroAporteAportante IN (:estadosRegistro)
			)
			AND moa.moaTipoMovimiento IN (:tiposMovimiento)
			AND (
			(:filtrarReconocimiento = 0 AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin AND apgFechaRecaudo &lt; DATEFROMPARTS(YEAR(:fechaInicio), MONTH(:fechaInicio), 1))
			OR (:filtrarReconocimiento = 1
			AND apg.apgFechaRecaudo BETWEEN :fechaInicio AND :fechaFin
			AND (:evaluarReconocimiento = 0 OR moa.moaFechaCreacion BETWEEN :fechaInicio AND :fechaFin)
			)
			)
			AND ISNULL(apg.apgFormaReconocimientoAporte, '') in (:formasReconocimiento)
			AND apg.apgApoConDetalle = 0
			AND (
			:evaluarReconocimiento = 0 OR apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin AND apgFechaRecaudo &lt; DATEFROMPARTS(YEAR(:fechaInicio), MONTH(:fechaInicio), 1)
			)
			AND (
			(:esCorreccion = 1 AND apg.apgOrigenAporte = 'CORRECCION_APORTE' OR moa.moaTipoAjuste = 'CORRECCION_A_LA_BAJA')
			OR (:esCorreccion = 0 AND ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE')
			)
			GROUP BY apg.apgTipoSolicitante,apg.apgMarcaPeriodo) aportes
			GROUP by tipoSolicitante, marcaPeriodo, tarifa
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.detalle.registro.aportes.extemporaneos.registrados"
						result-set-mapping="Aportes.consultar.detalle.registro.aportes.registrados.mapping">
		<description>
			Aportes manuales y por pila
			:fechaInicio
			:fechaFin
		</description>
		<query>
			SELECT distinct apg.apgId,
			apg.apgTipoSolicitante,
			apg.apgEstadoRegistroAporteAportante,
			CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perTipoIdentificacion ELSE pap.perTipoIdentificacion END tipoId,
			CASE WHEN apg.apgEmpresa IS NOT NULL THEN pem.perNumeroIdentificacion ELSE pap.perNumeroIdentificacion END numId,
			CASE WHEN apg.apgEmpresa IS NOT NULL THEN ISNULL(pem.perRazonSocial, '') ELSE ISNULL(pap.perRazonSocial, '') END razonSocial,
			apg.apgPeriodoAporte,
			apg.apgfecharecaudo,
			apg.apgFechaReconocimiento,
			'' numeroPlanilla,
			CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorAporte) is not null then sum(moaValorAporte) else 0 end from MovimientoAporte
			where moaAporteGeneral = apg.apgId
			and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) ELSE (select case when sum(moaValorAporte) is not null then sum(moaValorAporte) else 0 end from MovimientoAporte
			where moaAporteGeneral = apg.apgId
			and (moaTipoAjuste &lt;&gt; 'CORRECCION_A_LA_ALTA'
			or moaTipoAjuste is null)) end as aporte,
			CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorInteres) is not null then sum(moaValorInteres) else 0 end from MovimientoAporte
			where moaAporteGeneral = apg.apgId
			and moaTipoMovimiento NOt IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) else (select case when sum(moaValorInteres) is not null then sum(moaValorInteres) else 0 end from MovimientoAporte
			where moaAporteGeneral = apg.apgId
			and (moaTipoAjuste &lt;&gt; 'CORRECCION_A_LA_ALTA'
			or moaTipoAjuste is null)) end as interes,
			CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorAporte) is not null then sum(moaValorAporte) else 0 end from MovimientoAporte
			where moaAporteGeneral = apg.apgId
			and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES'))else (select case when sum(moaValorAporte) is not null then sum(moaValorAporte) else 0 end from MovimientoAporte
			where moaAporteGeneral = apg.apgId
			and (moaTipoAjuste &lt;&gt; 'CORRECCION_A_LA_ALTA'
			or moaTipoAjuste is null)) end + CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorInteres) is not null then sum(moaValorInteres) else 0 end from MovimientoAporte
			where moaAporteGeneral = apg.apgId
			and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) else (select case when sum(moaValorInteres) is not null then sum(moaValorInteres) else 0 end from MovimientoAporte
			where moaAporteGeneral = apg.apgId
			and (moaTipoAjuste &lt;&gt; 'CORRECCION_A_LA_ALTA'
			or moaTipoAjuste is null)) end as total,
			ISNULL(sol.solUsuarioRadicacion, '') usuarioRadicacion,
			apg.apgRegistroGeneral,
			apg.apgModalidadRecaudoAporte,
			apg.apgFechaProcesamiento,
			apg.apgMarcaPeriodo as oportunidadDePago,
			CASE WHEN ((select top 1 emp.empEstadoEmpleador from VW_EstadoAfiliacionEmpleadorCaja emp where emp.perId = pem.perId)  IS NOT NULL and (apg.apgTipoSolicitante = 'EMPLEADOR')) THEN (select top 1 emp.empEstadoEmpleador from VW_EstadoAfiliacionEmpleadorCaja emp where emp.perId = pem.perId)
			ELSE CASE WHEN ((select top 1 a.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaPensionado a where a.perId = pap.perId) is not null and (apg.apgTipoSolicitante = 'PENSIONADO')) THEN (select top 1 a.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaPensionado a where a.perId = pap.perId)
			ELSE CASE WHEN ((select top 1 ind.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaIndependiente ind where ind.perId = pap.perId) IS NOT NULL and (apg.apgTipoSolicitante = 'INDEPENDIENTE')) THEN (select top 1 ind.roaEstadoAfiliado from VW_EstadoAfiliacionPersonaIndependiente ind where ind.perId = pap.perId)
			ELSE CASE WHEN vw.roaEstadoAfiliado IS NOT NULL THEN  vw.roaEstadoAfiliado
			ELSE apg.apgEstadoAportante
			END END END  END estadoAportante,
			sue.sueNombre as sucursalEmpresa,
			CASE WHEN pem.perDigitoVerificacion IS NOT NULL THEN pem.perDigitoVerificacion ELSE '' END digitoVerificacion,
			apg.apgEmpresaTramitadoraAporte as pagadorporsimismos,
			pt.perTipoIdentificacion as tipoIdebtificaciontercero,
			pt.perNumeroIdentificacion as numerotercero,
			pt.perRazonSocial as RazonSocialTercero,
			CASE WHEN r.roaTipoAfiliado in ('PENSIONADO','TRABAJADOR_INDEPENDIENTE') then r.roaMotivoDesafiliacion ELSE 
			em.empMotivoDesafiliacion END motivoDesafilacion
			FROM AporteGeneral apg
			LEFT JOIN Empresa emt ON emt.empId = apg.apgEmpresaTramitadoraAporte
			LEFT JOIN Persona pt ON pt.perId = emt.empPersona
			LEFT JOIN Empresa emp ON emp.empId = apg.apgEmpresa
			LEFT JOIN Persona pem ON pem.perId = emp.empPersona
			LEFT JOIN Persona pap ON pap.perId = apg.apgPersona
			LEFT JOIN SolicitudAporte soa ON soa.soaRegistroGeneral = apg.apgRegistroGeneral
			LEFT JOIN Solicitud sol ON sol.solId = soa.soaSolicitudGlobal
			LEFT JOIN Empleador em on em.empEmpresa = emp.empId
			LEFT JOIN SucursalEmpresa sue on sue.sueId = apg.apgSucursalEmpresa
			LEFT JOIN Afiliado a on a.afipersona = pap.perId
			LEFT JOIN RolAfiliado r on r.roaAfiliado = a.afiId and r.roaTipoAfiliado = (case when apgTipoSolicitante = 'TRABAJADOR_INDEPENDIENTE' then  'INDEPENDIENTE' when apgTipoSolicitante = 'PENSIONADO' then  'PENSIONADO' else '' end)
			<!-- LEFT JOIN EstadoAfiliacionEmpleadorCaja eec on eec.eecPersona = pem.perId
			LEFT JOIN EstadoAfiliacionPersonaIndependiente eai on eai.eaiPersona = pap.perId
			LEFT JOIN EstadoAfiliacionPersonaPensionado  eap on eap.eapPersona = pap.perId -->
			LEFT JOIN VW_EstadoAfiliacionPersonaCaja  vw on vw.perId = pem.perId
			WHERE ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE'
			AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin and apgFechaRecaudo &lt; DATEFROMPARTS(YEAR(:fechaInicio), MONTH(:fechaInicio), 1)
			ORDER BY apgId
		</query>
	</named-native-query>
	<named-native-query name="Aportes.consultar.detalle.registro.aportes.extemporaneos.cotizantes.registrados"
						result-set-mapping="Aportes.consultar.detalle.registro.aportes.cotizantes.registrados.mapping.2">
		<description>
			Aportes manuales y por pila
			:fechaInicio
			:fechaFin
		</description>
		<query>
			SELECT apd.apdId,
			apd.apdEstadoRegistroAporteCotizante,
			per.perTipoIdentificacion tipoIdentificacionCotizante,
			per.perNumeroIdentificacion numeroIdentificacionCotizante,
			ISNULL(per.perPrimerNombre, '') primerNombre,
			ISNULL(per.perSegundoNombre, '') segundoNombre,
			ISNULL(per.perPrimerApellido, '') primerApellido,
			ISNULL(per.perSegundoApellido, '') segundoApellido,
			apg.apgPeriodoAporte,
			apg.apgfecharecaudo fecha,
			apd.apdTarifa tarifa,
			CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorAporte) is not null then sum(moaValorAporte) else 0 end from movimientoaporte
			where moaAporteDetallado = apd.apdId
			and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) else apd.apdAporteObligatorio end  aporte,
			CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorInteres) is not null then sum(moaValorInteres) else 0 end from movimientoaporte
			where moaAporteDetallado = apd.apdId
			and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) else apdValorIntMora end interes,
			CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorAporte) is not null then sum(moaValorAporte) else 0 end from movimientoaporte
			where moaAporteDetallado = apd.apdId
			and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) else apd.apdAporteObligatorio end + CASE WHEN ((:legalizados = 0) AND (:otrosIngresos = 0)) THEN (select case when sum(moaValorInteres) is not null then sum(moaValorInteres) else 0 end from movimientoaporte
			where moaAporteDetallado = apd.apdId
			and moaTipoMovimiento NOT IN ('DEVOLUCION_APORTES', 'CORRECCION_APORTES')) else apdValorIntMora end as total,
			apd.apdUsuarioAprobadorAporte usuario,
			apg.apgId,
			apg.apgFechaProcesamiento,
			apg.apgEmpresaTramitadoraAporte as pagadorporsimismos,
			pts.perTipoIdentificacion as tipoIdentificaciontercero,
			pts.perNumeroIdentificacion as numerotercero,
			pts.perRazonSocial as RazonSocialTercero
			FROM AporteGeneral apg
			INNER JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId
			INNER JOIN Persona per ON per.perId = apd.apdPersona
			LEFT JOIN afiliado f ON per.perId = f.afiPersona
			LEFT JOIN empresa em ON em.empId = apg.apgEmpresa
			LEFT JOIN Persona pt ON pt.perId = em.empPersona
			LEFT JOIN empleador e ON e.empEmpresa = em.empId
			LEFT JOIN RolAfiliado rf ON rf.roaAfiliado = f.afiId AND e.empId = rf.roaEmpleador
			LEFT JOIN Empresa emt ON emt.empId = apg.apgEmpresaTramitadoraAporte
			LEFT JOIN Persona pts ON pts.perId = emt.empPersona
			WHERE ISNULL(apg.apgOrigenAporte, '') != 'CORRECCION_APORTE'
			AND apg.apgFechaProcesamiento BETWEEN :fechaInicio AND :fechaFin and apgFechaRecaudo &lt; DATEFROMPARTS(YEAR(:fechaInicio), MONTH(:fechaInicio), 1)
			ORDER BY apgId
		</query>
	</named-native-query>

	<sql-result-set-mapping name="Consultar.detalle.correccion.cotizante.native.mapping">
		<constructor-result target-class="com.asopagos.aportes.dto.DetalleCorreccionCotizanteNuevoVista360DTO">
			<column name="idAporteGeneral" class="java.lang.Long" />
			<column name="idAporteDetallado" class="java.lang.Long" />
			<column name="tipoIdentificacionCotizante" class="java.lang.String" />
			<column name="numeroIdentificacionCotizante" class="java.lang.String" />
			<column name="nombreCompletoCotizante" class="java.lang.String" />
			<column name="estadoAporte" class="java.lang.String" />
			<column name="pagadorPorTerceros" class="java.lang.Boolean" />
			<column name="valorAporte" class="java.math.BigDecimal" />
			<column name="valorInteres" class="java.math.BigDecimal" />
			<column name="totalAporte" class="java.math.BigDecimal" />
			<column name="nombreCompletoAportante" class="java.lang.String" />
			<column name="tipoIdentificacionAportante" class="java.lang.String" />
			<column name="numeroIdentificacionAportante" class="java.lang.String" />
			<column name="tipoAfiliado" class="java.lang.String" />
			<column name="tieneModificaciones" class="java.lang.Boolean" />
		</constructor-result>
	</sql-result-set-mapping>

	<sql-result-set-mapping name="Consultar.movimiento.aporte.general.native.mapping">
		<constructor-result target-class="com.asopagos.dto.modelo.AporteGeneralModeloDTO">
			<column name="idAporte" class="java.lang.Long" />
			<column name="registroGeneral" class="java.lang.Long" />
			<column name="empresa" class="java.lang.Long" />
			<column name="persona" class="java.lang.Long" />
			<column name="estadoAportante" class="java.lang.String" />
			<column name="estadoAporteAportante" class="java.lang.String" />
			<column name="estadoRegistroAporteAportnte" class="java.lang.String" />
			<column name="sucursalEmpresa" class="java.lang.Long" />
			<column name="pagadorPorTerceros" class="java.lang.Boolean" />
			<column name="periodoAporte" class="java.lang.String" />
			<column name="valorTotalApoObligatorio" class="java.math.BigDecimal" />
			<column name="valor" class="java.math.BigDecimal" />
			<column name="fechaRecaudo" class="java.util.Date" />
			<column name="fechaProcesamiento" class="java.util.Date" />
			<column name="fechaReconocimiento" class="java.util.Date" />
			<column name="codigoEntidadFinanciera" class="java.lang.Short" />
			<column name="operadorInformacion" class="java.lang.Long" />
			<column name="modalidadPlanilla" class="java.lang.String" />
			<column name="modalidadRecaudoAporte" class="java.lang.String" />
			<column name="apoConDetalle" class="java.lang.Boolean" />
			<column name="numeroCuenta" class="java.lang.String" />
			<column name="tipoSolicitante" class="java.lang.String" />
			<column name="origenAporte" class="java.lang.String" />
			<column name="cajaCompensacion" class="java.lang.Integer" />
			<column name="emailAportante" class="java.lang.String" />
			<column name="empresaTramitadoraAporte" class="java.lang.Long" />
			<column name="formaReconocimientoAporte" class="java.lang.String" />
			<column name="marcaPeriodo" class="java.lang.String" />
			<column name="marcaActualizacionCartera" class="java.lang.Boolean" />
			<column name="conciliado" class="java.lang.Boolean" />
			<column name="numeroPlanillaManual" class="java.lang.String" />
			<column name="cuentaBancariaRecaudo" class="java.lang.Integer" />
			<column name="enProcesoReconocimiento" class="java.lang.Boolean" />
			<column name="cantidad" class="java.lang.Integer" />
			<column name="cuenta" class="java.lang.String" />
		</constructor-result>
	</sql-result-set-mapping>


	<named-stored-procedure-query
		name="Aportes.StoredProcedures.USP_REP_CalcularCategoriaAportes"
		procedure-name="USP_REP_CalcularCategoriaAportesPila">
		<parameter class="java.math.BigInteger" mode="IN" name="apdRegistroDetallado" />
	</named-stored-procedure-query>

	<sql-result-set-mapping name="DetalleDatosAportanteDTOMapping">
		<constructor-result target-class="com.asopagos.aportes.dto.DetalleDatosAportanteDTO">
			<column name="tipoAportante" class="java.lang.String" />
			<column name="periodoAporte" class="java.lang.String" />
			<column name="valorAporte" class="java.lang.String" />
			<column name="valorInteresMora" class="java.lang.String" />
			<column name="fechaRecaudo" class="java.lang.String" />
			<column name="metodoRecaudo" class="java.lang.String" />
			<column name="estadoAportante" class="java.lang.String" />
			<column name="pagadorPorTerceros" class="java.lang.String" />
			<column name="idRegistroGeneral" class="java.lang.String" />
			<column name="codigoSucursal" class="java.lang.String" />
			<column name="DiaHabilVencimientoAporte" class="java.lang.String" />
			<column name="estadoAporteAportante" class="java.lang.String" />
		</constructor-result>
	</sql-result-set-mapping>


	<sql-result-set-mapping name="Consultar.Movimiento.Historico.Empresa.mapping">
		<constructor-result target-class="com.asopagos.aportes.dto.MovimientoIngresosDTO">
			<column name="apgId" class="java.lang.Long" />
			<column name="apgFechaProcesamiento" class="java.util.Date" />
			<column name="apgFechaRecaudo" class="java.util.Date" />
			<column name="apgTipoSolicitante" class="java.lang.String" />
			<column name="perTipoIdentificacion" class="java.lang.String" />
			<column name="perNumeroIdentificacion" class="java.lang.String" />
			<column name="perRazonSocial" class="java.lang.String" />
			<column name="perPrimerNombre" class="java.lang.String" />
			<column name="perSegundoNombre" class="java.lang.String" />
			<column name="perPrimerApellido" class="java.lang.String" />
			<column name="perSegundoApellido" class="java.lang.String" />
			<column name="apgValTotalApoObligatorio" class="java.math.BigDecimal" />
			<column name="apgValorIntMora" class="java.math.BigDecimal" />
			<column name="apgApoConDetalle" class="java.lang.Boolean" />
			<column name="apgEstadoRegistroAporteAportante" class="java.lang.String" />
			<column name="apgFechaReconocimiento" class="java.util.Date" />
			<column name="apgFormaReconocimientoAporte" class="java.lang.String" />
			<column name="apgEstadoAporteAportante" class="java.lang.String" />
			<column name="apgEmpresa" class="java.lang.Long" />
			<column name="apgEnProcesoReconocimiento" class="java.lang.Boolean" />
			<column name="apgModalidadRecaudoAporte" class="java.lang.String" />
			<column name="apgRegistroGeneral" class="java.lang.Long" />
		</constructor-result>
	</sql-result-set-mapping>


	<sql-result-set-mapping name="Consultar.Movimiento.Historico.mapping">
		<constructor-result target-class="com.asopagos.aportes.dto.MovimientoIngresosDTO">
			<column name="apgId" class="java.lang.Long" />
			<column name="apgFechaProcesamiento" class="java.util.Date" />
			<column name="apgFechaRecaudo" class="java.util.Date" />
			<column name="apgTipoSolicitante" class="java.lang.String" />
			<column name="perTipoIdentificacion" class="java.lang.String" />
			<column name="perNumeroIdentificacion" class="java.lang.String" />
			<column name="perRazonSocial" class="java.lang.String" />
			<column name="perPrimerNombre" class="java.lang.String" />
			<column name="perSegundoNombre" class="java.lang.String" />
			<column name="perPrimerApellido" class="java.lang.String" />
			<column name="perSegundoApellido" class="java.lang.String" />
			<column name="tipoIdentificacionPagadorTercero" class="java.lang.String" />
			<column name="numeroIdentificacionPagadorTercero" class="java.lang.String" />
			<column name="razonSocialPagadorTercero" class="java.lang.String" />
			<column name="apgValTotalApoObligatorio" class="java.math.BigDecimal" />
			<column name="apgValorIntMora" class="java.math.BigDecimal" />
			<column name="apgApoConDetalle" class="java.lang.Boolean" />
			<column name="apgEstadoRegistroAporteAportante" class="java.lang.String" />
			<column name="apgFechaReconocimiento" class="java.util.Date" />
			<column name="apgFormaReconocimientoAporte" class="java.lang.String" />
			<column name="apgEstadoAporteAportante" class="java.lang.String" />
			<column name="apgEmpresaTramitadoraAporte" class="java.lang.Long" />
			<column name="apgEnProcesoReconocimiento" class="java.lang.Boolean" />
			<column name="apgModalidadRecaudoAporte" class="java.lang.String" />
			<column name="apgRegistroGeneral" class="java.lang.Long" />
			<column name="apdTarifa" class="java.math.BigDecimal" />
		</constructor-result>
	</sql-result-set-mapping>


	<named-stored-procedure-query
		name="PilaService.StoredProcedures.USP_CopiarAportesDesdeTemporalPila"
		procedure-name="dbo.USP_CopiarAportesDesdeTemporalPila">
		<parameter class="java.lang.Long" mode="IN" name="idRegistroGeneral" />
	</named-stored-procedure-query>

	<named-stored-procedure-query
		name="PilaService.StoredProcedures.ASP_ExecuteValidateNovPila"
		procedure-name="dbo.ASP_ExecuteValidateNovPila">
		<parameter class="java.lang.Long" mode="IN" name="regId" />
		<parameter class="java.lang.Boolean" mode="OUT" name="validar" />
	</named-stored-procedure-query>


	<!-- ESPACIO PARA NAMED STORED PROCEDURES -->
	<named-stored-procedure-query
		name="Aportes.ejecutar.USP_REP_CambioCategoriaAfiliado"
		procedure-name="USP_REP_CambioCategoriaAfiliado">
		<parameter class="java.math.BigInteger" mode="IN" name="iAfiId" />
		<parameter class="java.lang.Byte" mode="IN" name="bNuevoAporte" />
	</named-stored-procedure-query>

	<named-stored-procedure-query
		name="Aportes.StoredProcedures.USP_CalculoMasivoCategorias"
		procedure-name="USP_CalculoMasivoCategorias">
	</named-stored-procedure-query>

	<named-stored-procedure-query
		name="Aportes.StoredProcedures.USP_SET_CalcularCategoriasAporteFuturo"
		procedure-name="USP_SET_CalcularCategoriasAporteFuturo">
	</named-stored-procedure-query>

	<named-stored-procedure-query
		name="PilaService.StoredProcedures.USP_SM_GET_CotizanteConSubsidioPeriodo"
		procedure-name="USP_SM_GET_CotizanteConSubsidioPeriodo">
		<parameter
			class="java.lang.String"
			mode="IN"
			name="sTipoDocumentoCotizante"
		/>
		<parameter
			class="java.lang.String"
			mode="IN"
			name="sNumeroIdentificacionCotizante"
		/>
		<parameter
			class="java.lang.String"
			mode="IN"
			name="sPeriodoAporte"
		/>
		<parameter
			class="java.lang.Boolean"
			mode="OUT"
			name="bTieneSubsidio"
		/>
	</named-stored-procedure-query>
	<named-stored-procedure-query
		name="Aportes.StoredProcedures.USP_calculoFechaDiaHabil"
		procedure-name="USP_calculoFechaDiaHabil">
		<parameter
			class="java.lang.Integer"
			mode="IN"
			name="iMes"
		/>
		<parameter
			class="java.lang.Integer"
			mode="IN"
			name="iAnio"
		/>
		<parameter
			class="java.lang.Short"
			mode="IN"
			name="iDiaHabil"
		/>
		<parameter
			class="java.util.Date"
			mode="OUT"
			name="dFechaHabil"
		/>
	</named-stored-procedure-query>


	<sql-result-set-mapping name="Aportes.Consultar.Persona.buscar.listaIdEmpresa.mapping">
		<entity-result entity-class="com.asopagos.entidades.ccf.personas.Persona"></entity-result>
		<entity-result entity-class="com.asopagos.entidades.ccf.personas.Empresa"></entity-result>
		<entity-result entity-class="com.asopagos.entidades.ccf.core.Ubicacion"></entity-result>
	</sql-result-set-mapping>

	<sql-result-set-mapping name="Aporte.Consultar.SolicitudAporte.ListadoId.mapping">
		<entity-result entity-class="com.asopagos.entidades.ccf.aportes.SolicitudAporte"></entity-result>
		<entity-result entity-class="com.asopagos.entidades.ccf.aportes.AporteGeneral"></entity-result>
		<entity-result entity-class="com.asopagos.entidades.ccf.general.Solicitud"></entity-result>
	</sql-result-set-mapping>

	<sql-result-set-mapping
		name="Aportes.Consultar.Solicitud.Devolucion.Vista360.Por.IdAporte.mapping">
		<entity-result entity-class="com.asopagos.entidades.ccf.aportes.SolicitudDevolucionAporte"></entity-result>
		<entity-result entity-class="com.asopagos.entidades.ccf.aportes.MovimientoAporte"></entity-result>
		<entity-result entity-class="com.asopagos.entidades.ccf.general.Solicitud"></entity-result>
	</sql-result-set-mapping>

	<sql-result-set-mapping name="DatosAportanteDTOMapping">
		<constructor-result target-class="com.asopagos.aportes.dto.DatosAportanteDTO">
			<column name="tipoIdentificacionAportante" class="java.lang.String" />
			<column name="numeroIdentificacionAportante" class="java.lang.String" />
			<column name="codigoSucursal" class="java.lang.String" />
			<column name="razonSocial" class="java.lang.String" />
			<column name="idAporteGeneral" class="java.lang.String" />
			<column name="fechaProcesamiento" class="java.lang.String" />
			<column name="periodoAporte" class="java.lang.String" />
			<column name="estadoAporteAportante" class="java.lang.String" />
			<column name="idPersonaAportante" class="java.lang.String" />
			<column name="diasCotizados" class="java.lang.String" />
			<column name="digitoVerificacion" class="java.lang.String" />
		</constructor-result>
	</sql-result-set-mapping>

	<sql-result-set-mapping name="Aportes.Consultar.historicoAportes.tipoAfiliacion.mapping">
		<constructor-result target-class="com.asopagos.dto.HistoricoAportes360DTO">
			<column name="apgFechaProcesamiento" class="java.util.Date" />
			<column name="apgId" class="java.lang.Long" />
			<column name="apdId" class="java.lang.Long" />
			<column name="apgModalidadRecaudoAporte" class="java.lang.String" />
			<column name="apgPeriodoAporte" class="java.lang.String" />
			<column name="tieneMovimientos" class="java.lang.Integer" />
			<column name="apdAporteObligatorio" class="java.math.BigDecimal" />
			<column name="apdValorIntMora" class="java.math.BigDecimal" />
			<column name="valorTotal" class="java.math.BigDecimal" />
			<column name="apdRegistroDetallado" class="java.lang.Long" />
			<column name="apgRegistroGeneral" class="java.lang.Long" />
			<column name="apgFechaRecaudo" class="java.util.Date" />
			<column name="perTipoIdentificacion" class="java.lang.String" />
			<column name="perNumeroIdentificacion" class="java.lang.String" />
			<column name="perRazonSocial" class="java.lang.String" />
			<column name="apgPagadorPorTerceros" class="java.lang.Boolean" />
		</constructor-result>
	</sql-result-set-mapping>

	<sql-result-set-mapping name="Aportes.consultar.detalle.registro.aportes.registrados.mapping">
		<constructor-result target-class="com.asopagos.aportes.dto.DetalleRegistroAportanteDTO">
			<column name="apgId" class="java.lang.Long" />
			<column name="apgTipoSolicitante" class="java.lang.String" />
			<column name="apgEstadoRegistroAporteAportante" class="java.lang.String" />
			<column name="tipoId" class="java.lang.String" />
			<column name="numId" class="java.lang.String" />
			<column name="razonSocial" class="java.lang.String" />
			<column name="apgPeriodoAporte" class="java.lang.String" />
			<column name="apgFechaRecaudo" class="java.util.Date" />
			<column name="apgFechaReconocimiento" class="java.util.Date" />
			<column name="numeroPlanilla" class="java.lang.String" />
			<column name="aporte" class="java.math.BigDecimal" />
			<column name="interes" class="java.math.BigDecimal" />
			<column name="total" class="java.math.BigDecimal" />
			<column name="usuarioRadicacion" class="java.lang.String" />
			<column name="apgRegistroGeneral" class="java.lang.Long" />
			<column name="apgModalidadRecaudoAporte" class="java.lang.String" />
			<column name="apgFechaProcesamiento" class="java.util.Date" />
			<column name="oportunidadDePago" class="java.lang.String" />
			<column name="estadoAportante" class="java.lang.String" />
			<column name="sucursalEmpresa" class="java.lang.String" />
			<column name="digitoVerificacion" class="java.lang.String" />
			<column name="pagadorporsimismos" class="java.lang.String" />
			<column name="tipoIdebtificaciontercero" class="java.lang.String" />
			<column name="numerotercero" class="java.lang.String" />
			<column name="RazonSocialTercero" class="java.lang.String" />
			<column name="motivoDesafilacion" class="java.lang.String" />

		</constructor-result>
	</sql-result-set-mapping>

	<sql-result-set-mapping
		name="Aportes.consultar.detalle.registro.aportes.cotizantes.registrados.mapping">
		<constructor-result target-class="com.asopagos.aportes.dto.DetalleRegistroCotizanteDTO">
			<column name="apdId" class="java.lang.Long" />
			<column name="apdEstadoRegistroAporteCotizante" class="java.lang.String" />
			<column name="tipoIdentificacionCotizante" class="java.lang.String" />
			<column name="numeroIdentificacionCotizante" class="java.lang.String" />
			<column name="primerNombre" class="java.lang.String" />
			<column name="segundoNombre" class="java.lang.String" />
			<column name="primerApellido" class="java.lang.String" />
			<column name="segundoApellido" class="java.lang.String" />
			<column name="apgPeriodoAporte" class="java.lang.String" />
			<column name="fecha" class="java.util.Date" />
			<column name="tarifa" class="java.math.BigDecimal" />
			<column name="aporte" class="java.math.BigDecimal" />
			<column name="interes" class="java.math.BigDecimal" />
			<column name="total" class="java.math.BigDecimal" />
			<column name="usuario" class="java.lang.String" />
			<column name="apgId" class="java.lang.Long" />
			<column name="apgFechaProcesamiento" class="java.util.Date" />
			<column name="pagadorporsimismos" class="java.lang.String" />
			<column name="tipoIdentificaciontercero" class="java.lang.String" />
			<column name="numerotercero" class="java.lang.String" />
			<column name="RazonSocialTercero" class="java.lang.String" />
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping
		name="Aportes.consultar.detalle.registro.aportes.cotizantes.registrados.mapping.2">
		<constructor-result target-class="com.asopagos.aportes.dto.DetalleRegistroCotizanteDTO">
			<column name="apdId" class="java.lang.Long" />
			<column name="apdEstadoRegistroAporteCotizante" class="java.lang.String" />
			<column name="tipoIdentificacionCotizante" class="java.lang.String" />
			<column name="numeroIdentificacionCotizante" class="java.lang.String" />
			<column name="primerNombre" class="java.lang.String" />
			<column name="segundoNombre" class="java.lang.String" />
			<column name="primerApellido" class="java.lang.String" />
			<column name="segundoApellido" class="java.lang.String" />
			<column name="apgPeriodoAporte" class="java.lang.String" />
			<column name="fecha" class="java.util.Date" />
			<column name="tarifa" class="java.math.BigDecimal" />
			<column name="aporte" class="java.math.BigDecimal" />
			<column name="interes" class="java.math.BigDecimal" />
			<column name="total" class="java.math.BigDecimal" />
			<column name="usuario" class="java.lang.String" />
			<column name="apgId" class="java.lang.Long" />
			<column name="apgFechaProcesamiento" class="java.util.Date" />
			<column name="pagadorporsimismos" class="java.lang.String" />
			<column name="tipoIdentificaciontercero" class="java.lang.String" />
			<column name="numerotercero" class="java.lang.String" />
			<column name="RazonSocialTercero" class="java.lang.String" />
		</constructor-result>
	</sql-result-set-mapping>

	<!-- validar esta falta fecha procesamiento y añadir al constructor para mapeo -->
	<sql-result-set-mapping name="Aportes.consultar.detalle.registro.aportes.devoluciones.mapping">
		<constructor-result target-class="com.asopagos.aportes.dto.DetalleRegistroAportanteDTO">
			<column name="apgId" class="java.lang.Long" />
			<column name="apgTipoSolicitante" class="java.lang.String" />
			<column name="apgEstadoRegistroAporteAportante" class="java.lang.String" />
			<column name="tipoId" class="java.lang.String" />
			<column name="numId" class="java.lang.String" />
			<column name="razonSocial" class="java.lang.String" />
			<column name="apgPeriodoAporte" class="java.lang.String" />
			<column name="fechaDevolucion" class="java.util.Date" />
			<column name="numeroPlanilla" class="java.lang.String" />
			<column name="numeroRadicacion" class="java.lang.String" />
			<column name="aporte" class="java.math.BigDecimal" />
			<column name="interes" class="java.math.BigDecimal" />
			<column name="total" class="java.math.BigDecimal" />
			<column name="usuario" class="java.lang.String" />
			<column name="dapDestinatarioDevolucion" class="java.lang.String" />
			<column name="descuentoGestion" class="java.math.BigDecimal" />
			<column name="apgRegistroGeneral" class="java.lang.Long" />
			<column name="apgModalidadRecaudoAporte" class="java.lang.String" />
			<column name="oportunidadDePago" class="java.lang.String" />
			<column name="estadoAportante" class="java.lang.String" />
			<column name="sucursalEmpresa" class="java.lang.String" />
			<column name="digitoVerificacion" class="java.lang.String" />
			<column name="apgFechaProcesamiento" class="java.util.Date" />
			<column name="apgFechaRecaudo" class="java.util.Date" />
			<column name="apgEmpresaTramitadoraAporte" class="java.lang.String" />
			<column name="perTipoIdentificacion" class="java.lang.String" />
			<column name="perNumeroIdentificacion" class="java.lang.String" />
			<column name="perRazonSocial" class="java.lang.String" />
		</constructor-result>
	</sql-result-set-mapping>

<!-- validar esta falta fecha procesamiento y añadir al constructor para mapeo -->
	<sql-result-set-mapping
		name="Aportes.consultar.detalle.registro.aportes.correccion.origen.mapping">
		<constructor-result target-class="com.asopagos.aportes.dto.DetalleRegistroAportanteDTO">
			<column name="apgId" class="java.lang.Long" />
			<column name="apgTipoSolicitante" class="java.lang.String" />
			<column name="apgEstadoRegistroAporteAportante" class="java.lang.String" />
			<column name="tipoId" class="java.lang.String" />
			<column name="numId" class="java.lang.String" />
			<column name="razonSocial" class="java.lang.String" />
			<column name="apgPeriodoAporte" class="java.lang.String" />
			<column name="solNumeroRadicacion" class="java.lang.String" />
			<column name="apgFechaRecaudo" class="java.util.Date" />
			<column name="moaFechaCreacion" class="java.util.Date" />
			<column name="numeroPlanilla" class="java.lang.String" />
			<column name="aporte" class="java.math.BigDecimal" />
			<column name="interes" class="java.math.BigDecimal" />
			<column name="total" class="java.math.BigDecimal" />
			<column name="usuario" class="java.lang.String" />
			<column name="idAporteNuevo" class="java.lang.Long" />
			<column name="apgRegistroGeneral" class="java.lang.Long" />
			<column name="apgModalidadRecaudoAporte" class="java.lang.String" />
			<column name="oportunidadDePago" class="java.lang.String" />
			<column name="estadoAportante" class="java.lang.String" />
			<column name="sucursalEmpresa" class="java.lang.String" />
			<column name="digitoVerificacion" class="java.lang.String" />
			<column name="apgFechaProcesamiento2" class="java.util.Date" />
			<column name="apgEmpresaTramitadoraAporte" class="java.lang.String" />
			<column name="perTipoIdentificacion" class="java.lang.String" />
			<column name="perNumeroIdentificacion" class="java.lang.String" />
			<column name="perRazonSocial" class="java.lang.String" />
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping
		name="Aportes.consultar.detalle.registro.aportes.correccion.a.la.alta.origen.mapping">
		<constructor-result target-class="com.asopagos.aportes.dto.DetalleRegistroAportanteDTO">
			<column name="apgId" class="java.lang.Long" />
			<column name="apgTipoSolicitante" class="java.lang.String" />
			<column name="apgEstadoRegistroAporteAportante" class="java.lang.String" />
			<column name="tipoId" class="java.lang.String" />
			<column name="numId" class="java.lang.String" />
			<column name="razonSocial" class="java.lang.String" />
			<column name="apgPeriodoAporte" class="java.lang.String" />
			<column name="regFechaPagoAporte" class="java.util.Date" />
			<column name="moaFechaCreacion" class="java.util.Date" />
			<column name="numeroPlanilla" class="java.lang.String" />
			<column name="recaudoOriginal" class="java.lang.String" />
			<column name="aporte" class="java.math.BigDecimal" />
			<column name="interes" class="java.math.BigDecimal" />
			<column name="total" class="java.math.BigDecimal" />
			<column name="usuario" class="java.lang.String" />
			<column name="idAporteNuevo" class="java.lang.Long" />
			<column name="apgRegistroGeneral" class="java.lang.Long" />
			<column name="apgModalidadRecaudoAporte" class="java.lang.String" />
			<column name="oportunidadDePago" class="java.lang.String" />
			<column name="estadoAportante" class="java.lang.String" />
			<column name="sucursalEmpresa" class="java.lang.String" />
			<column name="digitoVerificacion" class="java.lang.String" />
			<column name="fechaProcesamiento" class="java.util.Date" />
			<column name="apgEmpresaTramitadoraAporte" class="java.lang.String" />
			<column name="perTipoIdentificacion" class="java.lang.String" />
			<column name="perNumeroIdentificacion" class="java.lang.String" />
			<column name="perRazonSocial" class="java.lang.String" />
			<column name="motivoDesafilacion" class="java.lang.String" />
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping
		name="Aportes.consultar.detalle.registro.aportes.cotizantes.correcciones.origen.mapping">
		<constructor-result target-class="com.asopagos.aportes.dto.DetalleRegistroCotizanteDTO">
			<column name="apdId" class="java.lang.Long" />
			<column name="apdEstadoRegistroAporteCotizante" class="java.lang.String" />
			<column name="tipoIdentificacionCotizante" class="java.lang.String" />
			<column name="numeroIdentificacionCotizante" class="java.lang.String" />
			<column name="primerNombre" class="java.lang.String" />
			<column name="segundoNombre" class="java.lang.String" />
			<column name="primerApellido" class="java.lang.String" />
			<column name="segundoApellido" class="java.lang.String" />
			<column name="apgPeriodoAporte" class="java.lang.String" />
			<column name="fecha" class="java.util.Date" />
			<column name="tipoTransaccion" class="java.lang.String" />
			<column name="tarifa" class="java.math.BigDecimal" />
			<column name="aporte" class="java.math.BigDecimal" />
			<column name="interes" class="java.math.BigDecimal" />
			<column name="total" class="java.math.BigDecimal" />
			<column name="idAporteNuevo" class="java.lang.Long" />
			<column name="apgId" class="java.lang.Long" />
			<column name="usuarioRadicacion" class="java.lang.String" />
			<column name="apgEmpresaTramitadoraAporte" class="java.lang.String" />
			<column name="perTipoIdentificacion" class="java.lang.String" />
			<column name="perNumeroIdentificacion" class="java.lang.String" />
			<column name="perRazonSocial" class="java.lang.String" />
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping
		name="Aportes.consultar.detalle.registro.aportes.cotizantes.correcciones.a.la.alta.origen.mapping">
		<constructor-result target-class="com.asopagos.aportes.dto.DetalleRegistroCotizanteDTO">
			<column name="apdId" class="java.lang.Long" />
			<column name="apdEstadoRegistroAporteCotizante" class="java.lang.String" />
			<column name="tipoIdentificacionCotizante" class="java.lang.String" />
			<column name="numeroIdentificacionCotizante" class="java.lang.String" />
			<column name="primerNombre" class="java.lang.String" />
			<column name="segundoNombre" class="java.lang.String" />
			<column name="primerApellido" class="java.lang.String" />
			<column name="segundoApellido" class="java.lang.String" />
			<column name="apgPeriodoAporte" class="java.lang.String" />
			<column name="fecha" class="java.util.Date" />
			<column name="tipoTransaccion" class="java.lang.String" />
			<column name="tarifa" class="java.math.BigDecimal" />
			<column name="aporte" class="java.math.BigDecimal" />
			<column name="interes" class="java.math.BigDecimal" />
			<column name="total" class="java.math.BigDecimal" />
			<column name="idAporteNuevo" class="java.lang.Long" />
			<column name="apgId" class="java.lang.Long" />
			<column name="usuarioRadicacion" class="java.lang.String" />
			<column name="planillaN" class="java.lang.String" />
			<column name="apgEmpresaTramitadoraAporte" class="java.lang.String" />
			<column name="perTipoIdentificacion" class="java.lang.String" />
			<column name="perNumeroIdentificacion" class="java.lang.String" />
			<column name="perRazonSocial" class="java.lang.String" />
		</constructor-result>
	</sql-result-set-mapping>
	<sql-result-set-mapping name="Aportes.consultar.rolAfiliado.datosAfiliado.mapping">
		<constructor-result target-class="com.asopagos.aportes.dto.DatosAfiliadoServiciosDTO">
			<column name="roaDiaHabilVencimientoAporte" class="java.lang.Short" />
			<column name="nombreAportante" class="java.lang.String" />
			<column name="perId" class="java.lang.Long" />
			<column name="roaOportunidadPago" class="java.lang.String" />
			<column name="fechaVencimiento" class="java.util.Date" />
			<column name="siguienteFechaVencimiento" class="java.util.Date" />
			<column name="roaFechaAfiliacion" class="java.util.Date" />
		</constructor-result>
	</sql-result-set-mapping>

	<sql-result-set-mapping name="Consultar.datos.completos.planilla.mapping">
		<entity-result entity-class="com.asopagos.entidades.ccf.aportes.AporteGeneral"></entity-result>
		<entity-result entity-class="com.asopagos.entidades.ccf.aportes.AporteDetallado"></entity-result>
		<column-result name="tipoIdCotizante" class="java.lang.String" />
		<column-result name="numeroIdCotizante" class="java.lang.String" />
		<column-result name="emailCotizante" class="java.lang.String" />
		<column-result name="emailAportante" class="java.lang.String" />
	</sql-result-set-mapping>

</entity-mappings>