<?xml version="1.0" encoding="UTF-8" ?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd"
                 version="2.1">

    <!-- ESPACIO PARA NAMED QUERIES JPA -->

    <named-query
            name="Cartera.SolicitudPreventiva.consultar.solicitud.preventiva.por.numero.radicado">
        <query>
            SELECT solPre FROM SolicitudPreventiva solPre LEFT JOIN FETCH solPre.solicitudGlobal solGlo WHERE
            solGlo.numeroRadicacion= :numeroRadicacion
        </query>
    </named-query>

    <!-- CONSULTAS CLAUDIA -->

    <named-query
            name="Cartera.Consultar.Empleador.Cartera">
        <query>
            SELECT emd FROM Empleador emd JOIN FETCH emd.empresa emp JOIN FETCH emp.persona per LEFT JOIN FETCH
            emp.codigoCIIU
            LEFT JOIN FETCH per.ubicacionPrincipal,
            UbicacionEmpresa ube, Cartera car
            WHERE per.idPersona = car.idPersona
            AND ube.idEmpresa = emp.idEmpresa
            AND ube.tipoUbicacion = com.asopagos.enumeraciones.core.TipoUbicacionEnum.UBICACION_PRINCIPAL
            AND car.idCartera = :idCartera
        </query>
    </named-query>

    <named-query name="Cartera.Consultar.Cartera.NumeroOperacion">
        <query>
            SELECT new com.asopagos.dto.modelo.CarteraModeloDTO(car)
            FROM Cartera car, CarteraAgrupadora cag
            WHERE car.idCartera = cag.idCartera
            AND cag.numeroOperacion = :numeroOperacion
        </query>
    </named-query>

    <named-query
            name="Cartera.Consultar.RolAfiliado.Cartera">
        <query>
            SELECT roa
            FROM RolAfiliado roa JOIN FETCH roa.afiliado afi JOIN FETCH afi.persona per JOIN FETCH
            per.ubicacionPrincipal
            LEFT JOIN FETCH roa.pagadorAportes LEFT JOIN FETCH roa.pagadorPension, Cartera car
            WHERE per.idPersona = car.idPersona
            AND car.tipoSolicitante = (CASE WHEN roa.tipoAfiliado='TRABAJADOR_INDEPENDIENTE' THEN 'INDEPENDIENTE'
            ELSE CASE WHEN roa.tipoAfiliado='TRABAJADOR_DEPENDIENTE' THEN 'EMPLEADOR' ELSE roa.tipoAfiliado END END)
            AND car.idCartera = :idCartera
        </query>
    </named-query>

    <named-query name="Cartera.Consultar.DatoTemporalCartera">
        <query>
            SELECT dtc
            FROM DatoTemporalCartera dtc
            WHERE dtc.numeroOperacion = :numeroOperacion
        </query>
    </named-query>

    <named-query
            name="Cartera.ParametrizacionConveniosPago.consultar.parametrizacion.convenios.pago">
        <query>
            SELECT scp FROM ParametrizacionConveniosPago scp
        </query>
    </named-query>
    <named-query
            name="Cartera.ParametrizacionConveniosPago.consultar.parametrizacion.exclusiones">
        <query>
            SELECT pex FROM ParametrizacionExclusiones pex
        </query>
    </named-query>
    <named-query
            name="Cartera.ParametrizacionConveniosPago.consultar.parametrizacion.desafiliacion">
        <query>
            SELECT pde FROM ParametrizacionDesafiliacion pde where pde.lineaCobro=:lineaCobro
        </query>
    </named-query>
    <named-query name="Cartera.ConvenioPagoModeloDTO.consultar.convenios.pago">
        <query>
            SELECT cop FROM ConvenioPago cop , Persona per
            WHERE cop.idPersona = per.idPersona
            AND per.tipoIdentificacion=:tipoIdentificacion
            AND per.numeroIdentificacion=:numeroIdentificacion
            AND cop.tipoSolicitante=:tipoSolicitante
        </query>
    </named-query>
    <named-query
            name="Cartera.PagoPeriodoConvenioModeloDTO.consultar.pago.periodo.convenio">
        <query>
            SELECT ppc FROM PagoPeriodoConvenio ppc
            WHERE ppc.idConvenioPago IN (:idsConveniosPago)
        </query>
    </named-query>
    <named-query
            name="Cartera.ParametrizacionGestionCobro.Consultar.Parametrizacion.Gestion.Cobro.Tipo.Parametrizacion">
        <query>
            SELECT pgc
            FROM ParametrizacionGestionCobro pgc where pgc.tipoParametrizacion =:tipoParametrizacion
        </query>
    </named-query>
    <named-query name="Cartera.LineaCobroPersona.Consultar">
        <query>
            SELECT lcp FROM LineaCobroPersona lcp WHERE lcp.tipoLineaCobro=:tipoLinea
        </query>
    </named-query>
    <named-query name="Cartera.AccionCobro2E.Consultar.Accion.Cobro.2E">
        <query>
            SELECT ade FROM AccionCobro2E ade
        </query>
    </named-query>
    <named-query
            name="Cartera.ConvenioPagoModeloDTO.consultar.convenio.fecha.limite">
        <query>
            SELECT new com.asopagos.dto.modelo.ConvenioPagoModeloDTO((SELECT max(ppc.fechaPago) FROM PagoPeriodoConvenio
            ppc
            WHERE ppc.idConvenioPago=cop.idConvenioPago),cop)
            FROM ConvenioPago cop, Persona per
            WHERE cop.idPersona=per.idPersona
            AND cop.tipoSolicitante=:tipoSolicitante
            AND per.tipoIdentificacion=:tipoIdentificacion
            AND per.numeroIdentificacion=:numeroIdentificacion
        </query>
    </named-query>
    <named-query
            name="Cartera.Cartera.tipo.numero.identificacion.tipo.solicitante">
        <query>
            SELECT new com.asopagos.dto.modelo.CarteraModeloDTO(car)
            FROM Cartera car, Persona per
            WHERE per.idPersona=car.idPersona
            AND per.tipoIdentificacion=:tipoIdentificacion
            AND per.numeroIdentificacion=:numeroIdentificacion
            AND car.tipoSolicitante=:tipoSolicitante
            AND car.estadoOperacion = com.asopagos.enumeraciones.cartera.EstadoOperacionCarteraEnum.VIGENTE
            AND car.deudaPresunta&gt;0
            ORDER BY car.fechaCreacion DESC
        </query>
    </named-query>
    <named-query name="Cartera.CarteraModelo.persona.tipoSolicitante">
        <query>
            SELECT new com.asopagos.dto.modelo.CarteraModeloDTO(car)
            FROM Cartera car
            WHERE car.idPersona=:idPersona
            AND car.tipoSolicitante=:tipoSolicitante
            AND car.estadoOperacion = com.asopagos.enumeraciones.cartera.EstadoOperacionCarteraEnum.VIGENTE
            AND car.deudaPresunta&gt;0
        </query>
    </named-query>
    <named-query
            name="Cartera.AportanteConvenioDTO.consultar.aportantes">
        <query>
            SELECT DISTINCT NEW com.asopagos.dto.cartera.AportanteConvenioDTO(per)
            FROM Persona per, Cartera car
            WHERE per.idPersona=car.idPersona
            AND car.estadoOperacion = com.asopagos.enumeraciones.cartera.EstadoOperacionCarteraEnum.VIGENTE
            AND (per.tipoIdentificacion = :tipoIdentificacion OR :tipoIdentificacion IS NULL)
            AND (per.numeroIdentificacion = :numeroIdentificacion OR :numeroIdentificacion IS NULL)
            AND (per.digitoVerificacion = :digitoVerificacion OR :digitoVerificacion IS NULL)
            AND (per.razonSocial LIKE :razonSocial OR :razonSocial IS NULL)
            AND (per.primerNombre LIKE :primerNombre OR :primerNombre IS NULL)
            AND (per.segundoNombre LIKE :segundoNombre OR :segundoNombre IS NULL)
            AND (per.primerApellido LIKE :primerApellido OR :primerApellido IS NULL)
            AND (per.segundoApellido LIKE :segundoApellido OR :segundoApellido IS NULL)
            AND (car.tipoSolicitante =:tipoSolicitante OR :tipoSolicitante IS NULL)
        </query>
        <hint name="tipoIdentificacion" value="per.tipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="per.numeroIdentificacion"></hint>
        <hint name="nombreRazonSocial" value="per.razonSocial"></hint>
    </named-query>
    <named-query
            name="Cartera.CarteraDependienteModeloDTO.consultar.cartera.dependiente">
        <query>
            SELECT new com.asopagos.dto.modelo.CarteraDependienteModeloDTO(cad,perCot,roa)
            FROM CarteraDependiente cad, Cartera car, Empleador empl, Persona per, RolAfiliado roa, Persona perCot
            WHERE car.idCartera = cad.idCartera
            AND car.idPersona = per.idPersona
            AND empl.empresa.persona.idPersona=per.idPersona
            AND roa.empleador.idEmpleador=empl.idEmpleador
            AND roa.afiliado.persona.idPersona=perCot.idPersona
            AND per.tipoIdentificacion=:tipoIdentificacion
            AND per.numeroIdentificacion=:numeroIdentificacion
            AND cad.idPersona = perCot.idPersona
            AND car.periodoDeuda = :periodo
        </query>
    </named-query>
    <named-query name="Cartera.consultarCriterioGestionCobroPorLinea">
        <query>
            SELECT new com.asopagos.dto.modelo.ParametrizacionCriteriosGestionCobroModeloDTO(pcg) FROM
            ParametrizacionCriterioGestionCobro pcg WHERE
            pcg.lineaCobro in (:tipoLineaCobro)
            AND pcg.activa =:activa
        </query>
    </named-query>

    <named-query name="Cartera.Consultar.SolicitudManual.Cartera">
        <query>
            SELECT new com.asopagos.dto.modelo.SolicitudGestionCobroManualModeloDTO(sgcm,cap,car)
            FROM SolicitudGestionCobroManual sgcm LEFT JOIN sgcm.solicitudGlobal sol,
            CicloAportante cap, Persona per, Cartera car, CarteraAgrupadora cag
            WHERE sgcm.idCicloAportante = cap.idCicloAportante
            AND car.idPersona = cap.idPersona
            AND per.idPersona = car.idPersona
            AND sgcm.lineaCobro = car.tipoLineaCobro
            AND cap.tipoSolicitanteMovimientoAporteEnum = car.tipoSolicitante
            AND cag.idCartera = car.idCartera
            AND cag.numeroOperacion = :numeroOperacion
        </query>
    </named-query>

    <named-query name="Cartera.IdEntidadComunicado.consultar">
        <query>
            SELECT new com.asopagos.cartera.dto.DatosIdEntidadComunicadoDTO(persona.idPersona, empleador.idEmpleador)
            FROM Empleador empleador
            LEFT JOIN empleador.empresa empresa
            LEFT JOIN empresa.persona persona
            WHERE persona.tipoIdentificacion =:tipoIdentificacion
            AND persona.numeroIdentificacion =:numeroIdentificacion
        </query>
    </named-query>

    <!-- CONSULTAS ANGELICA -->
    <named-query name="Cartera.CicloCartera.ConsultarCicloPorFecha">
        <query>
            SELECT new com.asopagos.dto.modelo.CicloCarteraModeloDTO(cc,(select count(ca) FROM CicloAportante ca WHERE
            ca.idCicloCartera= cc.idCicloCartera))
            FROM CicloCartera cc
            WHERE cc.tipoCiclo = :tipoCiclo
            AND cc.fechaCreacion BETWEEN :fechaInicio AND :fechaFin
            ORDER BY cc.id DESC
        </query>
    </named-query>
    <named-native-query name="Cartera.SolicitudGestionFisica.ConsultarAportantesEdictos">
        <query>
            SELECT
            per.perTipoIdentificacion,
            per.perNumeroIdentificacion,
            per.perRazonSocial,
            dsg.dsgEnviarPrimeraRemision,
            (SELECT TOP(1) dcaConsecutivoLiquidacion FROM DocumentoCartera JOIN DocumentoSoporte ON
            dcaDocumentoSoporte=dosId WHERE dcaCartera=car.carId AND dosNombreDocumento = :etiqueta order by dcaId DESC)
            consecutivo,
            (SELECT TOP(1) CONVERT(VARCHAR(MAX), dosFechaHoraCargue, 121) FROM DocumentoCartera JOIN DocumentoSoporte ON
            dcaDocumentoSoporte=dosId WHERE dcaCartera=car.carId AND dosNombreDocumento = :etiqueta order by dcaId DESC)
            fecha,
            dsg.dsgCartera,
            dsg.dsgObservacionPrimeraRemision,
            dsg.dsgSolicitudPrimeraRemision,
            dsg.dsgId
            FROM SolicitudGestionCobroFisico sgf JOIN Solicitud sol ON sol.solid = sgf.sgfSolicitud
            JOIN DetalleSolicitudGestionCobro dsg ON dsg.dsgSolicitudPrimeraRemision = sgf.sgfId
            JOIN Cartera car ON car.carId = dsg.dsgCartera
            JOIN Persona per ON per.perId = car.carPersona
            WHERE sol.solNumeroRadicacion= :numeroRadicado
            ORDER BY per.perTipoIdentificacion, per.perNumeroIdentificacion
        </query>
    </named-native-query>
    <!-- COMWNTADO 07/04/2022 CAMBIO POR LEFT INNER JOIN CarteraDependiente cdp on car.carId = cdp.cadCartera-->
    <named-native-query name="Cartera.ConsultarAportantes.LineaCobro.Accion">
         <query>
            SELECT car.carId,
            carTipoAccionCobro,
            carTipoLineaCobro,
            carTipoDeuda,
             sumaDeuda.sumCarDeudaPresunta as sumCarDeudaPresunta,
            carEstadoCartera,
            carTipoSolicitante,
            perNumeroIdentificacion,
            perTipoIdentificacion,
            perRazonSocial,
            (CASE
            WHEN (SELECT count(*)
            FROM BitacoraCartera bc
            where bc.bcaPersona = per.perid
            AND bc.bcaActividad = 'FIRMEZA_TITULO_EJECUTIVO') = 0 THEN 'DEUDA_PRESUNTA'
            ELSE 'DEUDA_REAL' END) AS cadDeudaReal
            FROM Cartera car
            INNER JOIN Persona per
            ON car.carPersona = per.perId
            INNER JOIN (
            SELECT MIN(carId) AS carteraId
            FROM CarteraAgrupadora
            JOIN Cartera cart ON carId = cagCartera
            WHERE carEstadoOperacion = 'VIGENTE'
            GROUP BY cagNumeroOperacion
            ) AS caretaMasAntigua ON caretaMasAntigua.carteraId = car.carId
            left join (select sum(s) as suma, C.carId
            from (
            SELECT (case
            when ca.cadDeudaReal > 0 then ca.cadDeudaReal
            else ca.cadDeudaPresunta end) as s,
            ca.cadCartera as cartera
            FROM CarteraDependiente ca
            inner join Cartera C on C.carId = ca.cadCartera
            where c.carPersona = C.carPersona
            and c.carestadoOperacion = 'VIGENTE'
            AND c.cartipoLineaCobro = :lineaCobro
      AND carTipoAccionCobro IN (:accionCobro)
            and cardeudapresunta > 0
            ) as valor
            INNER JOIN Cartera C on C.carId = valor.cartera
            group by C.carId
            ) as vs on vs.carId = car.carId
            INNER JOIN (
            SELECT car.carPersona, sum(carDeudaPresunta) AS sumCarDeudaPresunta
            FROM Cartera car
            WHERE car.carestadoOperacion = :estadoOperacion
            AND car.cartipoLineaCobro = :lineaCobro
      AND carTipoAccionCobro IN (:accionCobro)
            GROUP BY car.carPersona
            ) AS sumaDeuda ON sumaDeuda.carPersona = per.perId
            WHERE cartipoLineaCobro = :lineaCobro
            AND carestadoOperacion = :estadoOperacion
            AND carTipoAccionCobro IN (:accionCobro)
            AND ((:filtroNumIdentificacion IS NULL ) OR :filtroNumIdentificacion like per.perNumeroIdentificacion)
        </query>
        <hint name="filtroNumIdentificacion" value="filtroNumIdentificacion"></hint>
        <hint name="tipoIdentificacion" value="perTipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="perNumeroIdentificacion"></hint>
        <hint name="nombreCompleto" value="perRazonSocial"></hint>
        <hint name="tipoSolicitante" value="carTipoSolicitante"></hint>
        <hint name="estadoCartera" value="carEstadoCartera"></hint>
        <hint name="tipoDeuda" value="carTipoDeuda"></hint>
        <hint name="montoDeuda" value="carDeudaPresunta"></hint>
        <hint name="lineaCobro" value="carTipoLineaCobro"></hint>
        <hint name="accionCobro" value="carTipoAccionCobro"></hint>
    </named-native-query>
    <named-native-query name="Cartera.ConsultarAportantes.LineaCobro.Accion.LC2">
         <query>
            SELECT car.carId,
            carTipoAccionCobro,
            carTipoLineaCobro,
            carTipoDeuda,
             sumaDeuda.sumCarDeudaPresunta as sumCarDeudaPresunta,
            carEstadoCartera,
            carTipoSolicitante,
            perNumeroIdentificacion,
            perTipoIdentificacion,
            perRazonSocial,
            (CASE
            WHEN (SELECT count(*)
            FROM BitacoraCartera bc
            where bc.bcaPersona = per.perid
            AND bc.bcaActividad = 'FIRMEZA_TITULO_EJECUTIVO') = 0 THEN 'DEUDA_PRESUNTA'
            ELSE 'DEUDA_REAL' END) AS cadDeudaReal
            FROM Cartera car
            INNER JOIN Persona per
            ON car.carPersona = per.perId
             INNER JOIN (
                SELECT
                MAX(c.carfechaCreacion) AS maxFechaCreacion,
                p.perId
                FROM Cartera c  join persona p on p.perid=carPersona
                WHERE c.cartipoLineaCobro =:lineaCobro
                AND carestadoOperacion = :estadoOperacion
                AND carTipoAccionCobro IN (:accionCobro)
                GROUP BY p.perId
                ) AS maxFecha ON car.carfechaCreacion = maxFecha.maxFechaCreacion AND per.perId = maxFecha.perId
            INNER JOIN (
            SELECT MIN(carId) AS carteraId
            FROM CarteraAgrupadora
            JOIN Cartera cart ON carId = cagCartera
            WHERE carEstadoOperacion = 'VIGENTE'
            GROUP BY cagNumeroOperacion
            ) AS caretaMasAntigua ON caretaMasAntigua.carteraId = car.carId
            left join (select sum(s) as suma, C.carId
            from (
            SELECT (case
            when ca.cadDeudaReal > 0 then ca.cadDeudaReal
            else ca.cadDeudaPresunta end) as s,
            ca.cadCartera as cartera
            FROM CarteraDependiente ca
            inner join Cartera C on C.carId = ca.cadCartera
            where c.carPersona = C.carPersona
            and c.carestadoOperacion = 'VIGENTE'
            AND c.cartipoLineaCobro = :lineaCobro
      AND carTipoAccionCobro IN (:accionCobro)
            and cardeudapresunta > 0
            ) as valor
            INNER JOIN Cartera C on C.carId = valor.cartera
            group by C.carId
            ) as vs on vs.carId = car.carId
            INNER JOIN (
            SELECT car.carPersona, sum(carDeudaPresunta) AS sumCarDeudaPresunta
            FROM Cartera car
            WHERE car.carestadoOperacion = :estadoOperacion
            AND car.cartipoLineaCobro = :lineaCobro
      AND carTipoAccionCobro IN (:accionCobro)
            GROUP BY car.carPersona
            ) AS sumaDeuda ON sumaDeuda.carPersona = per.perId
            WHERE cartipoLineaCobro = :lineaCobro
            AND carestadoOperacion = :estadoOperacion
            AND carTipoAccionCobro IN (:accionCobro)
            AND ((:filtroNumIdentificacion IS NULL ) OR :filtroNumIdentificacion like per.perNumeroIdentificacion)
        </query>
        <hint name="filtroNumIdentificacion" value="filtroNumIdentificacion"></hint>
        <hint name="tipoIdentificacion" value="perTipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="perNumeroIdentificacion"></hint>
        <hint name="nombreCompleto" value="perRazonSocial"></hint>
        <hint name="tipoSolicitante" value="carTipoSolicitante"></hint>
        <hint name="estadoCartera" value="carEstadoCartera"></hint>
        <hint name="tipoDeuda" value="carTipoDeuda"></hint>
        <hint name="montoDeuda" value="carDeudaPresunta"></hint>
        <hint name="lineaCobro" value="carTipoLineaCobro"></hint>
        <hint name="accionCobro" value="carTipoAccionCobro"></hint>
    </named-native-query>
    <named-native-query name="Cartera.ConsultarAportantes.LineaCobro.Accion.Manual.Analista">
        <query>
            SELECT MAX(car.carId) carId,
            MAX(car.carTipoAccionCobro) carTipoAccionCobro,
            car.carTipoLineaCobro,
            car.carTipoDeuda,
            sumatoria.carDeudaPresunta,
            car.carEstadoCartera,
            car.carTipoSolicitante,
            per.perNumeroIdentificacion,
            per.perTipoIdentificacion,
            per.perRazonSocial
            FROM Solicitud sol
            JOIN SolicitudGestionCobroManual scm ON sol.solId = scm.scmSolicitudGlobal
            JOIN CicloAportante cap ON scm.scmCicloAportante = cap.capId
            JOIN CicloCartera ccr ON ccr.ccrId = cap.capCicloCartera
            JOIN Cartera car ON car.carPersona = cap.capPersona
            JOIN Persona per ON per.perId = car.carPersona
            INNER JOIN(
            SELECT carPersona, SUM(carDeudaPresunta) AS carDeudaPresunta
            FROM Cartera car
            WHERE car.carEstadoOperacion = :estadoOperacion
            AND car.carTipoLineaCobro = :lineaCobro
            GROUP BY carPersona
            ) AS sumatoria ON sumatoria.carPersona = per.perId
            INNER JOIN (
            SELECT MIN(cagCartera) AS carteraId
            FROM CarteraAgrupadora
            JOIN Cartera ON carId=cagCartera
            WHERE carEstadoOperacion='VIGENTE'
            GROUP BY cagNumeroOperacion
            ) AS caretaMasAntigua ON caretaMasAntigua.carteraId = car.carId
            WHERE scm.scmLineaCobro = :lineaCobro
            AND ccr.ccrEstadoCiclo = :estadoCiclo
            AND scm.scmEstadoSolicitud IN(:estados)
            AND car.cartipoLineaCobro = :lineaCobro
            AND car.carestadoOperacion = :estadoOperacion
            AND car.carPersona = per.perId
            AND sol.solDestinatario = :usuarioAnalista
            GROUP BY
            car.carPersona,car.carTipoLineaCobro,car.carTipoDeuda,sumatoria.carDeudaPresunta,car.carEstadoCartera,car.carTipoSolicitante,per.perNumeroIdentificacion,per.perTipoIdentificacion,per.perRazonSocial
        </query>
        <hint name="tipoIdentificacion" value="perTipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="perNumeroIdentificacion"></hint>
        <hint name="nombreCompleto" value="perRazonSocial"></hint>
        <hint name="tipoSolicitante" value="carTipoSolicitante"></hint>
        <hint name="estadoCartera" value="carEstadoCartera"></hint>
        <hint name="tipoDeuda" value="carTipoDeuda"></hint>
        <hint name="montoDeuda" value="carDeudaPresunta"></hint>
        <hint name="lineaCobro" value="carTipoLineaCobro"></hint>
        <hint name="accionCobro" value="carTipoAccionCobro"></hint>
    </named-native-query>
    <named-native-query name="Cartera.ConsultarAportantes.LineaCobro.Accion.Manual">
        <query>
            SELECT MAX(car.carId) carId,
            MAX(car.carTipoAccionCobro) carTipoAccionCobro,
            car.carTipoLineaCobro,
            car.carTipoDeuda,
            sumatoria.carDeudaPresunta,
            car.carEstadoCartera,
            car.carTipoSolicitante,
            per.perNumeroIdentificacion,
            per.perTipoIdentificacion,
            per.perRazonSocial
            FROM Solicitud sol
            JOIN SolicitudGestionCobroManual scm ON sol.solId = scm.scmSolicitudGlobal
            JOIN CicloAportante cap ON scm.scmCicloAportante = cap.capId
            JOIN CicloCartera ccr ON ccr.ccrId = cap.capCicloCartera
            JOIN Cartera car ON car.carPersona = cap.capPersona
            JOIN Persona per ON per.perId = car.carPersona
            INNER JOIN(
            SELECT carPersona, SUM(carDeudaPresunta) AS carDeudaPresunta
            FROM Cartera car
            WHERE car.carEstadoOperacion = :estadoOperacion
            AND car.carTipoLineaCobro = :lineaCobro
            GROUP BY carPersona
            ) AS sumatoria ON sumatoria.carPersona = per.perId
            INNER JOIN (
            SELECT MIN(cagCartera) AS carteraId
            FROM CarteraAgrupadora
            JOIN Cartera ON carId=cagCartera
            WHERE carEstadoOperacion='VIGENTE'
            GROUP BY cagNumeroOperacion
            ) AS caretaMasAntigua ON caretaMasAntigua.carteraId = car.carId
            WHERE scm.scmLineaCobro = :lineaCobro
            AND ccr.ccrEstadoCiclo = :estadoCiclo
            AND scm.scmEstadoSolicitud IN(:estados)
            AND car.cartipoLineaCobro = :lineaCobro
            AND car.carestadoOperacion = :estadoOperacion
            AND car.carPersona = per.perId
			AND (:filtroNumIdentificacion IS NULL ) OR :filtroNumIdentificacion like per.perNumeroIdentificacion
            GROUP BY
            car.carPersona,car.carTipoLineaCobro,car.carTipoDeuda,sumatoria.carDeudaPresunta,car.carEstadoCartera,car.carTipoSolicitante,per.perNumeroIdentificacion,per.perTipoIdentificacion,per.perRazonSocial
        </query>
        <hint name="filtroNumIdentificacion" value="filtroNumIdentificacion"></hint>
        <hint name="tipoIdentificacion" value="perTipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="perNumeroIdentificacion"></hint>
        <hint name="nombreCompleto" value="perRazonSocial"></hint>
        <hint name="tipoSolicitante" value="carTipoSolicitante"></hint>
        <hint name="estadoCartera" value="carEstadoCartera"></hint>
        <hint name="tipoDeuda" value="carTipoDeuda"></hint>
        <hint name="montoDeuda" value="carDeudaPresunta"></hint>
        <hint name="lineaCobro" value="carTipoLineaCobro"></hint>
        <hint name="accionCobro" value="carTipoAccionCobro"></hint>
    </named-native-query>
    <named-native-query name="Cartera.ConsultarAportantes.LineaCobro">
        <query>
SELECT carTipoAccionCobro,carTipoLineaCobro,carTipoDeuda,
(select sum(carDeudaPresunta) FROM Cartera car WHERE car.carPersona = per.perId AND car.carestadoOperacion =
:estadoOperacion
AND car.cartipoLineaCobro = :lineaCobro) AS carDeudaPresunta,
carEstadoCartera,carTipoSolicitante,perNumeroIdentificacion,perTipoIdentificacion,perRazonSocial,carFechaAsignacionAccion,carId
FROM Cartera car
INNER JOIN Persona Per ON carPersona = perId
INNER JOIN (
SELECT MIN(carId) AS carteraId
FROM CarteraAgrupadora
JOIN Cartera ON carId=cagCartera
WHERE carEstadoOperacion='VIGENTE'
GROUP BY cagNumeroOperacion
) AS caretaMasAntigua ON caretaMasAntigua.carteraId = car.carId
INNER JOIN (
SELECT car.carPersona, sum(carDeudaPresunta) AS carDeudaPresunta
FROM Cartera car
WHERE car.carestadoOperacion = :estadoOperacion
AND car.cartipoLineaCobro = :lineaCobro
GROUP BY car.carPersona
) AS sumaDeuda ON sumaDeuda.carPersona = perId
WHERE cartipoLineaCobro = :lineaCobro
AND carestadoOperacion = :estadoOperacion
AND ((:filtroNumIdentificacion IS NULL) OR (:filtroNumIdentificacion like per.perNumeroIdentificacion))
AND carTipoAccionCobro IN (:accionCobro)
        </query>
        <hint name="filtroNumIdentificacion" value="filtroNumIdentificacion"></hint>
        <hint name="fechaIngreso" value="carFechaAsignacionAccion"></hint>
        <hint name="tipoIdentificacion" value="pertipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="pernumeroIdentificacion"></hint>
        <hint name="nombreCompleto" value="perrazonSocial"></hint>
        <hint name="tipoSolicitante" value="cartipoSolicitante"></hint>
        <hint name="estadoCartera" value="carEstadoCartera"></hint>
        <hint name="tipoDeuda" value="carTipoDeuda"></hint>
        <hint name="montoDeuda" value="carDeudaPresunta"></hint>
        <hint name="lineaCobro" value="carTipoLineaCobro"></hint>
        <hint name="accionCobro" value="carTipoAccionCobro"></hint>
    </named-native-query>
    <named-native-query
            name="Cartera.ConsultarAportantes.Total.LineaCobro.Accion">
        <query>
            SELECT SUM(sumaDeuda.carDeudaPresunta) as totalDeudaPresunta,
            COUNT(carId) as entidades
            FROM Cartera car
            INNER JOIN Persona Per ON carPersona = perId
            INNER JOIN (
            SELECT MIN(carId) AS carteraId
            FROM CarteraAgrupadora
            JOIN Cartera ON carId=cagCartera
            WHERE carEstadoOperacion='VIGENTE'
            GROUP BY cagNumeroOperacion
            ) AS caretaMasAntigua ON caretaMasAntigua.carteraId = car.carId
            INNER JOIN (
            SELECT car.carPersona, sum(carDeudaPresunta) AS carDeudaPresunta
            FROM Cartera car
            WHERE car.carestadoOperacion = :estadoOperacion
            AND car.cartipoLineaCobro = :lineaCobro
            GROUP BY car.carPersona
            ) AS sumaDeuda ON sumaDeuda.carPersona = perId
            WHERE cartipoLineaCobro = :lineaCobro
            AND carestadoOperacion = :estadoOperacion
            AND (carTipoAccionCobro IN (:accionCobro) OR (cartipoAccionCobro IS NULL AND :incluirNull = 1))
        </query>	
	</named-native-query>
    <named-native-query
            name="Cartera.ConsultarAportantes.Total.LineaCobro.Accion.LC2">
        <query>
            SELECT SUM(sumaDeuda.carDeudaPresunta) as totalDeudaPresunta,
            COUNT(carId) as entidades
            FROM Cartera car
            INNER JOIN Persona Per ON carPersona = perId
            INNER JOIN (
                  SELECT
                  MAX(c.carfechaCreacion) AS maxFechaCreacion,
                  p.perId
                  FROM Cartera c  join persona p on p.perid=carPersona
                  WHERE c.cartipoLineaCobro = :linea
                  AND carestadoOperacion = 'VIGENTE'
                  AND carTipoAccionCobro IN (:accionCobro)
                  GROUP BY p.perId
                  ) AS maxFecha ON car.carfechaCreacion = maxFecha.maxFechaCreacion AND per.perId = maxFecha.perId
            INNER JOIN (
            SELECT MIN(carId) AS carteraId
            FROM CarteraAgrupadora
            JOIN Cartera ON carId=cagCartera
            WHERE carEstadoOperacion='VIGENTE'
            GROUP BY cagNumeroOperacion
            ) AS caretaMasAntigua ON caretaMasAntigua.carteraId = car.carId
            INNER JOIN (
            SELECT car.carPersona, sum(carDeudaPresunta) AS carDeudaPresunta
            FROM Cartera car
            WHERE car.carestadoOperacion = :estadoOperacion
            AND car.cartipoLineaCobro = :linea
            GROUP BY car.carPersona
            ) AS sumaDeuda ON sumaDeuda.carPersona = per.perId
            WHERE cartipoLineaCobro = :linea
            AND carestadoOperacion = :estadoOperacion
            AND (carTipoAccionCobro IN (:accionCobro) OR (cartipoAccionCobro IS NULL AND :incluirNull = 1))
        </query>
    </named-native-query>
    <named-query name="Cartera.ConsultarAportantes.Traslado.DeudaAntigua">
        <query>
            SELECT new com.asopagos.dto.cartera.AportanteGestionManualDTO(car,per) FROM Cartera car, Persona Per
            WHERE car.idPersona = per.idPersona
            AND car.tipoLineaCobro in (:lineasCobro)
            AND car.estadoOperacion = :estadoOperacion
            AND car.tipoAccionCobro in (:accionesCobro)
        </query>
        <hint name="tipoIdentificacion" value="per.tipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="per.numeroIdentificacion"></hint>
        <hint name="nombreCompleto" value="per.razonSocial"></hint>
        <hint name="tipoSolicitante" value="car.tipoSolicitante"></hint>
        <hint name="estadoCartera" value="car.estadoCartera"></hint>
        <hint name="tipoDeuda" value="car.tipoDeuda"></hint>
        <hint name="montoDeuda" value="car.deudaPresunta"></hint>
        <hint name="lineaCobro" value="car.tipoLineaCobro"></hint>
        <hint name="accionCobro" value="car.tipoAccionCobro"></hint>
    </named-query>
    <named-query name="Cartera.ConsultarAportantes.Traslado.DeudaAntigua.Personas">
        <query>
            SELECT new com.asopagos.dto.cartera.AportanteGestionManualDTO(car,per) FROM Cartera car, Persona Per
            WHERE car.idPersona = per.idPersona
            AND car.tipoLineaCobro in (:lineasCobro)
            AND car.idPersona in (:idPersonas)
            AND car.estadoOperacion = :estadoOperacion
            AND car.tipoAccionCobro in (:accionesCobro)
        </query>
        <hint name="tipoIdentificacion" value="per.tipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="per.numeroIdentificacion"></hint>
        <hint name="nombreCompleto" value="per.razonSocial"></hint>
        <hint name="tipoSolicitante" value="car.tipoSolicitante"></hint>
        <hint name="estadoCartera" value="car.estadoCartera"></hint>
        <hint name="tipoDeuda" value="car.tipoDeuda"></hint>
        <hint name="montoDeuda" value="car.deudaPresunta"></hint>
        <hint name="lineaCobro" value="car.tipoLineaCobro"></hint>
        <hint name="accionCobro" value="car.tipoAccionCobro"></hint>
    </named-query>
    <named-native-query name="Cartera.IdentificadorDocumento.ConsultarPorSolicitudAportante">
        <query>
            select top(1) identificador FROM (
            SELECT ds.dosIdentificaciondocumento+'_'+ds.dosVersionDocumento as identificador,ds.dosFechaHoraCargue FROM
            SolicitudGestionCobroFisico sol,Solicitud solG,DetalleSolicitudGestionCobro det,Cartera car,DocumentoCartera
            dc,Persona per,DocumentoSoporte ds
            WHERE sol.sgfId = det.dsgSolicitudPrimeraRemision
            and car.carId = det.dsgCartera
            and dc.dcaCartera = car.carId
            and ds.dosId = dc.dcaDocumentoSoporte
            and car.carPersona= per.perId
            and sol.sgfSolicitud=solG.solid
            and solG.solnumeroRadicacion=:numeroRadicacion
            and per.perNumeroIdentificacion=:numeroIdentificacion
            and per.perTipoIdentificacion =:tipoIdentificacion
            and sol.sgfTipoAccionCobro=dc.dcaAccionCobro
            UNION
            SELECT ds.dosIdentificaciondocumento+'_'+ds.dosVersionDocumento as identificador,ds.dosFechaHoraCargue FROM
            SolicitudGestionCobroFisico sol,Solicitud solG,DetalleSolicitudGestionCobro det,Cartera car,DocumentoCartera
            dc,Persona per,DocumentoSoporte ds
            WHERE sol.sgfId = det.dsgSolicitudSegundaRemision
            and car.carId = det.dsgCartera
            and dc.dcaCartera = car.carId
            and ds.dosId = dc.dcaDocumentoSoporte
            and car.carPersona= per.perId
            and sol.sgfSolicitud=solG.solid
            and solG.solnumeroRadicacion=:numeroRadicacion
            and per.perNumeroIdentificacion=:numeroIdentificacion
            and per.perTipoIdentificacion =:tipoIdentificacion
            and sol.sgfTipoAccionCobro=dc.dcaAccionCobro
            )documentos order by dosFechaHoraCargue desc
        </query>
    </named-native-query>
    <named-native-query name="Cartera.SolicitudGestionCobro.AportantesPrimeraEntregaRemision">
        <query>
            SELECT * FROM(
            SELECT
            car.cartipoSolicitante,per.perTipoIdentificacion,per.perNumeroIdentificacion,per.perRazonSocial,car.carPeriodoDeuda,per.perRazonSocial
            as destinatario,muni.mundepartamento,ubi.ubimunicipio,ubi.ubiDireccionFisica,ubi.ubicodigopostal,case when
            ubi.ubitelefonofijo is null then ubi.ubitelefonocelular else ubi.ubitelefonofijo end as
            telefono,det.dsgEnviarSegundaRemision,det.dsgObservacionSegundaRemision,det.dsgFechaPrimeraRemision,det.dsgObservacionPrimeraEntrega,det.dsgEstado,det.dsgFechaSegundaRemision,det.dsgObservacionSegundaEntrega,det.dsgResultadoPrimeraEntrega,det.dsgresultadoSegundaEntrega,CASE
            WHEN dop.dosIdentificacionDocumento IS NOT NULL THEN
            dop.dosIdentificacionDocumento+'_'+dop.dosVersionDocumento ELSE null END as docPrimera,CASE WHEN
            dos.dosIdentificacionDocumento IS NOT NULL THEN dos.dosIdentificacionDocumento+'_'+dos.dosVersionDocumento
            ELSE null END as docsegunda
            FROM DetalleSolicitudGestionCobro det
            JOIN SolicitudGestionCobroFisico sgc ON det.dsgsolicitudSegundaRemision = sgc.sgfid
            JOIN Solicitud sol ON sgc.sgfSolicitud = sol.solid
            JOIN Cartera car ON det.dsgCartera = car.carId
            JOIN Persona per ON car.carPersona = per.perId
            JOIN Ubicacion ubi ON ubi.ubiid = per.perUbicacionPrincipal
            JOIN Municipio muni ON muni.munid=ubi.ubimunicipio
            LEFT JOIN DocumentoSoporte dop ON dop.dosId = dsgDocumentoPrimeraRemision
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dsgDocumentoSegundaRemision
            WHERE det.dsgsolicitudSegundaRemision = sgc.sgfid
            AND sgc.sgfSolicitud = sol.solId
            AND det.dsgCartera = car.carId
            AND car.carPersona = per.perId
            AND per.perUbicacionPrincipal = ubi.ubiId
            AND car.carTipoSolicitante in ('INDEPENDIENTE','PENSIONADO')
            AND sol.solnumeroRadicacion = :numeroRadicacion

            UNION
            SELECT
            car.cartipoSolicitante,per.perTipoIdentificacion,per.perNumeroIdentificacion,per.perRazonSocial,car.carPeriodoDeuda,rep.perRazonSocial
            as destinatario,muni.mundepartamento,ubi.ubimunicipio,ubi.ubiDireccionFisica,ubi.ubicodigopostal,case when
            ubi.ubitelefonofijo is null then ubi.ubitelefonocelular else ubi.ubitelefonofijo end as
            telefono,det.dsgEnviarSegundaRemision,det.dsgObservacionSegundaRemision,det.dsgFechaPrimeraRemision,det.dsgObservacionPrimeraEntrega,det.dsgEstado,det.dsgFechaSegundaRemision,det.dsgObservacionSegundaEntrega,det.dsgResultadoPrimeraEntrega,det.dsgresultadoSegundaEntrega,CASE
            WHEN dop.dosIdentificacionDocumento IS NOT NULL THEN
            dop.dosIdentificacionDocumento+'_'+dop.dosVersionDocumento ELSE null END as docPrimera,CASE WHEN
            dos.dosIdentificacionDocumento IS NOT NULL THEN dos.dosIdentificacionDocumento+'_'+dos.dosVersionDocumento
            ELSE null END as docsegunda
            FROM DetalleSolicitudGestionCobro det
            JOIN SolicitudGestionCobroFisico sgc ON det.dsgsolicitudSegundaRemision = sgc.sgfid
            JOIN Solicitud sol ON sgc.sgfSolicitud = sol.solid
            JOIN Cartera car ON det.dsgCartera = car.carId
            JOIN Persona per ON car.carPersona = per.perId
            JOIN Empresa emp ON Per.perId = emp.empPersona
            JOIN Persona rep ON rep.perid = emp.empRepresentanteLegal
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empid
            JOIN Ubicacion ubi ON ube.ubeubicacion = ubi.ubiid
            JOIN Municipio muni ON muni.munid=ubi.ubimunicipio
            LEFT JOIN DocumentoSoporte dop ON dop.dosId = dsgDocumentoPrimeraRemision
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dsgDocumentoSegundaRemision
            WHERE
            ube.ubetipoUbicacion = :tipoUbicacion
            AND car.carTipoSolicitante ='EMPLEADOR'
            AND sol.solnumeroRadicacion = :numeroRadicacion) x
        </query>
    </named-native-query>
    <named-native-query name="Cartera.DatosActualizacion">
        <query>
            SELECT car.carPersona,car.carTipoSolicitante,sol.solFechaRadicacion FROM Solicitud sol,
            SolicitudGestionCobroFisico sgc,DetalleSolicitudGestionCobro dsg,Cartera car
            WHERE sol.solnumeroRadicacion=:numeroRadicacion
            AND sol.solid=sgc.sgfsolicitud
            AND dsg.dsgSolicitudSegundaRemision = sgc.sgfId
            AND car.carId = dsg.dsgCartera
            UNION
            SELECT car.carPersona,car.carTipoSolicitante,sol.solFechaRadicacion FROM Solicitud
            sol,SolicitudGestionCobroElectronico sge,Cartera car
            WHERE sol.solnumeroRadicacion=:numeroRadicacion
            AND sol.solid=sge.sgeSolicitud
            AND car.carId = sge.sgeCartera
        </query>
    </named-native-query>
    <named-query
            name="Cartera.Consultar.SolicitudGestionCobro.NumeroRadicacion">
        <query>
            SELECT sgc FROM SolicitudGestionCobroFisico sgc JOIN FETCH sgc.solicitudGlobal sol
            LEFT JOIN FETCH sgc.documento
            WHERE sol.numeroRadicacion= :numeroRadicacion
        </query>
    </named-query>

    <named-native-query name="Cartera.SolicitudGestionCobro.AportantesPrimeraEntrega">
        <description>Consultar los aportantes asociados a una solicitud de gestion de cobro.
        </description>
        <query>
            SELECT * FROM(
            SELECT
            car.cartipoSolicitante,per.perTipoIdentificacion,per.perNumeroIdentificacion,per.perRazonSocial,car.carPeriodoDeuda,per.perRazonSocial
            as destinatario,muni.mundepartamento,ubi.ubimunicipio,ubi.ubiDireccionFisica,ubi.ubicodigopostal,case when
            ubi.ubitelefonofijo is null then ubi.ubitelefonocelular else ubi.ubitelefonofijo end as
            telefono,det.dsgFechaPrimeraRemision,det.dsgobservacionprimeraentrega,det.dsgEstado,det.dsgResultadoPrimeraEntrega,CASE
            WHEN dop.dosIdentificacionDocumento IS NOT NULL THEN
            dop.dosIdentificacionDocumento+'_'+dop.dosVersionDocumento ELSE null END as docPrimera
            FROM DetalleSolicitudGestionCobro det
            JOIN SolicitudGestionCobroFisico sgc ON det.dsgsolicitudPrimeraRemision = sgc.sgfid
            JOIN Solicitud sol ON sgc.sgfSolicitud = sol.solid
            JOIN Cartera car ON det.dsgCartera = car.carId
            JOIN Persona per ON car.carPersona = per.perId
            JOIN Ubicacion ubi ON ubi.ubiid = per.perUbicacionPrincipal
            JOIN Municipio muni ON muni.munid=ubi.ubimunicipio
            LEFT JOIN DocumentoSoporte dop ON dop.dosId = det.dsgDocumentoPrimeraRemision
            WHERE det.dsgsolicitudPrimeraRemision = sgc.sgfid
            AND sgc.sgfSolicitud = sol.solId
            AND det.dsgCartera = car.carId
            AND car.carPersona = per.perId
            AND per.perUbicacionPrincipal = ubi.ubiId
            AND car.carTipoSolicitante in ('INDEPENDIENTE','PENSIONADO')
            AND sol.solnumeroRadicacion = :numeroRadicacion
            AND det.dsgenviarPrimeraRemision = :enviar
            UNION
            SELECT
            car.cartipoSolicitante,per.perTipoIdentificacion,per.perNumeroIdentificacion,per.perRazonSocial,car.carPeriodoDeuda,rep.perRazonSocial
            as destinatario,muni.mundepartamento,ubi.ubimunicipio,ubi.ubiDireccionFisica,ubi.ubicodigopostal,case when
            ubi.ubitelefonofijo is null then ubi.ubitelefonocelular else ubi.ubitelefonofijo end as
            telefono,det.dsgFechaPrimeraRemision,det.dsgobservacionprimeraentrega,det.dsgEstado,det.dsgResultadoPrimeraEntrega,CASE
            WHEN dop.dosIdentificacionDocumento IS NOT NULL THEN
            dop.dosIdentificacionDocumento+'_'+dop.dosVersionDocumento ELSE null END as docPrimera
            FROM DetalleSolicitudGestionCobro det
            JOIN SolicitudGestionCobroFisico sgc ON det.dsgsolicitudPrimeraRemision = sgc.sgfid
            JOIN Solicitud sol ON sgc.sgfSolicitud = sol.solid
            JOIN Cartera car ON det.dsgCartera = car.carId
            JOIN Persona per ON car.carPersona = per.perId
            JOIN Empresa emp ON Per.perId = emp.empPersona
            JOIN Persona rep ON rep.perid = emp.empRepresentanteLegal
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empid
            JOIN Ubicacion ubi ON ube.ubeubicacion = ubi.ubiid
            JOIN Municipio muni ON muni.munid=ubi.ubimunicipio
            LEFT JOIN DocumentoSoporte dop ON dop.dosId = det.dsgDocumentoPrimeraRemision
            WHERE
            ube.ubetipoUbicacion =:tipoUbicacion
            AND car.carTipoSolicitante ='EMPLEADOR'
            AND sol.solnumeroRadicacion = :numeroRadicacion
            AND det.dsgenviarPrimeraRemision = :enviar) x
            ORDER BY x.perTipoIdentificacion, x.perNumeroIdentificacion
        </query>
    </named-native-query>
    <named-query
            name="Cartera.ParametrizacionCartera.Consultar.Parametrizacion.Cartera.Tipo.Parametrizacion.Fecha">
        <description>Consultar la parametrizacion de cartera por tipoParametrizacion y fecha
        </description>
        <query>
            SELECT pc
            FROM ParametrizacionCartera pc where pc.tipoParametrizacion =:tipoParametrizacion
            order by pc.fechaActualizacion desc
        </query>
    </named-query>

    <named-query
            name="Cartera.SolicitudFiscalizacion.Consultar.Aportantes.Fiscalizados.Por.Ciclo">
        <description>Consulta que cuenta la cantidad de aportantes fiscalizados para un ciclo</description>
        <query>
            SELECT COUNT(sf) FROM SolicitudFiscalizacion sf WHERE sf.estadoFiscalizacion = :estadoFiscalizacion AND
            sf.idCicloAportante in(SELECT ca.idCicloAportante FROM CicloAportante ca WHERE ca.idCicloCartera=:idCiclo)
        </query>
    </named-query>
    <named-native-query
            name="Cartera.SolicitudPreventiva.Consultar.BackActualizacion.Por.TipoSolicitante">
        <description>Consulta que obtiene el ultimo usuario back de actualización asignado</description>
        <query>
            SELECT TOP(1) sprBackActualizacion FROM SolicitudPreventiva JOIN solicitud on solid=sprsolicitudglobal
            where sprTipoSolicitanteMovimientoAporte = :tipoSolicitante
            AND sprBackActualizacion is not null
            order by CONVERT(bigint,solInstanciaproceso) desc
        </query>
    </named-native-query>
    <named-query name="Cartera.ConvenioPago.Consultar.Pagos">
        <description>Consulta para obtener los convenios que no tuvieron pagos en la fecha establecida</description>
        <query>
            SELECT cp FROM ConvenioPago cp, PagoPeriodoConvenio ppc, ConvenioPagoDependiente cpd
            WHERE cp.idConvenioPago= ppc.idConvenioPago AND cpd.idPagoPeriodoConvenio = ppc.idPagoConvenio
            AND FORMAT(ppc.fechaPago, 'yyyy-MM-dd')&lt;FORMAT(:fechaPago, 'yyyy-MM-dd')
            AND cp.tipoSolicitante=:tipoSolicitante
            AND cp.estadoConvenioPago NOT IN (com.asopagos.enumeraciones.cartera.EstadoConvenioPagoEnum.ANULADO,
            com.asopagos.enumeraciones.cartera.EstadoConvenioPagoEnum.CERRADO)
            AND NOT EXISTS (SELECT SUM(apg.valorTotalAporteObligatorio),apg.idEmpresa FROM AporteGeneral apg, Empresa
            emp
            WHERE apg.idEmpresa = emp.idEmpresa AND emp.persona.idPersona = cp.idPersona AND apg.periodoAporte =
            FORMAT(ppc.periodo, 'yyyy-MM')
            AND FORMAT(apg.fechaRecaudo, 'yyyy-MM-dd')&gt;=FORMAT(cp.fechaRegistro, 'yyyy-MM-dd')GROUP BY apg.idEmpresa
            HAVING SUM(apg.valorTotalAporteObligatorio) &gt;= ppc.valorCuota)
            AND cpd.idPersona NOT IN (SELECT ad.idPersona FROM AporteGeneral apge, Empresa empe, AporteDetallado ad
            WHERE apge.id = ad.idAporteGeneral
            AND apge.idEmpresa = empe.idEmpresa AND empe.persona.idPersona = cp.idPersona AND apge.periodoAporte =
            FORMAT(ppc.periodo, 'yyyy-MM')
            AND FORMAT(apge.fechaRecaudo, 'yyyy-MM-dd')&gt;=FORMAT(cp.fechaRegistro, 'yyyy-MM-dd') GROUP BY ad.idPersona
            HAVING SUM(ad.aporteObligatorio) &gt;= 1)
        </query>
    </named-query>
    <named-query name="Cartera.ConvenioPago.Consultar.Pagos.Personas">
        <description>Consulta para obtener los convenios que no tuvieron pagos en la fecha establecida</description>
        <query>
            SELECT cp FROM ConvenioPago cp,PagoPeriodoConvenio ppc
            WHERE cp.idConvenioPago= ppc.idConvenioPago
            AND FORMAT(ppc.fechaPago, 'yyyy-MM-dd')&lt;FORMAT(:fechaPago, 'yyyy-MM-dd')
            AND cp.tipoSolicitante!=:tipoSolicitante
            AND cp.estadoConvenioPago NOT IN (com.asopagos.enumeraciones.cartera.EstadoConvenioPagoEnum.ANULADO,
            com.asopagos.enumeraciones.cartera.EstadoConvenioPagoEnum.CERRADO)
            AND NOT EXISTS (SELECT SUM(apd.aporteObligatorio),apd.idPersona FROM AporteGeneral apg, AporteDetallado apd
            WHERE apg.id = apd.idAporteGeneral AND apd.idPersona = cp.idPersona AND apg.periodoAporte =
            FORMAT(ppc.periodo, 'yyyy-MM')
            AND FORMAT(apg.fechaRecaudo, 'yyyy-MM-dd')&gt;=FORMAT(cp.fechaRegistro, 'yyyy-MM-dd')
            GROUP BY apd.idPersona HAVING SUM(apd.aporteObligatorio) &gt;= ppc.valorCuota)
        </query>
    </named-query>

    <named-query name="Cartera.ConsultarCartera.All">
        <description>Consulta para obtener todos los registros de Cartera</description>
        <query>
            SELECT new com.asopagos.dto.modelo.CarteraModeloDTO(car,per)
            FROM Cartera car, Persona per
            WHERE car.idPersona = per.idPersona
        </query>
    </named-query>

    <!-- CONSULTAS BRYAN -->

    <named-query
            name="Cartera.SolicitudFiscalizacion.Consultar.SolicitudFiscalizacion.Numero.Radicacion">
        <description>Consulta que sirve para traer la solicitud de fiscalización por número
            de radicación
        </description>
        <query>
            SELECT sf
            FROM SolicitudFiscalizacion sf LEFT JOIN FETCH sf.solicitudGlobal sg where
            sg.numeroRadicacion=:numeroRadicacion
        </query>
    </named-query>

    <named-query name="Cartera.Consultar.Gestion.Fiscalizacion.360">
        <query>
            SELECT sfi
            FROM SolicitudFiscalizacion sfi, Solicitud sol, CicloAportante cap, Persona per
            WHERE sfi.idCicloAportante = cap.idCicloAportante
            AND cap.idPersona = per.idPersona
            AND sfi.solicitudGlobal.idSolicitud = sol.idSolicitud
            AND per.tipoIdentificacion = :tipoIdentificacion
            AND per.numeroIdentificacion = :numeroIdentificacion
            AND cap.tipoSolicitanteMovimientoAporteEnum = :tipoAportante
            ORDER BY sfi.solicitudGlobal.fechaRadicacion DESC
        </query>
    </named-query>

    <named-query name="Cartera.Consultar.Gestion.Preventiva.360">
        <query>
            SELECT spr
            FROM SolicitudPreventiva spr, Solicitud sol, Persona per
            WHERE spr.solicitudGlobal.idSolicitud = sol.idSolicitud
            AND spr.idPersona = per.idPersona
            AND per.tipoIdentificacion = :tipoIdentificacion
            AND per.numeroIdentificacion = :numeroIdentificacion
            AND spr.tipoSolicitante = :tipoAportante
            ORDER BY spr.solicitudGlobal.fechaRadicacion DESC
        </query>
    </named-query>

    <named-query
            name="Cartera.ParametrizacionCartera.Consultar.Parametrizacion.Cartera.Tipo.Parametrizacion">
        <description>Consultar la parametrizacion de cartera por tipoParametrizacion y
            . La consulta servirá para validar si existe una
            parametrización de cartera.
        </description>
        <query>
            SELECT pc
            FROM ParametrizacionCartera pc where pc.tipoParametrizacion =:tipoParametrizacion
        </query>
    </named-query>

    <named-query
            name="Cartera.CicloFiscalizacion.Consultar.Entidades.CicloFiscalizacion.Por.NumeroCiclo">
        <description>Metodo que permite consultar la cantidad de entidades del ciclo de fiscalización
            por número de ciclo
        </description>
        <query>
            SELECT count(ca.idCicloCartera), cf.idCicloCartera
            FROM CicloCartera cf, CicloAportante ca
            WHERE cf.idCicloCartera = ca.idCicloCartera
            AND ca.idCicloCartera In (:idCicloCartera)
            GROUP BY ca.idCicloCartera , cf.idCicloCartera
        </query>
    </named-query>

    <named-query
            name="Cartera.CicloFiscalizacion.Consultar.Aportantes.CicloActual.Con.Persona">
        <query>
            SELECT new com.asopagos.dto.cartera.SimulacionDTO((SELECT empl.estadoEmpleador FROM Empleador empl LEFT JOIN
            empl.empresa emp LEFT JOIN emp.persona persona
            WHERE persona.idPersona=:idPersona),per,ciA,solF) FROM CicloCartera cif,CicloAportante ciA,Persona
            per,SolicitudFiscalizacion solF, Solicitud sol
            WHERE cif.idCicloCartera=ciA.idCicloCartera AND ciA.idPersona=per.idPersona AND ciA.idPersona=:idPersona
            AND solF.idCicloAportante=ciA.idCicloAportante AND solF.solicitudGlobal.idSolicitud=sol.idSolicitud AND
            cif.idCicloCartera in (SELECT c.idCicloCartera FROM CicloCartera c WHERE
            c.estadoCicloCartera=:estadoCicloCartera AND c.tipoCiclo =:tipoCiclo)
            AND sol.destinatario IN (:destinatario) AND solF.estadoFiscalizacion IN (:estadoFiscalizacion)
        </query>
    </named-query>

    <named-query
            name="Cartera.CicloFiscalizacion.Consultar.Aportantes.CicloActual.Sin.Persona">
        <query>
            SELECT new com.asopagos.dto.cartera.SimulacionDTO((SELECT empl.estadoEmpleador FROM Empleador empl LEFT JOIN
            empl.empresa emp LEFT JOIN emp.persona persona
            WHERE persona.idPersona=per.idPersona),per,ciA,solF) FROM CicloCartera cif,CicloAportante ciA,Persona
            per,SolicitudFiscalizacion solF, Solicitud sol
            WHERE cif.idCicloCartera=ciA.idCicloCartera AND ciA.idPersona=per.idPersona
            AND solF.idCicloAportante=ciA.idCicloAportante AND solF.solicitudGlobal.idSolicitud=sol.idSolicitud AND
            cif.idCicloCartera in (SELECT c.idCicloCartera FROM CicloCartera c WHERE
            c.estadoCicloCartera=:estadoCicloCartera AND c.tipoCiclo =:tipoCiclo)
            AND sol.destinatario IN (:destinatario) AND solF.estadoFiscalizacion IN (:estadoFiscalizacion)
        </query>
    </named-query>

    <named-query
            name="Cartera.Solicitud.Consultar.idInstancia.usarioDestino.Por.idCicloAportante">
        <description>Querie que permite obtener el id de instancia de la solicitud y el usuario destino</description>
        <query>
            SELECT sol FROM Solicitud sol,SolicitudFiscalizacion solF,CicloAportante cia, CicloCartera c
            WHERE sol.idSolicitud=solF.solicitudGlobal.idSolicitud AND cia.idCicloAportante=solF.idCicloAportante AND
            c.idCicloCartera=cia.idCicloCartera
            AND c.idCicloCartera = :idCicloCartera AND solF.estadoFiscalizacion IN (:estado)
        </query>
    </named-query>

    <named-query name="Consultar.personas.convenio.cierre">
        <description>Constante consulta la informacion de la persona que se le va a aplicar el cierre de convenio
        </description>
        <query>
            SELECT new com.asopagos.cartera.dto.DatosComunicadoCierreConvenioDTO (p,u,m) FROM Persona p, Ubicacion u,
            Municipio m
            WHERE p.idPersona =:idPersona AND p.ubicacionPrincipal.idUbicacion = u.idUbicacion AND
            u.municipio.idMunicipio = m.idMunicipio
        </query>
    </named-query>

    <named-query name="Consultar.empleador.convenio.cierre">
        <description>Constante consulta la informacion de la empleador que se le va a aplicar el cierre de convenio
        </description>
        <query>
            SELECT new com.asopagos.cartera.dto.DatosComunicadoCierreConvenioDTO (p,e,em,u,m) FROM Persona p, Empresa e,
            Empleador em, Ubicacion u , Municipio m
            WHERE p.idPersona =:idPersona AND p.idPersona = e.persona.idPersona AND em.empresa.idEmpresa = e.idEmpresa
            AND e.idUbicacionRepresentanteLegal = u.idUbicacion AND u.municipio.idMunicipio = m.idMunicipio
        </query>
    </named-query>

    <named-query name="Cartera.ConvenioPago.Consultar.Convenio.Cierre">
        <description>Consulta para obtener los convenios que realizaron todos los pagos y se deben cerrar</description>
        <query>
            SELECT NEW com.asopagos.dto.modelo.ConvenioPagoModeloDTO(cp,max(ppc.fechaPago)) FROM ConvenioPago cp,
            PagoPeriodoConvenio ppc
            WHERE cp.idConvenioPago = ppc.idConvenioPago AND cp.estadoConvenioPago = :estado GROUP BY cp HAVING
            max(ppc.fechaPago) &lt; :fechaPago
        </query>
    </named-query>

    <named-query name="Cartera.ConvenioPago.Consultar.Convenio.Comunicado">
        <description>Consulta para obtener los convenios que ya fueron cerrados y se les desea enviar comunicado
        </description>
        <query>
            SELECT NEW com.asopagos.dto.modelo.ConvenioPagoModeloDTO(cp,max(ppc.fechaPago)) FROM ConvenioPago
            cp,PagoPeriodoConvenio ppc
            WHERE cp.idConvenioPago= ppc.idConvenioPago AND cp.estadoConvenioPago= :estadoConvenio GROUP BY cp HAVING
            max(ppc.fechaPago) =:fechaPago
        </query>
    </named-query>

    <named-query name="Cartera.GestionCobro1A.Consultar.Destinatario">
        <description>Consulta el ultimo destinatario de la tabla solicitud</description>
        <query>
            SELECT s.destinatario FROM Solicitud s WHERE s.idSolicitud =(SELECT max(s.idSolicitud) FROM Solicitud s
            WHERE s.destinatario IS NOT NULL )
        </query>
    </named-query>

    <named-query name="Cartera.GestionCobro.Consultar.Solicitud.Gestion.Cobro.Por.Id.Pprimera.Remision">
        <description>Consulta la solicitud de gestion de cobro por id solicitud primera remision</description>
        <query>
            SELECT sgc FROM SolicitudGestionCobroFisico sgc JOIN FETCH sgc.solicitudGlobal LEFT JOIN FETCH sgc.documento
            WHERE sgc.idSolicitudGestionCobroFisico = :idSolicitudPrimeraRemision
        </query>
    </named-query>
    <named-query
            name="Cartera.DetalleSolicitudGestionCobro.consultarSolicitudPrimeraRemision">
        <query>
            SELECT dsgc
            FROM DetalleSolicitudGestionCobro dsgc
            WHERE dsgc.solicitudPrimeraRemision= :idSolicitudPrimeraRemision
        </query>
    </named-query>
    <named-query
            name="Cartera.Solicitud.Desafiliacion.Consultar.Solicitud.Desafiliacion.Por.Numero.Radicacion">
        <description>Consulta la solicitud de desafiliacion por numero de radicacion</description>
        <query>
            SELECT sd
            FROM SolicitudDesafiliacion sd JOIN FETCH sd.solicitudGlobal so
            WHERE so.numeroRadicacion= :numRadicacion
        </query>
    </named-query>

    <named-query
            name="Cartera.Aportante.Desafiliacion.Consultar.Empleadores.Desafiliacion">
        <description>Consulta se encarga de consultar los aportantes empleadores para tener encuenta para la
            desafiliacion
        </description>
        <query>
            SELECT
            p.tipoIdentificacion as tipoIdentificacion,p.numeroIdentificacion as numerIdentificacion,Case WHEN
            p.razonSocial IS NOT NULL THEN p.razonSocial
            ELSE '' END as razonSocial,
            (select sum(car.deudaPresunta) FROM Cartera car WHERE car.idPersona=p.idPersona and
            car.estadoOperacion=:estadoOperacion AND car.tipoLineaCobro =:tipoLineaCobro AND
            car.tipoSolicitante=:tipoSolicitante) as monto,
            'Deuda presunta',
            p.idPersona as idPersona,
            (select car.idCartera from Cartera car where car.fechaAsignacionAccion=
            (select max (carT.fechaAsignacionAccion) from Cartera carT where carT.idPersona=p.idPersona)
            and car.idPersona=p.idPersona) AS idCartera
            FROM Persona p
            WHERE
            p.idPersona = (SELECT pe.idPersona FROM Empleador e Join e.empresa em Join em.persona pe WHERE pe.idPersona
            = p.idPersona AND e.estadoEmpleador =:estadoEmpleador AND e.marcaExpulsion=:marcaExpulsion)
            AND(p.idPersona not in (SELECT ad.idPersona FROM DesafiliacionAportante ad,SolicitudDesafiliacion sd WHERE
            ad.idSolicitudDesafiliacion = sd.idSolicitudDesafiliacion AND sd.estadoSolicitud not in
            (:estadoSolicitudDesafiliacion))
            AND p.idPersona not in (SELECT co.idPersona FROM ConvenioPago co WHERE
            co.estadoConvenioPago=:estadoConvenioPago)
            AND p.idPersona not in (SELECT ec.idPersona FROM ExclusionCartera ec where
            ec.tipoExclusionCartera=:tipoExclusionCarteraAclaracionMora)
            AND exists (select car.idPersona FROM Cartera car WHERE car.idPersona = p.idPersona AND car.tipoLineaCobro
            =:tipoLineaCobro AND car.estadoOperacion=:estadoOperacion AND car.tipoSolicitante=:tipoSolicitante AND
            (car.tipoAccionCobro=:tipoAccionCobroF1 OR car.tipoAccionCobro=:tipoAccionCobroH2 )))
            OR
            (p.idPersona in (SELECT ec.idPersona FROM ExclusionCartera ec where
            ec.tipoExclusionCartera=:tipoExclusionCarteraRiesgoIncobrabilidad AND
            ec.estadoExclusionCartera=:estadoExclusion AND ec.tipoSolicitante=:tipoSolicitante)
            AND p.idPersona = (SELECT pe.idPersona FROM Empleador e Join e.empresa em Join em.persona pe WHERE
            pe.idPersona = p.idPersona AND e.estadoEmpleador =:estadoEmpleador))

        </query>
    </named-query>

    <named-query
            name="Cartera.Aportante.Desafiliacion.Consultar.Independiente.Desafiliacion">
        <description>se encarga de consultar los aportantes independientes o pensionados para tener encuenta para la
            desafiliacion
        </description>
        <query>
            SELECT
            p.tipoIdentificacion as tipoIdentificacion,p.numeroIdentificacion as numerIdentificacion,Case WHEN
            p.razonSocial IS NOT NULL THEN p.razonSocial
            ELSE '' END as razonSocial,
            (select sum(car.deudaPresunta) FROM Cartera car WHERE car.idPersona=p.idPersona and
            car.estadoOperacion=:estadoOperacion AND car.tipoLineaCobro =:tipoLineaCobro AND
            car.tipoSolicitante=:tipoSolicitante) as monto,
            'Deuda presunta',
            p.idPersona as idPersona,
            (select car.idCartera from Cartera car where car.fechaAsignacionAccion=
            (select max (carT.fechaAsignacionAccion) from Cartera carT where carT.idPersona=p.idPersona)
            and car.idPersona=p.idPersona) AS idCartera
            FROM Persona p
            WHERE
            p.idPersona = (SELECT aper.idPersona from RolAfiliado r JOIN r.afiliado af JOIN af.persona aper WHERE
            aper.idPersona=p.idPersona AND r.tipoAfiliado=:tipoAfiliado AND r.estadoAfiliado =:estadoAfiliado AND
            r.marcaExpulsion =:marcaExpulsion)
            AND(p.idPersona not in (SELECT ad.idPersona FROM DesafiliacionAportante ad,SolicitudDesafiliacion sd WHERE
            ad.idSolicitudDesafiliacion = sd.idSolicitudDesafiliacion AND sd.estadoSolicitud not in
            (:estadoSolicitudDesafiliacion))
            AND p.idPersona not in (SELECT co.idPersona FROM ConvenioPago co WHERE
            co.estadoConvenioPago=:estadoConvenioPago)
            AND p.idPersona not in (SELECT ec.idPersona FROM ExclusionCartera ec where
            ec.tipoExclusionCartera=:tipoExclusionCarteraAclaracionMora)
            AND exists (select car.idPersona FROM Cartera car WHERE car.idPersona = p.idPersona AND car.tipoLineaCobro
            =:tipoLineaCobro AND car.tipoSolicitante=:tipoSolicitante AND car.estadoOperacion=:estadoOperacion AND
            car.tipoAccionCobro=:tipoAccionCobroC4C ))
            OR
            (p.idPersona in (SELECT ec.idPersona FROM ExclusionCartera ec where
            ec.tipoExclusionCartera=:tipoExclusionCarteraRiesgoIncobrabilidad AND
            ec.estadoExclusionCartera=:estadoExclusion AND ec.tipoSolicitante=:tipoSolicitante)
            AND p.idPersona = (SELECT aper.idPersona from RolAfiliado r JOIN r.afiliado af JOIN af.persona aper WHERE
            aper.idPersona=p.idPersona AND r.tipoAfiliado=:tipoAfiliado AND r.estadoAfiliado =:estadoAfiliado))
        </query>
    </named-query>

    <named-query
            name="Cartera.Aportante.Desafiliacion.Consultar.Pensionado.Desafiliacion">
        <description>se encarga de consultar los aportantes independientes o pensionados para tener encuenta para la
            desafiliacion
        </description>
        <query>
            SELECT
            p.tipoIdentificacion as tipoIdentificacion,p.numeroIdentificacion as numerIdentificacion,Case WHEN
            p.razonSocial IS NOT NULL THEN p.razonSocial
            ELSE '' END as razonSocial,
            (select sum(car.deudaPresunta) FROM Cartera car WHERE car.idPersona=p.idPersona and
            car.estadoOperacion=:estadoOperacion AND car.tipoLineaCobro =:tipoLineaCobro AND
            car.tipoSolicitante=:tipoSolicitante) as monto,
            'Deuda presunta',
            p.idPersona as idPersona,
            (select car.idCartera from Cartera car where car.fechaAsignacionAccion=
            (select max (carT.fechaAsignacionAccion) from Cartera carT where carT.idPersona=p.idPersona)
            and car.idPersona=p.idPersona) AS idCartera
            FROM Persona p
            WHERE
            p.idPersona = (SELECT aper.idPersona from RolAfiliado r JOIN r.afiliado af JOIN af.persona aper WHERE
            aper.idPersona=p.idPersona AND r.tipoAfiliado=:tipoAfiliado AND r.estadoAfiliado =:estadoAfiliado AND
            r.marcaExpulsion =:marcaExpulsion)
            AND (p.idPersona not in (SELECT ad.idPersona FROM DesafiliacionAportante ad,SolicitudDesafiliacion sd WHERE
            ad.idSolicitudDesafiliacion = sd.idSolicitudDesafiliacion AND sd.estadoSolicitud not in
            (:estadoSolicitudDesafiliacion))
            AND p.idPersona not in (SELECT co.idPersona FROM ConvenioPago co WHERE
            co.estadoConvenioPago=:estadoConvenioPago)
            AND p.idPersona not in (SELECT ec.idPersona FROM ExclusionCartera ec where
            ec.tipoExclusionCartera=:tipoExclusionCarteraAclaracionMora)
            AND exists (select car.idPersona FROM Cartera car WHERE car.idPersona = p.idPersona AND car.tipoLineaCobro
            =:tipoLineaCobro AND car.estadoOperacion=:estadoOperacion AND car.tipoSolicitante=:tipoSolicitante AND
            car.tipoAccionCobro=:tipoAccionCobroC5C ))
            OR
            (p.idPersona in (SELECT ec.idPersona FROM ExclusionCartera ec where
            ec.tipoExclusionCartera=:tipoExclusionCarteraRiesgoIncobrabilidad AND
            ec.estadoExclusionCartera=:estadoExclusion AND ec.tipoSolicitante=:tipoSolicitante)
            AND p.idPersona = (SELECT aper.idPersona from RolAfiliado r JOIN r.afiliado af JOIN af.persona aper WHERE
            aper.idPersona=p.idPersona AND r.tipoAfiliado=:tipoAfiliado AND r.estadoAfiliado =:estadoAfiliado))
        </query>
    </named-query>

    <named-native-query
            name="Cartera.Solicitud.Desafiliacion.Consultar.Aportantes.Solicitud.Desafiliacion">
        <description>Consulta se encarga de se encarga de consultar los aportantes realcionados con la solcitud para el
            proceso de desafiliacion
        </description>
        <query>
            SELECT tipoIdentificacion, numerIdentificacion, razonSocial, tipoSolicitante, sum(monto) as monto,
            tipoDeuda, lineaCobro, idPersona, numeroOperacion
            FROM (
            SELECT
            p.pertipoidentificacion as tipoIdentificacion,
            p.pernumeroidentificacion as numerIdentificacion,
            CASE WHEN p.perRazonSocial IS NOT NULL
            THEN p.perRazonSocial
            ELSE p.perPrimerNombre + ' ' + ISNULL(p.perSegundoNombre, '') + ' ' + p.perPrimerApellido + ' ' +
            ISNULL(p.perSegundoApellido, '')
            END as razonSocial,
            ad.deatipoSolicitante as tipoSolicitante,
            car.carDeudaPresunta as monto,
            'Deuda presunta' as tipoDeuda,
            car.carTipoLineaCobro as lineaCobro,
            p.perId as idPersona,
            cag.cagNumeroOperacion as numeroOperacion
            FROM Persona p
            INNER JOIN DesafiliacionAportante ad ON p.perId = ad.deaPersona
            INNER JOIN SolicitudDesafiliacion sd ON ad.deaSolicitudDesafiliacion = sd.sodId
            INNER JOIN Solicitud so ON so.solId = sd.sodSolicitudGlobal
            INNER JOIN Cartera car ON car.carPersona = p.perId
            INNER JOIN CarteraAgrupadora cag ON car.carId = cag.cagCartera
            WHERE so.solNumeroRadicacion= :numeroRadicacion
            AND car.carEstadoOperacion = 'VIGENTE'
            AND car.carEstadoCartera = 'MOROSO'
            ) AS datos
            GROUP BY tipoIdentificacion, numerIdentificacion, razonSocial, tipoSolicitante, tipoDeuda, lineaCobro,
            idPersona, numeroOperacion
        </query>
    </named-native-query>

    <named-native-query
            name="Cartera.Consultar.Promedio.Desafiliacion">
        <description>Consulta el promedio de los aportantes seleccionados para el proceso de desafiliacion</description>
        <query>
            select sum(deuda)/(select count(DISTINCT(c.carPersona)) as trabajadores from cartera c, persona per
            WHERE per.perId = c.carPersona
            AND c.carTipoDeuda = :tipoDeuda
            AND c.carTipoSolicitante= :tipoSolicitante
            AND EXISTS (
            SELECT p.tipoIdentificacion,p.numeroIdentificacion FROM (SELECT
            (SELECT T1.data FROM dbo.split(T.data,',') T1 WHERE T1.Id = 1) AS tipoIdentificacion,
            (SELECT T1.data FROM dbo.split(T.data,',') T1 WHERE T1.Id = 2) AS numeroIdentificacion
            FROM dbo.split(:filtro,'|') T) AS p
            WHERE p.tipoIdentificacion = per.perTipoIdentificacion
            AND p.numeroIdentificacion = per.perNumeroIdentificacion)) from (select sum(c.cardeudapresunta) as deuda
            from cartera c, persona per
            WHERE per.perId = c.carPersona
            AND c.carTipoDeuda = :tipoDeuda
            AND c.carTipoSolicitante= :tipoSolicitante
            AND EXISTS (
            SELECT p.tipoIdentificacion,p.numeroIdentificacion FROM (SELECT
            (SELECT T1.data FROM dbo.split(T.data,',') T1 WHERE T1.Id = 1) AS tipoIdentificacion,
            (SELECT T1.data FROM dbo.split(T.data,',') T1 WHERE T1.Id = 2) AS numeroIdentificacion
            FROM dbo.split(:filtro,'|') T) AS p
            WHERE p.tipoIdentificacion = per.perTipoIdentificacion
            AND p.numeroIdentificacion = per.perNumeroIdentificacion)
            group by c.carpersona)x
            option (maxrecursion 1000)
        </query>
    </named-native-query>

    <named-native-query
            name="Cartera.Consultar.Cartera.Aportantes.Desafiliacion">
        <description>se encarga de consultar en cartera los aportantes seleccionados para la desafiliacion</description>
        <query>
            SELECT
            car.carDeudaPresunta as deudaPresunta,
            car.carEstadoCartera as estadoCartera,
            car.carEstadoOperacion as estadoOperacion,
            car.carFechaCreacion as fechaCreacion,
            car.carPersona as idPersona,
            car.carId as idCartera,
            car.carMetodo as metodo,
            car.carPeriodoDeuda as periodoDeuda,
            car.carRiesgoIncobrabilidad as riesgoIncobrabilidad,
            car.carTipoAccionCobro as tipoAccionCobro,
            car.carTipoDeuda as tipoDeuda,
            car.carTipoLineaCobro as tipoLineaCobro,
            car.carTipoSolicitante as tipoSolicitante
            FROM Cartera car, Persona per,CarteraAgrupadora cag 
            WHERE car.carTipoLineaCobro=:lineaCobro
            AND car.carTipoSolicitante=:tipoSolicitante
            AND car.carPersona = per.perId
            AND cag.cagCartera = car.carid
            AND cag.cagNumeroOperacion in (:numeroOperacion)
            AND EXISTS (
            SELECT p.tipoIdentificacion,p.numeroIdentificacion FROM (SELECT
            (SELECT T1.data FROM dbo.split(T.data,',') T1 WHERE T1.Id = 1) AS tipoIdentificacion,
            (SELECT T1.data FROM dbo.split(T.data,',') T1 WHERE T1.Id = 2) AS numeroIdentificacion
            FROM dbo.split(:filtros,'|') T) AS p
            WHERE p.tipoIdentificacion = per.perTipoIdentificacion
            AND p.numeroIdentificacion = per.perNumeroIdentificacion)
            option (maxrecursion 1000)
        </query>
    </named-native-query>

    <named-query
            name="Cartera.Solicitud.Gestion.Cobro.Electronico.Consultar.Accion.Cobro.Posterior">
        <description>se encarga de consultar en cartera si la accion de cobro actual de la solicitud electronica cambio
            de accion en cartera
        </description>
        <query>
            SELECT se FROM SolicitudGestionCobroElectronico se, Cartera c
            WHERE se.idCartera = c.idCartera AND c.tipoAccionCobro = :tipoAccioCobro
            AND c.estadoCartera=:estadoCartera
        </query>
    </named-query>

    <named-query
            name="Cartera.Traspaso.Cartera.Antigua.Empleador">
        <description>se encarga de consultar en cartera si el empleador se le puede hacer traspaso a cartera antigua
        </description>
        <query>
            SELECT
            count(p)
            FROM Persona p
            WHERE
            p.tipoIdentificacion =:tipoIdentificacion
            AND p.numeroIdentificacion =:numeroIdentificacion
            AND EXISTS (SELECT per.idPersona FROM Empleador empl LEFT JOIN empl.empresa emp LEFT JOIN emp.persona per
            WHERE per.idPersona=p.idPersona AND empl.estadoEmpleador = :estadoEmpleador)
            AND EXISTS (select car.idPersona FROM Cartera car WHERE car.idPersona=p.idPersona AND
            car.tipoSolicitante=:tipoSolicitante AND
            car.tipoDeuda=:tipoDeuda AND car.estadoOperacion=:estadoOperacion AND car.estadoCartera IN (select
            MAX(car.estadoCartera) FROM Cartera car WHERE car.idPersona=p.idPersona AND
            car.tipoSolicitante=:tipoSolicitante AND car.tipoDeuda=:tipoDeuda AND car.estadoOperacion=:estadoOperacion))
            AND (select sum(car.deudaPresunta) FROM Cartera car WHERE car.idPersona=p.idPersona AND
            car.tipoDeuda=:tipoDeuda AND car.estadoCartera=:estadoCartera AND car.estadoOperacion=:estadoOperacion AND
            car.tipoSolicitante=:tipoSolicitante) > 0
            AND EXISTS (SELECT max(c.tipoAccionCobro) FROM Cartera c WHERE c.idPersona=p.idPersona AND
            c.tipoSolicitante=:tipoSolicitante AND c.estadoCartera=:estadoCartera AND c.tipoDeuda=:tipoDeuda AND
            c.estadoOperacion=:estadoOperacion GROUP BY c.tipoAccionCobro HAVING c.tipoAccionCobro IN (:tipoAcciones))

        </query>
    </named-query>

    <named-query
            name="Cartera.Traspaso.Cartera.Antigua.Independiente.Pensionado">
        <description>se encarga de consultar en cartera si el independiente o pensionado se le puede hacer traspaso a
            cartera antigua
        </description>
        <query>
            SELECT
            count(p)
            FROM Persona p
            WHERE
            p.tipoIdentificacion =:tipoIdentificacion
            AND p.numeroIdentificacion =:numeroIdentificacion
            AND EXISTS (SELECT per.idPersona from RolAfiliado roa LEFT JOIN roa.afiliado afi LEFT JOIN afi.persona per
            WHERE roa.tipoAfiliado =:tipoAfiliado AND per.idPersona=p.idPersona AND roa.estadoAfiliado =:estadoAfiliado)
            AND EXISTS (select car.idPersona FROM Cartera car WHERE car.idPersona=p.idPersona AND
            car.tipoSolicitante=:tipoSolicitante AND car.tipoDeuda=:tipoDeuda AND car.estadoOperacion=:estadoOperacion
            AND car.estadoCartera IN (select MAX(car.estadoCartera) FROM Cartera car WHERE car.idPersona=p.idPersona AND
            car.tipoSolicitante=:tipoSolicitante AND car.tipoDeuda=:tipoDeuda AND car.estadoOperacion=:estadoOperacion))
            AND (select sum(car.deudaPresunta) FROM Cartera car WHERE car.idPersona=p.idPersona AND
            car.tipoDeuda=:tipoDeuda AND car.estadoCartera=:estadoCartera AND car.estadoOperacion=:estadoOperacion AND
            car.tipoSolicitante=:tipoSolicitante) > 0
            AND EXISTS (SELECT max(c.tipoAccionCobro) FROM Cartera c WHERE c.idPersona=p.idPersona AND
            c.tipoSolicitante=:tipoSolicitante AND c.estadoCartera=:estadoCartera AND c.tipoDeuda=:tipoDeuda AND
            c.estadoOperacion=:estadoOperacion GROUP BY c.tipoAccionCobro HAVING c.tipoAccionCobro IN (:tipoAcciones))
        </query>
    </named-query>

    <named-query
            name="cartera.solicitud.gestion.cobro.electronico.validar.cartera.vigente.envio.electronico">
        <description>se encarga de consultar en cartera si esta vigente para la solicitud de gestion cobro electronico
        </description>
        <query>
            SELECT
            count(se)
            FROM SolicitudGestionCobroElectronico se LEFT JOIN se.solicitudGlobal s, Cartera c
            WHERE s.numeroRadicacion=:numeroRadicacion AND se.idCartera= c.idCartera AND
            c.estadoOperacion=:estadoOperacion

        </query>
    </named-query>

    <named-query
            name="cartera.solicitud.gestion.cobro.fisico.validar.cartera.vigente.envio.fisico">
        <description>se encarga de consultar en cartera si esta vigente para la solicitud de gestion cobro fisico
        </description>
        <query>
            SELECT
            count(sf)
            FROM SolicitudGestionCobroFisico sf LEFT JOIN sf.solicitudGlobal s,DetalleSolicitudGestionCobro dt, Cartera
            c
            WHERE s.numeroRadicacion=:numeroRadicacion AND c.estadoOperacion=:estadoOperacion
            AND dt.solicitudSegundaRemision = sf.idSolicitudGestionCobroFisico AND dt.idCartera = c.idCartera
        </query>
    </named-query>

    <named-query
            name="cartera.ciclocartera.consultar.ciclos.vencidos">
        <description>se encarga de consultar en cartera los ciclos proximos a vencer</description>
        <query>
            SELECT
            new com.asopagos.dto.modelo.CicloCarteraModeloDTO(c)
            FROM CicloCartera c
            WHERE c.estadoCicloCartera=:estadoCiclo
            AND c.fechaFin &lt; :fechaActual
        </query>
    </named-query>

    <named-query
            name="Cartera.Solicitud.Consultar.idInstancia.usarioDestino.Por.idCicloAportanteManual">
        <description>Querie que permite obtener obtener el id de instancia de la solicitud y el usuario destino
        </description>
        <query>
            SELECT sol FROM Solicitud sol,SolicitudGestionCobroManual solM,CicloAportante cia, CicloCartera c
            WHERE sol.idSolicitud=solM.solicitudGlobal.idSolicitud AND cia.idCicloAportante=solM.idCicloAportante AND
            c.idCicloCartera=cia.idCicloCartera
            AND c.idCicloCartera = :idCicloCartera AND solM.estadoSolicitud IN (:estado)
        </query>
    </named-query>

    <named-native-query
            name="Consultar.aportantes.empleadores.trabajadores.parametrizacion.preventiva.automatico">
        <query>
            SELECT * FROM (
            SELECT
            per.perTipoIdentificacion as tipoIdentificacion,per.pernumeroIdentificacion as
            numeroIdentificacion,per.perrazonsocial as razonSocial,
            CASE WHEN ubiAuto.ubiAutorizacionEnvioEmail=0 OR ubiAuto.ubiAutorizacionEnvioEmail IS NULL OR ubi.ubiEmail
            IS NULL OR per.perId in(:criteriosEmpleador)THEN cast(0 as bit) ELSE cast(1 as bit) END as autorizacion,
            (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) AS estadoCartera,
            (SELECT AVG(ap.apgValTotalApoObligatorio) FROM AporteGeneral ap WHERE ap.apgEmpresa=emp.empId AND
            ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador) as valorAportes,
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado) as cantidadTrabajadores,
            (SELECT COUNT(car.carid) FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMoraEmpleador,'yyyy-MM-dd')
            AND FORMAT(:periodoFinalMoraEmpleador,'yyyy-MM-dd')) as vecesMoroso,
            'EMPLEADOR' as tipoAportante,
            ubi.ubiEmail as email
            FROM Empleador empl JOIN Empresa emp ON empl.empempresa=emp.empid
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            JOIN Ubicacion ubiAuto ON ube.ubeUbicacion = ubiAuto.ubiId
            JOIN Persona per on emp.emppersona = per.perid
            JOIN RolContactoEmpleador rol ON rol.rceEmpleador = empl.empId
            JOIN Ubicacion ubi ON ubi.ubiId= rol.rceUbicacion
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            empl.empestadoEmpleador = :estadoAfiliacion
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion = :estadoOperacion
            AND rol.rceTipoRolContactoEmpleador = :rolContactoAportes
            AND ube.ubeTipoUbicacion=:tipoUbicacion
            AND empl.empId IN (Select e.empId FROM Empleador e JOIN Empresa emp ON e.empempresa=emp.empid JOIN Persona
            per on emp.emppersona = per.perid AND (e.empDiaHabilVencimientoAporte - :cantidadDiaHabilEjecucioAutomatica)
            = :diaHabilActual)
            AND car.cartipoSolicitante in('EMPLEADOR')
            AND
            (
            EXISTS(SELECT AVG(ap.apgValTotalApoObligatorio),ap.apgEmpresa FROM AporteGeneral ap WHERE
            ap.apgEmpresa=emp.empId AND ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador
            GROUP BY ap.apgEmpresa HAVING AVG(ap.apgValTotalApoObligatorio)>=:valorAportes)
            OR
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado)>=:cantidadActivos
            OR
            EXISTS(SELECT car.carid FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMoraEmpleador,'yyyy-MM-dd')
            AND FORMAT(:periodoFinalMoraEmpleador,'yyyy-MM-dd'))
            )
            group by
            per.perTipoIdentificacion,per.pernumeroIdentificacion,per.perrazonsocial,emp.empid,empl.empid,per.perid,ubi.ubiEmail,ubiAuto.ubiAutorizacionEnvioEmail
            UNION

            SELECT
            per.perTipoIdentificacion as tipoIdentificacion,per.pernumeroIdentificacion as
            numeroIdentificacion,per.perrazonsocial as razonSocial,
            CASE WHEN ubi.ubiAutorizacionEnvioEmail=0 OR ubi.ubiEmail IS NULL OR per.perId in(:criterios)THEN cast(0 as
            bit) ELSE cast(1 as bit) END as autorizacion,
            (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) as estadoCartera,
            (SELECT AVG(apd.apdAporteObligatorio) FROM AporteDetallado apd JOIN AporteGeneral apg on
            apd.apdAporteGeneral =apg.apgId WHERE apd.apdPersona=per.perid AND apd.apdTipoCotizante =
            roa.roaTipoAfiliado AND apg.apgperiodoAporte BETWEEN :periodoInicial AND :periodoFinal) as valorAportes,
            NULL as cantidadTrabajadores,
            (SELECT COUNT(car.carid) FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMora,'yyyy-MM-dd') AND
            FORMAT(:periodoFinalMora,'yyyy-MM-dd') AND car.carTipoSolicitante = (CASE WHEN
            roa.roaTipoAfiliado='TRABAJADOR_INDEPENDIENTE' THEN 'INDEPENDIENTE' ELSE roa.roaTipoAfiliado END)) as
            vecesMoroso,
            CASE WHEN roa.roaTipoAfiliado='TRABAJADOR_INDEPENDIENTE' THEN 'INDEPENDIENTE' ELSE roa.roaTipoAfiliado END
            as tipoAportante,
            ubi.ubiEmail as email
            FROM Persona per
            JOIN Afiliado afi on afi.afiPersona = per.perId
            JOIN RolAfiliado roa ON roaAfiliado = afi.afiId
            JOIN Cartera car on car.carpersona=per.perid
            JOIN Ubicacion ubi ON ubi.ubiId= per.perUbicacionPrincipal
            WHERE
            roa.roaestadoAfiliado = :estadoAfiliado
            AND roa.roaTipoAfiliado in (:trabajadores)
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion =:estadoOperacion
            AND per.perId IN (select pe.perId FROM Persona pe JOIN Afiliado afi on afi.afiPersona = pe.perId JOIN
            RolAfiliado roa ON roaAfiliado = afi.afiId and (roa.roaDiaHabilVencimientoAporte -
            :cantidadDiaHabilEjecucioAutomatica) = :diaHabilActual)
            AND car.cartipoSolicitante in(:solicitantes)
            AND
            (EXISTS(SELECT AVG(apd.apdAporteObligatorio),apd.apdPersona FROM AporteDetallado apd JOIN AporteGeneral apg
            on apd.apdAporteGeneral =apg.apgId WHERE apd.apdPersona=per.perid AND apd.apdTipoCotizante in
            (:trabajadores) AND apg.apgperiodoAporte BETWEEN :periodoInicial AND :periodoFinal GROUP BY apd.apdPersona
            HAVING AVG(apd.apdAporteObligatorio)>=:valorAportes)
            OR
            EXISTS(SELECT car.carid FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMora,'yyyy-MM-dd') AND
            FORMAT(:periodoFinalMora,'yyyy-MM-dd'))
            )
            group by
            per.perTipoIdentificacion,per.pernumeroIdentificacion,per.perrazonsocial,per.perid,ubi.ubiEmail,ubi.ubiAutorizacionEnvioEmail,roa.roaTipoAfiliado
            ) aportantes
        </query>
        <hint name="valorPromedioAportes" value="valorAportes"></hint>
        <hint name="tipoIdentificacion" value="tipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="numeroIdentificacion"></hint>
        <hint name="nombreRazonSocial" value="razonSocial"></hint>
        <hint name="correoElectronico" value="email"></hint>
        <hint name="trabajadoresActivos" value="cantidadTrabajadores"></hint>
        <hint name="cantidadVecesMoroso" value="vecesMoroso"></hint>
        <hint name="tipoGestionPreventiva" value="autorizacion"></hint>
        <hint name="tipoAportante" value="tipoAportante"></hint>
        <hint name="estadoActualCartera" value="estadoCartera"></hint>
    </named-native-query>
    <named-native-query
            name="Consultar.aportantes.empleadores.trabajadores.parametrizacion.preventiva.automatico.sinMora">
        <query>
            SELECT * FROM (
            SELECT
            per.perTipoIdentificacion as tipoIdentificacion,per.pernumeroIdentificacion as
            numeroIdentificacion,per.perrazonsocial as razonSocial,
            CASE WHEN ubiAuto.ubiAutorizacionEnvioEmail=0 OR ubiAuto.ubiAutorizacionEnvioEmail IS NULL OR ubi.ubiEmail
            IS NULL OR per.perId in(:criteriosEmpleador)THEN cast(0 as bit) ELSE cast(1 as bit) END as autorizacion,
            (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) as estadoCartera,
            (SELECT AVG(ap.apgValTotalApoObligatorio) FROM AporteGeneral ap WHERE ap.apgEmpresa=emp.empId AND
            ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador) as valorAportes,
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado) as cantidadTrabajadores,
            NULL as vecesMoroso,
            'EMPLEADOR' as tipoAportante,
            ubi.ubiEmail as email
            FROM Empleador empl JOIN Empresa emp ON empl.empempresa=emp.empid
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            JOIN Ubicacion ubiAuto ON ube.ubeUbicacion = ubiAuto.ubiId
            JOIN Persona per on emp.emppersona = per.perid
            JOIN RolContactoEmpleador rol ON rol.rceEmpleador = empl.empId
            JOIN Ubicacion ubi ON ubi.ubiId= rol.rceUbicacion
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            empl.empestadoEmpleador = :estadoAfiliacion
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion = :estadoOperacion
            AND rol.rceTipoRolContactoEmpleador = :rolContactoAportes
            AND ube.ubeTipoUbicacion=:tipoUbicacion
            AND empl.empId IN (Select e.empId FROM Empleador e JOIN Empresa emp ON e.empempresa=emp.empid JOIN Persona
            per on emp.emppersona = per.perid AND (e.empDiaHabilVencimientoAporte - :cantidadDiaHabilEjecucioAutomatica)
            = :diaHabilActual)
            AND car.cartipoSolicitante in('EMPLEADOR')
            AND
            (
            EXISTS(SELECT AVG(ap.apgValTotalApoObligatorio),ap.apgEmpresa FROM AporteGeneral ap WHERE
            ap.apgEmpresa=emp.empId AND ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador
            GROUP BY ap.apgEmpresa HAVING AVG(ap.apgValTotalApoObligatorio)>=:valorAportes)
            OR
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado)>=:cantidadActivos
            )
            group by
            per.perTipoIdentificacion,per.pernumeroIdentificacion,per.perrazonsocial,emp.empid,empl.empid,per.perid,ubi.ubiEmail,ubiAuto.ubiAutorizacionEnvioEmail
            UNION

            SELECT
            per.perTipoIdentificacion as tipoIdentifacion,per.pernumeroIdentificacion as
            numeroIdentificacion,per.perrazonsocial as razonSocial,
            CASE WHEN ubi.ubiAutorizacionEnvioEmail=0 OR ubi.ubiEmail IS NULL OR per.perId in(:criterios)THEN cast(0 as
            bit) ELSE cast(1 as bit) END as autorizacion,
            (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) as estadoCartera,
            (SELECT AVG(apd.apdAporteObligatorio) FROM AporteDetallado apd JOIN AporteGeneral apg on
            apd.apdAporteGeneral =apg.apgId WHERE apd.apdPersona=per.perid AND apd.apdTipoCotizante =
            roa.roaTipoAfiliado AND apg.apgperiodoAporte BETWEEN :periodoInicial AND :periodoFinal) as valorAportes,
            NULL as cantidadTrabajadores,
            NULL as vecesMoroso,
            CASE WHEN roa.roaTipoAfiliado='TRABAJADOR_INDEPENDIENTE' THEN 'INDEPENDIENTE' ELSE roa.roaTipoAfiliado END
            as tipoAportante,
            ubi.ubiEmail as email
            FROM Persona per
            JOIN Afiliado afi on afi.afiPersona = per.perId
            JOIN RolAfiliado roa ON roaAfiliado = afi.afiId
            JOIN Cartera car on car.carpersona=per.perid
            JOIN Ubicacion ubi ON ubi.ubiId= per.perUbicacionPrincipal
            WHERE
            roa.roaestadoAfiliado = :estadoAfiliado
            AND roa.roaTipoAfiliado in (:trabajadores)
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion =:estadoOperacion
            AND per.perId IN (select pe.perId FROM Persona pe JOIN Afiliado afi on afi.afiPersona = pe.perId JOIN
            RolAfiliado roa ON roaAfiliado = afi.afiId and (roa.roaDiaHabilVencimientoAporte -
            :cantidadDiaHabilEjecucioAutomatica) = :diaHabilActual)
            AND car.cartipoSolicitante in(:solicitantes)
            AND
            (EXISTS(SELECT AVG(apd.apdAporteObligatorio),apd.apdPersona FROM AporteDetallado apd JOIN AporteGeneral apg
            on apd.apdAporteGeneral =apg.apgId WHERE apd.apdPersona=per.perid AND apd.apdTipoCotizante in
            (:trabajadores) AND apg.apgperiodoAporte BETWEEN :periodoInicial AND :periodoFinal GROUP BY apd.apdPersona
            HAVING AVG(apd.apdAporteObligatorio)>=:valorAportes)
            )
            group by
            per.perTipoIdentificacion,per.pernumeroIdentificacion,per.perrazonsocial,per.perid,ubi.ubiEmail,ubi.ubiAutorizacionEnvioEmail,roa.roaTipoAfiliado
            ) aportantes

        </query>
        <hint name="valorPromedioAportes" value="valorAportes"></hint>
        <hint name="tipoIdentificacion" value="tipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="numeroIdentificacion"></hint>
        <hint name="nombreRazonSocial" value="razonSocial"></hint>
        <hint name="correoElectronico" value="email"></hint>
        <hint name="trabajadoresActivos" value="cantidadTrabajadores"></hint>
        <hint name="cantidadVecesMoroso" value="vecesMoroso"></hint>
        <hint name="tipoGestionPreventiva" value="autorizacion"></hint>
        <hint name="tipoAportante" value="tipoAportante"></hint>
        <hint name="estadoActualCartera" value="estadoCartera"></hint>
    </named-native-query>

    <named-native-query name="Consultar.aportantes.empleadores.parametrizacion.preventiva.automatico">
        <query>
            SELECT * FROM (SELECT
            per.perTipoIdentificacion as tipoIdentificacion,per.pernumeroIdentificacion as
            numeroIdentificacion,per.perrazonsocial as razonSocial,
            CASE WHEN ubiAuto.ubiAutorizacionEnvioEmail=0 OR ubiAuto.ubiAutorizacionEnvioEmail IS NULL OR ubi.ubiEmail
            IS NULL OR per.perId in(:criteriosEmpleador)THEN cast(0 as bit) ELSE cast(1 as bit) END as autorizacion,
            (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) as estadoCartera,
            (SELECT AVG(ap.apgValTotalApoObligatorio) FROM AporteGeneral ap WHERE ap.apgEmpresa=emp.empId AND
            ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador) as valorAportes,
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado) as cantidadTrabajadores,
            (SELECT COUNT(car.carid) FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMoraEmpleador,'yyyy-MM-dd')
            AND FORMAT(:periodoFinalMoraEmpleador,'yyyy-MM-dd')) as vecesMoroso,
            'EMPLEADOR' as tipoAportante,
            ubi.ubiEmail as email
            FROM Empleador empl JOIN Empresa emp ON empl.empempresa=emp.empid
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            JOIN Ubicacion ubiAuto ON ube.ubeUbicacion = ubiAuto.ubiId
            JOIN Persona per on emp.emppersona = per.perid
            JOIN RolContactoEmpleador rol ON rol.rceEmpleador = empl.empId
            JOIN Ubicacion ubi ON ubi.ubiId= rol.rceUbicacion
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            empl.empestadoEmpleador = :estadoAfiliacion
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion = :estadoOperacion
            AND rol.rceTipoRolContactoEmpleador = :rolContactoAportes
            AND ube.ubeTipoUbicacion=:tipoUbicacion
            AND empl.empId IN (Select e.empId FROM Empleador e JOIN Empresa emp ON e.empempresa=emp.empid JOIN Persona
            per on emp.emppersona = per.perid AND (e.empDiaHabilVencimientoAporte - :cantidadDiaHabilEjecucioAutomatica)
            = :diaHabilActual)
            AND car.cartipoSolicitante in('EMPLEADOR')
            AND
            (
            EXISTS(SELECT AVG(ap.apgValTotalApoObligatorio),ap.apgEmpresa FROM AporteGeneral ap WHERE
            ap.apgEmpresa=emp.empId AND ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador
            GROUP BY ap.apgEmpresa HAVING AVG(ap.apgValTotalApoObligatorio)>=:valorAportes)
            OR
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado)>=:cantidadActivos
            OR
            EXISTS(SELECT car.carid FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMoraEmpleador,'yyyy-MM-dd')
            AND FORMAT(:periodoFinalMoraEmpleador,'yyyy-MM-dd'))
            )
            group by
            per.perTipoIdentificacion,per.pernumeroIdentificacion,per.perrazonsocial,emp.empid,empl.empid,per.perid,ubi.ubiEmail,ubiAuto.ubiAutorizacionEnvioEmail
            ) aportantes
        </query>
        <hint name="valorPromedioAportes" value="valorAportes"></hint>
        <hint name="tipoIdentificacion" value="tipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="numeroIdentificacion"></hint>
        <hint name="nombreRazonSocial" value="razonSocial"></hint>
        <hint name="correoElectronico" value="email"></hint>
        <hint name="trabajadoresActivos" value="cantidadTrabajadores"></hint>
        <hint name="cantidadVecesMoroso" value="vecesMoroso"></hint>
        <hint name="tipoGestionPreventiva" value="autorizacion"></hint>
        <hint name="tipoAportante" value="tipoAportante"></hint>
        <hint name="estadoActualCartera" value="estadoCartera"></hint>
    </named-native-query>
    <named-native-query
            name="Consultar.aportantes.empleadores.parametrizacion.sinMora.preventiva.automatico">
        <query>
            SELECT * FROM (
            SELECT
            per.perTipoIdentificacion as tipoIdentificacion,per.pernumeroIdentificacion as
            numeroIdentificacion,per.perrazonsocial as razonSocial,
            CASE WHEN ubiAuto.ubiAutorizacionEnvioEmail=0 OR ubiAuto.ubiAutorizacionEnvioEmail IS NULL OR ubi.ubiEmail
            IS NULL OR per.perId in(:criteriosEmpleador)THEN cast(0 as bit) ELSE cast(1 as bit) END as autorizacion,
            (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) as estadoCartera,
            (SELECT AVG(ap.apgValTotalApoObligatorio) FROM AporteGeneral ap WHERE ap.apgEmpresa=emp.empId AND
            ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador) as valorAportes,
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado) as cantidadTrabajadores,
            NULL as vecesMoroso,
            'EMPLEADOR' as tipoAportante,
            ubi.ubiEmail as email
            FROM Empleador empl JOIN Empresa emp ON empl.empempresa=emp.empid
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            JOIN Ubicacion ubiAuto ON ube.ubeUbicacion = ubiAuto.ubiId
            JOIN Persona per on emp.emppersona = per.perid
            JOIN RolContactoEmpleador rol ON rol.rceEmpleador = empl.empId
            JOIN Ubicacion ubi ON ubi.ubiId= rol.rceUbicacion
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            empl.empestadoEmpleador = :estadoAfiliacion
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion = :estadoOperacion
            AND rol.rceTipoRolContactoEmpleador = :rolContactoAportes
            AND ube.ubeTipoUbicacion=:tipoUbicacion
            AND empl.empId IN (Select e.empId FROM Empleador e JOIN Empresa emp ON e.empempresa=emp.empid JOIN Persona
            per on emp.emppersona = per.perid AND (e.empDiaHabilVencimientoAporte - :cantidadDiaHabilEjecucioAutomatica)
            = :diaHabilActual)
            AND car.cartipoSolicitante in('EMPLEADOR')
            AND
            (
            EXISTS(SELECT AVG(ap.apgValTotalApoObligatorio),ap.apgEmpresa FROM AporteGeneral ap WHERE
            ap.apgEmpresa=emp.empId AND ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador
            GROUP BY ap.apgEmpresa HAVING AVG(ap.apgValTotalApoObligatorio)>=:valorAportes)
            OR
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado)>=:cantidadActivos
            )
            group by
            per.perTipoIdentificacion,per.pernumeroIdentificacion,per.perrazonsocial,emp.empid,empl.empid,per.perid,ubi.ubiEmail,ubiAuto.ubiAutorizacionEnvioEmail
            ) aportantes
        </query>
        <hint name="valorPromedioAportes" value="valorAportes"></hint>
        <hint name="tipoIdentificacion" value="tipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="numeroIdentificacion"></hint>
        <hint name="nombreRazonSocial" value="razonSocial"></hint>
        <hint name="correoElectronico" value="email"></hint>
        <hint name="trabajadoresActivos" value="cantidadTrabajadores"></hint>
        <hint name="cantidadVecesMoroso" value="vecesMoroso"></hint>
        <hint name="tipoGestionPreventiva" value="autorizacion"></hint>
        <hint name="tipoAportante" value="tipoAportante"></hint>
        <hint name="estadoActualCartera" value="estadoCartera"></hint>
    </named-native-query>
    <named-query
            name="Consultar.Desafiliacion.Consultar.Historicos">
        <query>
            SELECT so
            FROM SolicitudDesafiliacion sd JOIN sd.solicitudGlobal so
        </query>
        <hint name="fechaCreacion" value="so.fechaCreacion"></hint>
        <hint name="numeroRadicacion" value="so.numeroRadicacion"></hint>
        <hint name="idSolicitud" value="so.idSolicitud"></hint>
    </named-query>

    <named-query
            name="Consultar.Desafiliacion.Consultar.Documentos.Desafiliacion">
        <query>
            SELECT dd
            FROM DocumentoDesafiliacion dd, SolicitudDesafiliacion sd JOIN sd.solicitudGlobal so
            WHERE dd.idSolicitudDesafiliacion = sd.idSolicitudDesafiliacion
            AND so.numeroRadicacion= :numeroRadicacion

        </query>
        <hint name="fechaCreacion" value="so.fechaCreacion"></hint>
        <hint name="numeroRadicacion" value="so.numeroRadicacion"></hint>
        <hint name="idSolicitud" value="so.idSolicitud"></hint>
    </named-query>

    <named-query
            name="Cartera.Notificacion.Personal.Consultar.Notificacion.Personal.Ultimo.Periodo.Mora">
        <query>
            SELECT COUNT(nt.idNotificacionPersonal)
            FROM NotificacionPersonal nt
            WHERE nt.idCartera =:idCartera
        </query>
    </named-query>

    <named-query
            name="Cartera.SolicitudFiscalizacion.ConsultarSolicitudGestionCobroManualPorEstados">
        <query>
            SELECT cif FROM CicloCartera cif,CicloAportante cia,SolicitudGestionCobroManual soli
            WHERE soli.idCicloAportante=cia.idCicloAportante AND cia.idCicloCartera=cif.idCicloCartera
            AND cif.estadoCicloCartera= :estadoCicloFiscaliacion AND soli.estadoSolicitud NOT IN (:estadosFiscalizacion)
            AND cif.tipoCiclo = :tipoCiclo AND cif.idCicloCartera = (SELECT cc.idCicloCartera FROM CicloAportante cc
            where cc.idCicloAportante=:idCicloAportante)
        </query>
    </named-query>

    <named-query name="Cartera.CicloGestionCobroManual.ConsultarCiclo">
        <description>Consulta que sirve para obtener el ciclo de gestion cobro manual actual</description>
        <query>
            SELECT cf FROM CicloCartera cf,CicloAportante cia WHERE cf.estadoCicloCartera = :estadoCiclo
            AND cf.tipoCiclo = :tipoCiclo AND cia.idCicloCartera=cf.idCicloCartera
            AND cia.idCicloAportante=:idCicloAportante
        </query>
    </named-query>

    <named-query name="Cartera.Notificacion.Personal.Cartera.Ultimo.Periodo">
        <description>Consulta la cartera mas antigua para guardar la notificacion personal</description>
        <query>
            SELECT MAX(c.idCartera) FROM Cartera c WHERE c.idPersona=:idPersona AND c.tipoSolicitante=:tipoSolicitante
            AND c.estadoOperacion=:estadoOperacion
        </query>
    </named-query>

    <named-query name="Cartera.Solicitud.Preventiva.Agrupadora.Consultar.Solicitud.Preventiva.Agrupadora">
        <description>Se encarga de consultar la Solicitud agrupadora de gestion preventiva</description>
        <query>
            SELECT spa FROM SolicitudPreventivaAgrupadora spa LEFT JOIN FETCH spa.solicitudGlobal so
            WHERE so.numeroRadicacion=:numeroRadicacion
        </query>
    </named-query>

    <named-query name="Cartera.Solicitud.Preventiva.Agrupadora.Consultar.Cierre.Agrupadora">
        <description>Constante que se encarga de consultar las solicitudes agrupadores con solicitudes individuales
            cerradas por medio del id de la solicitud agrupadora
        </description>
        <query>
            SELECT spa FROM SolicitudPreventivaAgrupadora spa WHERE
            (SELECT count(sp.idSolicitudPreventiva) FROM SolicitudPreventiva sp WHERE sp.idSolicitudPreventivaAgrupadora
            IN (:idSolicitudAgrupadora) AND sp.estadoSolicitudPreventiva NOT IN (:estadoSolicitudPreventiva))
            = (SELECT count(spr.idSolicitudPreventiva) FROM SolicitudPreventiva spr WHERE
            spr.idSolicitudPreventivaAgrupadora IN (:idSolicitudAgrupadora))
            AND spa.idSolicitudPreventivaAgrupadora IN (:idSolicitudAgrupadora)
        </query>
    </named-query>

    <named-query name="Cartera.Solicitud.Individual.Cierre.Preventiva">
        <query>
            SELECT spr FROM SolicitudPreventiva spr
            JOIN FETCH spr.solicitudGlobal sol
            WHERE spr.estadoSolicitudPreventiva != :estadoSolicitud
            AND FORMAT(:fechaActual,'yyyy-MM-dd') &gt;= FORMAT(spr.fechaLimitePago,'yyyy-MM-dd')
        </query>
    </named-query>

    <named-query name="Carteta.Consulta.Solicitud.Agrupadora.Cierre.Preventiva">
        <query>
            SELECT spa
            FROM SolicitudPreventivaAgrupadora spa
            JOIN FETCH spa.solicitudGlobal sol
            WHERE spa.estadoSolicitudPreventivaAgrupadora != :estadoSolicitud
        </query>
    </named-query>

    <named-native-query name="Cartera.Consultar.Idmensaje.Niyaraky">
        <query>
            SELECT cnId FROM ComunicadoNiyaraky
            WHERE cnIdMensaje = :idMensaje
        </query>
    </named-native-query>

    <named-native-query
            name="Cartera.Solicitud.Preventiva.Consultar.Detalle.Solicitudes.Individuales">
        <description>se encarga de consultar el detalle de las solicitudes indivuales</description>
        <query>
            SELECT * FROM (

            SELECT
            p.perTipoIdentificacion as tipoIdentificacion,
            p.perNumeroIdentificacion as mumeroIdentificacion,
            Case WHEN p.perRazonSocial IS NOT NULL THEN p.perRazonSocial
            ELSE p.perPrimerNombre +' '
            + CASE WHEN p.perSegundoNombre IS NOT NULL
            THEN p.perSegundoNombre
            ELSE '' END + ' '
            + p.perPrimerApellido + ' '
            + CASE WHEN p.perSegundoApellido IS NOT NULL
            THEN p.perSegundoApellido
            ELSE '' END END as razonSocial,
            ubi.ubiEmail as email,
            sp.sprEstadoActualCartera as estadoActualCartera,
            sp.sprValorPromedioAportes as valorPromedioAportes,
            sp.sprTrabajadoresActivos as trabajadoresActivos,
            sp.sprCantidadVecesMoroso as antidadVecesMoroso,
            sp.sprFechaLimitePago as fechaLimitePago,
            sp.sprEstadoSolicitudPreventiva as estadoSolicitudPreventiva,
            (SELECT so.solNumeroRadicacion FROM Solicitud so where so.solId = sp.sprSolicitudGlobal ) as
            numeroRadicacionPreventiva
            FROM SolicitudPreventiva sp JOIN SolicitudPreventivaAgrupadora spa ON spa.spaId =
            sp.sprSolicitudPreventivaAgrupadora
            JOIN Solicitud s ON spa.spaSolicitudGlobal = s.solId
            JOIN Persona p ON sp.sprPersona = p.perid
            JOIN Empresa emp ON emp.empPersona = p.perid
            JOIN Empleador empl ON empl.empempresa=emp.empid
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            JOIN Ubicacion ubiAuto ON ube.ubeUbicacion = ubiAuto.ubiId
            JOIN RolContactoEmpleador rol ON rol.rceEmpleador = empl.empId
            JOIN Ubicacion ubi ON ubi.ubiId= rol.rceUbicacion
            WHERE s.solNumeroRadicacion=:numeroRadicacion
            AND sp.sprTipoSolicitanteMovimientoAporte IN ('EMPLEADOR')
            AND rol.rceTipoRolContactoEmpleador = :rolContacto
            AND emp.emppersona = p.perid

            UNION

            SELECT
            p.perTipoIdentificacion as tipoIdentificacion,
            p.perNumeroIdentificacion as mumeroIdentificacion,
            Case WHEN p.perRazonSocial IS NOT NULL THEN p.perRazonSocial
            ELSE p.perPrimerNombre +' '
            + CASE WHEN p.perSegundoNombre IS NOT NULL
            THEN p.perSegundoNombre
            ELSE '' END + ' '
            + p.perPrimerApellido + ' '
            + CASE WHEN p.perSegundoApellido IS NOT NULL
            THEN p.perSegundoApellido
            ELSE '' END END as razonSocial,
            ubi.ubiEmail as email,
            sp.sprEstadoActualCartera as estadoActualCartera,
            sp.sprValorPromedioAportes as valorPromedioAportes,
            sp.sprTrabajadoresActivos as trabajadoresActivos,
            sp.sprCantidadVecesMoroso as antidadVecesMoroso,
            sp.sprFechaLimitePago as fechaLimitePago,
            sp.sprEstadoSolicitudPreventiva as estadoSolicitudPreventiva,
            (SELECT so.solNumeroRadicacion FROM Solicitud so where so.solId = sp.sprSolicitudGlobal ) as
            numeroRadicacionPreventiva
            FROM SolicitudPreventiva sp JOIN SolicitudPreventivaAgrupadora spa ON spa.spaId =
            sp.sprSolicitudPreventivaAgrupadora
            JOIN Solicitud s ON spa.spaSolicitudGlobal = s.solId
            JOIN Persona p ON sp.sprPersona = p.perid
            JOIN Afiliado afi on afi.afiPersona = p.perId
            JOIN RolAfiliado roa ON roaAfiliado = afi.afiId
            JOIN Ubicacion ubi ON ubi.ubiId= p.perUbicacionPrincipal
            WHERE
            s.solNumeroRadicacion=:numeroRadicacion
            AND sp.sprTipoSolicitanteMovimientoAporte IN (:listTipoSolicitante)
            )aportantes
        </query>
    </named-native-query>

    <named-query name="Cartera.Parametrizacion.Gestion.Cobro.Actualizar.Activacion.Metodo.Anterior">
        <description>se encarga de actualizar la activacion del metodo anterior para la linea de cobro 1</description>
        <query>
            UPDATE ParametrizacionCriterioGestionCobro SET activa=0 WHERE metodo=:metodoAnterior AND
            lineaCobro=:lineaCobro
        </query>
    </named-query>

    <!-- CONSULTAS SILVIO -->
    <named-query
            name="Cartera.DetalleSolicitudGestionCobro.consultarSolicitud">
        <query>
            SELECT new com.asopagos.dto.modelo.DetalleSolicitudGestionCobroModeloDTO(dsg, per)
            FROM DetalleSolicitudGestionCobro dsg, Cartera car, Persona per
            WHERE dsg.solicitudSegundaRemision= :idSolicitud
            AND dsg.idCartera = car.idCartera
            AND car.idPersona = per.idPersona
        </query>
    </named-query>

    <named-query name="Cartera.SolicitudGestionCobroElectronico.consultarSolicitud">
        <query>
            SELECT sgce FROM SolicitudGestionCobroElectronico sgce JOIN FETCH sgce.solicitudGlobal sol
            WHERE sol.numeroRadicacion= :numeroRadicacion
        </query>
    </named-query>
    <named-query name="Cartera.CicloFiscalizacion.ConsultarCiclo">
        <description>Consulta que sirve para obtener el ciclo de fiscalizacion actual</description>
        <query>
            SELECT cf FROM CicloCartera cf WHERE cf.estadoCicloCartera = :estadoCiclo
            AND cf.tipoCiclo = :tipoCiclo
        </query>
    </named-query>
    <named-query name="Cartera.CicloFiscalizacion.ConsultarCicloAportante">
        <description>Consulta que sirve para obtener el ciclo de fiscalizacion actual de un aportante</description>
        <query>
            SELECT CASE WHEN COUNT(cc) &gt; 0 THEN 1 ELSE 0 END FROM CicloCartera cc, CicloAportante ca, Persona p
            WHERE cc.estadoCicloCartera = :estadoCiclo AND cc.tipoCiclo = :tipoCiclo
            AND cc.idCicloCartera = ca.idCicloCartera AND p.idPersona = ca.idPersona AND p.tipoIdentificacion =
            :tipoIdentificacion
            AND p.numeroIdentificacion = :numeroIdentificacion
        </query>
    </named-query>
    <named-query name="Cartera.Personas.ConsultaGestionPreventiva">
        <description>Se consultan las personas para generar un mock</description>
        <query>
            SELECT new com.asopagos.dto.cartera.SimulacionDTO(per)
            FROM Persona per order by per.idPersona
        </query>
    </named-query>
    <named-query name="Cartera.Aportantes.ConsultarCiclo">
        <description>Consulta que sirve para obtener el ciclo de fiscalizacion actual</description>
        <query>
            SELECT new com.asopagos.dto.cartera.FiscalizacionAportanteDTO(
            sf.solicitudGlobal.destinatario,
            sp.tipoSolicitante,
            p.tipoIdentificacion,
            p.numeroIdentificacion,
            p.razonSocial)
            FROM SolicitudFiscalizacion sf ,Persona p ,SolicitudPreventiva sp,CicloCartera cf,CicloAportante ca
            WHERE sf.idCicloAportante = ca.idCicloAportante
            AND p.idPersona= sp.idPersona
            AND p.idPersona = ca.idPersona
            AND ca.idCicloCartera = cf.idCicloCartera
            AND (:tipoIdentificacion IS NULL OR p.tipoIdentificacion = :tipoIdentificacion)
            AND (:numeroIdentificacion IS NULL OR p.numeroIdentificacion = :numeroIdentificacion)
            AND (:estado IS NULL OR cf.estadoCicloCartera = :estado)
            AND cf.tipoCiclo= :tipoCiclo
        </query>
    </named-query>
    <named-query name="Consultar.SolicitudFiscalizacion.Numero.Radicacion">
        <description>Consulta que sirve para traer la solicitdu de fiscalización por número
            de radicación
        </description>
        <query>
            SELECT sf
            FROM SolicitudFiscalizacion sf LEFT JOIN FETCH sf.solicitudGlobal sg where
            sg.numeroRadicacion=:numeroRadicacion
        </query>
    </named-query>
    <named-native-query
            name="Consultar.aportantes.empleadores.trabajadores.parametrizacion">
        <query>
            SELECT * FROM (
            SELECT
            per.perTipoIdentificacion as tipoIdentificacion,per.pernumeroIdentificacion as
            numeroIdentificacion,per.perrazonsocial as razonSocial,
            CASE WHEN (ubiAuto.ubiAutorizacionEnvioEmail=0 OR ubiAuto.ubiAutorizacionEnvioEmail IS NULL OR ubi.ubiEmail
            IS NULL OR per.perId in(:criteriosEmpleador))THEN cast(0 as bit) ELSE cast(1 as bit) END as autorizacion,
            (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) AS estadoCartera,
            (SELECT AVG(ap.apgValTotalApoObligatorio) FROM AporteGeneral ap WHERE ap.apgEmpresa=emp.empId AND
            ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador) as valorAportes,
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado) as cantidadTrabajadores,
            (SELECT COUNT(car.carid) FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMoraEmpleador,'yyyy-MM-dd')
            AND FORMAT(:periodoFinalMoraEmpleador,'yyyy-MM-dd')) as vecesMoroso,
            'EMPLEADOR' as tipoAportante,
            ubi.ubiEmail as email
            FROM Empleador empl JOIN Empresa emp ON empl.empempresa=emp.empid
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            JOIN Ubicacion ubiAuto ON ube.ubeUbicacion = ubiAuto.ubiId
            JOIN Persona per on emp.emppersona = per.perid
            JOIN RolContactoEmpleador rol ON rol.rceEmpleador = empl.empId
            JOIN Ubicacion ubi ON ubi.ubiId= rol.rceUbicacion
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            empl.empestadoEmpleador = :estadoAfiliacion
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion = :estadoOperacion
            AND rol.rceTipoRolContactoEmpleador = :rolContactoAportes
            AND ube.ubeTipoUbicacion=:tipoUbicacion
            AND car.cartipoSolicitante in('EMPLEADOR')
            AND emp.empNaturalezaJuridica IS NOT NULL
            AND
            (
            EXISTS(SELECT AVG(ap.apgValTotalApoObligatorio),ap.apgEmpresa FROM AporteGeneral ap WHERE
            ap.apgEmpresa=emp.empId AND ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador
            GROUP BY ap.apgEmpresa HAVING AVG(ap.apgValTotalApoObligatorio)>=:valorAportes)
            OR
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado)>=:cantidadActivos
            OR
            EXISTS(SELECT car.carid FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMoraEmpleador,'yyyy-MM-dd')
            AND FORMAT(:periodoFinalMoraEmpleador,'yyyy-MM-dd'))
            )
            group by
            per.perTipoIdentificacion,per.pernumeroIdentificacion,per.perrazonsocial,emp.empid,empl.empid,per.perid,ubi.ubiEmail,ubiAuto.ubiAutorizacionEnvioEmail
            UNION

            SELECT
            per.perTipoIdentificacion as tipoIdentificacion,per.pernumeroIdentificacion as
            numeroIdentificacion,per.perrazonsocial as razonSocial,
            CASE WHEN ubi.ubiAutorizacionEnvioEmail=0 OR ubi.ubiEmail IS NULL OR per.perId in(:criterios)THEN cast(0 as
            bit) ELSE cast(1 as bit) END as autorizacion,
            (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) AS estadoCartera,
            (SELECT AVG(apd.apdAporteObligatorio) FROM AporteDetallado apd JOIN AporteGeneral apg on
            apd.apdAporteGeneral =apg.apgId WHERE apd.apdPersona=per.perid AND apd.apdTipoCotizante =
            roa.roaTipoAfiliado AND apg.apgperiodoAporte BETWEEN :periodoInicial AND :periodoFinal) as valorAportes,
            NULL as cantidadTrabajadores,
            (SELECT COUNT(car.carid) FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMora,'yyyy-MM-dd') AND
            FORMAT(:periodoFinalMora,'yyyy-MM-dd') AND car.carTipoSolicitante = (CASE WHEN
            roa.roaTipoAfiliado='TRABAJADOR_INDEPENDIENTE' THEN 'INDEPENDIENTE' ELSE roa.roaTipoAfiliado END)) as
            vecesMoroso,
            CASE WHEN roa.roaTipoAfiliado='TRABAJADOR_INDEPENDIENTE' THEN 'INDEPENDIENTE' ELSE roa.roaTipoAfiliado END
            as tipoAportante,
            ubi.ubiEmail as email
            FROM Persona per
            JOIN Afiliado afi on afi.afiPersona = per.perId
            JOIN RolAfiliado roa ON roaAfiliado = afi.afiId
            JOIN Cartera car on car.carpersona=per.perid
            JOIN Ubicacion ubi ON ubi.ubiId= per.perUbicacionPrincipal
            WHERE
            roa.roaestadoAfiliado = :estadoAfiliado
            AND roa.roaTipoAfiliado in (:trabajadores)
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion =:estadoOperacion
            AND car.cartipoSolicitante in(:solicitantes)
            AND
            (EXISTS(SELECT AVG(apd.apdAporteObligatorio),apd.apdPersona FROM AporteDetallado apd JOIN AporteGeneral apg
            on apd.apdAporteGeneral =apg.apgId WHERE apd.apdPersona=per.perid AND apd.apdTipoCotizante in
            (:trabajadores) AND apg.apgperiodoAporte BETWEEN :periodoInicial AND :periodoFinal GROUP BY apd.apdPersona
            HAVING AVG(apd.apdAporteObligatorio)>=:valorAportes)
            OR
            EXISTS(SELECT car.carid FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMora,'yyyy-MM-dd') AND
            FORMAT(:periodoFinalMora,'yyyy-MM-dd'))
            )
            group by
            per.perTipoIdentificacion,per.pernumeroIdentificacion,per.perrazonsocial,per.perid,ubi.ubiEmail,ubi.ubiAutorizacionEnvioEmail,roa.roaTipoAfiliado
            ) aportantes
        </query>
        <hint name="valorPromedioAportes" value="valorAportes"></hint>
        <hint name="tipoIdentificacion" value="tipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="numeroIdentificacion"></hint>
        <hint name="nombreRazonSocial" value="razonSocial"></hint>
        <hint name="correoElectronico" value="email"></hint>
        <hint name="trabajadoresActivos" value="cantidadTrabajadores"></hint>
        <hint name="cantidadVecesMoroso" value="vecesMoroso"></hint>
        <hint name="tipoGestionPreventiva" value="autorizacion"></hint>
        <hint name="tipoAportante" value="tipoAportante"></hint>
        <hint name="estadoActualCartera" value="estadoCartera"></hint>
    </named-native-query>
    <named-native-query
            name="Consultar.aportantes.empleadores.trabajadores.parametrizacion.sinMora">
        <query>
            SELECT * FROM (
            SELECT
            per.perTipoIdentificacion as tipoIdentificacion,per.pernumeroIdentificacion as
            numeroIdentificacion,per.perrazonsocial as razonSocial,
            CASE WHEN ubiAuto.ubiAutorizacionEnvioEmail=0 OR ubiAuto.ubiAutorizacionEnvioEmail IS NULL OR ubi.ubiEmail
            IS NULL OR per.perId in(:criteriosEmpleador)THEN cast(0 as bit) ELSE cast(1 as bit) END as autorizacion,
            (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) as estadoCartera,
            (SELECT AVG(ap.apgValTotalApoObligatorio) FROM AporteGeneral ap WHERE ap.apgEmpresa=emp.empId AND
            ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador) as valorAportes,
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado) as cantidadTrabajadores,
            NULL as vecesMoroso,
            'EMPLEADOR' as tipoAportante,
            ubi.ubiEmail as email
            FROM Empleador empl JOIN Empresa emp ON empl.empempresa=emp.empid
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            JOIN Ubicacion ubiAuto ON ube.ubeUbicacion = ubiAuto.ubiId
            JOIN Persona per on emp.emppersona = per.perid
            JOIN RolContactoEmpleador rol ON rol.rceEmpleador = empl.empId
            JOIN Ubicacion ubi ON ubi.ubiId= rol.rceUbicacion
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            empl.empestadoEmpleador = :estadoAfiliacion
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion = :estadoOperacion
            AND rol.rceTipoRolContactoEmpleador = :rolContactoAportes
            AND ube.ubeTipoUbicacion=:tipoUbicacion
            AND car.cartipoSolicitante in('EMPLEADOR')
            AND emp.empNaturalezaJuridica IS NOT NULL
            AND
            (
            EXISTS(SELECT AVG(ap.apgValTotalApoObligatorio),ap.apgEmpresa FROM AporteGeneral ap WHERE
            ap.apgEmpresa=emp.empId AND ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador
            GROUP BY ap.apgEmpresa HAVING AVG(ap.apgValTotalApoObligatorio)>=:valorAportes)
            OR
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado)>=:cantidadActivos
            )
            group by
            per.perTipoIdentificacion,per.pernumeroIdentificacion,per.perrazonsocial,emp.empid,empl.empid,per.perid,ubi.ubiEmail,ubiAuto.ubiAutorizacionEnvioEmail
            UNION

            SELECT
            per.perTipoIdentificacion as tipoIdentifacion,per.pernumeroIdentificacion as
            numeroIdentificacion,per.perrazonsocial as razonSocial,
            CASE WHEN ubi.ubiAutorizacionEnvioEmail=0 OR ubi.ubiEmail IS NULL OR per.perId in(:criterios)THEN cast(0 as
            bit) ELSE cast(1 as bit) END as autorizacion,
            (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) as estadoCartera,
            (SELECT AVG(apd.apdAporteObligatorio) FROM AporteDetallado apd JOIN AporteGeneral apg on
            apd.apdAporteGeneral =apg.apgId WHERE apd.apdPersona=per.perid AND apd.apdTipoCotizante =
            roa.roaTipoAfiliado AND apg.apgperiodoAporte BETWEEN :periodoInicial AND :periodoFinal) as valorAportes,
            NULL as cantidadTrabajadores,
            NULL as vecesMoroso,
            CASE WHEN roa.roaTipoAfiliado='TRABAJADOR_INDEPENDIENTE' THEN 'INDEPENDIENTE' ELSE roa.roaTipoAfiliado END
            as tipoAportante,
            ubi.ubiEmail as email
            FROM Persona per
            JOIN Afiliado afi on afi.afiPersona = per.perId
            JOIN RolAfiliado roa ON roaAfiliado = afi.afiId
            JOIN Cartera car on car.carpersona=per.perid
            JOIN Ubicacion ubi ON ubi.ubiId= per.perUbicacionPrincipal
            WHERE
            roa.roaestadoAfiliado = :estadoAfiliado
            AND roa.roaTipoAfiliado in (:trabajadores)
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion =:estadoOperacion
            AND car.cartipoSolicitante in(:solicitantes)
            AND
            (EXISTS(SELECT AVG(apd.apdAporteObligatorio),apd.apdPersona FROM AporteDetallado apd JOIN AporteGeneral apg
            on apd.apdAporteGeneral =apg.apgId WHERE apd.apdPersona=per.perid AND apd.apdTipoCotizante in
            (:trabajadores) AND apg.apgperiodoAporte BETWEEN :periodoInicial AND :periodoFinal GROUP BY apd.apdPersona
            HAVING AVG(apd.apdAporteObligatorio)>=:valorAportes)
            )
            group by
            per.perTipoIdentificacion,per.pernumeroIdentificacion,per.perrazonsocial,per.perid,ubi.ubiEmail,ubi.ubiAutorizacionEnvioEmail,roa.roaTipoAfiliado
            ) aportantes

        </query>
        <hint name="valorPromedioAportes" value="valorAportes"></hint>
        <hint name="tipoIdentificacion" value="tipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="numeroIdentificacion"></hint>
        <hint name="nombreRazonSocial" value="razonSocial"></hint>
        <hint name="correoElectronico" value="email"></hint>
        <hint name="trabajadoresActivos" value="cantidadTrabajadores"></hint>
        <hint name="cantidadVecesMoroso" value="vecesMoroso"></hint>
        <hint name="tipoGestionPreventiva" value="autorizacion"></hint>
        <hint name="tipoAportante" value="tipoAportante"></hint>
        <hint name="estadoActualCartera" value="estadoCartera"></hint>
    </named-native-query>

    <named-native-query name="Consultar.aportantes.empleadores.parametrizacion">
        <query>
            SELECT * FROM (SELECT
            per.perTipoIdentificacion as tipoIdentificacion,per.pernumeroIdentificacion as
            numeroIdentificacion,per.perrazonsocial as razonSocial,
            CASE WHEN ubiAuto.ubiAutorizacionEnvioEmail=0 OR ubiAuto.ubiAutorizacionEnvioEmail IS NULL OR ubi.ubiEmail
            IS NULL OR per.perId in(:criteriosEmpleador)THEN cast(0 as bit) ELSE cast(1 as bit) END as autorizacion,
            (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) as estadoCartera,
            (SELECT AVG(ap.apgValTotalApoObligatorio) FROM AporteGeneral ap WHERE ap.apgEmpresa=emp.empId AND
            ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador) as valorAportes,
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado) as cantidadTrabajadores,
            (SELECT COUNT(car.carid) FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMoraEmpleador,'yyyy-MM-dd')
            AND FORMAT(:periodoFinalMoraEmpleador,'yyyy-MM-dd')) as vecesMoroso,
            'EMPLEADOR' as tipoAportante,
            ubi.ubiEmail as email
            FROM Empleador empl JOIN Empresa emp ON empl.empempresa=emp.empid
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            JOIN Ubicacion ubiAuto ON ube.ubeUbicacion = ubiAuto.ubiId
            JOIN Persona per on emp.emppersona = per.perid
            JOIN RolContactoEmpleador rol ON rol.rceEmpleador = empl.empId
            JOIN Ubicacion ubi ON ubi.ubiId= rol.rceUbicacion
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            empl.empestadoEmpleador = :estadoAfiliacion
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion = :estadoOperacion
            AND rol.rceTipoRolContactoEmpleador = :rolContactoAportes
            AND ube.ubeTipoUbicacion=:tipoUbicacion
            AND car.cartipoSolicitante in('EMPLEADOR')
            AND emp.empNaturalezaJuridica IS NOT NULL
            AND
            (
            EXISTS(SELECT AVG(ap.apgValTotalApoObligatorio),ap.apgEmpresa FROM AporteGeneral ap WHERE
            ap.apgEmpresa=emp.empId AND ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador
            GROUP BY ap.apgEmpresa HAVING AVG(ap.apgValTotalApoObligatorio)>=:valorAportes)
            OR
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado)>=:cantidadActivos
            OR
            EXISTS(SELECT car.carid FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMoraEmpleador,'yyyy-MM-dd')
            AND FORMAT(:periodoFinalMoraEmpleador,'yyyy-MM-dd'))
            )
            group by
            per.perTipoIdentificacion,per.pernumeroIdentificacion,per.perrazonsocial,emp.empid,empl.empid,per.perid,ubi.ubiEmail,ubiAuto.ubiAutorizacionEnvioEmail
            ) aportantes
        </query>
        <hint name="valorPromedioAportes" value="valorAportes"></hint>
        <hint name="tipoIdentificacion" value="tipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="numeroIdentificacion"></hint>
        <hint name="nombreRazonSocial" value="razonSocial"></hint>
        <hint name="correoElectronico" value="email"></hint>
        <hint name="trabajadoresActivos" value="cantidadTrabajadores"></hint>
        <hint name="cantidadVecesMoroso" value="vecesMoroso"></hint>
        <hint name="tipoGestionPreventiva" value="autorizacion"></hint>
        <hint name="tipoAportante" value="tipoAportante"></hint>
        <hint name="estadoActualCartera" value="estadoCartera"></hint>
    </named-native-query>
    <named-native-query
            name="Consultar.aportantes.empleadores.parametrizacion.sinMora">
        <query>
            SELECT * FROM (
            SELECT
            per.perTipoIdentificacion as tipoIdentificacion,per.pernumeroIdentificacion as
            numeroIdentificacion,per.perrazonsocial as razonSocial,
            CASE WHEN ubiAuto.ubiAutorizacionEnvioEmail=0 OR ubiAuto.ubiAutorizacionEnvioEmail IS NULL OR ubi.ubiEmail
            IS NULL OR per.perId in(:criteriosEmpleador)THEN cast(0 as bit) ELSE cast(1 as bit) END as autorizacion,
            (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) as estadoCartera,
            (SELECT AVG(ap.apgValTotalApoObligatorio) FROM AporteGeneral ap WHERE ap.apgEmpresa=emp.empId AND
            ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador) as valorAportes,
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado) as cantidadTrabajadores,
            NULL as vecesMoroso,
            'EMPLEADOR' as tipoAportante,
            ubi.ubiEmail as email
            FROM Empleador empl JOIN Empresa emp ON empl.empempresa=emp.empid
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            JOIN Ubicacion ubiAuto ON ube.ubeUbicacion = ubiAuto.ubiId
            JOIN Persona per on emp.emppersona = per.perid
            JOIN RolContactoEmpleador rol ON rol.rceEmpleador = empl.empId
            JOIN Ubicacion ubi ON ubi.ubiId= rol.rceUbicacion
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            empl.empestadoEmpleador = :estadoAfiliacion
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion = :estadoOperacion
            AND rol.rceTipoRolContactoEmpleador = :rolContactoAportes
            AND ube.ubeTipoUbicacion=:tipoUbicacion
            AND car.cartipoSolicitante in('EMPLEADOR')
            AND emp.empNaturalezaJuridica IS NOT NULL
            AND
            (
            EXISTS(SELECT AVG(ap.apgValTotalApoObligatorio),ap.apgEmpresa FROM AporteGeneral ap WHERE
            ap.apgEmpresa=emp.empId AND ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador
            GROUP BY ap.apgEmpresa HAVING AVG(ap.apgValTotalApoObligatorio)>=:valorAportes)
            OR
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado)>=:cantidadActivos
            )
            group by
            per.perTipoIdentificacion,per.pernumeroIdentificacion,per.perrazonsocial,emp.empid,empl.empid,per.perid,ubi.ubiEmail,ubiAuto.ubiAutorizacionEnvioEmail
            ) aportantes
        </query>
        <hint name="valorPromedioAportes" value="valorAportes"></hint>
        <hint name="tipoIdentificacion" value="tipoIdentificacion"></hint>
        <hint name="numeroIdentificacion" value="numeroIdentificacion"></hint>
        <hint name="nombreRazonSocial" value="razonSocial"></hint>
        <hint name="correoElectronico" value="email"></hint>
        <hint name="trabajadoresActivos" value="cantidadTrabajadores"></hint>
        <hint name="cantidadVecesMoroso" value="vecesMoroso"></hint>
        <hint name="tipoGestionPreventiva" value="autorizacion"></hint>
        <hint name="tipoAportante" value="tipoAportante"></hint>
        <hint name="estadoActualCartera" value="estadoCartera"></hint>
    </named-native-query>
    <named-native-query name="Cartera.Consultar.Estado.Cartera.Integracion">
        <query>
            select top 1
            case when per.perRazonSocial is null or per.perRazonSocial='' then per.perPrimerNombre+'
            '+isnull(per.perSegundoNombre,'')+' '+per.perPrimerApellido+' '+isnull(per.perSegundoApellido,'') else
            per.perRazonSocial end razonSocial,
            (select sum(cardeudapresunta) from cartera where carPersona=per.perId and carTipoSolicitante=:tipoAportante
            and carEstadoOperacion='VIGENTE') deudaPresunta,
            car.carEstadoCartera,
            convert(varchar(7), car.carPeriodoDeuda, 20) periodo,
            (select count(0) from cartera where carPersona=per.perId and carTipoSolicitante=:tipoAportante and
            carEstadoOperacion='VIGENTE') cantidadMeses
            from cartera car
            join persona per on car.carpersona = per.perid
            where car.carEstadoOperacion='VIGENTE'
            and per.perNumeroIdentificacion=:numeroIdentificacion
            and per.perTipoIdentificacion=:tipoIdentificacion
            and car.carTipoSolicitante=:tipoAportante
            order by car.carPeriodoDeuda desc
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Obtener.Estado.Cartera.Integracion">
        <query>
            SELECT
            car.carTipoSolicitante tipoAportante,
            per.perTipoIdentificacion tipoIdentificacion,
            per.perNumeroIdentificacion numeroIdentificacion,
            CASE WHEN per.perRazonSocial IS NULL OR per.perRazonSocial='' THEN per.perPrimerNombre+'
            '+ISNULL(per.perSegundoNombre,'')+' '+per.perPrimerApellido+' '+ISNULL(per.perSegundoApellido,'') ELSE
            per.perRazonSocial END razonSocial,
            CONVERT(VARCHAR(10), car.carFechaCreacion, 20) fechaCreacion,
            car.carDeudaPresunta deuda,
            car.carEstadoCartera estado,
            CONVERT(VARCHAR(7), car.carPeriodoDeuda, 20) periodo
            FROM Cartera car
            JOIN Persona per ON per.perId = car.carPersona
            WHERE per.perNumeroIdentificacion = :numeroIdentificacionAportante
            AND per.perTipoIdentificacion = :tipoIdentificacion
            AND car.carEstadoOperacion = 'VIGENTE'
            AND CONVERT(VARCHAR(7), car.carPeriodoDeuda, 20) &lt;= :periodoConsulta
            ORDER BY car.carPeriodoDeuda
        </query>
    </named-native-query>


    <named-native-query name="Cartera.Consultar.Estado.Cartera.Detalle.Integracion">
        <query>
            select
            case when per.perRazonSocial is null or per.perRazonSocial='' then per.perPrimerNombre+'
            '+isnull(per.perSegundoNombre,'')+' '+per.perPrimerApellido+' '+isnull(per.perSegundoApellido,'') else
            per.perRazonSocial end razonSocial,
            car.carDeudaPresunta,
            car.carEstadoCartera,
            convert(varchar(7), car.carPeriodoDeuda, 20) periodo,
            car.carTipoLineaCobro,
            car.carMetodo,
            car.carTipoAccionCobro,
            car.carTipoDeuda
            from cartera car
            join persona per on car.carpersona = per.perid
            where car.carEstadoOperacion='VIGENTE'
            and per.perNumeroIdentificacion=:numeroIdentificacion
            and per.perTipoIdentificacion=:tipoIdentificacion
            and car.carTipoSolicitante=:tipoAportante
            order by car.carPeriodoDeuda desc
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.Estado.Cartera.Convenio.Pago.Integracion">
        <query>
            select
            case when per.perRazonSocial is null or per.perRazonSocial='' then per.perPrimerNombre+'
            '+isnull(per.perSegundoNombre,'')+' '+per.perPrimerApellido+' '+isnull(per.perSegundoApellido,'') else
            per.perRazonSocial end razonSocial,
            (select sum(cardeudapresunta) from cartera where carPersona=per.perId and
            carTipoSolicitante=cop.coptiposolicitante and carEstadoOperacion='VIGENTE') deudaPresunta,
            (select top 1 carestadocartera from cartera where carpersona=per.perid and
            carTipoSolicitante=cop.coptiposolicitante and carEstadoOperacion='VIGENTE' order by carperiododeuda desc)
            estadoCartera,
            (select top 1 convert(varchar(7), carPeriodoDeuda, 20) from cartera where carpersona=per.perid and
            carTipoSolicitante=cop.coptiposolicitante and carEstadoOperacion='VIGENTE' order by carperiododeuda desc)
            periodo,
            cop.copId,
            cop.copestadoconveniopago,
            (select max(ppcFechaPago) from PagoPeriodoConvenio where ppcConvenioPago=cop.copid) fechaLimite,
            convert(varchar(10), cop.copfecharegistro, 20) fecharegistro
            from conveniopago cop
            join persona per on cop.coppersona=per.perid
            where per.perNumeroIdentificacion=:numeroIdentificacion
            and per.perTipoIdentificacion=:tipoIdentificacion
            and cop.coptiposolicitante=:tipoAportante
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.Convenio.Pago.Integracion">
        <query>
            select
            cop.coptiposolicitante,
            per.pertipoidentificacion,
            per.pernumeroidentificacion,
            case when per.perRazonSocial is null or per.perRazonSocial='' then per.perPrimerNombre+'
            '+isnull(per.perSegundoNombre,'')+' '+per.perPrimerApellido+' '+isnull(per.perSegundoApellido,'') else
            per.perRazonSocial end razonSocial,
            (select sum(cardeudapresunta) from cartera where carPersona=per.perId and
            carTipoSolicitante=cop.coptiposolicitante and carEstadoOperacion='VIGENTE') deudaPresunta,
            (select top 1 carestadocartera from cartera where carpersona=per.perid and
            carTipoSolicitante=cop.coptiposolicitante and carEstadoOperacion='VIGENTE' order by carperiododeuda desc)
            estadoCartera,
            (select top 1 convert(varchar(7), carPeriodoDeuda, 20) from cartera where carpersona=per.perid and
            carTipoSolicitante=cop.coptiposolicitante and carEstadoOperacion='VIGENTE' order by carperiododeuda desc)
            periodo,
            cop.copestadoconveniopago,
            (select max(ppcFechaPago) from PagoPeriodoConvenio where ppcConvenioPago=:idConvenio) fechaLimite,
            convert(varchar(10), cop.copfecharegistro, 20) fecharegistro
            from conveniopago cop
            join persona per on cop.coppersona=per.perid
            where cop.copid=:idConvenio
        </query>
    </named-native-query>

    <named-query name="Cartera.CicloFiscalizacion.ConsultarDetalle">
        <query>
            SELECT new com.asopagos.dto.cartera.SimulacionDTO((SELECT empl.estadoEmpleador FROM Empleador empl LEFT JOIN
            empl.empresa emp LEFT JOIN emp.persona persona
            WHERE persona.idPersona=per.idPersona),per,ciA,solF) FROM CicloCartera cif,CicloAportante ciA,Persona
            per,SolicitudFiscalizacion solF LEFT JOIN solF.solicitudGlobal sol
            WHERE cif.idCicloCartera=ciA.idCicloCartera AND per.idPersona=ciA.idPersona
            AND solF.idCicloAportante=ciA.idCicloAportante AND cif.idCicloCartera= :idCicloCartera
        </query>
    </named-query>
    <named-query
            name="Cartera.CicloFiscalizacion.consultarDetalleCicloAportante">
        <query>
            SELECT new com.asopagos.dto.cartera.SimulacionDTO(
            (SELECT empl.estadoEmpleador FROM Empleador empl LEFT JOIN empl.empresa emp LEFT JOIN emp.persona persona
            WHERE persona.idPersona=per.idPersona),per,ciA,solF) FROM SolicitudFiscalizacion solF,Solicitud
            sol,CicloAportante cia,Persona per
            WHERE cia.idPersona=per.idPersona AND sol.idSolicitud=solF.solicitudGlobal.idSolicitud AND
            cia.idCicloAportante=solF.idCicloAportante AND sol.numeroRadicacion =:numeroRadicacion
        </query>
    </named-query>
    <named-query
            name="Cartera.CicloGestionManual.ConsultarDetalle">
        <query>
            SELECT new com.asopagos.dto.cartera.SimulacionDTO(
            (SELECT empl.estadoEmpleador FROM Empleador empl LEFT JOIN empl.empresa emp LEFT JOIN emp.persona persona
            WHERE persona.idPersona=per.idPersona),per,cia,solG) FROM SolicitudGestionCobroManual solG JOIN
            solG.solicitudGlobal sol,CicloAportante cia,Persona per
            WHERE cia.idPersona=per.idPersona AND cia.idCicloAportante=solG.idCicloAportante AND cia.idCicloCartera=
            :idCicloCartera
            AND (solG.solicitudGlobal.destinatario = :usuarioDestinatario OR :usuarioDestinatario IS NULL)
        </query>
    </named-query>
    <named-query name="Cartera.CicloFiscalizacion.ConsultarDetalle.usuario">
        <query>
            SELECT new com.asopagos.dto.cartera.SimulacionDTO(
            (SELECT empl.estadoEmpleador FROM Empleador empl LEFT JOIN empl.empresa emp LEFT JOIN emp.persona persona
            WHERE persona.idPersona=per.idPersona),per,ciA,solF) FROM CicloCartera cif,CicloAportante ciA,Persona
            per,SolicitudFiscalizacion solF LEFT JOIN solF.solicitudGlobal sol
            WHERE cif.idCicloCartera=ciA.idCicloCartera AND per.idPersona=ciA.idPersona
            AND solF.idCicloAportante=ciA.idCicloAportante AND cif.idCicloCartera= :idCicloCartera AND sol.destinatario=
            :usuarioDestinatario
        </query>
    </named-query>
    <named-query
            name="Cartera.SolicitudFiscalizacion.ConsultarSolicitudFiscalizacionPorEstados">
        <query>
            SELECT cif FROM CicloCartera cif,CicloAportante cia,SolicitudFiscalizacion soli
            WHERE soli.idCicloAportante=cia.idCicloAportante AND cia.idCicloCartera=cif.idCicloCartera
            AND cif.estadoCicloCartera= :estadoCicloFiscaliacion AND soli.estadoFiscalizacion NOT IN
            (:estadosFiscalizacion)
            AND cif.tipoCiclo = :tipoCiclo
        </query>
    </named-query>
    <named-query name="Cartera.exclusionCartera.consultarExclusionCatera">
        <query>
            SELECT exc FROM ExclusionCartera exc,Persona per WHERE exc.idPersona=per.idPersona AND
            exc.tipoExclusionCartera = :tipoExclusion AND per.tipoIdentificacion = :tipoIdentificacion AND
            per.numeroIdentificacion =:numeroIdentificacion AND exc.tipoSolicitante = :tipoSolicitante AND
            exc.estadoExclusionCartera =:estadoExclusionCartera
        </query>
    </named-query>
    <named-query
            name="Cartera.exclusionCartera.consultarExclusionCartera.aportante">
        <query>
            SELECT new com.asopagos.dto.cartera.ExclusionCarteraDTO(exc,per)
            FROM ExclusionCartera exc,Persona per
            WHERE exc.idPersona=per.idPersona
            AND exc.tipoSolicitante = :tipoSolicitante
            AND exc.estadoExclusionCartera = :estadoExclusion
            AND per.tipoIdentificacion = :tipoIdentificacion
            AND per.numeroIdentificacion = :numeroIdentificacion
        </query>
    </named-query>
    <named-query name="Cartera.exclusionCartera.consultarPeriodosExclusionMora">
        <query>
            SELECT new com.asopagos.dto.cartera.PeriodoExclusionMoraDTO(periodo) FROM PeriodoExclusionMora
            periodo,ExclusionCartera exc WHERE periodo.idExclusionCartera=exc.idExclusionCartera
            AND exc.idPersona=:idPersona AND exc.tipoExclusionCartera= :tipoExclusionCartera
        </query>
    </named-query>
    <named-query
            name="Cartera.convenioPago.consultarConveniPagoExclusionPersona">
        <query>
            SELECT new com.asopagos.dto.modelo.PagoPeriodoConvenioModeloDTO(ppc) FROM ConvenioPago
            cop,PagoPeriodoConvenio ppc,Persona per
            WHERE ppc.idConvenioPago=cop.idConvenioPago
            AND cop.idPersona = per.idPersona
            AND per.numeroIdentificacion= :numeroIdentificacion
            AND per.tipoIdentificacion= :tipoIdentificacion
            AND cop.tipoSolicitante = :tipoSolicitante
            AND cop.estadoConvenioPago = :estadoConvenioPago
            order by ppc.fechaPago DESC
        </query>
    </named-query>
    <named-query name="Cartera.exclusionCartera.consultarExclusionCarteraPorId">
        <query>
            SELECT ex FROM ExclusionCartera ex WHERE ex.idExclusionCartera= :idExclusionCartera
        </query>
    </named-query>
    <named-query
            name="Cartera.exclusionCartera.consultarTrazabilidadExclusionCartera.persona">
        <query>
            SELECT new com.asopagos.dto.cartera.ExclusionCarteraDTO(ex) FROM ExclusionCartera ex,Persona per
            WHERE per.idPersona=ex.idPersona
            AND ex.tipoSolicitante = :tipoSolicitante
            AND per.numeroIdentificacion= :numeroIdentificacion
            AND per.tipoIdentificacion= :tipoIdentificacion
        </query>
    </named-query>
    <named-query
            name="Cartera.exclusionCartera.consultarTrazabilidadExclusionCartera.estado.empleador">
        <query>
            SELECT empl FROM Empleador empl LEFT JOIN empl.empresa emp LEFT JOIN emp.persona per WHERE per.idPersona=
            :idPersona
        </query>
    </named-query>
    <named-query
            name="Cartera.exclusionCartera.consultarTrazabilidadExclusionCartera.estado.afiliado">
        <query>
            SELECT roa FROM RolAfiliado roa LEFT JOIN roa.afiliado afi LEFT JOIN afi.persona per WHERE per.idPersona=
            :idPersona
        </query>
    </named-query>
    <named-query name="Cartera.convenioPago.consultarConvenioPagoPorId">
        <query>
            SELECT con FROM ConvenioPago con WHERE con.idConvenioPago = :numeroConvenio
        </query>
    </named-query>
    <named-query
            name="Cartera.exclusionCartera.consultarExclusionesActivasAportanteEmpleador">
        <query>
            SELECT new com.asopagos.dto.cartera.ExclusionCarteraDTO(empl,
            (SELECT ex.tipoExclusionCartera FROM ExclusionCartera ex WHERE ex.tipoExclusionCartera='EXCLUSION_NEGOCIO'
            AND ex.estadoExclusionCartera= :estadoExclusion AND ex.idPersona=per.idPersona AND ex.tipoSolicitante=
            :tipoSolicitante),
            (SELECT ex.tipoExclusionCartera FROM ExclusionCartera ex WHERE ex.tipoExclusionCartera='IMPOSICION_RECURSO'
            AND ex.estadoExclusionCartera= :estadoExclusion AND ex.idPersona=per.idPersona AND ex.tipoSolicitante=
            :tipoSolicitante),
            (SELECT ex.tipoExclusionCartera FROM ExclusionCartera ex WHERE ex.tipoExclusionCartera='ACLARACION_MORA' AND
            ex.estadoExclusionCartera= :estadoExclusion AND ex.idPersona=per.idPersona AND ex.tipoSolicitante=
            :tipoSolicitante),
            (SELECT ex.tipoExclusionCartera FROM ExclusionCartera ex WHERE
            ex.tipoExclusionCartera='RIESGO_INCOBRABILIDAD' AND ex.estadoExclusionCartera= :estadoExclusion AND
            ex.idPersona=per.idPersona AND ex.tipoSolicitante= :tipoSolicitante),
            (SELECT cop FROM ConvenioPago cop WHERE per.idPersona=cop.idPersona AND cop.tipoSolicitante =
            :tipoSolicitante AND cop.estadoConvenioPago = :estadoConvenioPago AND per.idPersona IN (:idPersonas)))
            FROM Empleador empl LEFT JOIN empl.empresa emp LEFT JOIN emp.persona per
            WHERE per.idPersona IN (:idPersonas)
        </query>
    </named-query>
    <named-query
            name="Cartera.exclusionCartera.consultarExclusionesActivasAportanteIndependientePensionado">
        <query>
            SELECT new com.asopagos.dto.cartera.ExclusionCarteraDTO(roa,
            (SELECT ex.tipoExclusionCartera FROM ExclusionCartera ex WHERE ex.tipoExclusionCartera='EXCLUSION_NEGOCIO'
            AND ex.estadoExclusionCartera= :estadoExclusion AND ex.idPersona=per.idPersona AND ex.tipoSolicitante=
            :tipoSolicitante),
            (SELECT ex.tipoExclusionCartera FROM ExclusionCartera ex WHERE ex.tipoExclusionCartera='IMPOSICION_RECURSO'
            AND ex.estadoExclusionCartera= :estadoExclusion AND ex.idPersona=per.idPersona AND ex.tipoSolicitante=
            :tipoSolicitante),
            (SELECT ex.tipoExclusionCartera FROM ExclusionCartera ex WHERE ex.tipoExclusionCartera='ACLARACION_MORA' AND
            ex.estadoExclusionCartera= :estadoExclusion AND ex.idPersona=per.idPersona AND ex.tipoSolicitante=
            :tipoSolicitante),
            (SELECT ex.tipoExclusionCartera FROM ExclusionCartera ex WHERE
            ex.tipoExclusionCartera='RIESGO_INCOBRABILIDAD' AND ex.estadoExclusionCartera= :estadoExclusion AND
            ex.idPersona=per.idPersona AND ex.tipoSolicitante= :tipoSolicitante),
            (SELECT cop FROM ConvenioPago cop WHERE per.idPersona=cop.idPersona AND cop.tipoSolicitante =
            :tipoSolicitante AND cop.estadoConvenioPago = :estadoConvenioPago AND per.idPersona IN (:idPersonas)))
            FROM RolAfiliado roa LEFT JOIN roa.afiliado afi LEFT JOIN afi.persona per
            WHERE roa.tipoAfiliado= :tipoAfiliacion AND per.idPersona IN (:idPersonas)
        </query>
    </named-query>
    <named-query name="Cartera.exclusionCartera.consultarExclusionConvenioPago">
        <query>
            SELECT new com.asopagos.dto.cartera.ExclusionCarteraDTO(per,cop) FROM ConvenioPago cop, Persona per
            WHERE per.idPersona=cop.idPersona
            AND cop.tipoSolicitante = :tipoSolicitante
            AND cop.estadoConvenioPago = :estadoConvenioPago
            AND per.numeroIdentificacion= :numeroIdentificacion
            AND per.tipoIdentificacion= :tipoIdentificacion
        </query>
    </named-query>
    <named-query name="DatoTemporalParametrizacion.consultarDatoTemporalParametrizacion">
        <query>
            SELECT dtp FROM DatoTemporalParametrizacion dtp WHERE dtp.parametrizacion =:parametrizacion
        </query>
    </named-query>
    <named-query name="Cartera.consultarAportantesCarteraLCUnoVigente">
        <query>
            SELECT car FROM Cartera car WHERE car.estadoOperacion =:estadoOperacion
            AND car.tipoLineaCobro =:tipoLineaCobro
        </query>
    </named-query>
    <named-query name="Cartera.consultarCriterioGestionCobroPorLineaYMetodo">
        <query>
            SELECT new com.asopagos.dto.modelo.ParametrizacionCriteriosGestionCobroModeloDTO(pcg) FROM
            ParametrizacionCriterioGestionCobro pcg WHERE
            pcg.lineaCobro =:tipoLineaCobro
            AND pcg.metodo =:metodo
            AND pcg.accion =:accionLineaCobro
        </query>
    </named-query>
    <named-query name="Cartera.consultarCriterioGestionCobroPorLineaYAccion">
        <query>
            SELECT new com.asopagos.dto.modelo.ParametrizacionCriteriosGestionCobroModeloDTO(pcg) FROM
            ParametrizacionCriterioGestionCobro pcg WHERE
            pcg.lineaCobro =:tipoLineaCobro
            AND pcg.accion =:accionLineaCobro
        </query>
    </named-query>
    <named-native-query name="Cartera.consultar.bitacora.aportante.cartera" result-set-mapping="cartera.bitacora.niyaraky.mapping">
        <query>
            WITH ActualizacionMasRecienteComunicados AS (
                SELECT 
                    bca.*, 
                    cn.cnIdMensaje, 
                    cn.cnObservacion, 
                    COALESCE(
                        (SELECT TOP 1 cnr.cnrFechaEventoRecibido 
                        FROM ComunicadoNiyarakyRecepcion cnr 
                        WHERE cnr.cnrComunicadoNiyaraky = cn.cnId AND cnr.cnrEstado = 1
                        ORDER BY cnr.cnrFechaEventoRecibido DESC),
                        cn.cnFechaEnvio
                    ) AS cnFechaEnvio,
                    cnr.cnrFechaEventoRecibido, 
                    cnr.cnrFechaEventoRecibidoPorNiyaraky, 
                    cnr.cnrEstado, 
                    cnr.cnrDescripcion,
                    ROW_NUMBER() OVER (
                        PARTITION BY bca.bcaId
                        ORDER BY 
                            CASE 
                                WHEN cnr.cnrEstado = 2 THEN 1
                                WHEN cnr.cnrEstado = 3 THEN 2
                                ELSE 3
                            END,
                            cnr.cnrId DESC
                    ) AS rn
                FROM BitacoraCartera bca
                LEFT JOIN ComunicadoTransversalBitacora ctb ON bca.bcaId = ctb.ctbBitacoraCartera
                LEFT JOIN Comunicado com ON com.comId = ctb.ctbComunicado
                LEFT JOIN ComunicadoNiyaraky cn ON com.comId = cn.cnComunicado
                LEFT JOIN ComunicadoNiyarakyRecepcion cnr ON cnr.cnrComunicadoNiyaraky = cn.cnId
                WHERE bca.bcaNumeroOperacion = :numeroOperacion
            )
            SELECT 
                bcaId, 
                bcaFecha, 
                bcaActividad, 
                bcaMedio, 
                bcaResultado, 
                bcaUsuario, 
                bcaPersona, 
                bcaTipoSolicitante, 
                bcaNumeroOperacion, 
                bcaComentarios, 
                cnIdMensaje, 
                cnObservacion, 
                cnFechaEnvio, 
                cnrFechaEventoRecibido, 
                cnrFechaEventoRecibidoPorNiyaraky, 
                cnrEstado, 
                cnrDescripcion
            FROM ActualizacionMasRecienteComunicados
            WHERE rn = 1
            ORDER BY bcaId DESC;
        </query>
    </named-native-query>
    <named-query name="Cartera.consultar.bitacora.aportante.cartera.sin.resultado">
        <query>
            SELECT new com.asopagos.cartera.dto.BitacoraCarteraDTO(bca)
            FROM BitacoraCartera bca
            WHERE bca.numeroOperacion = :numeroOperacion
            AND bca.actividad =:actividad
            AND bca.resultado IN (:resultado) order by bca.idBitacoraCartera desc
        </query>
    </named-query>
    <named-query name="Cartera.consultar.deuda.aportante.tipo.persona">
        <query>
            SELECT new com.asopagos.dto.cartera.DeudaDTO(car.periodoDeuda,SUM(car.deudaPresunta))
            FROM Cartera car, Persona per WHERE per.idPersona=car.idPersona
            AND per.numeroIdentificacion = :numeroIdentificacion
            AND per.tipoIdentificacion = :tipoIdentificacion
            AND car.tipoSolicitante = :tipoSolicitante
            AND(:lineaCobro IS NULL OR car.tipoLineaCobro = :lineaCobro)
            AND car.deudaPresunta&gt;0
            GROUP BY car.periodoDeuda,car.deudaPresunta
        </query>
    </named-query>
    <named-query name="Cartera.consultar.deuda.aportante.tipo.empleador">
        <query>
            SELECT new com.asopagos.dto.cartera.DeudaDTO(car.periodoDeuda,SUM(car.deudaPresunta)) FROM Cartera car,
            Empleador empl LEFT JOIN empl.empresa emp LEFT JOIN emp.persona per
            WHERE per.idPersona=car.idPersona AND per.numeroIdentificacion = :numeroIdentificacion
            AND per.tipoIdentificacion = :tipoIdentificacion
            AND car.tipoSolicitante = :tipoSolicitante
            AND(:lineaCobro IS NULL OR car.tipoLineaCobro = :lineaCobro)
            AND car.deudaPresunta&gt;0
            GROUP BY car.periodoDeuda,car.deudaPresunta
        </query>
    </named-query>
    <named-query name="Cartera.consultar.documento.soporte.bitacora">
        <query>
            SELECT new com.asopagos.dto.modelo.DocumentoSoporteModeloDTO(dso) FROM DocumentoSoporte dso
            WHERE dso.idBitacoraCartera IN (:lstIdBitacoraCartera)
        </query>
    </named-query>
    <named-query name="Cartera.Consultar.CicloAportante.Id">
        <query>
            SELECT cap
            FROM CicloAportante cap
            WHERE cap.idCicloAportante = :idCiclo
        </query>
    </named-query>

    <named-query name="Cartera.Consultar.Documento.Cartera">
        <query>
            SELECT doc
            FROM Cartera car, CarteraAgrupadora cag, DocumentoCartera doc JOIN FETCH doc.documentoSoporte dos
            WHERE car.idCartera = cag.idCartera
            AND doc.idCartera = car.idCartera
            AND cag.numeroOperacion = :numeroOperacion
            AND doc.accionCobro = :accionCobro
            AND car.idCartera IN (SELECT c.idCartera FROM CarteraAgrupadora c WHERE c.numeroOperacion =
            :numeroOperacion)
        </query>
    </named-query>

    <named-query name="Cartera.consultar.empleadoresCandidatosExclusionCartera">
        <query>
            SELECT new com.asopagos.dto.modelo.DetalleSolicitudGestionCobroModeloDTO(deta,per)
            FROM Cartera car,SolicitudGestionCobroFisico so, DetalleSolicitudGestionCobro deta,Empleador empl LEFT JOIN
            empl.empresa emp LEFT JOIN emp.persona per
            WHERE car.idPersona=per.idPersona AND deta.solicitudPrimeraRemision = so.idSolicitudGestionCobroFisico AND
            car.idCartera=deta.idCartera
            AND car.estadoCartera= :estadoCartera AND car.estadoOperacion= :estadoOperacion
            AND car.idCartera IN (:lstIdCartera)
            AND per.idPersona IN (SELECT exc.idPersona FROM ExclusionCartera exc WHERE exc.tipoExclusionCartera
            IN(:lstExclusiones) AND exc.estadoExclusionCartera = :estadoExclusion)
            AND car.idCartera IN (SELECT det.idCartera FROM DetalleSolicitudGestionCobro det WHERE
            det.idCartera=car.idCartera)
            AND so.tipoAccionCobro =:tipoAccionCobro
            AND car.tipoAccionCobro =:tipoAccionCobro
            AND per.idPersona IN (Select cop.idPersona from ConvenioPago cop where cop.estadoConvenioPago=
            :estadoConvenio)
        </query>
    </named-query>
    <named-query name="Cartera.consultar.empleadoresCandidatosExclusionCarteraSinExclusiones">
        <query>
            SELECT new com.asopagos.dto.modelo.DetalleSolicitudGestionCobroModeloDTO(deta,per)
            FROM Cartera car,SolicitudGestionCobroFisico so, DetalleSolicitudGestionCobro deta,Empleador empl JOIN
            empl.empresa emp JOIN emp.persona per
            WHERE car.idPersona=per.idPersona AND deta.solicitudPrimeraRemision = so.idSolicitudGestionCobroFisico AND
            car.idCartera=deta.idCartera
            AND car.estadoCartera= :estadoCartera AND car.estadoOperacion= :estadoOperacion
            AND car.idCartera IN (:lstIdCartera)
            AND per.idPersona NOT IN (SELECT exc.idPersona FROM ExclusionCartera exc WHERE exc.tipoExclusionCartera
            IN(:lstExclusiones) AND exc.estadoExclusionCartera = :estadoExclusion)
            AND car.idCartera IN (SELECT det.idCartera FROM DetalleSolicitudGestionCobro det WHERE
            det.idCartera=car.idCartera)
            AND so.tipoAccionCobro =:tipoAccionCobro
            AND car.tipoAccionCobro =:tipoAccionCobro
            AND per.idPersona NOT IN (Select cop.idPersona from ConvenioPago cop where cop.estadoConvenioPago=
            :estadoConvenio)
        </query>
    </named-query>

    <named-native-query name="Cartera.Consultar.EmpleadorCandidatoExpulsion">
        <query>
            SELECT COUNT(0)
            FROM Cartera car
            JOIN Persona per ON per.perId = car.carPersona
            AND car.carEstadoOperacion= :estadoOperacion
            AND car.carId = :idCartera
            AND car.carTipoAccionCobro IN ('F1','H2')
            AND per.perId NOT IN (SELECT exc.excPersona FROM ExclusionCartera exc WHERE exc.excTipoExclusionCartera
            IN(:lstExclusiones) AND exc.excEstadoExclusionCartera = :estadoExclusion)
            AND per.perId NOT IN (SELECT cop.copPersona FROM ConvenioPago cop WHERE cop.copEstadoConvenioPago =
            :estadoConvenio)
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.PersonaCandidatoExpulsion">
        <query>
            SELECT COUNT(0)
            FROM Cartera car
            JOIN Persona per ON per.perId = car.carPersona
            AND car.carEstadoOperacion= :estadoOperacion
            AND car.carId = :idCartera
            AND car.carTipoAccionCobro IN ('LC4C','LC5C')
            AND per.perId NOT IN (SELECT exc.excPersona FROM ExclusionCartera exc WHERE exc.excTipoExclusionCartera
            IN(:lstExclusiones) AND exc.excEstadoExclusionCartera = :estadoExclusion)
            AND per.perId NOT IN (SELECT cop.copPersona FROM ConvenioPago cop WHERE cop.copEstadoConvenioPago =
            :estadoConvenio)
        </query>
    </named-native-query>

    <named-query name="Cartera.consultar.afiliadosCandidatosExclusionCartera">
        <query>
            SELECT new com.asopagos.dto.modelo.DetalleSolicitudGestionCobroModeloDTO(deta,per)
            FROM Cartera car,SolicitudGestionCobroFisico so, DetalleSolicitudGestionCobro deta,RolAfiliado roa LEFT JOIN
            roa.afiliado afi JOIN afi.persona per
            WHERE car.idPersona=per.idPersona AND deta.solicitudPrimeraRemision = so.idSolicitudGestionCobroFisico AND
            car.idCartera=deta.idCartera
            AND car.estadoCartera= :estadoCartera AND car.estadoOperacion= :estadoOperacion
            AND car.idCartera IN (:lstIdCartera)
            AND per.idPersona IN (SELECT exc.idPersona FROM ExclusionCartera exc WHERE exc.tipoExclusionCartera
            IN(:lstExclusiones) AND exc.estadoExclusionCartera = :estadoExclusion)
            AND car.idCartera IN (SELECT det.idCartera FROM DetalleSolicitudGestionCobro det WHERE
            det.idCartera=car.idCartera)
            AND so.tipoAccionCobro =:tipoAccionCobro
            AND car.tipoAccionCobro =:tipoAccionCobro
            AND per.idPersona IN (Select cop.idPersona from ConvenioPago cop where cop.estadoConvenioPago=
            :estadoConvenio)
        </query>
    </named-query>
    <named-query name="Cartera.consultar.afiliadosCandidatosExclusionCarteraSinExclusiones">
        <query>
            SELECT new com.asopagos.dto.modelo.DetalleSolicitudGestionCobroModeloDTO(deta,per)
            FROM Cartera car,SolicitudGestionCobroFisico so, DetalleSolicitudGestionCobro deta,RolAfiliado roa LEFT JOIN
            roa.afiliado afi JOIN afi.persona per
            WHERE car.idPersona=per.idPersona AND deta.solicitudPrimeraRemision = so.idSolicitudGestionCobroFisico AND
            car.idCartera=deta.idCartera
            AND car.estadoCartera= :estadoCartera AND car.estadoOperacion= :estadoOperacion
            AND car.idCartera IN (:lstIdCartera)
            AND per.idPersona NOT IN (SELECT exc.idPersona FROM ExclusionCartera exc WHERE exc.tipoExclusionCartera
            IN(:lstExclusiones) AND exc.estadoExclusionCartera = :estadoExclusion)
            AND car.idCartera IN (SELECT det.idCartera FROM DetalleSolicitudGestionCobro det WHERE
            det.idCartera=car.idCartera)
            AND so.tipoAccionCobro =:tipoAccionCobro
            AND car.tipoAccionCobro =:tipoAccionCobro
            AND per.idPersona NOT IN (Select cop.idPersona from ConvenioPago cop where cop.estadoConvenioPago=
            :estadoConvenio)
        </query>
    </named-query>

    <named-query name="Cartera.Consultar.DocumentoSoporte">
        <query>
            SELECT dos
            FROM DocumentoSoporte dos
            WHERE dos.identificacionDocumento = :idECM
        </query>
    </named-query>
    <named-query name="Cartera.Consultar.Detalle.Gestion">
        <query>
            SELECT new com.asopagos.dto.modelo.DetalleSolicitudGestionCobroModeloDTO(dsg, per)
            FROM Cartera car, Persona per, DetalleSolicitudGestionCobro dsg
            WHERE dsg.solicitudPrimeraRemision = :idSolicitudFisico
            AND dsg.idCartera = car.idCartera
            AND car.idPersona = per.idPersona
        </query>
    </named-query>

    <named-native-query name="Cartera.Consultar.Ultimo.BackActualizacion.Electronico">
        <description>Consulta que obtiene el último usuario con perfil "Back de actualización" a quien se le asignó un
            tarea de gestión de cobro electrónico
        </description>
        <query>
            SELECT TOP 1 sol.solDestinatario
            FROM SolicitudGestionCobroElectronico sge
            JOIN Solicitud sol ON sol.solId = sge.sgeSolicitud
            JOIN Cartera car ON car.carId = sge.sgeCartera
            WHERE car.carTipoSolicitante = :tipoSolicitante
            AND sol.solDestinatario IS NOT NULL
            ORDER BY sol.solId DESC
        </query>
    </named-native-query>
        <named-native-query name="Cartera.Consultar.Usuario .Electronico">
        <description>Consulta que obtiene el último usuario con perfil "Back de actualización" a quien se le asignó un
            tarea de gestión de cobro electrónico
        </description>
        <query>
           SELECT pmaUsuario FROM ParametrizacionMetodoAsignacion
           WHERE pmaProceso = 'GESTION_COBRO_ELECTRONICO'
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.Ultimo.AnalistaAportes.Fisico">
        <description>Consulta que obtiene el último usuario con perfil "Analista de cartera de aportes" a quien se le
            asignó una tarea de gestión de cobro físico
        </description>
        <query>
            SELECT TOP 1 sol.solDestinatario
            FROM SolicitudGestionCobroFisico dsg
            JOIN Solicitud sol ON sol.solId = sgfSolicitud
            WHERE sol.solDestinatario IS NOT NULL
            ORDER BY sol.solId DESC
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.Empleador.Cotizante">
        <query>
            SELECT perE.perTipoIdentificacion, perE.perNumeroIdentificacion
            FROM Persona perE
            JOIN Empresa empE ON empE.empPersona = perE.perId
            JOIN Empleador emplE ON emplE.empEmpresa = empE.empId
            WHERE emplE.empId IN
            (
            SELECT roa.roaEmpleador
            FROM Persona per
            JOIN Afiliado afi ON afi.afiPersona = per.perId
            JOIN RolAfiliado roa ON roa.roaAfiliado = afi.afiId
            WHERE per.perNumeroIdentificacion = :numeroIdentificacionDependiente
            AND per.perTipoIdentificacion = :tipoIdentificacion
            AND roa.roaEstadoAfiliado = 'ACTIVO'
            )
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.Convenio.Aportante">
        <query>
            SELECT cop.copId
            FROM ConvenioPago cop
            JOIN Persona per ON cop.copPersona=per.perId
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
        </query>
    </named-native-query>

    <named-native-query name="Cartera.DetalleSolicitudGestionCobro.consultarIdDetalleSolicitudGestionCobro">
        <query>
            SELECT dsg.dsgId FROM Cartera car, Persona per INNER JOIN (
            SELECT
            tipoIdentificacion = JSON_VALUE(j.[value],'$.tipoIdentificacion'),
            numeroIdentificacion = JSON_VALUE(j.[value],'$.numeroIdentificacion'),
            numeroRadicado = JSON_VALUE(j.[value],'$.numeroRadicacion')
            FROM OPENJSON (:filtros) J
            ) AS p ON p.tipoIdentificacion = per.perTipoIdentificacion AND p.numeroIdentificacion =
            per.perNumeroIdentificacion,
            DetalleSolicitudGestionCobro dsg LEFT JOIN DocumentoSoporte doPriRe ON
            dsg.dsgDocumentoPrimeraRemision=doPriRe.dosId
            LEFT JOIN DocumentoSoporte doSegRe ON dsg.dsgDocumentoSegundaRemision=doSegRe.dosId,
            SolicitudGestionCobroFisico sgf, Solicitud sol
            WHERE dsg.dsgCartera=car.carId
            AND sgf.sgfId = dsg.dsgSolicitudPrimeraRemision
            AND per.perId = car.carPersona
            AND sol.solid = sgf.sgfSolicitud
            AND p.numeroRadicado = sol.solNumeroRadicacion
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.solicitud.gestion.cobro.electronico.exclusiones">
        <query>
            select sce.sgeId, sce.sgeEstado, sce.sgeCartera, sce.sgeTipoAccionCobro, sce.sgeSolicitud
            FROM SolicitudGestionCobroElectronico sce
            LEFT JOIN Solicitud sol ON sol.solid=sce.sgeSolicitud
            LEFT JOIN Cartera car ON car.carid=sce.sgeCartera
            WHERE sol.solNumeroRadicacion= :numeroRadicacion
            AND car.carEstadoOperacion= :estadoOperacion
            AND EXISTS(Select per.perid from ExclusionCartera exc
            LEFT JOIN Persona per ON per.perid=exc.excPersona
            WHERE exc.excTipoExclusionCartera IN (:exclusiones)
            AND exc.excEstadoExclusionCartera= :estadoExclusion
            AND car.carPersona=per.perid)
            AND EXISTS(Select cop.copPersona from ConvenioPago cop, PagoPeriodoConvenio pc
            where cop.copId = pc.ppcConvenioPago AND cop.copEstadoConvenioPago=:estadoConvenio
            AND copPersona=car.carPersona AND FORMAT(pc.ppcPeriodo,'yyyy-MM')IN (SELECT
            FORMAT(ca.carPeriodoDeuda,'yyyy-MM') FROM Cartera ca WHERE ca.carId=:idCartera))
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.UltimoConsecutivo.PeriodoActual">
        <description>Consulta que obtiene el último consecutivo de liquidación generado para el periodo actual
        </description>
        <query>
            SELECT MAX(dca.dcaConsecutivoLiquidacion)
            FROM DocumentoCartera dca
            WHERE CONVERT(CHAR(6), GETDATE(), 112) = SUBSTRING(dca.dcaConsecutivoLiquidacion, 0, 7)
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.Existente.Consecutivo.Liquidacion">
        <description>Consulta que obtiene el consecutivo de liquidacion para accion de cobro 2C para una cartera
        </description>
        <query>
            SELECT MAX(dca.dcaConsecutivoLiquidacion)
            FROM DocumentoCartera dca
            WHERE dca.dcaCartera = :idCartera AND dca.dcaAccionCobro = 'C2'
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.solicitud.gestion.cobro.fisico.exclusiones">
        <query>
            SELECT sgf.sgfId,sgf.sgfDocumentoSoporte,
            sgf.sgfEstado,sgf.sgfFechaRemision,
            sgf.sgfObservacionRemision,sgf.sgfTipoAccionCobro,sgf.sgfSolicitud
            FROM SolicitudGestionCobroFisico sgf
            LEFT JOIN Solicitud sol ON sol.solid=sgf.sgfSolicitud
            WHERE sol.solNumeroRadicacion = :numeroRadicacion
            AND EXISTS(
            select * from DetalleSolicitudGestionCobro dsg
            LEFT JOIN Cartera car ON car.carid=dsg.dsgCartera
            LEFT JOIN Persona per ON car.carPersona=per.perid
            LEFT JOIN ExclusionCartera exc ON exc.excPersona=per.perid
            LEFT JOIN ConvenioPago cop ON cop.copPersona=car.carPersona
            where dsg.dsgSolicitudSegundaRemision=sgf.sgfId
            AND ((exc.excTipoExclusionCartera IN (:exclusiones) AND exc.excEstadoExclusionCartera= :estadoExclusion )
            OR (cop.copEstadoConvenioPago= :estadoConvenio AND
            EXISTS(SELECT pc.ppcConvenioPago FROM PagoPeriodoConvenio pc WHERE pc.ppcConvenioPago = cop.copId AND
            FORMAT(pc.ppcPeriodo,'yyyy-MM')IN (SELECT FORMAT(ca.carPeriodoDeuda,'yyyy-MM') FROM Cartera ca WHERE
            ca.carId=:idCartera)))))
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.idCarteraPorCadaLineaCobroAportante">
        <query>
            SELECT car.carId FROM Cartera car,
            (
            SELECT cat.carTipoLineaCobro,MIN(cat.carFechaCreacion) as fechaCreacion, cat.carPersona FROM Cartera
            cat,Persona per
            WHERE per.perId=cat.carPersona AND per.perTipoIdentificacion= :tipoIdentificacion AND
            per.perNumeroIdentificacion = :numeroIdentificacion
            AND cat.carTipoSolicitante= :tipoSolicitante GROUP BY cat.carTipoLineaCobro, cat.carPersona
            )as consultaTipoLinea
            WHERE car.carTipoLineaCobro= consultaTipoLinea.carTipoLineaCobro AND car.carFechaCreacion =
            consultaTipoLinea.fechaCreacion
            AND car.carPersona= consultaTipoLinea.carPersona
        </query>
    </named-native-query>
    <named-query name="Cartera.DetalleSolicitudGestionCobro.consultarDetalleSolicitudGestionCobro">
        <query>
            SELECT new com.asopagos.dto.modelo.DetalleSolicitudGestionCobroModeloDTO(det,per,cag.numeroOperacion,
            car.tipoSolicitante) FROM DetalleSolicitudGestionCobro det,Cartera car, Persona per, CarteraAgrupadora cag
            WHERE det.idCartera = car.idCartera
            AND car.idCartera= cag.idCartera
            AND car.idPersona = per.idPersona
            AND det.id in (:ids)
        </query>
    </named-query>

    <named-native-query name="Cartera.DetalleSolicitudGestionCobro.consultarDetalleSolicitudGestionCobroIntegrado">
        <query>
            SELECT
            p.enviarPrimeraRemision,
            dsg.dsgEnviarSegundaRemision,
            dsg.dsgEstado,
            dsg.dsgFechaPrimeraRemision,
            dsg.dsgFechaSegundaRemision,
            dsg.dsgCartera,
            dsg.dsgObservacionPrimeraEntrega,
            p.observacionPrimeraRemision,
            dsg.dsgObservacionSegundaEntrega,
            dsg.dsgObservacionSegundaRemision,
            dsg.dsgSolicitudPrimeraRemision,
            dsg.dsgSolicitudSegundaRemision,
            dsg.dsgResultadoPrimeraEntrega,
            dsg.dsgResultadoSegundaEntrega,
            dsg.dsgId,
            per.perId,
            per.perTipoIdentificacion,
            per.perNumeroIdentificacion,
            car.carTipoSolicitante,
            cag.cagNumeroOperacion,
            doPriRe.dosId d1Id, doPriRe.dosNombreDocumento d1Nombre, doPriRe.dosDescripcionComentarios d1Comentarios,
            doPriRe.dosIdentificacionDocumento d1IdDocumento, doPriRe.dosVersionDocumento d1Version,
            doPriRe.dosFechaHoraCargue d1Fecha, doPriRe.dosTipoDocumento d1Tipo, doPriRe.dosBitacoraCartera d1Bitacora,
            doPriRe.dosTipoDocumentoSoporteFovis d1Fovis,
            doSegRe.dosId d2Id, doSegRe.dosNombreDocumento d2Nombre, doSegRe.dosDescripcionComentarios d2Comentarios,
            doSegRe.dosIdentificacionDocumento d2IdDocumento, doSegRe.dosVersionDocumento d2Version,
            doSegRe.dosFechaHoraCargue d2Fecha, doSegRe.dosTipoDocumento d2Tipo, doSegRe.dosBitacoraCartera d2Bitacora,
            doSegRe.dosTipoDocumentoSoporteFovis d2Fovis
            FROM
            DetalleSolicitudGestionCobro dsg
            INNER JOIN Cartera car on dsg.dsgCartera = car.carId
            INNER JOIN CarteraAgrupadora cag on cag.cagCartera = car.carId
            INNER JOIN Persona per on per.perId = car.carPersona
            INNER JOIN (
            SELECT *
            FROM OPENJSON (:filtros)
            WITH (
            tipoIdentificacion varchar(20) '$.tipoIdentificacion',
            numeroIdentificacion varchar(16) '$.numeroIdentificacion',
            numeroRadicado varchar(20) '$.numeroRadicacion',
            observacionPrimeraRemision varchar(255) '$.observacionPrimeraRemision',
            enviarPrimeraRemision bit '$.enviarPrimeraRemision'
            )
            ) AS p ON p.tipoIdentificacion = per.perTipoIdentificacion AND p.numeroIdentificacion =
            per.perNumeroIdentificacion
            LEFT JOIN DocumentoSoporte doPriRe ON dsg.dsgDocumentoPrimeraRemision = doPriRe.dosId
            LEFT JOIN DocumentoSoporte doSegRe ON dsg.dsgDocumentoSegundaRemision = doSegRe.dosId,
            SolicitudGestionCobroFisico sgf, Solicitud sol
            WHERE
            sgf.sgfId = dsg.dsgSolicitudPrimeraRemision AND
            sol.solid = sgf.sgfSolicitud AND
            sol.solNumeroRadicacion = p.numeroRadicado
        </query>
    </named-native-query>

    <named-query name="Cartera.ConsultarMetodoActivo">
        <query>
            SELECT pgc.metodo FROM ParametrizacionCriterioGestionCobro pgc
            WHERE pgc.lineaCobro= :tipoLineaCobro AND pgc.activa =:estado
            and pgc.accion=:accion
        </query>
    </named-query>
    <named-query name="correo.oficina.principal">
        <query>
            SELECT new
            com.asopagos.notificaciones.dto.AutorizacionEnvioComunicadoDTO(ubi.email,ubi.autorizacionEnvioEmail)
            FROM Ubicacion ubi WHERE ubi.idUbicacion IN
            (SELECT ube.ubicacion.idUbicacion FROM UbicacionEmpresa ube
            WHERE ube.tipoUbicacion = com.asopagos.enumeraciones.core.TipoUbicacionEnum.UBICACION_PRINCIPAL AND
            ube.idEmpresa IN
            (SELECT emp.idEmpresa FROM Empresa emp WHERE emp.persona.idPersona IN
            (SELECT per.idPersona FROM Persona per WHERE per.tipoIdentificacion=:tipoIdentificacion
            AND per.numeroIdentificacion=:numeroIdentificacion)))
        </query>
    </named-query>
    <named-query name="correo.representante.legal">
        <query>
            SELECT new
            com.asopagos.notificaciones.dto.AutorizacionEnvioComunicadoDTO(ubi.email,ubi.autorizacionEnvioEmail)
            FROM Ubicacion ubi WHERE ubi.idUbicacion IN
            (SELECT emp.idUbicacionRepresentanteLegal FROM Empresa emp WHERE emp.persona.idPersona IN
            (SELECT per.idPersona FROM Persona per WHERE per.tipoIdentificacion=:tipoIdentificacion
            AND per.numeroIdentificacion=:numeroIdentificacion))
        </query>
    </named-query>
    <named-query name="correo.responsable.aportes">
        <query>
            SELECT new
            com.asopagos.notificaciones.dto.AutorizacionEnvioComunicadoDTO(ubi.email,ubi.autorizacionEnvioEmail)
            FROM Ubicacion ubi WHERE ubi.idUbicacion IN
            (SELECT rce.ubicacion.idUbicacion FROM RolContactoEmpleador rce
            WHERE rce.tipoRolContactoEmpleador =
            com.asopagos.enumeraciones.personas.TipoRolContactoEnum.ROL_RESPONSABLE_APORTES
            AND rce.idEmpleador IN (SELECT empl.idEmpleador FROM Empleador empl
            WHERE empl.empresa.idEmpresa IN(SELECT empr.idEmpresa FROM Empresa empr
            WHERE empr.persona.idPersona IN (SELECT per.idPersona FROM Persona per
            WHERE per.tipoIdentificacion=:tipoIdentificacion
            AND per.numeroIdentificacion=:numeroIdentificacion ))))
        </query>
    </named-query>

    <named-query name="correo.responsable.afiliado">
        <query>
            SELECT new
            com.asopagos.notificaciones.dto.AutorizacionEnvioComunicadoDTO(ubi.email,ubi.autorizacionEnvioEmail)
            FROM Ubicacion ubi
            WHERE ubi.idUbicacion =
            (
            SELECT per.ubicacionPrincipal
            FROM Persona per
            WHERE per.tipoIdentificacion=:tipoIdentificacion
            AND per.numeroIdentificacion=:numeroIdentificacion
            )
        </query>
    </named-query>

    <named-query name="Cartera.SolicitudGestionCobroManual.consultarSolicitud">
        <query>
            SELECT new com.asopagos.dto.modelo.SolicitudGestionCobroManualModeloDTO(sgcm,cia,car)
            FROM SolicitudGestionCobroManual sgcm LEFT JOIN sgcm.solicitudGlobal sol,
            CicloAportante cia,Persona per, Cartera car WHERE
            cia.idCicloAportante=sgcm.idCicloAportante
            AND per.idPersona=cia.idPersona
            AND car.idPersona = cia.idPersona
            AND sgcm.lineaCobro = car.tipoLineaCobro
            AND cia.tipoSolicitanteMovimientoAporteEnum = car.tipoSolicitante
            AND sol.numeroRadicacion= :numeroRadicacion
            AND car.idCartera IN (SELECT MIN(cag2.idCartera) FROM CarteraAgrupadora cag2, Cartera car2 WHERE
            cag2.idCartera=car2.idCartera AND
            car2.estadoOperacion=com.asopagos.enumeraciones.cartera.EstadoOperacionCarteraEnum.VIGENTE GROUP BY
            cag2.numeroOperacion)
        </query>
    </named-query>
    <named-query name="Cartera.SolicitudGestionCobroManual.consultarSolicitud.estado">
        <query>
            SELECT new com.asopagos.dto.modelo.SolicitudGestionCobroManualModeloDTO(sgcm,cia,car)
            FROM SolicitudGestionCobroManual sgcm LEFT JOIN sgcm.solicitudGlobal sol,
            CicloAportante cia,Persona per, Cartera car WHERE
            cia.idCicloAportante=sgcm.idCicloAportante
            AND per.idPersona=cia.idPersona
            AND car.idPersona = cia.idPersona
            AND sgcm.lineaCobro = car.tipoLineaCobro
            AND cia.tipoSolicitanteMovimientoAporteEnum = car.tipoSolicitante
            AND sol.numeroRadicacion= :numeroRadicacion
            AND car.idCartera IN (SELECT MIN(cag2.idCartera) FROM CarteraAgrupadora cag2, Cartera car2
            WHERE cag2.idCartera=car2.idCartera GROUP BY cag2.numeroOperacion)
        </query>
    </named-query>
    <!-- comentado por recualculo de deuda presunta nueva query a continuacion GLPI 49032
      <named-query name="Cartera.Consultar.Periodos.Aportante.LineaCobro">
          <query>
              SELECT new com.asopagos.dto.modelo.CarteraModeloDTO(car)
              FROM Cartera car, Persona per
              WHERE per.idPersona = car.idPersona
              AND per.tipoIdentificacion = :tipoIdentificacion
              AND per.numeroIdentificacion = :numeroIdentificacion
              AND car.tipoSolicitante = :tipoSolicitante
              AND car.tipoLineaCobro = :tipoLineaCobro
              AND car.estadoOperacion = com.asopagos.enumeraciones.cartera.EstadoOperacionCarteraEnum.VIGENTE
              AND car.deudaPresunta&gt;0
              ORDER BY car.periodoDeuda DESC
          </query>
      </named-query>-->
    <named-native-query name="Cartera.Consultar.Periodos.Aportante.LineaCobro">
        <query>
            SELECT
			CASE
			WHEN EXISTS(SELECT 1 FROM CarteraDependiente ca where ca.cadCartera = car.carId)
			then 
			(select sum(s) as deudaGeneral from (
            SELECT (case when ca.cadDeudaReal > 0 then ca.cadDeudaReal else ca.cadDeudaPresunta end) as s
            FROM CarteraDependiente ca
            inner join Cartera C on C.carId = ca.cadCartera
            where c.carId = car.carId
            and cardeudapresunta > 0
            ) as valor) 
			else
			(select sum(s) as deudaGeneral from (
            SELECT c.carDeudaPresunta as s
            FROM  Cartera c
            where c.carId = car.carId
            and cardeudapresunta > 0
            ) as valor) 
			END as carDeudaPresunta,
            carEstadoCartera,
            carEstadoOperacion,
            carFechaCreacion,
            carPersona,
            carMetodo,
            carPeriodoDeuda,
            carRiesgoIncobrabilidad,
            carTipoAccionCobro,
            carTipoDeuda,
            carTipoLineaCobro,
            carTipoSolicitante,
            carFechaAsignacionAccion,
            carUsuarioTraspaso,
            carId,
            carDeudaPresuntaUnitaria
            FROM Cartera car, Persona per
            WHERE per.perId = car.carPersona
            AND per.perTipoIdentificacion = :tipoIdentificacion
            AND per.pernumeroIdentificacion = :numeroIdentificacion
            AND car.carTipoSolicitante = :tipoSolicitante
            AND car.carTipoLineaCobro = :tipoLineaCobro
            AND car.carEstadoOperacion = 'VIGENTE'
            AND car.carDeudaPresunta &gt; 0
            ORDER BY car.carPeriodoDeuda DESC
        </query>
    </named-native-query>
    <named-query name="Cartera.Consultar.DeudaReal">
        <query>
            SELECT ISNULL(SUM(cad.deudaReal), 0)
            FROM CarteraDependiente cad
            WHERE cad.idCartera = :idCartera
        </query>
    </named-query>

    <named-native-query name="Cartera.consultar.bitacora.deudaReal">
        <query>
            SELECT ISNULL(SUM((case when ca.cadDeudaReal > 0 then ca.cadDeudaReal end) ),0) as
            suma
            from CarteraDependiente ca
            where ca.cadCartera= :idCartera
        </query>
    </named-native-query>


    <named-query name="Cartera.Consultar.CarteraDependiente.ByIdCartera">
        <query>
            SELECT NEW com.asopagos.dto.modelo.CarteraDependienteModeloDTO(cad)
            FROM CarteraDependiente cad
            WHERE cad.idCartera = :idCartera
        </query>
    </named-query>
    <named-native-query name="CarteraPendiente.actualizar.Deuda.Real">
        <query>
            UPDATE CarteraDependiente
            SET cadDeudaReal = cadDeudaPresunta
            WHERE cadCartera=:idCartera
            AND cadDeudaPresunta is not null
        </query>
    </named-native-query>

    <named-native-query
            name="Consultar.aportantes.parametrizacion.mayorValorAportes">
        <query>
            SELECT * FROM (
            SELECT
            per.perId,
            CASE WHEN roa.roaTipoAfiliado='TRABAJADOR_INDEPENDIENTE' THEN 'INDEPENDIENTE' ELSE roa.roaTipoAfiliado END
            as tipoAportante,
            (SELECT AVG(apd.apdAporteObligatorio) FROM AporteDetallado apd JOIN AporteGeneral apg on
            apd.apdAporteGeneral =apg.apgId WHERE apd.apdPersona=per.perid AND apd.apdTipoCotizante in (:trabajadores)
            AND apg.apgperiodoAporte BETWEEN :periodoInicial AND :periodoFinal) as valorAportes
            FROM Persona per
            JOIN Afiliado afi on afi.afiPersona = per.perId
            JOIN RolAfiliado roa ON roaAfiliado = afi.afiId
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            roa.roaestadoAfiliado = :estadoAfiliado
            AND roa.roaTipoAfiliado in (:trabajadores)
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion =:estadoOperacion
            and car.carTipoLineaCobro=:lineaCobro
            group by per.perId,roa.roaTipoAfiliado
            ) aportantes order by valorAportes desc
        </query>
    </named-native-query>
    <named-native-query
            name="Consultar.aportantes.parametrizacion.cantidadVecesMoroso">
        <query>
            SELECT * FROM (
            SELECT
            per.perId,
            CASE WHEN roa.roaTipoAfiliado='TRABAJADOR_INDEPENDIENTE' THEN 'INDEPENDIENTE' ELSE roa.roaTipoAfiliado END
            as tipoAportante,
            (SELECT COUNT(car.carid) FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMora,'yyyy-MM-dd') AND
            FORMAT(:periodoFinalMora,'yyyy-MM-dd') AND car.carTipoSolicitante = (CASE WHEN
            roa.roaTipoAfiliado='TRABAJADOR_INDEPENDIENTE' THEN 'INDEPENDIENTE' ELSE roa.roaTipoAfiliado END)) as
            vecesMoroso,
            FROM Persona per
            JOIN Afiliado afi on afi.afiPersona = per.perId
            JOIN RolAfiliado roa ON roaAfiliado = afi.afiId
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            roa.roaestadoAfiliado = :estadoAfiliado
            AND roa.roaTipoAfiliado in (:trabajadores)
            AND (select max(car.carEstadoCartera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion =:estadoOperacion
            and car.carTipoLineaCobro=:lineaCobro
            AND
            EXISTS(SELECT car.carid FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMora,'yyyy-MM-dd') AND
            FORMAT(:periodoFinalMora,'yyyy-MM-dd'))
            group by per.perId, roa.roaTipoAfiliado
            ) aportantes order by vecesMoroso desc
        </query>
    </named-native-query>
    <named-native-query name="Consultar.aportantes.exclusion.convenio">
        <query>
            select per.perId from Persona per
            where per.perId in (Select cap.capPersona from CicloAportante cap, CicloCartera ccr
            where cap.capCicloCartera = ccr.ccrId
            and ccr.ccrEstadoCiclo in (:estadoCicloCartera)
            and cap.capId in (select scm.scmCicloAportante from SolicitudGestionCobroManual scm
            where scm.scmLineaCobro in (:tipoLinea)))
            or per.perId in (select exc.excPersona from ExclusionCartera exc
            where exc.excTipoSolicitante = :tipoSolicitante
            and exc.excTipoExclusionCartera in (:tipoExclusion)
            and exc.excEstadoExclusionCartera in (:estadoExclusion))
            or per.perId in (Select cop.copPersona from ConvenioPago cop
            where cop.copTipoSolicitante = :tipoSolicitante
            and cop.copEstadoConvenioPago in (:estadoConvenio))
        </query>
    </named-native-query>
    <named-native-query name="Cartera.ConsultarAportantes.Total.LineaCobro.ciclo">
        <query>
            select null as suma,COUNT(cap.cappersona) FROM CicloAportante cap
            JOIN CicloCartera ccr ON ccrId = capCicloCartera
            JOIN SolicitudGestionCobroManual ON scmCicloAportante=capId
            WHERE
            scmLineaCobro= :lineaCobro
            AND ccrEstadoCiclo=:estadoCiclo
            AND scmEstadoSolicitud in (:estados)
        </query>
    </named-native-query>
    <named-native-query
            name="Cartera.ConsultarAportantes.Total.LineaCobro.ciclo.usuario.analista">
        <query>
            select null as suma,COUNT(cap.cappersona) FROM CicloAportante cap
            JOIN CicloCartera ccr ON ccrId = capCicloCartera
            JOIN SolicitudGestionCobroManual ON scmCicloAportante=capId
            JOIN Solicitud sol ON scmSolicitudGlobal = sol.solId
            WHERE sol.solDestinatario = :usuarioAnalista
            AND scmLineaCobro= :lineaCobro
            AND ccrEstadoCiclo=:estadoCiclo
            AND scmEstadoSolicitud in (:estados)
        </query>
    </named-native-query>
    <named-query name="Consultar.aportantes.gestion.manual.detalle">
        <query>
            SELECT new com.asopagos.dto.cartera.AportanteGestionManualDTO(cia, per, sgcm, cag, car)
            FROM SolicitudGestionCobroManual sgcm LEFT JOIN sgcm.solicitudGlobal sol,
            CicloAportante cia,Persona per, Cartera car, CarteraAgrupadora cag
            WHERE cia.idCicloAportante=sgcm.idCicloAportante
            AND per.idPersona=cia.idPersona
            AND car.idCartera IN (SELECT MAX(cart.idCartera) FROM Cartera cart WHERE cart.idPersona = per.idPersona
            AND cart.tipoLineaCobro = sgcm.lineaCobro
            AND cia.tipoSolicitanteMovimientoAporteEnum = cart.tipoSolicitante
            AND cia.tipoSolicitanteMovimientoAporteEnum IN (:tipoSolicitantes))
            AND car.idCartera = cag.idCartera
            AND sgcm.estadoSolicitud in (:estados)
            AND (sgcm.solicitudGlobal.destinatario = :destinatario OR :destinatario IS NULL)
            AND cia.idPersona in (:idsPersonas)
        </query>
    </named-query>
    <named-query name="Consultar.aportantes.gestion.manual.sin.detalle">
        <query>
            SELECT new com.asopagos.dto.cartera.AportanteGestionManualDTO(cia, per, sgcm, cag, car)
            FROM SolicitudGestionCobroManual sgcm LEFT JOIN sgcm.solicitudGlobal sol,
            CicloAportante cia,Persona per, Cartera car, CarteraAgrupadora cag
            WHERE cia.idCicloAportante=sgcm.idCicloAportante
            AND per.idPersona=cia.idPersona
            AND car.idCartera IN (SELECT MAX(cart.idCartera) FROM Cartera cart WHERE cart.idPersona = per.idPersona
            AND cart.tipoLineaCobro = sgcm.lineaCobro
            AND cia.tipoSolicitanteMovimientoAporteEnum = cart.tipoSolicitante
            AND cia.tipoSolicitanteMovimientoAporteEnum IN (:tipoSolicitantes))
            AND car.idCartera = cag.idCartera
            AND sgcm.estadoSolicitud in (:estados)
            AND (sgcm.solicitudGlobal.destinatario = :destinatario OR :destinatario IS NULL)
        </query>
    </named-query>

    <named-query name="Cartera.Consultar.Gestion.Cartera.360">
        <query>
            SELECT new com.asopagos.dto.modelo.CarteraModeloDTO(car)
            FROM Cartera car, Persona per
            WHERE per.idPersona = car.idPersona
            AND per.tipoIdentificacion = :tipoIdentificacion
            AND per.numeroIdentificacion = :numeroIdentificacion
            AND car.tipoSolicitante = :tipoAportante
            ORDER BY car.fechaCreacion ASC, car.fechaAsignacionAccion ASC
        </query>
    </named-query>

    <named-query name="Cartera.Consultar.Bitacora.Cartera.360">
        <query>
            SELECT new com.asopagos.cartera.dto.BitacoraCarteraDTO(bca)
            FROM BitacoraCartera bca, Persona per
            WHERE per.idPersona = bca.idPersona
            AND bca.idPersona = :idPersona
            AND bca.actividad IN (:actividad)
            AND bca.tipoSolicitante = :tipoAportante
            AND bca.numeroOperacion = :numeroOperacion
            AND (bca.resultado NOT IN (com.asopagos.enumeraciones.cartera.ResultadoBitacoraCarteraEnum.EN_PROCESO) OR
            bca.resultado IS NULL)
            ORDER BY bca.fecha ASC
        </query>
    </named-query>
    <named-query name="Cartera.consultar.exclusionCartera.inactivar">
        <query>
            SELECT new com.asopagos.dto.cartera.ExclusionCarteraDTO(exc, per)
            FROM ExclusionCartera exc, Persona per
            WHERE GETDATE() &gt; exc.fechaFinalizacion AND
            exc.estadoExclusionCartera=com.asopagos.enumeraciones.cartera.EstadoExclusionCarteraEnum.ACTIVA
            AND exc.idPersona = per.idPersona
        </query>
    </named-query>
    <named-native-query
            name="Consultar.aportantes.empleadores.parametrizacion.mayorValorAportes.linea.cobro">
        <query>
            SELECT
            per.perId,
            'EMPLEADOR' as tipoAportante,
            (SELECT AVG(ap.apgValTotalApoObligatorio) FROM AporteGeneral ap WHERE ap.apgEmpresa=emp.empId AND
            ap.apgperiodoAporte BETWEEN :periodoInicialEmpleador AND :periodoFinalEmpleador) as valorAportes
            FROM Empleador empl JOIN Empresa emp ON empl.empempresa=emp.empid
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            JOIN Ubicacion ubiAuto ON ube.ubeUbicacion = ubiAuto.ubiId
            JOIN Persona per on emp.emppersona = per.perid
            JOIN RolContactoEmpleador rol ON rol.rceEmpleador = empl.empId
            JOIN Ubicacion ubi ON ubi.ubiId= rol.rceUbicacion
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            empl.empestadoEmpleador = :estadoAfiliacion
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion = :estadoOperacion
            AND ube.ubeTipoUbicacion=:tipoUbicacion
            AND car.carTipoLineaCobro=:lineaCobro
            group by per.perId,emp.empid
            order by valorAportes desc
        </query>
    </named-native-query>
    <named-native-query
            name="Consultar.aportantes.empleadores.parametrizacion.cantidadVecesMoroso.linea.cobro">
        <query>
            SELECT
            per.perId,
            'EMPLEADOR' as tipoAportante,
            (SELECT COUNT(car.carid) FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMoraEmpleador,'yyyy-MM-dd')
            AND FORMAT(:periodoFinalMoraEmpleador,'yyyy-MM-dd')) as vecesMoroso
            FROM Empleador empl JOIN Empresa emp ON empl.empempresa=emp.empid
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            JOIN Ubicacion ubiAuto ON ube.ubeUbicacion = ubiAuto.ubiId
            JOIN Persona per on emp.emppersona = per.perid
            JOIN RolContactoEmpleador rol ON rol.rceEmpleador = empl.empId
            JOIN Ubicacion ubi ON ubi.ubiId= rol.rceUbicacion
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            empl.empestadoEmpleador = :estadoAfiliacion
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion = :estadoOperacion
            AND ube.ubeTipoUbicacion=:tipoUbicacion
            and car.carTipoLineaCobro=:lineaCobro
            AND
            EXISTS(SELECT car.carid FROM Cartera car WHERE car.carestadocartera=:estadoCartera AND
            car.carpersona=per.perid AND car.carperiodoDeuda BETWEEN FORMAT(:periodoInicialMoraEmpleador,'yyyy-MM-dd')
            AND FORMAT(:periodoFinalMoraEmpleador,'yyyy-MM-dd'))
            group by per.perId,emp.empid
            order by vecesMoroso desc
        </query>
    </named-native-query>
    <named-native-query
            name="Consultar.aportantes.empleadores.parametrizacion.cantidadTrabajadores.linea.cobro">
        <query>
            SELECT * FROM (
            SELECT
            per.perId,
            'EMPLEADOR' as tipoAportante,
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado) as cantidadTrabajadores
            FROM Empleador empl JOIN Empresa emp ON empl.empempresa=emp.empid
            JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            JOIN Ubicacion ubiAuto ON ube.ubeUbicacion = ubiAuto.ubiId
            JOIN Persona per on emp.emppersona = per.perid
            JOIN RolContactoEmpleador rol ON rol.rceEmpleador = empl.empId
            JOIN Ubicacion ubi ON ubi.ubiId= rol.rceUbicacion
            JOIN Cartera car on car.carpersona=per.perid
            WHERE
            empl.empestadoEmpleador = :estadoAfiliacion
            AND (select max(car.carEStadoCArtera) FROM Cartera car WHERE car.carpersona=per.perid and
            car.carEstadoOperacion=:estadoOperacion) in (:estadosCartera)
            AND car.carestadoOperacion = :estadoOperacion
            AND ube.ubeTipoUbicacion=:tipoUbicacion
            and car.carTipoLineaCobro=:lineaCobro
            AND
            (SELECT COUNT(roa.roaid) FROM RolAfiliado roa JOIN Empleador emple on roa.roaempleador=emple.empid WHERE
            emple.empid = empl.empid AND roa.roaEstadoAfiliado=:estadoAfiliado)>=:cantidadActivos
            group by per.perId,empl.empid
            ) aportantes order by cantidadTrabajadores desc
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultarEstadoCartera">
        <query>
            SELECT CASE WHEN MAX(car.carEstadoCartera) IS NULL THEN 'AL_DIA' ELSE MAX(car.carEstadoCartera) END
            FROM Cartera car,Persona per
            WHERE car.carPersona= per.perId  AND per.perTipoIdentificacion= :tipoIdentificacion AND
            per.perNumeroIdentificacion= :numeroIdentificacion
                 AND car.carTipoSolicitante = :tipoSolicitante
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.Numero.Operacion.Cartera">
        <query>
            SELECT cagNumeroOperacion
            FROM CarteraAgrupadora
            JOIN Cartera ON carId = cagCartera
            WHERE cagCartera = :idCartera
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.Vigencia.Operacion.Cartera">
        <query>
            SELECT CASE WHEN EXISTS (
            SELECT 1
            FROM CarteraAgrupadora
            JOIN Cartera ON carId = cagCartera
            WHERE carEstadoOperacion = 'VIGENTE'
            AND cagNumeroOperacion =   :numOperacion
            ) THEN 1 ELSE 0 END AS Resultado
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.Aportantes.Vigentes.Cartera">
        <query>
            SELECT DISTINCT
            per.perTipoIdentificacion,
            per.perNumeroIdentificacion,
            per.perDigitoVerificacion,
            car.carTipoSolicitante,
            per.perRazonSocial,
            per.perPrimerNombre,
            per.perSegundoNombre,
            per.perPrimerApellido,
            per.perSegundoApellido,
            (SELECT MAX(carEstadoCartera) FROM Cartera WHERE carPersona = car.carPersona) estadoCartera,
            car.carPersona
            FROM Persona per
            JOIN Cartera car ON carPersona = per.perId
            WHERE car.carEstadoOperacion = 'VIGENTE'
            AND (per.perTipoIdentificacion = :tipoIdentificacion OR :tipoIdentificacion IS NULL)
            AND (per.perNumeroIdentificacion = :numeroIdentificacion OR :numeroIdentificacion IS NULL)
            AND (per.perDigitoVerificacion = :digitoVerificacion OR :digitoVerificacion IS NULL)
            AND (per.perRazonSocial LIKE :razonSocial OR :razonSocial IS NULL)
            AND (per.perPrimerNombre LIKE :primerNombre OR :primerNombre IS NULL)
            AND (per.perSegundoNombre LIKE :segundoNombre OR :segundoNombre IS NULL)
            AND (per.perPrimerApellido LIKE :primerApellido OR :primerApellido IS NULL)
            AND (per.perSegundoApellido LIKE :segundoApellido OR :segundoApellido IS NULL)
            AND (car.carTipoSolicitante = :tipoSolicitante OR :tipoSolicitante IS NULL)
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.EstadoSolicitud.GestionCobro">
        <query>
            SELECT estado
            FROM
            (SELECT sge.sgeEstado estado, sol.solId idSolicitud
            FROM Solicitud sol
            JOIN SolicitudGestionCobroElectronico sge ON sol.solId = sge.sgeSolicitud
            WHERE sge.sgeTipoAccionCobro = :tipoAccionCobro
            AND sge.sgeCartera = :idCartera
            AND sge.sgeEstado IS NOT NULL
            UNION
            SELECT dsg.dsgEstado estado, sol.solId idSolicitud
            FROM Solicitud sol
            JOIN SolicitudGestionCobroFisico sgf ON sol.solId = sgf.sgfSolicitud
            JOIN DetalleSolicitudGestionCobro dsg ON sgf.sgfId IN (dsg.dsgSolicitudPrimeraRemision,
            dsg.dsgSolicitudSegundaRemision)
            WHERE sgf.sgfTipoAccionCobro = :tipoAccionCobro
            AND dsg.dsgCartera = :idCartera
            AND dsg.dsgEstado IS NOT NULL) tabla
            ORDER BY idSolicitud DESC
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.Cotizantes.Aportante.Cartera">
        <query>
            SELECT DISTINCT per.perTipoIdentificacion,
            per.perNumeroIdentificacion,
            per.perPrimerNombre,
            per.perSegundoNombre,
            per.perPrimerApellido,
            per.perSegundoApellido,
            cad.cadDeudaPresunta,
            cad.cadDeudaReal deudaReal,
            roa.roaEstadoAfiliado,
            cad.cadId,
            per.perId,
            cad.cadEstadoOperacion,
            cad.cadCartera,
            cad.cadAgregadoManual
            FROM CarteraDependiente cad
            JOIN Cartera car ON car.carId = cad.cadCartera
            JOIN Persona per ON cad.cadPersona = per.perId
            JOIN Afiliado afi ON afi.afiPersona = per.perId
            JOIN RolAfiliado roa ON roa.roaAfiliado = afi.afiId
            WHERE car.carPersona = (
            SELECT perAportante.perId
            FROM Persona perAportante
            WHERE perAportante.perNumeroIdentificacion = :numeroIdentificacion
            AND perAportante.perTipoIdentificacion = :tipoIdentificacion)
            AND car.carTipoSolicitante = :tipoSolicitante
            AND (:idCartera is null or car.carId =:idCartera)
            AND (:lineaCobro is null or car.carTipoLineaCobro = :lineaCobro)
            AND roa.roaTipoAfiliado = 'TRABAJADOR_DEPENDIENTE'
            AND (roa.roaEstadoAfiliado IS NULL OR roa.roaEstadoAfiliado = 'ACTIVO')
            AND roa.roaEmpleador IN (SELECT empl.empId FROM Empleador empl JOIN Empresa emp ON empl.empEmpresa =
            emp.empId WHERE emp.empPersona = car.carPersona)
            AND CONVERT(VARCHAR(7), car.carPeriodoDeuda, 20) = :periodo
            UNION
            SELECT DISTINCT
            per.perTipoIdentificacion,
            per.perNumeroIdentificacion,
            per.perPrimerNombre,
            per.perSegundoNombre,
            per.perPrimerApellido,
            per.perSegundoApellido,
            cad.cadDeudaPresunta,
            cad.cadDeudaReal deudaReal,
            eape.roaEstadoAfiliado,
            cad.cadId,
            per.perId,
            cad.cadEstadoOperacion,
            cad.cadCartera,
            cad.cadAgregadoManual
            FROM CarteraDependiente cad
            JOIN Cartera car ON car.carId = cad.cadCartera
            JOIN Persona per ON cad.cadPersona = per.perId
            JOIN VW_EstadoAfiliacionPersonaEmpresa eape on eape.perIdEmpleador = car.carPersona AND eape.perId =
            cad.cadPersona
            WHERE car.carPersona = (
            SELECT perAportante.perId
            FROM Persona perAportante
            WHERE perAportante.perNumeroIdentificacion = :numeroIdentificacion
            AND perAportante.perTipoIdentificacion = :tipoIdentificacion)
            AND car.carTipoSolicitante = :tipoSolicitante
            AND (:idCartera is null or car.carId =:idCartera)
            AND (:lineaCobro is null or car.carTipoLineaCobro = :lineaCobro)
            AND :tipoSolicitante = 'EMPLEADOR'
            AND CONVERT(VARCHAR(7), car.carPeriodoDeuda, 20) = :periodo
            UNION
            SELECT
            per.perTipoIdentificacion,
            per.perNumeroIdentificacion,
            per.perPrimerNombre,
            per.perSegundoNombre,
            per.perPrimerApellido,
            per.perSegundoApellido,
            car.carDeudaPresunta,
            0 deudaReal,
            roa.roaEstadoAfiliado,
            null,
            per.perId,
            car.carEstadoOperacion,
            car.carId,
            null
            FROM Cartera car
            JOIN Persona per ON car.carPersona = per.perId
            JOIN Afiliado afi ON afi.afiPersona = per.perId
            JOIN RolAfiliado roa ON roa.roaAfiliado = afi.afiId
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            AND car.carTipoSolicitante = :tipoSolicitante
            AND (:idCartera is null or car.carId =:idCartera)
            AND (:lineaCobro is null or car.carTipoLineaCobro = :lineaCobro)
            AND roa.roaTipoAfiliado = (CASE WHEN :tipoSolicitante = 'INDEPENDIENTE' THEN 'TRABAJADOR_INDEPENDIENTE'
            WHEN :tipoSolicitante = 'PENSIONADO' THEN 'PENSIONADO' END)
            AND (roa.roaEstadoAfiliado IS NULL OR roa.roaEstadoAfiliado = 'ACTIVO')
            AND CONVERT(VARCHAR(7), car.carPeriodoDeuda, 20) = :periodo
            UNION
            SELECT DISTINCT
            per.perTipoIdentificacion,
            per.perNumeroIdentificacion,
            per.perPrimerNombre,
            per.perSegundoNombre,
            per.perPrimerApellido,
            per.perSegundoApellido,
            car.carDeudaPresunta,
            0 deudaReal,
            eapi.roaEstadoAfiliado,
            null,
            per.perId,
            car.carEstadoOperacion,
            car.carId,
            null
            FROM Cartera car
            JOIN Persona per ON car.carPersona = per.perId
            JOIN VW_EstadoAfiliacionPersonaIndependiente eapi ON eapi.perId = per.perId
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            AND car.carTipoSolicitante = :tipoSolicitante
            AND (:idCartera is null or car.carId =:idCartera)
            AND (:lineaCobro is null or car.carTipoLineaCobro = :lineaCobro)
            AND :tipoSolicitante ='INDEPENDIENTE'
            AND CONVERT(VARCHAR(7), car.carPeriodoDeuda, 20) = :periodo
            UNION
            SELECT DISTINCT
            per.perTipoIdentificacion,
            per.perNumeroIdentificacion,
            per.perPrimerNombre,
            per.perSegundoNombre,
            per.perPrimerApellido,
            per.perSegundoApellido,
            car.carDeudaPresunta,
            0 deudaReal,
            eapp.roaEstadoAfiliado,
            null,
            per.perId,
            car.carEstadoOperacion,
            car.carId,
            null
            FROM Cartera car
            JOIN Persona per ON car.carPersona = per.perId
            JOIN VW_EstadoAfiliacionPersonaPensionado eapp ON eapp.perId = per.perId
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            AND car.carTipoSolicitante = :tipoSolicitante
            AND (:idCartera is null or car.carId =:idCartera)
            AND (:lineaCobro is null or car.carTipoLineaCobro = :lineaCobro)
            AND :tipoSolicitante ='PENSIONADO'
            AND CONVERT(VARCHAR(7), car.carPeriodoDeuda, 20) = :periodo
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.datos.porIdCartera">
        <description>Consulta que debe ser paginada por la cantidad de ids como parametro</description>
        <query>
            SELECT carId, carPersona, carTipoSolicitante, cagNumeroOperacion
            FROM Cartera
            INNER JOIN CarteraAgrupadora ON carId = cagCartera
            WHERE carId IN (:listaIdCartera)
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Actualizar.Exlusion.Cartera">
        <query>
            UPDATE ExclusionCartera
            SET excEstadoExclusionCartera='NO_ACTIVA'
            WHERE GETDATE() > excFechaFin
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.Bitacora.Fiscalizacion">
        <query>
            SELECT
            acr.acrFecha,
            acr.acrActividadCartera,
            'PERSONAL' medio,
            acr.acrResultadoCartera,
            sol.solDestinatario,
            cap.capPersona,
            cap.capTipoSolicitante,
            sol.solNumeroRadicacion,
            acr.acrId
            FROM ActividadCartera acr
            JOIN CicloAportante cap ON cap.capId = acr.acrCicloAportante
            JOIN CicloCartera ccr ON ccr.ccrId = cap.capCicloCartera
            JOIN SolicitudFiscalizacion sfi ON sfi.sfiCicloAportante = cap.capId
            JOIN Solicitud sol ON sol.solId = sfi.sfiSolicitudGlobal
            WHERE cap.capTipoSolicitante = :tipoAportante
            AND cap.capPersona = :idPersona
            AND sol.solNumeroRadicacion = :numeroRadicado
        </query>
    </named-native-query>

    <named-native-query name="Consultar.Documentos.Bitacora.Fiscalizacion">
        <query>
            SELECT adoIdentificadorDocumento
            FROM ActividadDocumento
            WHERE adoActividadCartera = :idActividad
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.convenios.pago.filtros">
        <query>
            SELECT per.perTipoIdentificacion, per.perNumeroIdentificacion,
            CASE WHEN per.perRazonSocial IS NOT NULL THEN per.perRazonSocial ELSE (
            per.perPrimerNombre + CASE WHEN per.perSegundoNombre IS NOT NULL THEN ' ' + per.perSegundoNombre ELSE '' END
            + ' ' + per.perPrimerApellido + CASE WHEN per.perSegundoApellido IS NOT NULL THEN ' ' +
            per.perSegundoApellido ELSE '' END) END,
            cop.copId, cop.copEstadoConvenioPago, cop.copFechaRegistro
            FROM Persona per, ConvenioPago cop
            WHERE per.perId = cop.copPersona
            AND (per.perTipoIdentificacion = :tipoIdentificacion OR :tipoIdentificacion IS NULL)
            AND (per.perNumeroIdentificacion = :numeroIdentificacion OR :numeroIdentificacion IS NULL)
            AND (per.perRazonSocial LIKE :razonSocial OR :razonSocial IS NULL)
            AND (per.perPrimerNombre LIKE :primerNombre OR :primerNombre IS NULL)
            AND (per.perSegundoNombre LIKE :segundoNombre OR :segundoNombre IS NULL)
            AND (per.perPrimerApellido LIKE :primerApellido OR :primerApellido IS NULL)
            AND (per.perSegundoApellido LIKE :segundoApellido OR :segundoApellido IS NULL)
            AND (cop.copTipoSolicitante LIKE :tipoSolicitante OR :tipoSolicitante IS NULL)
            AND (cop.copId LIKE :idConvenioPago OR :idConvenioPago IS NULL)
            AND (cop.copEstadoConvenioPago LIKE :estadoConvenioPago OR :estadoConvenioPago IS NULL)
            AND (:fechaRegistroInicio IS NULL OR (cop.copFechaRegistro BETWEEN :fechaRegistroInicio AND
            :fechaRegistroFin))
        </query>
    </named-native-query>
    <named-native-query name="Cartera.DetalleSolicitudGestionCobro.consultar.porIdCartera"
                        result-set-mapping="Cartera.DetalleSolicitudGestionCobro.consultar.porIdCartera.mapping">
        <description>Consulta los detalles de una solicitud de gestion de cobro.</description>
        <query>
            SELECT dsg.*
            FROM SolicitudGestionCobroFisico sgf
            LEFT JOIN DetalleSolicitudGestionCobro dsg ON dsg.dsgSolicitudPrimeraRemision = sgf.sgfId OR
            dsg.dsgSolicitudSegundaRemision = sgf.sgfId
            WHERE dsg.dsgCartera in (:listaIdsCartera) AND sgf.sgfSolicitud = :idSolicitudGlobal
        </query>
    </named-native-query>
    <named-query name="Aporte.consultar.empleador.numero.identificacion">
        <query>
            SELECT empl FROM Empleador empl
            JOIN FETCH empl.empresa e
            JOIN FETCH e.persona p
            LEFT JOIN FETCH p.ubicacionPrincipal u
            LEFT JOIN FETCH e.codigoCIIU c
            LEFT JOIN FETCH e.arl a
            WHERE p.numeroIdentificacion =:numeroIdentificacion
            ORDER BY p.numeroIdentificacion
        </query>
    </named-query>
    <named-query name="Cartera.MetodoEnvioComunicadoEnum.consultarMetodoCriterioGestionCobro">
        <query>
            SELECT DISTINCT pcr.metodo FROM ParametrizacionCriterioGestionCobro pcr
            WHERE pcr.activa=:activa AND pcr.lineaCobro=:lineaCobro
        </query>
    </named-query>
    <named-query name="Cartera.DatoTemporalCartera.eliminar">
        <description>se encarga de actualizar la activacion del metodo anterior para la linea de cobro 1</description>
        <query>
            DELETE FROM DatoTemporalCartera dtc WHERE dtc.numeroOperacion = :numeroOperacion
        </query>
    </named-query>
    <named-query name="Cartera.consultar.actividades.cartera.fiscalizacion">
        <query>
            SELECT new com.asopagos.dto.modelo.ActividadCarteraModeloDTO (act)
            FROM ActividadCartera act, SolicitudFiscalizacion sf
            WHERE act.idCicloAportante=sf.idCicloAportante
            AND sf.solicitudGlobal.idSolicitud=:idSolicitud
        </query>
    </named-query>
    <named-query name="Cartera.consultar.agendas.cartera.fiscalizacion">
        <query>
            SELECT new com.asopagos.dto.modelo.AgendaCarteraModeloDTO (agr)
            FROM AgendaCartera agr, SolicitudFiscalizacion sf
            WHERE agr.idCicloAportante=sf.idCicloAportante
            AND sf.solicitudGlobal.idSolicitud=:idSolicitud
        </query>
    </named-query>
    <named-query name="cartera.documentos.actividad.cartera">
        <query>
            SELECT new com.asopagos.dto.modelo.ActividadDocumentoModeloDTO (doc)
            FROM ActividadDocumento doc
            WHERE doc.idActividadCartera=:idActividadCartera
        </query>
    </named-query>
    <named-query name="Cartera.consultar.actividades.cartera">
        <query>
            SELECT new com.asopagos.dto.modelo.ActividadCarteraModeloDTO (act)
            FROM ActividadCartera act, CarteraAgrupadora cag WHERE act.idCartera=cag.idCartera
            AND cag.numeroOperacion=:numeroOperacion AND act.esVisible=1
        </query>
    </named-query>
    <named-query name="Cartera.consultar.agendas.cartera">
        <query>
            SELECT new com.asopagos.dto.modelo.AgendaCarteraModeloDTO (agr)
            FROM AgendaCartera agr, CarteraAgrupadora cag WHERE agr.idCartera=cag.idCartera
            AND cag.numeroOperacion=:numeroOperacion AND agr.esVisible=1
        </query>
    </named-query>
    <named-query name="Cartera.actualizar.actividades.cartera">
        <query>
            UPDATE ActividadCartera act SET act.esVisible=0 WHERE act.esVisible=1
            AND act.idCartera IN (SELECT cag.idCartera FROM CarteraAgrupadora cag WHERE
            cag.numeroOperacion=:numeroOperacion)
        </query>
    </named-query>
    <named-query name="Cartera.actualizar.agendas.cartera">
        <query>
            UPDATE AgendaCartera agr SET agr.esVisible=0 WHERE agr.esVisible=1
            AND agr.idCartera IN (SELECT cag.idCartera FROM CarteraAgrupadora cag WHERE
            cag.numeroOperacion=:numeroOperacion)
        </query>
    </named-query>

    <named-native-query name="Novedad.consultar.periodo.aporte.por.reg.detallado">
        <query>
            select TOP 1 apgPeriodoAporte
            FROM AporteGeneral apg
            JOIN AporteDetallado apd ON apd.apdAporteGeneral = apg.apgId
            WHERE apd.apdRegistroDetallado = :regDetallado
        </query>
    </named-native-query>
    <named-query name="Cartera.consultar.parametrizacion.accion.2d">
        <query>
            SELECT ac.anexaLiquidacion from AccionCobro2D ac
        </query>
    </named-query>
    <named-query name="Cartera.consultar.parametrizacion.accion.2e">
        <query>
            SELECT ac.anexaLiquidacion from AccionCobro2E ac
        </query>
    </named-query>
        <named-native-query name="Cartera.consultar.parametrizacion.accion.2c">
        <query>
            SELECT ac.aocAnexoLiquidacion from AccionCobro2C ac
        </query>
    </named-native-query>


    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERACrearCartera"
            procedure-name="dbo.USP_ExecuteCARTERACrearCartera">
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERAActualizarDetalleSolicitudGestionCobroOK"
            procedure-name="dbo.USP_ExecuteCARTERAActualizarDetalleSolicitudGestionCobroOK">
        <parameter class="java.lang.String" mode="IN" name="filtros"/>
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERAActualizarCartera"
            procedure-name="dbo.USP_ExecuteCARTERAActualizarCartera">
        <parameter class="java.lang.String" mode="IN" name="tipoIdentificacion"/>
        <parameter class="java.lang.String" mode="IN" name="numeroIdentificacion"/>
        <parameter class="java.lang.String" mode="IN" name="periodoEvaluacion"/>
        <parameter class="java.lang.String" mode="IN" name="tipoAportante"/>
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERACalcularDeudaPresuntaEmpleadores"
            procedure-name="dbo.USP_ExecuteCARTERACalcularDeudaPresuntaEmpleadores">
        <parameter class="java.lang.Long" mode="IN" name="idPersonaEmpleador"/>
        <parameter class="java.lang.Long" mode="IN" name="idEmpleador"/>
        <parameter class="java.lang.Long" mode="IN" name="idEmpresa"/>
        <parameter class="java.lang.String" mode="IN" name="periodoEvaluacion"/>
        <parameter class="java.lang.Boolean" mode="IN" name="crearRegistro"/>
        <parameter class="java.lang.Long" mode="IN" name="idCartera"/>
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERACalcularDeudaPresuntaIndependientes"
            procedure-name="dbo.USP_ExecuteCARTERACalcularDeudaPresuntaIndependientes">
        <parameter class="java.lang.Long" mode="IN" name="idPersona"/>
        <parameter class="java.lang.Long" mode="IN" name="idRolAfiliado"/>
        <parameter class="java.lang.String" mode="IN" name="periodoEvaluacion"/>
        <parameter class="java.lang.Boolean" mode="IN" name="crearRegistro"/>
        <parameter class="java.lang.Long" mode="IN" name="idCartera"/>
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERACalcularDeudaPresuntaPensionados"
            procedure-name="dbo.USP_ExecuteCARTERACalcularDeudaPresuntaPensionados">
        <parameter class="java.lang.Long" mode="IN" name="idPersona"/>
        <parameter class="java.lang.Long" mode="IN" name="idRolAfiliado"/>
        <parameter class="java.lang.String" mode="IN" name="periodoEvaluacion"/>
        <parameter class="java.lang.Boolean" mode="IN" name="crearRegistro"/>
        <parameter class="java.lang.Long" mode="IN" name="idCartera"/>
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERAAsignarAccionCobro"
            procedure-name="dbo.USP_ExecuteCARTERAAsignarAccionCobro">
        <parameter class="java.lang.String" mode="IN" name="accionCobroFutura"/>
        <parameter class="java.lang.String" mode="IN" name="lineaCobro"/>
        <parameter class="java.lang.String" mode="IN" name="metodo"/>
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_GET_GestorValorSecuencia"
            procedure-name="dbo.USP_GET_GestorValorSecuencia">
        <parameter class="java.lang.Integer" mode="IN" name="iCantidadValores"/>
        <parameter class="java.lang.String" mode="IN" name="sNombreSecuencia"/>
        <parameter class="java.lang.Long" mode="OUT" name="iPrimerValor"/>
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERAConsultarAportantesGestionCobro"
            procedure-name="dbo.USP_ExecuteCARTERAConsultarAportantesGestionCobro">

        <parameter class="java.lang.String" mode="IN" name="estadoAfiliacion"/>
        <parameter class="java.lang.String" mode="IN" name="estadoCartera"/>
        <parameter class="java.lang.String" mode="IN" name="lineaCobro"/>
        <parameter class="java.lang.String" mode="IN" name="estadoOperacion"/>
        <parameter class="java.math.BigDecimal" mode="IN" name="valorPromedioAportes"/>
        <parameter class="java.lang.String" mode="IN" name="periodoAporteInicial"/>
        <parameter class="java.lang.String" mode="IN" name="periodoAporteFinal"/>
        <parameter class="java.lang.Integer" mode="IN" name="trabajadoresActivos"/>
        <parameter class="java.lang.Boolean" mode="IN" name="aplicaCriterio"/>
        <parameter class="java.util.Date" mode="IN" name="periodoEvaluarInicial"/>
        <parameter class="java.util.Date" mode="IN" name="periodoEvaluarFinal"/>
        <parameter class="java.lang.Long" mode="IN" name="corte"/>
        <parameter class="java.math.BigDecimal" mode="IN" name="criterio1Promedio"/>
        <parameter class="java.math.BigDecimal" mode="IN" name="criterio2Activos"/>
        <parameter class="java.math.BigDecimal" mode="IN" name="criterio3VecesMoroso"/>
    </named-stored-procedure-query>

    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERAConsultarAportantesGestionCobroPersonas"
            procedure-name="dbo.USP_ExecuteCARTERAConsultarAportantesGestionCobroPersonas">

        <parameter class="java.lang.String" mode="IN" name="estadoAfiliacion"/>
        <parameter class="java.lang.String" mode="IN" name="estadoCartera"/>
        <parameter class="java.lang.String" mode="IN" name="lineaCobro"/>
        <parameter class="java.lang.String" mode="IN" name="estadoOperacion"/>
        <parameter class="java.math.BigDecimal" mode="IN" name="valorPromedioAportes"/>
        <parameter class="java.lang.String" mode="IN" name="periodoAporteInicial"/>
        <parameter class="java.lang.String" mode="IN" name="periodoAporteFinal"/>
        <parameter class="java.lang.Boolean" mode="IN" name="aplicaCriterio"/>
        <parameter class="java.util.Date" mode="IN" name="periodoEvaluarInicial"/>
        <parameter class="java.util.Date" mode="IN" name="periodoEvaluarFinal"/>
        <parameter class="java.lang.Long" mode="IN" name="corte"/>
        <parameter class="java.math.BigDecimal" mode="IN" name="criterio1Promedio"/>
        <parameter class="java.math.BigDecimal" mode="IN" name="criterio3VecesMoroso"/>
        <parameter class="java.lang.String" mode="IN" name="tipoSolicitante"/>
        <parameter class="java.lang.String" mode="IN" name="tipoAfiliado"/>
    </named-stored-procedure-query>
    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERAConsultarAportantesDesafiliacion"
            procedure-name="dbo.USP_ExecuteCARTERAConsultarAportantesDesafiliacion">
        <parameter class="java.lang.String" mode="IN" name="tipoSolicitante"/>
        <parameter class="java.lang.String" mode="IN" name="lineaCobro"/>
        <parameter class="java.lang.String" mode="IN" name="estadoOperacion"/>
        <parameter class="java.lang.String" mode="IN" name="estadoAfiliado"/>
    </named-stored-procedure-query>
    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERAConsultarGestionPreventiva"
            procedure-name="dbo.USP_ExecuteCARTERAConsultarGestionPreventiva">
        <parameter class="java.lang.String" mode="IN" name="periodoInicialEmpleador"/>
        <parameter class="java.lang.String" mode="IN" name="periodoFinalEmpleador"/>
        <parameter class="java.lang.String" mode="IN" name="periodoInicial"/>
        <parameter class="java.lang.String" mode="IN" name="periodoFinal"/>
        <parameter class="java.util.Date" mode="IN" name="periodoInicialMoraEmpleador"/>
        <parameter class="java.util.Date" mode="IN" name="periodoFinalMoraEmpleador"/>
        <parameter class="java.util.Date" mode="IN" name="periodoInicialMora"/>
        <parameter class="java.util.Date" mode="IN" name="periodoFinalMora"/>
        <parameter class="java.lang.String" mode="IN" name="tipoAfiliadoEnum"/>
        <parameter class="java.lang.String" mode="IN" name="tipoSolicitanteEnum"/>
        <parameter class="java.lang.Boolean" mode="IN" name="noAplicarCriterioCantVecesMoroso"/>
        <parameter class="java.lang.Boolean" mode="IN" name="esAutomatico"/>
        <parameter class="java.lang.Boolean" mode="IN" name="estadoMoroso"/>
        <parameter class="java.lang.Boolean" mode="IN" name="estadoAlDia"/>
        <parameter class="java.lang.Boolean" mode="IN" name="personas"/>
        <parameter class="java.math.BigDecimal" mode="IN" name="valorAportes"/>
        <parameter class="java.lang.Long" mode="IN" name="cantidadTrabajadoresActivos"/>
        <parameter class="java.lang.Short" mode="IN" name="cantidadDiaHabilEjecucioAutomatica"/>
        <parameter class="java.lang.Short" mode="IN" name="diaHabilActual"/>
    </named-stored-procedure-query>
    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERAConsultarGestionFiscalizacion"
            procedure-name="dbo.USP_ExecuteCARTERAConsultarGestionFiscalizacion">
        <parameter class="java.lang.String" mode="IN" name="periodoInicialEmpleador"/>
        <parameter class="java.lang.String" mode="IN" name="periodoFinalEmpleador"/>
        <parameter class="java.lang.String" mode="IN" name="periodoInicial"/>
        <parameter class="java.lang.String" mode="IN" name="periodoFinal"/>
        <parameter class="java.util.Date" mode="IN" name="periodoInicialMoraEmpleador"/>
        <parameter class="java.util.Date" mode="IN" name="periodoFinalMoraEmpleador"/>
        <parameter class="java.util.Date" mode="IN" name="periodoInicialMora"/>
        <parameter class="java.util.Date" mode="IN" name="periodoFinalMora"/>
        <parameter class="java.lang.String" mode="IN" name="tipoAfiliadoEnum"/>
        <parameter class="java.lang.String" mode="IN" name="tipoSolicitanteEnum"/>
        <parameter class="java.lang.Boolean" mode="IN" name="noAplicarCriterioCantVecesMoroso"/>
        <parameter class="java.lang.Boolean" mode="IN" name="estadoMoroso"/>
        <parameter class="java.lang.Boolean" mode="IN" name="estadoAlDia"/>
        <parameter class="java.lang.Boolean" mode="IN" name="personas"/>
        <parameter class="java.math.BigDecimal" mode="IN" name="valorAportes"/>
        <parameter class="java.lang.Long" mode="IN" name="cantidadTrabajadoresActivos"/>
        <parameter class="java.lang.Long" mode="IN" name="corteEntidades"/>
        <parameter class="java.lang.Boolean" mode="IN" name="preventiva"/>
        <parameter class="java.lang.Boolean" mode="IN" name="validacionesPILA"/>
        <parameter class="java.util.Date" mode="IN" name="fechaInicialEmpleadorP"/>
        <parameter class="java.util.Date" mode="IN" name="fechaFinalEmpleadorP"/>
        <parameter class="java.util.Date" mode="IN" name="fechaInicialP"/>
        <parameter class="java.util.Date" mode="IN" name="fechaFinalP"/>
        <parameter class="java.lang.String" mode="IN" name="motivoFiscalizacionEnum"/>
        <parameter class="java.lang.String" mode="IN" name="estadoAfiliacionCartera"/>
        <parameter class="java.lang.Boolean" mode="IN" name="incluirLC2"/>
        <parameter class="java.lang.Boolean" mode="IN" name="incluirLC3"/>
    </named-stored-procedure-query>
    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERAActualizarCarteraOK"
            procedure-name="dbo.USP_ExecuteCARTERAActualizarCarteraOK">
    </named-stored-procedure-query>
    <sql-result-set-mapping name="Cartera.DetalleSolicitudGestionCobro.consultar.porIdCartera.mapping">
        <entity-result entity-class="com.asopagos.entidades.ccf.cartera.DetalleSolicitudGestionCobro"></entity-result>
    </sql-result-set-mapping>
    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_ExecuteCARTERAConsultarCarteraAportante"
            procedure-name="dbo.USP_ExecuteCARTERAConsultarCarteraAportante">
        <parameter class="java.lang.String" mode="IN" name="tipoIdentificacion"/>
        <parameter class="java.lang.String" mode="IN" name="numeroIdentificacion"/>
        <parameter class="java.lang.String" mode="IN" name="tipoAportante"/>
    </named-stored-procedure-query>
    <named-stored-procedure-query
            name="Cartera.StoredProcedures.USP_GET_ConsultarDeudaPresunta"
            procedure-name="dbo.USP_GET_ConsultarDeudaPresunta">
        <parameter class="java.lang.String" mode="IN" name="tipoIdentificacion"/>
        <parameter class="java.lang.String" mode="IN" name="numeroIdentificacion"/>
        <parameter class="java.lang.String" mode="IN" name="periodoEvaluacion"/>
        <parameter class="java.lang.String" mode="IN" name="tipoAportante"/>
        <parameter class="java.math.BigDecimal" mode="OUT" name="deuda"/>
    </named-stored-procedure-query>

    <named-native-query name="Cartera.guardar.registro.persona">
        <query>
            Insert INTO Persona
            (perTipoIdentificacion,perNumeroIdentificacion,perUbicacionPrincipal,perPrimerNombre,perPrimerApellido)
            VALUES (:tipoIdentificacion,:numeroIdentificacion,:ubicacionPrincipal,:primerNombre,:primerApellido)
        </query>
    </named-native-query>

    <named-native-query name="Cartera.guardar.registro.aportante">
        <query>
            Insert INTO Cartera
            (carId,carDeudaPresunta,carEstadoCartera,carEstadoOperacion,carFechaCreacion,carPersona,carPeriodoDeuda,
            carTipoAccionCobro,carTipoDeuda,carTipoLineaCobro,carTipoSolicitante)
            VALUES (:carId,:deudaPresunta,
            :estadoCartera,:estadoOperacion,:fechaCreacion,:idPersona,:periodoDeuda,:tipoAccionCobro,
            :tipoDeuda,:tipoLineaCobro,:tipoSolicitante)
        </query>
    </named-native-query>

    <named-native-query name="Cartera.guardar.registro.cartera.agrupadora">
        <query>
            INSERT INTO CarteraAgrupadora(cagNumeroOperacion,cagCartera)
            VALUES(:numeroOperacion,:idCartera)
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.estado.aportante">
        <query>
            SELECT emp.empEstadoEmpleador
            from Persona p
            INNER JOIN Empresa em on p.perId = em.empPersona
            INNER JOIN Empleador emp on em.empId = emp.empEmpresa
            WHERE p.perId=:idPersona
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.numero.operacion">
        <query>
            SELECT ca.cagNumeroOperacion
            from CarteraAgrupadora ca
            where ca.cagNumeroOperacion = (SELECT MAX(cagNumeroOperacion) from CarteraAgrupadora)
        </query>
    </named-native-query>

    <named-native-query
            name="Cartera.consultar.lineaDeCobro.accionDeCobro">
        <description>Busca la cartera por linea de cobro y accion de cobro</description>
        <query>
            SELECT *
            FROM cartera car
            WHERE car.carTipoLineaCobro = 'LC1'
            AND car.carEstadoCartera = 'MOROSO'
            AND car.carEstadoOperacion = 'VIGENTE'
            AND car.carDeudaPresunta > 0
            AND carTipoAccionCobro IS NOT NULL
            EXCEPT
            SELECT *
            FROM cartera car
            WHERE car.carTipoLineaCobro = 'LC1'
            AND ((car.carMetodo = 'METODO_1' AND car.carTipoAccionCobro = 'A01')
            OR (car.carMetodo = 'METODO_1' AND car.carTipoAccionCobro = 'A1')
            OR (car.carMetodo = 'METODO_1' AND car.carTipoAccionCobro = 'AB1')
            OR (car.carMetodo = 'METODO_1' AND car.carTipoAccionCobro = 'B1')
            OR (car.carMetodo = 'METODO_1' AND car.carTipoAccionCobro = 'BC1')
            OR (car.carMetodo = 'METODO_2' AND car.carTipoAccionCobro = 'A02')
            OR (car.carMetodo = 'METODO_2' AND car.carTipoAccionCobro = 'A2')
            OR (car.carMetodo = 'METODO_2' AND car.carTipoAccionCobro = 'B2')
            OR (car.carMetodo = 'METODO_2' AND car.carTipoAccionCobro = 'BC2'));
        </query>
    </named-native-query>

    <named-native-query
            name="Cartera.consultar.accionDeCobro">
        <description>Busca la cartera por linea de cobro y accion de cobro</description>
        <query>
            SELECT DISTINCT
            car.carTipoLineaCobro,
            car.carTipoAccionCobro,
            p.perNumeroIdentificacion,
            p.perTipoIdentificacion,
            car.carTipoSolicitante
            FROM Cartera car
            INNER JOIN Persona P on car.carPersona = P.perId
            INNER JOIN BitacoraCartera bc on bc.bcaPersona = car.carPersona
            WHERE car.carTipoLineaCobro = 'LC1'
            AND car.carTipoAccionCobro IN ('C2','CD2')
            AND bc.bcaActividad = 'C2'
            AND bc.bcaResultado = 'ENVIADO'
            AND p.perNumeroIdentificacion NOT IN (SELECT per.perNumeroIdentificacion FROM BitacoraCartera bc
            inner join Persona per ON bc.bcaPersona = per.perId
            WHERE bc.bcaActividad = 'REGISTRO_NOTIFICACION_PERSONAL'
            OR bc.bcaActividad = 'GENERAR_LIQUIDACION')
        </query>
    </named-native-query>

    <named-query
            name="Cartera.consultar.numero.tipo.idpersona">
        <description>Busca persona por el id</description>
        <query>
            SELECT new com.asopagos.dto.modelo.FiltroIdPersonaDTO(per)
            FROM Persona per
            WHERE per.idPersona=:idPersona
        </query>
    </named-query>

    <named-native-query name="CarteraBitacora.consultar.firmeza.titulo">
        <query>
            select bi.bcaActividad
            FROM BitacoraCartera bi
            INNER JOIN Persona pe on pe.perId = bi.bcaPersona
            WHERE pe.perId =:idPersona
        </query>
    </named-native-query>
    <named-native-query name="Cartera.Consultar.CarteraBitacora.IdCartera">
        <query>
            SELECT COALESCE((select bi.bcaId
            FROM BitacoraCartera bi
            INNER JOIN Persona pe on pe.perId = bi.bcaPersona
            inner join Cartera C on pe.perId = C.carPersona
            WHERE perId =:idPersona
            AND bi.bcaActividad = 'GENERAR_LIQUIDACION'
            AND bi.bcaResultado = 'EXITOSO'), 0
            ) as idBitacora
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Actualizar.Exlusion.Cartera.inactivar">
        <query>
            UPDATE ExclusionCartera
            SET excEstadoExclusionCartera ='NO_ACTIVA'
            WHERE excPersona =:idPersona
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.envioo.comunicado.h2c6.f1c6">
        <query>
            SELECT c.carPersona, 1 as autorizaEmail,c.carTipoSolicitante,max(c.carId) as
            carId,carTipoAccionCobro,p.perTipoIdentificacion as
            tipoIdentificacion, p.perNumeroIdentificacion as numeroIdentificacion
            FROM Cartera c
            inner join Persona p on p.perId=c.carPersona
            where c.carTipoAccionCobro=:accionCobro and c.carTipoLineaCobro=:lineaCobro and c.carMetodo=:metodo
            GROUP BY c.carPersona, c.carTipoSolicitante,carTipoAccionCobro,p.perTipoIdentificacion ,
            p.perNumeroIdentificacion
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.envioo.comunicado.h2c6.f1c6.explulsion">
        <query>
            SELECT c.carPersona,1 as autorizaEmail,c.carTipoSolicitante,max(c.carId)as carId,carTipoAccionCobro,
            p.perTipoIdentificacion as tipoIdentificacion,p.perNumeroIdentificacion as numeroIdentificacion
            From cartera c
            INNER JOIN ExclusionCartera ex ON ex.excPersona = c.carPersona
            INNER JOIN Empresa E ON E.empPersona = ex.excPersona
            INNER JOIN Empleador em ON em.empEmpresa = e.empId
            INNER JOIN Persona p ON p.perId = c.carPersona
            WHERE c.carTipoAccionCobro=:accionCobro
            AND c.carTipoLineaCobro=:lineaCobro
            AND c.carMetodo=:metodo
            AND ex.excTipoExclusionCartera = 'RIESGO_INCOBRABILIDAD'
            AND ex.excEstadoAntesExclusion = 'ACTIVO'
            GROUP BY c.carPersona, c.carTipoSolicitante, carTipoAccionCobro, p.perTipoIdentificacion,
            p.perNumeroIdentificacion
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.envioo.comunicado.h2c6.f1c6.explulsion.por.ids">
        <query>
            SELECT c.carPersona,1 as autorizaEmail,c.carTipoSolicitante,max(c.carId)as carId,carTipoAccionCobro,
            p.perTipoIdentificacion as tipoIdentificacion,p.perNumeroIdentificacion as numeroIdentificacion
            From cartera c
            INNER JOIN ExclusionCartera ex ON ex.excPersona = c.carPersona
            INNER JOIN Empresa E ON E.empPersona = ex.excPersona
            INNER JOIN Empleador em ON em.empEmpresa = e.empId
            INNER JOIN Persona p ON p.perId = c.carPersona
            WHERE c.carTipoAccionCobro=:accionCobro
            AND c.carTipoLineaCobro=:lineaCobro
            AND c.carMetodo=:metodo
            AND ex.excTipoExclusionCartera = 'RIESGO_INCOBRABILIDAD'
            AND ex.excEstadoAntesExclusion = 'ACTIVO'
            AND p.perId IN (:idPersonasAProcesar)
            GROUP BY c.carPersona, c.carTipoSolicitante, carTipoAccionCobro, p.perTipoIdentificacion,
            p.perNumeroIdentificacion
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.envioo.comunicado.h2c6.f1c6.explulsion.prueba">
        <query>
            SELECT c.carPersona,
            1 as autorizaEmail,
            c.carTipoSolicitante,
            max(c.carId) as carId,
            carTipoAccionCobro,
            p.perTipoIdentificacion as tipoIdentificacion,
            p.perNumeroIdentificacion as numeroIdentificacion,
            c.carMetodo,
            c.carTipoLineaCobro,
            ex.excTipoExclusionCartera,
            ex.excEstadoExclusionCartera,
            ex.excEstadoAntesExclusion,
            em.empMarcaExpulsion
            From cartera c
            INNER JOIN ExclusionCartera ex ON ex.excPersona = c.carPersona
            INNER JOIN Empresa E ON E.empPersona = ex.excPersona
            INNER JOIN Empleador em ON em.empEmpresa = e.empId
            INNER JOIN Persona p ON p.perId = c.carPersona
            WHERE c.carTipoAccionCobro = 'H2'
            GROUP BY c.carPersona, c.carTipoSolicitante, carTipoAccionCobro, p.perTipoIdentificacion,
            p.perNumeroIdentificacion, c.carMetodo, c.carTipoLineaCobro,
            ex.excTipoExclusionCartera, ex.excEstadoExclusionCartera, ex.excEstadoAntesExclusion, em.empMarcaExpulsion
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.actividad.carId.perId">
        <query>
            select coalesce((SELECT top 1 bi.bcaActividad
            FROM BitacoraCartera bi
            INNER JOIN Persona pe on pe.perId = bi.bcaPersona
            inner join Cartera C on pe.perId = C.carPersona
            WHERE pe.perNumeroIdentificacion = :perNumeroIdentificacion
            AND c.carId = :carId
            AND bi.bcaActividad = 'CARTA_APOR_EXPUL'),'0') as bcaActividad
        </query>
    </named-native-query>

    <named-native-query name="Cartera.Consultar.Gestion.Cartera.Gestion">
        <query>
            SELECT car.carTipoLineaCobro, car.carEstadoCartera, car.carEstadoOperacion,car.carPersona,
            max(carPeriodoDeuda) as periodo
            FROM Cartera car
            INNER JOIN Persona per ON per.perId = car.carPersona
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND car.carTipoLineaCobro=:tipoLineaCobro
            GROUP BY car.carTipoLineaCobro, car.carEstadoCartera , car.carPersona,car.carEstadoOperacion
        </query>
    </named-native-query>


    <named-native-query name="Cartera.consultar.funcion.calculo.dias.comunicado.h2c6.f1c6">
        <query>
            select dbo.GET_CALCULO_DIAS_ENVIO_COMUNICADO_H2C2_F1C6(:numeroIdentificacion,
            :diasConstante,:metodo,:acciondeCobro) as aplica
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.actividades.identificacion.bitacora">
        <query>
            select bi.bcaActividad from BitacoraCartera bi
            inner join Persona P on P.perId = bi.bcaPersona
            where perNumeroIdentificacion=:numeroIdentificacion
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.accion2C.diasActa">
        <query>
            Select ac.aocDiasGeneracionActa from AccionCobro2C as ac
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.fecha.notificacion.bitacora">
        <query>
            SELECT top 1 bc.bcaFecha
            FROM BitacoraCartera bc
            INNER JOIN Cartera c ON c.carpersona = bcapersona
            INNER JOIN persona p ON p.perid = c.carpersona
            WHERE perNumeroIdentificacion = :numeroIdentificacion
            and bcaActividad = 'C2'
            and bcaResultado = 'ENVIADO'
            order by bc.bcaid desc
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.novedades.id">
        <query>
            SELECT per.perId ,car.canTipoNovedad FROM CarteraNovedad car,Persona per
            WHERE car.canPersona = per.perId
            AND per.perId IN (:perId)
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.accion.cobro.2c">
        <query>
            SELECT ac.pgcId FROM AccionCobro2C ac
        </query>
    </named-native-query>
    <named-native-query name="Cartera.guardar.registro.accion.cobro.2c">
        <query>
            Insert INTO AccionCobro2C
            (aocAnexoLiquidacion,aocDiasEjecucion,aocHoraEjecucion,aocDiasGeneracionActa)
            VALUES (:anexoLiquidacion,:diasEjecucion,:horaEjecucion,:diasGeneracionActa)
        </query>
    </named-native-query>
    <named-native-query name="Cartera.actualizar.registro.accion.cobro.2c">
        <query>
            UPDATE AccionCobro2C SET
            aocAnexoLiquidacion=:anexoLiquidacion,aocDiasEjecucion=:diasEjecucion,aocHoraEjecucion=:horaEjecucion,aocDiasGeneracionActa=:diasGeneracionActa
            WHERE pgcId=:id
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.accion.cobro.1d.id">
        <query>
            SELECT ac.pgcId FROM AccionCobro1D ac
        </query>
    </named-native-query>

    <named-native-query name="Cartera.guardar.registro.accion.cobro.1d">
        <query>
            Insert INTO AccionCobro1D
            (acdInicioDiasConteo, acdDiasTranscurridos, acdHoraEjecucion, acdLimiteEnvio, acdComunicado)
            VALUES (:InicioDiasConteo, :DiasTranscurridos, :HoraEjecucion, :LimiteEnvio, :Comunicado)
        </query>
    </named-native-query>

    <named-native-query name="Cartera.actualizar.registro.accion.cobro.1d">
        <query>
            UPDATE AccionCobro1D SET
            acdInicioDiasConteo=:InicioDiasConteo,
            acdDiasTranscurridos=:DiasTranscurridos,
            acdHoraEjecucion=:HoraEjecucion,
            acdLimiteEnvio=:LimiteEnvio,
            acdComunicado=:Comunicado
            WHERE pgcId=:id
        </query>
    </named-native-query>
    <named-query name="Cartera.consultar.accion.cobro.1d">
        <query>
            SELECT ac
            FROM AccionCobro1D ac
        </query>
    </named-query>
    <named-native-query name="Cartera.consultar.numero.operacion.bitacora">
        <query>
            select top 1 bc.bcaNumeroOperacion from cartera car
            inner join Persona per on per.perId = car.carPersona
            inner join BitacoraCartera bc on bc.bcaPersona = per.perId
            where per.perNumeroIdentificacion = :numeroIdentificacion
            order by bc.bcaid desc

        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.accion.cobro.2F.id">
        <query>
            SELECT ac.pgcId FROM AccionCobro2F ac
        </query>
    </named-native-query>
    <named-native-query name="Cartera.guardar.registro.accion.cobro.2F">
        <query>
            Insert INTO AccionCobro2F
            (aofInicioDiasConteo, aofDiasTranscurridos , aofHoraEjecucion, aofLimiteEnvio, aofDiasRegistro,
            aofDiasParametrizados, comunicado)
            VALUES (:InicioDiasConteo, :DiasTranscurridos, :HoraEjecucion, :LimiteEnvio, :DiasRegistro,
            :DiasParametrizados, :Comunicado)
        </query>
    </named-native-query>

    <named-native-query name="Cartera.actualizar.registro.accion.cobro.2F">
        <query>
            UPDATE AccionCobro2F SET
            aofInicioDiasConteo=:InicioDiasConteo,
            aofDiasTranscurridos=:DiasTranscurridos,
            aofHoraEjecucion=:HoraEjecucion,
            aofLimiteEnvio=:LimiteEnvio,
            aofDiasRegistro=:DiasRegistro,
            aofDiasParametrizados=:DiasParametrizados,
            comunicado=:Comunicado
            WHERE pgcId=:id
        </query>
    </named-native-query>

    <named-native-query name="CarteraBitacora.consultar.firmeza.titulo.numero.identificacion">
        <query>
            SELECT bi.bcaActividad
            FROM BitacoraCartera bi
            INNER JOIN Persona pe on pe.perId = bi.bcaPersona
            WHERE pe.perNumeroIdentificacion =:numeroIdentificacion
        </query>
    </named-native-query>

    <named-native-query name="CarteraBitacora.actualizar.deuda.car.presunta">
        <query>
            UPDATE Cartera
            SET carDeudaPresunta=:deudaPresunta
            WHERE carId=:carId
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.cartera.dependiente">
        <query>
            SELECT CD.cadDeudaPresunta
            FROM Cartera CAR
            INNER JOIN CarteraDependiente CD on CAR.carId = CD.cadCartera
            INNER JOIN Persona PER on PER.perId=CD.cadPersona
            WHERE carId=:carId
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.cartera.dependiente.id">
        <query>
            SELECT *
            FROM CarteraDependiente cad
            WHERE cad.cadId=:cadId
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.identificacion.cartera.id">
        <query>
            SELECT P.perNumeroIdentificacion FROM Cartera C
            INNER JOIN Persona P on P.perId = C.carPersona
            WHERE C.carId=:carId
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.cartera.id.cartera">
        <query>
            SELECT *
            FROM cartera car
            WHERE car.carId=:carId
        </query>
    </named-native-query>
    <named-native-query name="Cartera.persona.numero.identificacion">
        <query>
            SELECT per.perId
            FROM Persona per
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion=:tipoIdentificacion
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.periodo.numero.identificacion">
        <query>
            SELECT C.carId
            FROM Cartera C
            INNER JOIN Persona P ON C.carPersona = P.perId
            WHERE perNumeroIdentificacion = :numeroIdentificacion
            AND C.carPeriodoDeuda=:periodo
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.id.max">
        <query>
            SELECT MAX(C.carId)
            FROM Cartera C
        </query>
    </named-native-query>
    <named-native-query name="Cartera.cartera.agrupadora.consultar.id.max">
        <query>
            SELECT MAX(C.cagId)
            FROM CarteraAgrupadora C
        </query>
    </named-native-query>
    <named-native-query name="Cartera.cartera.dependiente.consultar.id.max">
        <query>
            SELECT MAX(CD.cadId)
            FROM CarteraDependiente CD
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.actividad.bitacora">
        <query>
            SELECT MIN(bcaFecha) as fecha, bcaActividad
            FROM BitacoraCartera bi
            WHERE bi.bcaPersona = :perId
            AND bi.bcaActividad IN ('GENERAR_LIQUIDACION', 'REGISTRO_NOTIFICACION_PERSONAL', 'E2', 'D2')
            AND bcaResultado IN ('EXITOSO', 'NOTIFICADO_PERSONALMENTE', 'PUBLICADO')
            GROUP BY bi.bcaActividad;
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.bitacora.persona.radicado">
        <query>
            SELECT bita.bcaId, bita.bcaFecha, bita.bcaActividad, bita.bcaMedio, bita.bcaResultado, bita.bcaUsuario,
            bita.bcaPersona, bita.bcaTipoSolicitante, bita.bcaNumeroOperacion, bita.bcaComentarios
            FROM DetalleSolicitudGestionCobro det
            JOIN SolicitudGestionCobroFisico sgc ON det.dsgsolicitudPrimeraRemision = sgc.sgfid
            JOIN Solicitud sol ON sgc.sgfSolicitud = sol.solid
            JOIN Cartera car ON det.dsgCartera = car.carId
            JOIN Persona per ON car.carPersona = per.perId
            JOIN BitacoraCartera bita ON bita.bcaPersona = per.perId
            WHERE perTipoIdentificacion =:tipoIdentificacion AND perNumeroIdentificacion =:numeroIdentificaion AND sol.solnumeroRadicacion =:numeroRadicacion
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.bitacora.a.actualizar.persona.radicado">
        <query>
            SELECT bita.bcaId, bita.bcaFecha, bita.bcaActividad, bita.bcaMedio, bita.bcaResultado, bita.bcaUsuario, bita.bcaPersona, bita.bcaTipoSolicitante, bita.bcaNumeroOperacion, bita.bcaComentarios, car.carEstadoOperacion
            FROM DetalleSolicitudGestionCobro det
            JOIN SolicitudGestionCobroFisico sgc ON det.dsgsolicitudPrimeraRemision=sgc.sgfid
            JOIN Solicitud sol ON sgc.sgfSolicitud=sol.solid
            JOIN Cartera car ON det.dsgCartera=car.carId
            JOIN Persona per ON car.carPersona=per.perId
            JOIN BitacoraCartera bita ON bita.bcaPersona=per.perId
            JOIN CarteraAgrupadora cag on cag.cagCartera=car.carId
            WHERE perTipoIdentificacion=:tipoIdentificacion AND perNumeroIdentificacion=:numeroIdentificacion AND sol.solnumeroRadicacion=:numeroRadicacion
            order by bcaFecha desc
        </query>
    </named-native-query>
    <named-native-query name="Cartera.find.documentos.seguimiento.gestion">
        <query>
            SELECT *
            FROM DocumentosSeguimientoGestion where dsgNrOperacion = :idOperacion
        </query>
    </named-native-query>
    <named-native-query name="Cartera.find.documentos.seguimiento.novedades">
        <query>
            SELECT *
            FROM DocumentosSeguimientoNovedades where dsnNrOperacion = :idOperacion
        </query>
    </named-native-query>
    <named-native-query name="Cartera.find.documentos.seguimiento.convenio.pago">
        <query>
            SELECT *
            FROM DocumentosSeguimientoConveniosPago where dscpNrOperacion = :idOperacion
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.moral.parcial">
        <query>
            SELECT *
            FROM cartera car
            INNER JOIN Persona per on per.perId = car.carPersona
            WHERE 
			car.carid NOT IN(SELECT c.carid
                FROM cartera c join ExclusionCartera ex on c.carPersona = ex.excPersona and c.carPeriodoDeuda = ex.excPeriodoDeuda
                WHERE excEstadoExclusionCartera = 'ACTIVA'
            )
             AND car.carPersona NOT IN(SELECT cp.copPersona 
                FROM ConvenioPago cp
                INNER JOIN cartera c ON  c.carPersona = cp.copPersona)
			AND carEstadoCartera = 'MOROSO'
            AND car.carEstadoOperacion = 'VIGENTE'
            AND car.carTipoLineaCobro = 'LC1'
            AND car.carDeudaParcial = 'MORA_PARCIAL'
            AND car.carTipoAccionCobro IN ('A01','A1','AB1','A02','A2','AB2')
            AND (:tipoIdentificacion IS NULL OR per.perTipoIdentificacion = :tipoIdentificacion)
            AND (:numeroIdentificacion IS NULL OR per.perNumeroIdentificacion = :numeroIdentificacion)
        </query>
        <hint name="personaDTO.tipoIdentificacion" value="perTipoIdentificacion"></hint>
        <hint name="personaDTO.numeroIdentificacion" value="perNumeroIdentificacion"></hint>
        <hint name="personaDTO.razonSocial" value="perRazonSocial"></hint>
        <hint name="tipoSolicitante" value="carTipoSolicitante"></hint>
        <hint name="estadoCartera" value="carEstadoCartera"></hint>
        <hint name="periodoDeuda" value="carPeriodoDeuda"></hint>
        <hint name="tipoDeuda" value="carTipoDeuda"></hint>
        <hint name="deudaPresunta" value="carDeudaPresunta"></hint>
        <hint name="tipoLineaCobro" value="carTipoLineaCobro"></hint>
        <hint name="tipoAccionCobro" value="carTipoAccionCobro"></hint>
    </named-native-query>
    <named-native-query name="Cartera.consultar.exclusion.moral.parcial">
        <query>
            SELECT exc.excId,exc.excFechaInicio,exc.excFechaFin,exc.excPeriodoDeuda,car.carDeudaPresunta,
            car.carTipoDeuda,car.carTipoAccionCobro,car.carTipoSolicitante,car.carDeudaParcial,per.perRazonSocial,
            perTipoIdentificacion,perNumeroIdentificacion,per.perId, car.carId,exc.excUsuarioRegistro,
            car.carEstadoOperacion, car.carEstadoCartera
            FROM ExclusionCartera exc
            INNER JOIN Persona per ON per.perId = exc.excPersona
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE 
            car.carid NOT IN(SELECT c.carid
                FROM cartera c join ExclusionCartera ex on c.carPersona = ex.excPersona
                WHERE excEstadoExclusionCartera = 'ACTIVA' AND excPeriodoDeuda IS NULL
            )
             AND
            car.carPersona NOT IN(SELECT cp.copPersona 
                FROM ConvenioPago cp
                INNER JOIN cartera c ON  c.carPersona = cp.copPersona)
            AND car.carTipoAccionCobro IN ('A01','A1','AB1','A02','A2','AB2')
            AND car.carTipoLineaCobro = 'LC1'
            AND car.carDeudaParcial = 'MORA_PARCIAL'
            AND exc.excEstadoExclusionCartera = 'ACTIVA'
            AND exc.excFechaFin &gt;= CAST(GETDATE() AS DATE)
            AND car.carPeriodoDeuda=exc.excPeriodoDeuda
            AND car.carEstadoOperacion = 'VIGENTE'
            AND (:tipoIdentificacion IS NULL OR per.perTipoIdentificacion = :tipoIdentificacion)
            AND (:numeroIdentificacion IS NULL OR per.perNumeroIdentificacion = :numeroIdentificacion)
        </query>
        <hint name="personaDTO.tipoIdentificacion" value="perTipoIdentificacion"></hint>
        <hint name="personaDTO.numeroIdentificacion" value="perNumeroIdentificacion"></hint>
        <hint name="personaDTO.razonSocial" value="perRazonSocial"></hint>
        <hint name="tipoSolicitante" value="carTipoSolicitante"></hint>
        <hint name="estadoCartera" value="carEstadoCartera"></hint>
        <hint name="periodoDeuda" value="excPeriodoDeuda"></hint>
        <hint name="tipoDeuda" value="carTipoDeuda"></hint>
        <hint name="deudaPresunta" value="carDeudaPresunta"></hint>
        <hint name="tipoLineaCobro" value="carTipoLineaCobro"></hint>
        <hint name="tipoAccionCobro" value="carTipoAccionCobro"></hint>
        <hint name="fechaInicio" value="excFechaInicio"></hint>
        <hint name="fechaFinalizacion" value="excFechaFin"></hint>
        <hint name="usuarioRegistro" value="excUsuarioRegistro"></hint>
    </named-native-query>

    <named-native-query name="plantilla.DocumentoFiscalizacion.Data">
        <query>
            SELECT
            'fechaDelSistema' AS fechaDelSistema,
            CONVERT(VARCHAR, getdate(),103) AS valorFechaDelSistema,
            'nombreYApellidosRepresentanteLegal' as nombreYApellidosRepresentanteLegal,
            prl.perPrimerNombre +' ' + CASE WHEN prl.perSegundoNombre IS NOT NULL THEN prl.perSegundoNombre ELSE '' END
            + ' ' + prl.perPrimerApellido + ' ' +
            CASE WHEN prl.perSegundoApellido IS NOT NULL THEN prl.perSegundoApellido ELSE '' END AS
            valorNombreYApellidosRepresentanteLegal,
            'razonSocial/Nombre' AS razonSocialNombre,
            per.perRazonSocial AS valorRazonSocialNombre,
            'direccion' AS direccion,
            ubi.ubiDireccionFisica AS valorDireccion,
            'telefono' AS telefono,
            CASE WHEN ubi.ubiTelefonoFijo IS NOT NULL THEN ubi.ubiTelefonoFijo ELSE ubi.ubiTelefonoCelular END AS
            valorTelefono,
            'ciudad' AS ciudad,
            mun.munNombre AS valorCiudad,
            'periodoMora' AS periodoMora,
            perCar.carPeriodoDeuda valorPeriodoMora,
            'fechaCorte' AS fechaCorte,
            dosDca.dosFechaHoraCargue AS valorFechaCorte,
            'numeroIdentificacionEmpleador' AS numeroIdentificacionEmpleador,
            CASE WHEN per.perDigitoVerificacion IS NOT NULL THEN
            CONCAT(per.perNumeroIdentificacion,'-',per.perDigitoVerificacion) ELSE per.perNumeroIdentificacion END AS
            valorNumeroIdentificacionEmpleador,
            'tipoIdentificacionEmpleador' AS tipoIdentificacionEmpleador,
            per.perTipoIdentificacion AS valorTipoIdentificacionEmpleador,
            'numeroIdentificacionRepresentanteLegal' AS numeroIdentificacionRepresentanteLegal,
            prl.perNumeroIdentificacion AS valorNumeroIdentificacionRepresentanteLegal,
            'tipoIdentificacionRepresentanteLegal' AS tipoIdentificacionRepresentanteLegal,
            prl.perTipoIdentificacion AS valorTipoIdentificacionRepresentanteLegal,
            'valorDeudaPresunta' AS valorDeudaPresunta,
            SUBSTRING(perCar.totalDeudaPresunta,1,CHARINDEX('.',perCar.totalDeudaPresunta)-1) AS
            valorValorDeudaPresunta,
            'periodos' AS periodos,
            'com.asopagos.comunicados.ejb.ObtenerPeriodosCartera' AS valorPeriodos
            FROM Persona per
            INNER JOIN(SELECT
            per.perId AS perId,
            CONVERT(varchar,CAST(SUM(car.carDeudaPresunta) AS MONEY),1) AS totalDeudaPresunta,
            CAST(MIN(car.carPeriodoDeuda) AS VARCHAR(7)) AS carPeriodoDeuda
            FROM Persona per
            INNER JOIN Cartera car ON per.perId = car.carPersona
            WHERE car.carEstadoOperacion = 'VIGENTE' AND car.carTipoLineaCobro IN ('LC1','LC2','LC3')
            AND per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            GROUP BY perId
            ) AS perCar ON perCar.perId = per.perId
            INNER JOIN( SELECT TOP 1
            per.perId,
            ISNULL(CONVERT(VARCHAR,dos.dosFechaHoraCargue,103),'') AS dosFechaHoraCargue
            FROM Persona per
            INNER JOIN Cartera car ON car.carPersona = per.perId
            LEFT JOIN DocumentoCartera dca ON car.carId = dca.dcaCartera AND dca.dcaAccionCobro IN
            ('B1','B2','LC2A','LC3A')
            LEFT JOIN DocumentoSoporte dos ON dos.dosId = dca.dcaDocumentoSoporte
            WHERE per.perNumeroIdentificacion = :numeroIdentificacion
            AND per.perTipoIdentificacion = :tipoIdentificacion
            ORDER BY dos.dosId DESC
            ) AS dosDca ON dosDca.perId = per.perId
            INNER JOIN Empresa emp ON emp.empPersona = per.perId
            INNER JOIN UbicacionEmpresa ube ON ube.ubeEmpresa = emp.empId
            INNER JOIN Ubicacion ubi ON ubi.ubiId = ube.ubeUbicacion
            INNER JOIN Municipio mun ON mun.munId = ubi.ubiMunicipio
            INNER JOIN Persona prl ON prl.perId = emp.empRepresentanteLegal
            WHERE ube.ubeTipoUbicacion = 'ENVIO_CORRESPONDENCIA'
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.prescrita">
        <query>
            SELECT COUNT(*)
            FROM cartera car
            WHERE car.carPersona =:idPersona
            AND car.carPrescribir IS NOT NULL
        </query>
    </named-native-query>
    <named-native-query name="Cartera.consultar.total">
        <query>
            SELECT COUNT(*)
            FROM cartera car
            WHERE car.carPersona =:idPersona
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.actividad.bitacora.numero.operacion">
        <query>
            SELECT bi.bcaActividad
            FROM BitacoraCartera bi
            WHERE bi.bcaNumeroOperacion =:numeroOperacion
            AND bi.bcaActividad=:actividad
        </query>
    </named-native-query>

    <named-native-query name="Cartera.consultar.periodo.firmeza.titulo">
        <query>
          
            SELECT c.carId
            FROM Cartera c
            INNER JOIN Persona p ON p.perId = c.carPersona
            WHERE p.perNumeroIdentificacion =:numeroIdentificacion
            AND ((c.carTipoLineaCobro = 'LC1') OR (c.carTipoLineaCobro = 'C6'))
            AND c.carPeriodoDeuda &lt;= (SELECT MAX(car.carPeriodoDeuda)
            FROM Cartera car
			INNER JOIN Persona pe ON p.perId = car.carPersona
            WHERE car.carTipoLineaCobro = 'LC1'
			and pe.perNumeroIdentificacion =:numeroIdentificacion
            <!-- AND ((car.carTipoAccionCobro = 'C1')
            OR (car.carTipoAccionCobro = 'CD1')
            OR (car.carTipoAccionCobro = 'C2')
            OR (car.carTipoAccionCobro = 'CD2')) -->
			)
        </query>
    </named-native-query>
	<named-stored-procedure-query
		name="stored.procedure.Cartera.consultar.personas.firmeza" procedure-name="USP_REP_ConsultarPersonasFirmezaTitulo">
	</named-stored-procedure-query>

    <named-stored-procedure-query
            name="stored.procedure.Cartera.prescrita"
            procedure-name="USP_REP_ConsultarCarteraPrescrita">
    </named-stored-procedure-query>
    <named-stored-procedure-query
			name="stored.procedure.Cartera.panel"
			procedure-name="USP_Get_Consultapanelcartera">
		<parameter class="java.lang.String" mode="IN" name="accioncobro"/>
        <parameter class="java.lang.String" mode="IN" name="lineaCobro"/>
        <parameter class="java.lang.String" mode="IN" name="usuarioAnalista"/>
        <parameter class="java.lang.String" mode="IN" name="identificacion"/>
        <parameter class="java.lang.Integer" mode="IN" name="offset"/>
        <parameter class="java.lang.Integer" mode="IN" name="rows"/>
        <parameter class="java.lang.String" mode="IN" name="filtros"/>
        <result-set-mapping>stored.procedure.Cartera.panel.mapping</result-set-mapping>
	</named-stored-procedure-query>
    <named-stored-procedure-query
			name="stored.procedure.Cartera.panel.conteo"
			procedure-name="USP_Get_Consultapanelcartera_Conteo">
		<parameter class="java.lang.String" mode="IN" name="accioncobro"/>
        <parameter class="java.lang.String" mode="IN" name="lineaCobro"/>
        <parameter class="java.lang.String" mode="IN" name="usuarioAnalista"/>
        <parameter class="java.lang.String" mode="IN" name="identificacion"/>
	</named-stored-procedure-query>
    <sql-result-set-mapping name="stored.procedure.Cartera.panel.mapping">
        <constructor-result target-class="com.asopagos.dto.cartera.PanelCarteraDTO">
            <column name="solNumeroRadicacion" class="java.lang.Long"/>
            <column name="carTipoAccionCobro" class="java.lang.String"/>
            <column name="carTipoLineaCobro" class="java.lang.String"/>
            <column name="carTipoDeuda" class="java.lang.String"/>
            <column name="carDeudaPresunta" class="java.math.BigDecimal"/>
            <column name="carEstadoCartera" class="java.lang.String"/>
            <column name="carTipoSolicitante" class="java.lang.String"/>
            <column name="perNumeroIdentificacion" class="java.lang.String"/>
            <column name="perTipoIdentificacion" class="java.lang.String"/>
            <column name="perRazonSocial" class="java.lang.String"/>
            <column name="cadDeudaReal" class="java.lang.String"/>
            <column name="carFechaAsignacionAccion" class="java.lang.String"/>
            <column name="carId" class="java.lang.Long"/>
        </constructor-result>
    </sql-result-set-mapping>
    <sql-result-set-mapping name="cartera.bitacora.niyaraky.mapping">
        <constructor-result target-class="com.asopagos.cartera.dto.BitacoraCarteraDTO">
            <column name="bcaId" class="java.lang.Long" />
            <column name="bcaFecha" class="java.sql.Date" />
            <column name="bcaActividad" class="java.lang.String" />
            <column name="bcaMedio" class="java.lang.String" />
            <column name="bcaResultado" class="java.lang.String" />
            <column name="bcaUsuario" class="java.lang.String" />
            <column name="bcaPersona" class="java.lang.Long" />
            <column name="bcaTipoSolicitante" class="java.lang.String" />
            <column name="bcaNumeroOperacion" class="java.lang.String" />
            <column name="bcaComentarios" class="java.lang.String" />
            <column name="cnIdMensaje" class="java.lang.Long" />
            <column name="cnFechaEnvio" class="java.util.Date" />
            <column name="cnObservacion" class="java.lang.String" />
            <column name="cnrEstado" class="java.lang.Long" />
            <column name="cnrDescripcion" class="java.lang.String" />
            <column name="cnrFechaEventoRecibido" class="java.util.Date" />
            <column name="cnrFechaEventoRecibidoPorNiyaraky" class="java.util.Date" />        
        </constructor-result>
    </sql-result-set-mapping>
</entity-mappings>
